{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MatrixOne Documentation Welcome to MatrixOne documentation! MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures. If you find documentation issues, feel free to create an Issue to let us know or directly create a Pull Request to help fix or update it. Recommended articles Overview Get Started Reference MatrixOne Introduction Install MatrixOne SQL Reference MatrixOne Architecture Connect to MatrixOne Server v0.5.1 Release Notes Mysql Compatibility SSB Test with MatrixOne","title":"Home"},{"location":"#matrixone-documentation","text":"Welcome to MatrixOne documentation! MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures. If you find documentation issues, feel free to create an Issue to let us know or directly create a Pull Request to help fix or update it.","title":"MatrixOne Documentation"},{"location":"#recommended-articles","text":"Overview Get Started Reference MatrixOne Introduction Install MatrixOne SQL Reference MatrixOne Architecture Connect to MatrixOne Server v0.5.1 Release Notes Mysql Compatibility SSB Test with MatrixOne","title":"Recommended articles"},{"location":"MatrixOne/documentation_contribution_guide/","text":"How MatrixOne documentation project is managed? The MatrixOne documentation is managed in 3 repos: The main project framework and CI settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule which links to matrixone repo contents. The images are referred as webimage links from artwork repo. The matrixorigin.io has implemented a CI project, which will be triggered by a new code merge. This CI workflow publishs the documentation to https://docs.matrixorigin.io/. The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project. How MatrixOne documentation content is organized? The MatrixOne documentation content is planned with 6 main modules. Overview: MatrixOne's introduction, features, architecture, tech design etc. Get Started: How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Develop: How to develop some applications based on MatrixOne using different programming language. Troubleshoot: Introduce common errors and debugging tools. Reference: SQL reference, Configuration parameters, Error Codes. FAQs: Product, Technical Design,SQL, Deployment FAQs. How to contribute to documentation project? Fork matrixorigin.io and matrixone repos. Clone the matrixorigin.io repo, using --repository to retrieve the submodule of matrixone repo. $ git clone --recursive git@github.com:yourusername/matrixorigin.io.git As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. $ mkdocs serve Make your modification. If the modification is about the project settings, updating sitemap with new pages, or updating the CI workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modifcation should be applied to the matrixone repo. Push your git commits to your Github repos and make PR to matrixorigin.io and matrixone repos. Once your code for both repos is merged, the CI workflow starts running until the documentation website being updated. What we are expecting? Anyone using MatrixOne or interested in MatrixOne is welcome to make contributions for the documentation. You can report confusing concepts, wrong descriptions or better organization format. For the 0.2.0 version, our SQLs and configuration settings are not fully tested, if you find contraints or errors, you are welcome to make your modifiction. The FAQs part is a onging project too, the ones who are more familiar with the project can contribute better answers.","title":"How MatrixOne documentation project is managed?"},{"location":"MatrixOne/documentation_contribution_guide/#how-matrixone-documentation-project-is-managed","text":"The MatrixOne documentation is managed in 3 repos: The main project framework and CI settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule which links to matrixone repo contents. The images are referred as webimage links from artwork repo. The matrixorigin.io has implemented a CI project, which will be triggered by a new code merge. This CI workflow publishs the documentation to https://docs.matrixorigin.io/. The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project.","title":"How MatrixOne documentation project is managed?"},{"location":"MatrixOne/documentation_contribution_guide/#how-matrixone-documentation-content-is-organized","text":"The MatrixOne documentation content is planned with 6 main modules. Overview: MatrixOne's introduction, features, architecture, tech design etc. Get Started: How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Develop: How to develop some applications based on MatrixOne using different programming language. Troubleshoot: Introduce common errors and debugging tools. Reference: SQL reference, Configuration parameters, Error Codes. FAQs: Product, Technical Design,SQL, Deployment FAQs.","title":"How MatrixOne documentation content is organized?"},{"location":"MatrixOne/documentation_contribution_guide/#how-to-contribute-to-documentation-project","text":"Fork matrixorigin.io and matrixone repos. Clone the matrixorigin.io repo, using --repository to retrieve the submodule of matrixone repo. $ git clone --recursive git@github.com:yourusername/matrixorigin.io.git As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. $ mkdocs serve Make your modification. If the modification is about the project settings, updating sitemap with new pages, or updating the CI workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modifcation should be applied to the matrixone repo. Push your git commits to your Github repos and make PR to matrixorigin.io and matrixone repos. Once your code for both repos is merged, the CI workflow starts running until the documentation website being updated.","title":"How to contribute to documentation project?"},{"location":"MatrixOne/documentation_contribution_guide/#what-we-are-expecting","text":"Anyone using MatrixOne or interested in MatrixOne is welcome to make contributions for the documentation. You can report confusing concepts, wrong descriptions or better organization format. For the 0.2.0 version, our SQLs and configuration settings are not fully tested, if you find contraints or errors, you are welcome to make your modifiction. The FAQs part is a onging project too, the ones who are more familiar with the project can contribute better answers.","title":"What we are expecting?"},{"location":"MatrixOne/glossary/","text":"Glossary Terms It's helpful to understand a few terms before reading our architecture documentation. Term Definition A AST (Abstract syntax tree) Abstract Syntax Trees or ASTs are tree representations of code. They are a fundamental part of the way a compiler works. C Cluster A distributed MatrixOne deployment, which acts as a single logical application. D Data Storage A DataStorage is an interface for implementing distributed storage service. It must be defined in prior to using MatrixCube. DataStorage needs to be implemented based on the characteristics of storage engine. E Event Notify The machanism of synchronizing heartbeat information to all nodes is called an event notify. F Factorization The factorization method uses basic factorization formula to reduce any algebraic or quadratic equation into its simpler form. MatrixOne uses compact factorised representations at the physical layer to reduce data redundancy and boost query performance. H Heartbeat Every node in a MatrixOne cluster will periodically sends its status information, this information is called a heartbeat. M MatrixCube MatrixCube is a framework for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. P Prophet Prophet is a scheduling module in MatrixCube. It takes charge of Auto-Rebalance, which keeps the system storage level and read/write throughput level balanced across Stores. The inital 3 Stores of a MatrixCube cluster are all Prophet Nodes. Pure Storage In contrast to Prophet, pure storage is another type of node, which doesn't handle any scheduling job and works as simple storage. R Replica To provide reliable service, each shard is stored not only once, it will have several copy stored in different stores. Every copy of a shard is called a Replica. S Snapshot Isolation (SI) Snapshot Isolation is a multi-version concurrency control approach that is widely used in practice. MatrixOne supports distributed transaction of snapshot isolation level. Store A MatrixCube distributed system consists of several physical servers, our data are stored across these physical server. We call each server inside this cluster a Store. Shard In MatrixOne, the data are split into different partitions to store in order to get better scalability. Each partition is called a Shard. In our design, a new created table is initially a Shard. When the size of the table exceeds the Shard size limit, the Shard will split. Shard Splitting There is a certain limit to a Shard size. Whenever a Shard exceeds its storage limit, MatrixCube splits a Shard into two Shards and keep each Shard with the same storage level. Shard Proxy The Shard Proxy is a central module to accept all user read/write requests and route requests to corresponding nodes. Concepts MatrixOne relies heavily on the following concepts. Being familiar with them will help you understand what our architecture achieves. Term Definition A Auto-Rebalance A modern distributed database should do more than just split data amongst a number of servers. The automatic process of storage and workload distribution among servers is called an Auto-Rebalance. C Consistency MatrixOne supports a strong consistency. It is guaranted that after any successful data write, the reading afterwards will get the latest value, no matter from which store. E Execution Plan An execution plan in a database is a simple graphical representation of the operations that the query optimizer generates to calculate the most efficient way to return a set of results. F Fault-Tolerance Fault-Tolerance simply means a system's ability to continue operating uninterrupted despite the failure of one or more of its components. J JIT Compilation Turns SQL plan tree or Intermediate Representation code into a native program using LLVM at runtime. M Monolitic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Materialized View A materialized view is a pre-computed data set derived from a query specification (the SELECT in the view definition) and stored for later use. Materialized view is usually used for increasing performance and efficiency. Metadata Metadata is the data that describes the structure and creation method of data in a database. P Paxos Paxos is an algorithm that is used to achieve consensus among a distributed set of computers that communicate via an asynchronous network. R Raft Raft is a consensus algorithm that is designed to be easy to understand. It's equivalent to Paxos in fault-tolerance and performance. The difference is that it's decomposed into relatively independent subproblems, and it cleanly addresses all major pieces needed for practical systems. Raft Group and Leader Raft defines a strong, single leader and number of followers in a group of peers. The group represents a replicated state machine. Only the leader may service client requests. The leader replicates actions to the followers. S SIMD instruction SIMD is short for Single Instruction/Multiple Data, while the term SIMD operations refers to a computing method that enables processing of multiple data with a single instruction. T Transaction A set of operations performed on your database that satisfy the requirements of ACID semantics. V Vectorized Execution Vectorized data processing helps with developing faster analytical query engines by making efficient utilization of CPU cache. Arrow's columnar format allows to use lightweight schemes like dictionary encoding, bit packing, and run length encoding, which favor query performance over compression ratio.","title":"Glossary"},{"location":"MatrixOne/glossary/#glossary","text":"","title":"Glossary"},{"location":"MatrixOne/glossary/#terms","text":"It's helpful to understand a few terms before reading our architecture documentation. Term Definition A AST (Abstract syntax tree) Abstract Syntax Trees or ASTs are tree representations of code. They are a fundamental part of the way a compiler works. C Cluster A distributed MatrixOne deployment, which acts as a single logical application. D Data Storage A DataStorage is an interface for implementing distributed storage service. It must be defined in prior to using MatrixCube. DataStorage needs to be implemented based on the characteristics of storage engine. E Event Notify The machanism of synchronizing heartbeat information to all nodes is called an event notify. F Factorization The factorization method uses basic factorization formula to reduce any algebraic or quadratic equation into its simpler form. MatrixOne uses compact factorised representations at the physical layer to reduce data redundancy and boost query performance. H Heartbeat Every node in a MatrixOne cluster will periodically sends its status information, this information is called a heartbeat. M MatrixCube MatrixCube is a framework for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. P Prophet Prophet is a scheduling module in MatrixCube. It takes charge of Auto-Rebalance, which keeps the system storage level and read/write throughput level balanced across Stores. The inital 3 Stores of a MatrixCube cluster are all Prophet Nodes. Pure Storage In contrast to Prophet, pure storage is another type of node, which doesn't handle any scheduling job and works as simple storage. R Replica To provide reliable service, each shard is stored not only once, it will have several copy stored in different stores. Every copy of a shard is called a Replica. S Snapshot Isolation (SI) Snapshot Isolation is a multi-version concurrency control approach that is widely used in practice. MatrixOne supports distributed transaction of snapshot isolation level. Store A MatrixCube distributed system consists of several physical servers, our data are stored across these physical server. We call each server inside this cluster a Store. Shard In MatrixOne, the data are split into different partitions to store in order to get better scalability. Each partition is called a Shard. In our design, a new created table is initially a Shard. When the size of the table exceeds the Shard size limit, the Shard will split. Shard Splitting There is a certain limit to a Shard size. Whenever a Shard exceeds its storage limit, MatrixCube splits a Shard into two Shards and keep each Shard with the same storage level. Shard Proxy The Shard Proxy is a central module to accept all user read/write requests and route requests to corresponding nodes.","title":"Terms"},{"location":"MatrixOne/glossary/#concepts","text":"MatrixOne relies heavily on the following concepts. Being familiar with them will help you understand what our architecture achieves. Term Definition A Auto-Rebalance A modern distributed database should do more than just split data amongst a number of servers. The automatic process of storage and workload distribution among servers is called an Auto-Rebalance. C Consistency MatrixOne supports a strong consistency. It is guaranted that after any successful data write, the reading afterwards will get the latest value, no matter from which store. E Execution Plan An execution plan in a database is a simple graphical representation of the operations that the query optimizer generates to calculate the most efficient way to return a set of results. F Fault-Tolerance Fault-Tolerance simply means a system's ability to continue operating uninterrupted despite the failure of one or more of its components. J JIT Compilation Turns SQL plan tree or Intermediate Representation code into a native program using LLVM at runtime. M Monolitic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Materialized View A materialized view is a pre-computed data set derived from a query specification (the SELECT in the view definition) and stored for later use. Materialized view is usually used for increasing performance and efficiency. Metadata Metadata is the data that describes the structure and creation method of data in a database. P Paxos Paxos is an algorithm that is used to achieve consensus among a distributed set of computers that communicate via an asynchronous network. R Raft Raft is a consensus algorithm that is designed to be easy to understand. It's equivalent to Paxos in fault-tolerance and performance. The difference is that it's decomposed into relatively independent subproblems, and it cleanly addresses all major pieces needed for practical systems. Raft Group and Leader Raft defines a strong, single leader and number of followers in a group of peers. The group represents a replicated state machine. Only the leader may service client requests. The leader replicates actions to the followers. S SIMD instruction SIMD is short for Single Instruction/Multiple Data, while the term SIMD operations refers to a computing method that enables processing of multiple data with a single instruction. T Transaction A set of operations performed on your database that satisfy the requirements of ACID semantics. V Vectorized Execution Vectorized data processing helps with developing faster analytical query engines by making efficient utilization of CPU cache. Arrow's columnar format allows to use lightweight schemes like dictionary encoding, bit packing, and run length encoding, which favor query performance over compression ratio.","title":"Concepts"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/","text":"Make Your First Contribution Thank you for your interest in contributing to MatrixOne. Contributions are welcome from everyone. This document will help you get started on your first contribution to MatrixOne. How to Contribute? Before setting about contribution, you need figure out that in what area you can help us. You can see Types of contributions for more details. As your first-ever contribution, it can be selected from the following categories, which require little technical background of the contributor: To clarify code, variables, or functions To report a bug in the code To improve the MatrixOne documentation File an issue to describe the problem before working on it. In addition, you will also find issues labelled with good-first-issue , which represents issues suitable for new contributors. Such Issues contain clear steps and expected output. You may start your first contribution based on these issues. Assign Your Issue It's difficult to report an issue when you are just a newcomer on account of little knowledge of MatrixOne or relative contents, so we list good-first-issues suitable for new contributors to work with and be easy to fix. After deciding a suitable issue to work on, you can comment /assign on the issue you would like to work on, you will be automatically assigned to the issue. You can then find yourself listed under Assignees section. Prerequisite Before working on the issue you are assigned, please make sure you have set up development environment and installed MatrixOne. You can see Preparation for more details. Workflow Step 1: Fork the Repository Visit our Github Repository . On the top right of the page, click the Fork button (top right) to create a cloud-based fork of the repository. Step 2: Clone fork to local storage Open the repository you forked from MatrixOne. Click on the Code button and then the Copy to Clipboard icon. Next, move to the working directory you expect in local and launch your terminal. Run the following Git command: git clone <content you just copied> For example: git clone git@github.com:<yourname>/matrixone.git <yourname> is the ID you signed in at GitHub. This Git command downloads the content of MatrixOne repository you forked on GitHub to your local device. Step 3: Add MatrixOne repo as a remote repository You can add MatrixOrigin/MatrixOne repository as a remote repository in local with: git remote add upstream https://github.com/matrixorigin/matrixone.git upstream is the designation of this remote repository. If you want to replace it with other words you want, don't forget to replace it as well in the next steps, or some errors will happen. Step 4: Develop Make some changes Now you can edit the code, modify the documents and make whatever changes you want about your issue, on the branch you just created. Run MatrixOne in a standalone mode If you want to demonstrate whether the changes you made are valid or reproduce an issue, you need to run MatrixOne in a standalone mode. Before running, make sure you have installed MatrixOne according to our Install tutorial . And you can connect MatrixOne Serve according to the Connect tutorial . Step 5: Commit to your local repo Having completed your modification, you can add the files you just modified using the git add command: git add <filename> <filename> is the name of the file you just modified. And you can use following command to add all the files in current folder: git add . Next, you can commit these changes using the git commit command: git commit -m \"<commit message>\" -s Summarize and describe your modification briefly in the place of <commit message> . -s adds your sign-off message to your commit message. Step 6: Push to your remote repo After committing your modification, you should push your local branch to GitHub using the git push command, and we recommend you to push to a new branch: git push origin main:NEW_BRANCH NEW_BRANCH is the name of new branch you created and push to. Also you can replace it with other name you want. Step 7 Create a pull request Having pushed your changes, you can visit your folk at https://github.com/$user/matrixone , and click the Compare & Pull Request button to create a pull request in NEW_BRANCH for your modification to the MatrixOne repository. Note You should fill in the required information based on the PR template. Once your PR is opened, it will be assigned to reviewers. These reviewers will check your contribution and make a detail review, according to correctness, bugs, style and so on. Step 8 After merging, Keep your repo in sync Congratulations on that your contributions are accepted and merged to the project! And there are some operations left to do, which helps keep project committing history clean and keep your local and remote repo synchronized with MatrixOne repo. Overrides local commiting history with following command: git pull --force upstream main:main Lastly, upgrade the main branch of your folk in Github: git push --force origin main:main","title":"Make Your First Contribution"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#make-your-first-contribution","text":"Thank you for your interest in contributing to MatrixOne. Contributions are welcome from everyone. This document will help you get started on your first contribution to MatrixOne.","title":"Make Your First Contribution"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#how-to-contribute","text":"Before setting about contribution, you need figure out that in what area you can help us. You can see Types of contributions for more details. As your first-ever contribution, it can be selected from the following categories, which require little technical background of the contributor: To clarify code, variables, or functions To report a bug in the code To improve the MatrixOne documentation File an issue to describe the problem before working on it. In addition, you will also find issues labelled with good-first-issue , which represents issues suitable for new contributors. Such Issues contain clear steps and expected output. You may start your first contribution based on these issues.","title":"How to Contribute?"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#assign-your-issue","text":"It's difficult to report an issue when you are just a newcomer on account of little knowledge of MatrixOne or relative contents, so we list good-first-issues suitable for new contributors to work with and be easy to fix. After deciding a suitable issue to work on, you can comment /assign on the issue you would like to work on, you will be automatically assigned to the issue. You can then find yourself listed under Assignees section.","title":"Assign Your Issue"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#prerequisite","text":"Before working on the issue you are assigned, please make sure you have set up development environment and installed MatrixOne. You can see Preparation for more details.","title":"Prerequisite"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#workflow","text":"","title":"Workflow"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-1-fork-the-repository","text":"Visit our Github Repository . On the top right of the page, click the Fork button (top right) to create a cloud-based fork of the repository.","title":"Step 1: Fork the Repository"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-2-clone-fork-to-local-storage","text":"Open the repository you forked from MatrixOne. Click on the Code button and then the Copy to Clipboard icon. Next, move to the working directory you expect in local and launch your terminal. Run the following Git command: git clone <content you just copied> For example: git clone git@github.com:<yourname>/matrixone.git <yourname> is the ID you signed in at GitHub. This Git command downloads the content of MatrixOne repository you forked on GitHub to your local device.","title":"Step 2: Clone fork to local storage"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-3-add-matrixone-repo-as-a-remote-repository","text":"You can add MatrixOrigin/MatrixOne repository as a remote repository in local with: git remote add upstream https://github.com/matrixorigin/matrixone.git upstream is the designation of this remote repository. If you want to replace it with other words you want, don't forget to replace it as well in the next steps, or some errors will happen.","title":"Step 3: Add MatrixOne repo as a remote repository"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-4-develop","text":"","title":"Step 4: Develop"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#make-some-changes","text":"Now you can edit the code, modify the documents and make whatever changes you want about your issue, on the branch you just created.","title":"Make some changes"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#run-matrixone-in-a-standalone-mode","text":"If you want to demonstrate whether the changes you made are valid or reproduce an issue, you need to run MatrixOne in a standalone mode. Before running, make sure you have installed MatrixOne according to our Install tutorial . And you can connect MatrixOne Serve according to the Connect tutorial .","title":"Run MatrixOne in a standalone mode"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-5-commit-to-your-local-repo","text":"Having completed your modification, you can add the files you just modified using the git add command: git add <filename> <filename> is the name of the file you just modified. And you can use following command to add all the files in current folder: git add . Next, you can commit these changes using the git commit command: git commit -m \"<commit message>\" -s Summarize and describe your modification briefly in the place of <commit message> . -s adds your sign-off message to your commit message.","title":"Step 5: Commit to your local repo"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-6-push-to-your-remote-repo","text":"After committing your modification, you should push your local branch to GitHub using the git push command, and we recommend you to push to a new branch: git push origin main:NEW_BRANCH NEW_BRANCH is the name of new branch you created and push to. Also you can replace it with other name you want.","title":"Step 6: Push to your remote repo"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-7-create-a-pull-request","text":"Having pushed your changes, you can visit your folk at https://github.com/$user/matrixone , and click the Compare & Pull Request button to create a pull request in NEW_BRANCH for your modification to the MatrixOne repository. Note You should fill in the required information based on the PR template. Once your PR is opened, it will be assigned to reviewers. These reviewers will check your contribution and make a detail review, according to correctness, bugs, style and so on.","title":"Step 7 Create a pull request"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-8-after-merging-keep-your-repo-in-sync","text":"Congratulations on that your contributions are accepted and merged to the project! And there are some operations left to do, which helps keep project committing history clean and keep your local and remote repo synchronized with MatrixOne repo. Overrides local commiting history with following command: git pull --force upstream main:main Lastly, upgrade the main branch of your folk in Github: git push --force origin main:main","title":"Step 8 After merging, Keep your repo in sync"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/","text":"Code Comment Style This document describes the code comment style applied to MatrixOne style. When you are to commit, be sure to follow the style to write good code comments. Why does a good comment matter? To speed up the reviewing process To help maintain the code To improve the API document readability To improve the development efficiency of the whole team Where/When to comment? Write a comment where/when: For important code For obscure code For tricky or interesting code For a complex code block If a bug exists in the code but you cannot fix it or you just want to ignore it for the moment If the code is not optimal but you don't have a smarter way now To remind yourself or others of missing functionality or upcoming requirements not present in the code A comment is generally required for: Package (Go) File Type Constant Function Method Variable Typical algorithm Exported name Test case TODO FIXME How to comment? Format of a good comment Go Use // for a single-line comment and trailing comment Use /* ... */ for a block comment (used only when needed) Use gofmt to format your code Place the single-line and block comment above the code it's annotating Fold long lines of comments Each line of text in your code and comment should be at most 100 characters long For a comment containing a URL Use a relative URL if the text is linked to a file within the same GitHub repository Use an absolute URL in docs and docs-cn repositories if the code with this comment is copied from another repository Language for a good comment Word Use American English rather than British English color, canceling, synchronize (Recommended) colour, cancelling, synchronise (Not recommended) Use correct spelling Use standard or official capitalization MatrixOne, MatrixCube, Raft, SQL (Right) matrixone, matrixcube, RAFT, sql (Wrong) Use words and expressions consistently \"dead link\" vs. \"broken link\" (Only one of them can appear in a single document) Do not use lengthy compound words Do not abbreviate unless it is absolutely necessary We should be used only when it means the code writer and the reader Sentence Use standard grammar and correct punctuation Use relatively short sentences Capitalize the first letter of sentences and end them with periods If a lower-case identifier comes at the beginning of a sentence, don't capitalize it // enterGame causes Players to enter the // video game, which is about a romantic // story in ancient China. func enterGame() os.Error { ... } When used for description, comments should be descriptive rather than imperative Opens the file (Right) Open the file (Wrong) Use \"this\" instead of \"the\" to refer to the current thing Gets the toolkit for this component (Recommended) Gets the toolkit for the component (Not recommended) The Markdown format is allowed Opens the log file Tips for a good comment Comment code while writing it Do not assume the code is self-evident Avoid unnecessary comments for simple code Write comments as if they were for you Make sure the comment is up-to-date Let the code speak for itself Thanks for your contribution!","title":"Code Comment Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#code-comment-style","text":"This document describes the code comment style applied to MatrixOne style. When you are to commit, be sure to follow the style to write good code comments.","title":"Code Comment Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#why-does-a-good-comment-matter","text":"To speed up the reviewing process To help maintain the code To improve the API document readability To improve the development efficiency of the whole team","title":"Why does a good comment matter?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#wherewhen-to-comment","text":"Write a comment where/when: For important code For obscure code For tricky or interesting code For a complex code block If a bug exists in the code but you cannot fix it or you just want to ignore it for the moment If the code is not optimal but you don't have a smarter way now To remind yourself or others of missing functionality or upcoming requirements not present in the code A comment is generally required for: Package (Go) File Type Constant Function Method Variable Typical algorithm Exported name Test case TODO FIXME","title":"Where/When to comment?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#how-to-comment","text":"","title":"How to comment?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#format-of-a-good-comment","text":"Go Use // for a single-line comment and trailing comment Use /* ... */ for a block comment (used only when needed) Use gofmt to format your code Place the single-line and block comment above the code it's annotating Fold long lines of comments Each line of text in your code and comment should be at most 100 characters long For a comment containing a URL Use a relative URL if the text is linked to a file within the same GitHub repository Use an absolute URL in docs and docs-cn repositories if the code with this comment is copied from another repository","title":"Format of a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#language-for-a-good-comment","text":"Word Use American English rather than British English color, canceling, synchronize (Recommended) colour, cancelling, synchronise (Not recommended) Use correct spelling Use standard or official capitalization MatrixOne, MatrixCube, Raft, SQL (Right) matrixone, matrixcube, RAFT, sql (Wrong) Use words and expressions consistently \"dead link\" vs. \"broken link\" (Only one of them can appear in a single document) Do not use lengthy compound words Do not abbreviate unless it is absolutely necessary We should be used only when it means the code writer and the reader Sentence Use standard grammar and correct punctuation Use relatively short sentences Capitalize the first letter of sentences and end them with periods If a lower-case identifier comes at the beginning of a sentence, don't capitalize it // enterGame causes Players to enter the // video game, which is about a romantic // story in ancient China. func enterGame() os.Error { ... } When used for description, comments should be descriptive rather than imperative Opens the file (Right) Open the file (Wrong) Use \"this\" instead of \"the\" to refer to the current thing Gets the toolkit for this component (Recommended) Gets the toolkit for the component (Not recommended) The Markdown format is allowed Opens the log file","title":"Language for a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#tips-for-a-good-comment","text":"Comment code while writing it Do not assume the code is self-evident Avoid unnecessary comments for simple code Write comments as if they were for you Make sure the comment is up-to-date Let the code speak for itself Thanks for your contribution!","title":"Tips for a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/","text":"MatrixOne Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hai.jin@matrixorigin.io. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#matrixone-code-of-conduct","text":"","title":"MatrixOne Code of Conduct"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hai.jin@matrixorigin.io. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/","text":"Commit Message and Pull Request Style This document describes the commit message and Pull Request style applied to all MatrixOrigin repositories. When you are to commit, be sure to follow the style to write a good commit message, a good Pull Request title and description. Why a good commit message matters To speed up the reviewing process Help the reviewers better understand the PR Allow ignoring unimportant commits To help us write good Release Notes To help the future maintainers establish the context Provide better information when browsing the history What is a good commit message Elements of a good commit message: What is your change? (mandatory) It can be fixing a specific bug, adding a feature, improving performance, reliability and stability, or just be a change for the sake of correctness. Why this change was made? (mandatory) For short and obvious patches, this part can be omitted, but it should be a clear description of what the approach was. What effect does the commit have? (optional) In addition to the obvious effects, this may include benchmarks, side effects, etc. For short and obvious patches, this part can be omitted. How to write a good commit message To write a good commit message, we suggest following good format, cultivating good habits, and using good language. Format of a good commit message Please follow the following style for all your commits : <subsystem>: <what changed> <BLANK LINE> <why this change was made> <BLANK LINE> <footer>(optional) For the first subject line: Use no more than 70 characters. If the changes affect two subsystems, use a comma (and a whitespace) to separate them like util/codec, util/types: . If the changes affect three or more subsystems, you can use * instead, like *: . Use a lowercase letter on the text that immediately follows the colon. For example: \"media: update the DM architecture image\" Do not add a period at the end of a commit message. For the second line, always leave it blank. For the why part, if there is no specific reason for the change, you can use one of the generic reasons like \"Improve performance\", \"Improve test coverage.\" For other lines, use no more than 80 characters. Habits for a good commit message Summarize your change Describe clearly one logical change and avoid lazy messages as misc fixes Describe any limitations of the current code Do not end the subject with a period \".\" Do not assume the code is self-evident Do not assume reviewers understand the original issue Language for a good commit message Use the imperative mood for the first subject line Use simple verb tenses (eg. use \"add\" not \"added\") Use correct and standard grammar Use words and expressions consistently Use relatively short sentences Do not use lengthy compound words Do not abbreviate unless it's absolutely necessary Pull Request description style For Pull Request description in the Conversation box, please refer to the following Pull Request description template and include necessary information: **What type of PR is this?** - [ ] API-change - [ ] BUG - [ ] Improvement - [ ] Documentation - [ ] Feature - [ ] Test and CI - [ ] Code Refactoring **Which issue(s) this PR fixes:** issue # **What this PR does / why we need it:** **Special notes for your reviewer:** **Additional documentation (e.g. design docs, usage docs, etc.):** You may also use the checklist style to list contents if needed. The Markdown syntax is as follows: - [x] A checked line, something already done or fulfilled - [ ] An unchecked line, something not finished yet For short and obvious Pull Requests, you can omit some of the above information. Thanks for your contribution\uff01","title":"Commit & Pull Request Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#commit-message-and-pull-request-style","text":"This document describes the commit message and Pull Request style applied to all MatrixOrigin repositories. When you are to commit, be sure to follow the style to write a good commit message, a good Pull Request title and description.","title":"Commit Message and Pull Request Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#why-a-good-commit-message-matters","text":"To speed up the reviewing process Help the reviewers better understand the PR Allow ignoring unimportant commits To help us write good Release Notes To help the future maintainers establish the context Provide better information when browsing the history","title":"Why a good commit message matters"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#what-is-a-good-commit-message","text":"Elements of a good commit message: What is your change? (mandatory) It can be fixing a specific bug, adding a feature, improving performance, reliability and stability, or just be a change for the sake of correctness. Why this change was made? (mandatory) For short and obvious patches, this part can be omitted, but it should be a clear description of what the approach was. What effect does the commit have? (optional) In addition to the obvious effects, this may include benchmarks, side effects, etc. For short and obvious patches, this part can be omitted.","title":"What is a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#how-to-write-a-good-commit-message","text":"To write a good commit message, we suggest following good format, cultivating good habits, and using good language.","title":"How to write a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#format-of-a-good-commit-message","text":"Please follow the following style for all your commits : <subsystem>: <what changed> <BLANK LINE> <why this change was made> <BLANK LINE> <footer>(optional) For the first subject line: Use no more than 70 characters. If the changes affect two subsystems, use a comma (and a whitespace) to separate them like util/codec, util/types: . If the changes affect three or more subsystems, you can use * instead, like *: . Use a lowercase letter on the text that immediately follows the colon. For example: \"media: update the DM architecture image\" Do not add a period at the end of a commit message. For the second line, always leave it blank. For the why part, if there is no specific reason for the change, you can use one of the generic reasons like \"Improve performance\", \"Improve test coverage.\" For other lines, use no more than 80 characters.","title":"Format of a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#habits-for-a-good-commit-message","text":"Summarize your change Describe clearly one logical change and avoid lazy messages as misc fixes Describe any limitations of the current code Do not end the subject with a period \".\" Do not assume the code is self-evident Do not assume reviewers understand the original issue","title":"Habits for a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#language-for-a-good-commit-message","text":"Use the imperative mood for the first subject line Use simple verb tenses (eg. use \"add\" not \"added\") Use correct and standard grammar Use words and expressions consistently Use relatively short sentences Do not use lengthy compound words Do not abbreviate unless it's absolutely necessary","title":"Language for a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#pull-request-description-style","text":"For Pull Request description in the Conversation box, please refer to the following Pull Request description template and include necessary information: **What type of PR is this?** - [ ] API-change - [ ] BUG - [ ] Improvement - [ ] Documentation - [ ] Feature - [ ] Test and CI - [ ] Code Refactoring **Which issue(s) this PR fixes:** issue # **What this PR does / why we need it:** **Special notes for your reviewer:** **Additional documentation (e.g. design docs, usage docs, etc.):** You may also use the checklist style to list contents if needed. The Markdown syntax is as follows: - [x] A checked line, something already done or fulfilled - [ ] An unchecked line, something not finished yet For short and obvious Pull Requests, you can omit some of the above information. Thanks for your contribution\uff01","title":"Pull Request description style"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/","text":"Contribute Code MatrixOne is an open source project maintained, improved and extended by code contributors. This document dcescribes the conventions about development workflow, some styles and templates you need while contributing code to MatrixOne. If you encounter any problem or find some mistakes in participating in contribution to MatrixOne, please file an issue in github or contack us on other plaforms we support. Before Contributions Before you start developing, make sure you have read Preparation where you can follow the instructions to learn more about MatrixOne, development knowledge and how to set up the development environment. Get familiar with style It's nessarry to keep a consistent style for code, code comments, commit messages, and pull requests when contributing to MatrixOne. When you put together your pull request, we highly recommend you comply to the following style guides which make MatrixOne easy to review, maintain and develop. Code Style The coding style suggested by the Golang community is used in MatrixOne. See the style doc for details. Code Comment Style See the code comment style for details. Commit Message & Pull Request Style See the Commit Message & Pull Request Style for details. Workflow You can follow the workflow to operate development, and you can see Make Your First Contribution if you are a newcomer and need more detailed instructions about worflow. Fork the MatrixOne repository on GitHub. Clone your fork to your local machine with: git clone git@github.com:<yourname>/matrixone.git And add MatrixOne repo as a remote repository with: git remote add upstream https://github.com/matrixorigin/matrixone.git Create a new branch, the branch name is up to you. git checkout -b topic-branch Commit changes to your own branch locally, add necessary unit tests. Run static code analysis with make sca . make sca Run tests with make ut and make bvt , make sure all the tests passed. make ut make bvt Push to a new branch in your own fork. git push origin main:NEW_BRANCH Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. Add some labels if needed, and don't forget to refer to the related issue . Once your PR get approved, it would be merged sooner. After merging, synchronize your local repository. git pull --force upstream main:main Synchronized the main branch of your remote repository in Github. git push --force origin main:main If you still have some trouble, please refer to GitHub Docs for help. Code review When you open a pull request, you can assign some reviewers, or just leave it blank. And you can add some related labels so that it would be easier to recognize the PR's type/priority/etc. During reviewing, reviewers would comment on your code snippet, you could modify the code on your topic branch locally, commit the changes, and push to GitHub, the new commits would be attached to the PR automatically. For detailed code review tips, See Review a pull request for details.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#contribute-code","text":"MatrixOne is an open source project maintained, improved and extended by code contributors. This document dcescribes the conventions about development workflow, some styles and templates you need while contributing code to MatrixOne. If you encounter any problem or find some mistakes in participating in contribution to MatrixOne, please file an issue in github or contack us on other plaforms we support.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#before-contributions","text":"Before you start developing, make sure you have read Preparation where you can follow the instructions to learn more about MatrixOne, development knowledge and how to set up the development environment.","title":"Before Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#get-familiar-with-style","text":"It's nessarry to keep a consistent style for code, code comments, commit messages, and pull requests when contributing to MatrixOne. When you put together your pull request, we highly recommend you comply to the following style guides which make MatrixOne easy to review, maintain and develop. Code Style The coding style suggested by the Golang community is used in MatrixOne. See the style doc for details. Code Comment Style See the code comment style for details. Commit Message & Pull Request Style See the Commit Message & Pull Request Style for details.","title":"Get familiar with style "},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#workflow","text":"You can follow the workflow to operate development, and you can see Make Your First Contribution if you are a newcomer and need more detailed instructions about worflow. Fork the MatrixOne repository on GitHub. Clone your fork to your local machine with: git clone git@github.com:<yourname>/matrixone.git And add MatrixOne repo as a remote repository with: git remote add upstream https://github.com/matrixorigin/matrixone.git Create a new branch, the branch name is up to you. git checkout -b topic-branch Commit changes to your own branch locally, add necessary unit tests. Run static code analysis with make sca . make sca Run tests with make ut and make bvt , make sure all the tests passed. make ut make bvt Push to a new branch in your own fork. git push origin main:NEW_BRANCH Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. Add some labels if needed, and don't forget to refer to the related issue . Once your PR get approved, it would be merged sooner. After merging, synchronize your local repository. git pull --force upstream main:main Synchronized the main branch of your remote repository in Github. git push --force origin main:main If you still have some trouble, please refer to GitHub Docs for help.","title":"Workflow"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#code-review","text":"When you open a pull request, you can assign some reviewers, or just leave it blank. And you can add some related labels so that it would be easier to recognize the PR's type/priority/etc. During reviewing, reviewers would comment on your code snippet, you could modify the code on your topic branch locally, commit the changes, and push to GitHub, the new commits would be attached to the PR automatically. For detailed code review tips, See Review a pull request for details.","title":"Code review"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/","text":"Contributing to MatrixOne Documentation Contributions to the MatrixOne documentation are welcome from everyone. The MatrixOne community strives to make the contribution process simple and straightforward. To do that, we create this page to walk you through the whole process step by step. Before you start Before you contribute please take a minute to familiarize yourself with basic Markdown syntax and have a look at our Code of Conduct and the Google Developer Documentation Style Guide for some guidance on how to write accessible, consistent and inclusive documentation. How is MatrixOne documentation project organized? The MatrixOne documentation is managed in 3 repositories: The main project framework and CI&CD settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule that links to matrixone repo contents. The images are referred as webimage links from artwork repo. The matrixorigin.io has implemented a CI&CD project, which will be triggered by a new code merge and manual launch. This CI&CD workflow publishs the documentation to https://docs.matrixorigin.io/ . The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project. MatrixOne Documentation Structure The MatrixOne documentation content is planned with 6 main modules. Overview : MatrixOne's introduction, features, architecture, tech design. Get Started : How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Reference : SQL reference, Configuration parameters, Error Codes. FAQs : Product, Technical Design, SQL, Deployment FAQs. Develop : How to develop some applications based on MatrixOne using different programming languages. Troubleshoot : Introduce common errors and debugging tools. Release Notes : Release notes of all versions. Contribution Guide : How to contribute to MatrixOne project. Contribute to Technical Documentation If you are just correcting a typo or grammatical error, feel free to go ahead and create a pull request . Contribute Workflow 1 . File an issue and assign it to yourself by commenting /assign . 2 . Fork matrixorigin.io and matrixone repos. 3 . Clone the matrixorigin.io repo, using --recursive to retrieve the submodule of matrixone repo. $ git clone --recursive git@github.com:yourusername/matrixorigin.io.git Clone the matrixone repo to the other folder in local: $ git clone git@github.com:yourusername/matrixone.git 4 . Add matrixone repo as a remote repository in your local matrixone folder with: git remote add upstream https://github.com/matrixorigin/matrixone.git Add matrixorigin.io repo as a remote repository in your local matrixorigin.io folder with: git remote add upstream https://github.com/matrixorigin/matrixorigin.io.git 5 . As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. $ mkdocs serve 6 . Make your modification. If the modification is about the project settings, updating the sitemap with new pages, or updating the CI&CD workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modifcation should be applied to the matrixone repo. 7 . Push your git commits to your remote Github matrixorigin.io and matrixone repos. We recommend you to push to a new branch using the following commands: git push origin main:NEW_BRANCH 8 . Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. 9 . Once your code for both repos is merged, you'll wait for a CI&CD workflow to restart running until the documentation website being updated. Note So once your pull requests are merged, the update to the website is not immediate. We'll need to run a manual launch to update it. 10 . At last, you should update your local and remote repo to help keep committing history clean. Override your local committing repo with: git pull --force upstream main:main Update the main branch of your remote repo in Github: git push --force origin main:main Note Most processes should be implemented in both matrixorigin.io and matrixone . Contribute a blog article If you would like to write an article for our blog, please file an issue or send it to dengnan@matrixorigin.io . Feel free to submit either a completed draft or article ideas. All submissions will be reviewed as quickly as possible. If your article or idea seems like a good fit for the blog, we will reach out to you directly.","title":"Contribute Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contributing-to-matrixone-documentation","text":"Contributions to the MatrixOne documentation are welcome from everyone. The MatrixOne community strives to make the contribution process simple and straightforward. To do that, we create this page to walk you through the whole process step by step.","title":"Contributing to MatrixOne Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#before-you-start","text":"Before you contribute please take a minute to familiarize yourself with basic Markdown syntax and have a look at our Code of Conduct and the Google Developer Documentation Style Guide for some guidance on how to write accessible, consistent and inclusive documentation.","title":"Before you start"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#how-is-matrixone-documentation-project-organized","text":"The MatrixOne documentation is managed in 3 repositories: The main project framework and CI&CD settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule that links to matrixone repo contents. The images are referred as webimage links from artwork repo. The matrixorigin.io has implemented a CI&CD project, which will be triggered by a new code merge and manual launch. This CI&CD workflow publishs the documentation to https://docs.matrixorigin.io/ . The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project.","title":"How is MatrixOne documentation project organized?"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#matrixone-documentation-structure","text":"The MatrixOne documentation content is planned with 6 main modules. Overview : MatrixOne's introduction, features, architecture, tech design. Get Started : How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Reference : SQL reference, Configuration parameters, Error Codes. FAQs : Product, Technical Design, SQL, Deployment FAQs. Develop : How to develop some applications based on MatrixOne using different programming languages. Troubleshoot : Introduce common errors and debugging tools. Release Notes : Release notes of all versions. Contribution Guide : How to contribute to MatrixOne project.","title":"MatrixOne Documentation Structure"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contribute-to-technical-documentation","text":"If you are just correcting a typo or grammatical error, feel free to go ahead and create a pull request .","title":"Contribute to Technical Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contribute-workflow","text":"1 . File an issue and assign it to yourself by commenting /assign . 2 . Fork matrixorigin.io and matrixone repos. 3 . Clone the matrixorigin.io repo, using --recursive to retrieve the submodule of matrixone repo. $ git clone --recursive git@github.com:yourusername/matrixorigin.io.git Clone the matrixone repo to the other folder in local: $ git clone git@github.com:yourusername/matrixone.git 4 . Add matrixone repo as a remote repository in your local matrixone folder with: git remote add upstream https://github.com/matrixorigin/matrixone.git Add matrixorigin.io repo as a remote repository in your local matrixorigin.io folder with: git remote add upstream https://github.com/matrixorigin/matrixorigin.io.git 5 . As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. $ mkdocs serve 6 . Make your modification. If the modification is about the project settings, updating the sitemap with new pages, or updating the CI&CD workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modifcation should be applied to the matrixone repo. 7 . Push your git commits to your remote Github matrixorigin.io and matrixone repos. We recommend you to push to a new branch using the following commands: git push origin main:NEW_BRANCH 8 . Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. 9 . Once your code for both repos is merged, you'll wait for a CI&CD workflow to restart running until the documentation website being updated. Note So once your pull requests are merged, the update to the website is not immediate. We'll need to run a manual launch to update it. 10 . At last, you should update your local and remote repo to help keep committing history clean. Override your local committing repo with: git pull --force upstream main:main Update the main branch of your remote repo in Github: git push --force origin main:main Note Most processes should be implemented in both matrixorigin.io and matrixone .","title":"Contribute Workflow"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contribute-a-blog-article","text":"If you would like to write an article for our blog, please file an issue or send it to dengnan@matrixorigin.io . Feel free to submit either a completed draft or article ideas. All submissions will be reviewed as quickly as possible. If your article or idea seems like a good fit for the blog, we will reach out to you directly.","title":"Contribute a blog article"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/","text":"Make a Design Proposal Many changes, including bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow, which we have already introduced in the previous chapter. Differently, when you come up with a new feature you need or expect MatrixOne to achieve, we encourage you to propose your idea and express it as technique design documents. Therefore, this page is intended to guide you to provide a consistent and controlled path for new features to enter the MatrixOne projects, so that all stakeholders can understand fully enough about the direction the project is evolving in. This page defines the best practices procedure for making a proposal in MatrixOne projects. Before writing a design document Making enough preparations ahead of the design document can not only promote your working efficiency but increase the likelihood to be accepted. Oppositely, a rough and casual design document may be so much solow-quality so that it'll be rejected quickly. We motivate you to ask for help from experienced developers in order to obtain valuable suggestions to frame your design architecture or fill in details, which undoubtedly will upgrade the document to be desirable. The most common channel for preparing for writing a design document is on the Github issue. You can file a Feature Request or Refactoring Request to discuss about your ideas. Process Generally, you can follow these steps to finish the whole process: Create an issue describing the problem, goal, and solution. Get responses from other contributors to see if your proposal is generally acceptable and whether or not you should make some modifications. Create a pull request with a design document based on the design template . Make conversation with reviewers, revise the text in response. The design document is accepted or rejected when at least two committers reach consensus and no objection from the committer. If accepted, create a tracking issue for the design document or convert one from a previous discussion issue. The tracking issue basically tracks subtasks and progress. And refer the tracking issue in the design document replacing placeholder in the template. Merge the pull request of design. Start the implementation. Please refer to the tracking issue from subtasks to track the progress.","title":"Make a Design"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#make-a-design-proposal","text":"Many changes, including bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow, which we have already introduced in the previous chapter. Differently, when you come up with a new feature you need or expect MatrixOne to achieve, we encourage you to propose your idea and express it as technique design documents. Therefore, this page is intended to guide you to provide a consistent and controlled path for new features to enter the MatrixOne projects, so that all stakeholders can understand fully enough about the direction the project is evolving in. This page defines the best practices procedure for making a proposal in MatrixOne projects.","title":"Make a Design Proposal"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#before-writing-a-design-document","text":"Making enough preparations ahead of the design document can not only promote your working efficiency but increase the likelihood to be accepted. Oppositely, a rough and casual design document may be so much solow-quality so that it'll be rejected quickly. We motivate you to ask for help from experienced developers in order to obtain valuable suggestions to frame your design architecture or fill in details, which undoubtedly will upgrade the document to be desirable. The most common channel for preparing for writing a design document is on the Github issue. You can file a Feature Request or Refactoring Request to discuss about your ideas.","title":"Before writing a design document"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#process","text":"Generally, you can follow these steps to finish the whole process: Create an issue describing the problem, goal, and solution. Get responses from other contributors to see if your proposal is generally acceptable and whether or not you should make some modifications. Create a pull request with a design document based on the design template . Make conversation with reviewers, revise the text in response. The design document is accepted or rejected when at least two committers reach consensus and no objection from the committer. If accepted, create a tracking issue for the design document or convert one from a previous discussion issue. The tracking issue basically tracks subtasks and progress. And refer the tracking issue in the design document replacing placeholder in the template. Merge the pull request of design. Start the implementation. Please refer to the tracking issue from subtasks to track the progress.","title":"Process"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/","text":"Preparation Before contributing, it's necessary to make some preparations to learn more about MatrixOne and other revalant information, which can improve developing and reviewing efficiency. Thanks for understanding that English is used as a shared language in this repository. Maintainers do not use machine translation to avoid miscommunication due to error in translation. If description of issue / PR are written in non-English languages, those may be closed. If English is not your native language and you aren't sure about any of these, don't hesitate to ask for help in your pull request! What is MatrixOne Basic Information You can see MatrixOne Introduction for key features of MatrixOne, MatrixOne Architecture for MatrixOne architecture and operational logic. For our distributed framework, see MatrixCube Tech Design . Besides, you can browse SQL Reference and Custom Functions to know more about our interactive details. These introductions will help you go through you the key concepts and user details to understand the project. Roadmap MatrixOne v0.2.0 has been released, you can see Release Notes to know more information. Currently, we are working at v0.3.0 and v0.4.0 releases, the job tasks of these releases are listed in the Github milestones 0.3.0 and 0.4.0 . For the long-term project roadmap, please refer to MatrixOne roadmap for a more general overview. What Contributions Can I Make Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community. See Types of Contributions for more details. To report a bug or a problem with documentation, please file an issue providing the details of the problem. Don't forget to add a proper label for your issue, and follow the issue templates . To propose a new feature, please file a new feature request . Describe the intended feature and discuss the design and implementation with the team and community. Once the team agrees on the plan, you can follow the Contribution Workflow to implement it. To implement a feature or bug-fix for an existing outstanding issue, follow the Contribution workflow . If you need more context on a particular issue, comment on the issue to let people know. Working Directories and Files For contributing code, matrixone is the main repository you'll be working on. The main working directories are listed below: Directory Working Files /LICENSES The license of dependant libraries /cmd The binary entry of Go executables optools The test and deployment utilities pkg The main codebase of MatrixOne project For contributing documentation, matrixone , matrixorigin.io and artwork are all the main repositories you'll be working on. For more details, please refer to Contribute Documentation . Directory Working Files matrixone/docs/en/MatrixOne The content files of MatrixOne documentation website matrixone/docs/rfcs The design docs of MatrixOne project matrixorigin.io/mkdocs.yml The configuration file of documentation website artwork/docs The images, screenshots and diagrams of documentation webstie Set up your Development Environment Go Environment MatrixOne is written in Go. Before you start contributing code to MatrixOne, you need to set up your GO development environment. Install Go version 1.17 or above. You can see How to Write Go Code for more information. Define GOPATH environment variable and modify PATH to access your Go binaries. A common setup is as follows. You could always specify it based on your own flavor. export GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Note MatrixOne uses Go Modules to manage dependencies. Github & Git MatrixOne is an open source project built on Github, providing project maintainers and contributors with a platform to work together. Thus in order to start working with MatrixOne repository you will need a GitHub account and learn basic git commands. If you don't have a Github account, please register at https://github.com . In case you do not have SSH keys, you should generate them and then upload them on GitHub. It is required for sending over your patches. It is also possible to use the same SSH keys that you use with any other SSH servers - probably you already have those. For detailed information about Github, you can see Github Docs . To work with git repositories, please install git . And you can learn how to use it throuth following introduction: A brief manual can be found here . A detailed manual can be found here . Install and Run MatrixOne See Install Standalone MatrixOne for more details.","title":"Preparation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#preparation","text":"Before contributing, it's necessary to make some preparations to learn more about MatrixOne and other revalant information, which can improve developing and reviewing efficiency. Thanks for understanding that English is used as a shared language in this repository. Maintainers do not use machine translation to avoid miscommunication due to error in translation. If description of issue / PR are written in non-English languages, those may be closed. If English is not your native language and you aren't sure about any of these, don't hesitate to ask for help in your pull request!","title":"Preparation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#what-is-matrixone","text":"","title":"What is MatrixOne"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#basic-information","text":"You can see MatrixOne Introduction for key features of MatrixOne, MatrixOne Architecture for MatrixOne architecture and operational logic. For our distributed framework, see MatrixCube Tech Design . Besides, you can browse SQL Reference and Custom Functions to know more about our interactive details. These introductions will help you go through you the key concepts and user details to understand the project.","title":"Basic Information"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#roadmap","text":"MatrixOne v0.2.0 has been released, you can see Release Notes to know more information. Currently, we are working at v0.3.0 and v0.4.0 releases, the job tasks of these releases are listed in the Github milestones 0.3.0 and 0.4.0 . For the long-term project roadmap, please refer to MatrixOne roadmap for a more general overview.","title":"Roadmap"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#what-contributions-can-i-make","text":"Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community. See Types of Contributions for more details. To report a bug or a problem with documentation, please file an issue providing the details of the problem. Don't forget to add a proper label for your issue, and follow the issue templates . To propose a new feature, please file a new feature request . Describe the intended feature and discuss the design and implementation with the team and community. Once the team agrees on the plan, you can follow the Contribution Workflow to implement it. To implement a feature or bug-fix for an existing outstanding issue, follow the Contribution workflow . If you need more context on a particular issue, comment on the issue to let people know.","title":"What Contributions Can I Make"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#working-directories-and-files","text":"For contributing code, matrixone is the main repository you'll be working on. The main working directories are listed below: Directory Working Files /LICENSES The license of dependant libraries /cmd The binary entry of Go executables optools The test and deployment utilities pkg The main codebase of MatrixOne project For contributing documentation, matrixone , matrixorigin.io and artwork are all the main repositories you'll be working on. For more details, please refer to Contribute Documentation . Directory Working Files matrixone/docs/en/MatrixOne The content files of MatrixOne documentation website matrixone/docs/rfcs The design docs of MatrixOne project matrixorigin.io/mkdocs.yml The configuration file of documentation website artwork/docs The images, screenshots and diagrams of documentation webstie","title":"Working Directories and Files"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#set-up-your-development-environment","text":"","title":"Set up your Development Environment"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#go-environment","text":"MatrixOne is written in Go. Before you start contributing code to MatrixOne, you need to set up your GO development environment. Install Go version 1.17 or above. You can see How to Write Go Code for more information. Define GOPATH environment variable and modify PATH to access your Go binaries. A common setup is as follows. You could always specify it based on your own flavor. export GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Note MatrixOne uses Go Modules to manage dependencies.","title":"Go Environment"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#github-git","text":"MatrixOne is an open source project built on Github, providing project maintainers and contributors with a platform to work together. Thus in order to start working with MatrixOne repository you will need a GitHub account and learn basic git commands. If you don't have a Github account, please register at https://github.com . In case you do not have SSH keys, you should generate them and then upload them on GitHub. It is required for sending over your patches. It is also possible to use the same SSH keys that you use with any other SSH servers - probably you already have those. For detailed information about Github, you can see Github Docs . To work with git repositories, please install git . And you can learn how to use it throuth following introduction: A brief manual can be found here . A detailed manual can be found here .","title":"Github &amp; Git"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#install-and-run-matrixone","text":"See Install Standalone MatrixOne for more details.","title":"Install and Run MatrixOne"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/","text":"Report Issues Any problems are encouraged to be published when you participate in MatrixOne, and you can report issues about this problem in github with relative templates and labels we suggest. This page is intended to introduce templates, labels, and precautions you will follow when you report issues. Avoid Duplicated Issues Before reporting an issue, you should see whether the problem has already been reported. You can use the search bar to search existing issues. Issue Templates If the problem you're reporting is not already in the issue tracker, you can file an issue with your GitHub account. MatrixOne uses issue template for different kinds of issues. Issue templates are a bundle of questions to collect necessary information about the problem to make it easy for other contributors to participate. MatrixOne suggests 6 types of issue templates: A Bug report issue template consists of information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type and so on. Steps to Reproduce List steps to reproduce what you encountered. Actual & Expected Behavior Describe what's the observed and your expected behavior respectively. A Feature Request consists of information below: Is your feature request related to a problem? A clear and concise description of what the problem is and state your reasons why you need this feature. Describe the feature you'd like: A clear and concise description of what you want to happen. Describe alternatives you've considered: A clear and concise description of any alternative solutions or features you've considered. Teachability, Documentation, Adoption, Migration Strategy: If you can, explain some scenarios how users might use this, situations it would be helpful in. Any API designs, mockups, or diagrams are also helpful. A Documentation Issue consists of information below: Describe the issue A clear and concise description of what's wrong in documentation. Additional context Add any other context about the problem here. A Performance Question consists of information below: Detail Environment Describe the details about the operation environment including version, hardware parameters, OS type and so on. Steps to Reproduce List steps detailedly to reproduce the operations to test performance. Expected & Actual Performance Describe what's the observed and your expected performance respectively. Additional context Add any other context about the problem here. For example: Have you compared MatrixOne with other databases? If yes, what's their difference? An Enhancement consists of information below: What would you like to be added A concise description of what you're expecting/suggesting. Why is this needed A concise description of the reason/motivation. Anything else Anything that will give us more dectail about your issue! A Refactoring Request consists of information below: Is your refactoring request related to a problem? A clear and concise description of what the problem is. Describe the solution you'd like A clear and concise description of the refactoring you want to. Describe alternatives you've considered A clear and concise description of any alternative solutions or refactoring method you've considered. Additional context Add any other context or screenshots about the refactoring request here. A General Question : If the previous templates don't fit with what you'd like to report or ask, please use this general question template to file issue. Before asking a question, make sure you have: Searched open and closed GitHub issues Read the documentation: MatrixOne Readme MatrixOne Doc Issue Labels Once your issue is submitted, it will be automatically labelled with needs-triage , a MatrixOne maintainer will look at the issue, tag it with more suitable labels and assign it to a suitable developer. If you'd like to work on the issue by yourself, you can comment /assign on the issue you would like to work on, you will be automatically assigned to the issue. You can then find yourself listed under Assignees section. Good First Issues When you make the first contribution to MatrixOne, you can select one of the issues labeled good-first-issues each of which is relative approachability for first-time contributors. For detailed suggestions you need when you make first contribution, you cen see Make Your First Contribution .","title":"Report an Issue"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#report-issues","text":"Any problems are encouraged to be published when you participate in MatrixOne, and you can report issues about this problem in github with relative templates and labels we suggest. This page is intended to introduce templates, labels, and precautions you will follow when you report issues.","title":"Report Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#avoid-duplicated-issues","text":"Before reporting an issue, you should see whether the problem has already been reported. You can use the search bar to search existing issues.","title":"Avoid Duplicated Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#issue-templates","text":"If the problem you're reporting is not already in the issue tracker, you can file an issue with your GitHub account. MatrixOne uses issue template for different kinds of issues. Issue templates are a bundle of questions to collect necessary information about the problem to make it easy for other contributors to participate. MatrixOne suggests 6 types of issue templates: A Bug report issue template consists of information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type and so on. Steps to Reproduce List steps to reproduce what you encountered. Actual & Expected Behavior Describe what's the observed and your expected behavior respectively. A Feature Request consists of information below: Is your feature request related to a problem? A clear and concise description of what the problem is and state your reasons why you need this feature. Describe the feature you'd like: A clear and concise description of what you want to happen. Describe alternatives you've considered: A clear and concise description of any alternative solutions or features you've considered. Teachability, Documentation, Adoption, Migration Strategy: If you can, explain some scenarios how users might use this, situations it would be helpful in. Any API designs, mockups, or diagrams are also helpful. A Documentation Issue consists of information below: Describe the issue A clear and concise description of what's wrong in documentation. Additional context Add any other context about the problem here. A Performance Question consists of information below: Detail Environment Describe the details about the operation environment including version, hardware parameters, OS type and so on. Steps to Reproduce List steps detailedly to reproduce the operations to test performance. Expected & Actual Performance Describe what's the observed and your expected performance respectively. Additional context Add any other context about the problem here. For example: Have you compared MatrixOne with other databases? If yes, what's their difference? An Enhancement consists of information below: What would you like to be added A concise description of what you're expecting/suggesting. Why is this needed A concise description of the reason/motivation. Anything else Anything that will give us more dectail about your issue! A Refactoring Request consists of information below: Is your refactoring request related to a problem? A clear and concise description of what the problem is. Describe the solution you'd like A clear and concise description of the refactoring you want to. Describe alternatives you've considered A clear and concise description of any alternative solutions or refactoring method you've considered. Additional context Add any other context or screenshots about the refactoring request here. A General Question : If the previous templates don't fit with what you'd like to report or ask, please use this general question template to file issue. Before asking a question, make sure you have: Searched open and closed GitHub issues Read the documentation: MatrixOne Readme MatrixOne Doc","title":"Issue Templates"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#issue-labels","text":"Once your issue is submitted, it will be automatically labelled with needs-triage , a MatrixOne maintainer will look at the issue, tag it with more suitable labels and assign it to a suitable developer. If you'd like to work on the issue by yourself, you can comment /assign on the issue you would like to work on, you will be automatically assigned to the issue. You can then find yourself listed under Assignees section.","title":"Issue Labels"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#good-first-issues","text":"When you make the first contribution to MatrixOne, you can select one of the issues labeled good-first-issues each of which is relative approachability for first-time contributors. For detailed suggestions you need when you make first contribution, you cen see Make Your First Contribution .","title":"Good First Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/","text":"Reviews For MatrixOne, any type of review for pull request is crucial, where you can classify the pull request to help look for more suitable experts to solve relative problems, or propose your suggestions to codes for not only contents but style. It's not necessary to doubt whether your review is constructive and useful enough because no matter how tiny, a suggestion may make profound influence to MatrixOne. Certainly, before reviewing we wish you can browse this page to learn basic requirements and relative methods. Principles of the code review When you review a pull request, there are several rules and suggestions you should take to propose better comments. Regardless of the specifics, we suggest you stay friendly first: Keep respectful Keep respectful to every pull request author and other reviewer. Code review is a part of community activities so you should follow the community requirements. Be careful with tone It's be encouraged to try to frame your comments as suggestions or question instead of commands. Once the tone becomes softer, your reviews will be more easy to accept. Be generous with your compliments We recommended you to offer encouragement and appreciation to the authors for their good practices in the code. In many cases, telling the authors what they did is right is even more valuable than telling them what they did is wrong. Additionally, there are also some suggestions on content: Provide more We encourage you to provide additional details and context of your review process as possible as you can. Undoubtedly, the more detailed your review, the more useful it will be to others. If your test the pull request, report the result and your test environment details. If you request some changes, try to suggest how. Keep objective Avoid individual biased opinions and subjective emotion. Of course, everyone will comment with more or less subjective opinions, however, as a good reviewer, you should consider the technique and data facts rather than your own personal preferences. Case by case It's difficult to decide whether it's more reasonable to accept or reject when you are faced with a complex problem. Regrettably, we can't provide a certain answer because it always depends on specific situation, which asks you to balance the pros and cons. Classifying pull requests Some pull request authors may not be familiar with MatrixOne, MatriOne development workflow or MatrixOne community. They don't know what labels should be added to the pull requests and which expert could be asked for review. If you are able to, it would be great for you to triage the pull requests, adding suitable labels to the pull requests, asking corresponding experts to review the pull requests. These actions could help more contributors notice the pull requests and make quick responses. Checking pull requests There are some basic aspects to check when you review a pull request: Concentration One pull request should only do one thing. No matter how small it is, the change does exactly one thing and gets it right. Don't mix other changes into it. Tests A pull request should be test covered, whether the tests are unit tests, integration tests, or end-to-end tests. Tests should be sufficient, correct and don't slow down the CI pipeline largely. Functionality The pull request should implement what the author intends to do, fit well in the existing code base, and resolve a real problem for users. Thus you should check whether or not the pull request achieve the intention and you could follow the discussions in the corresponding GitHub issue . Style Code in the pull request should follow common programming style . However, sometimes the existing code is inconsistent with the style guide, you should maintain consistency with the existing code or file a new issue to fix the existing code style first. Documentation If a pull request changes how users build, test, interact with, or release code, you must check whether it also updates the related documentation such as README.md and any generated reference docs. Similarly, if a pull request deletes or deprecates code, you must check whether or not the corresponding documentation should also be deleted. Performance If you find the pull request may affect performance, you could ask the author to provide a benchmark result.","title":"Review a Pull Request"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#reviews","text":"For MatrixOne, any type of review for pull request is crucial, where you can classify the pull request to help look for more suitable experts to solve relative problems, or propose your suggestions to codes for not only contents but style. It's not necessary to doubt whether your review is constructive and useful enough because no matter how tiny, a suggestion may make profound influence to MatrixOne. Certainly, before reviewing we wish you can browse this page to learn basic requirements and relative methods.","title":"Reviews"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#principles-of-the-code-review","text":"When you review a pull request, there are several rules and suggestions you should take to propose better comments. Regardless of the specifics, we suggest you stay friendly first: Keep respectful Keep respectful to every pull request author and other reviewer. Code review is a part of community activities so you should follow the community requirements. Be careful with tone It's be encouraged to try to frame your comments as suggestions or question instead of commands. Once the tone becomes softer, your reviews will be more easy to accept. Be generous with your compliments We recommended you to offer encouragement and appreciation to the authors for their good practices in the code. In many cases, telling the authors what they did is right is even more valuable than telling them what they did is wrong. Additionally, there are also some suggestions on content: Provide more We encourage you to provide additional details and context of your review process as possible as you can. Undoubtedly, the more detailed your review, the more useful it will be to others. If your test the pull request, report the result and your test environment details. If you request some changes, try to suggest how. Keep objective Avoid individual biased opinions and subjective emotion. Of course, everyone will comment with more or less subjective opinions, however, as a good reviewer, you should consider the technique and data facts rather than your own personal preferences. Case by case It's difficult to decide whether it's more reasonable to accept or reject when you are faced with a complex problem. Regrettably, we can't provide a certain answer because it always depends on specific situation, which asks you to balance the pros and cons.","title":"Principles of the code review"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#classifying-pull-requests","text":"Some pull request authors may not be familiar with MatrixOne, MatriOne development workflow or MatrixOne community. They don't know what labels should be added to the pull requests and which expert could be asked for review. If you are able to, it would be great for you to triage the pull requests, adding suitable labels to the pull requests, asking corresponding experts to review the pull requests. These actions could help more contributors notice the pull requests and make quick responses.","title":"Classifying pull requests"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#checking-pull-requests","text":"There are some basic aspects to check when you review a pull request: Concentration One pull request should only do one thing. No matter how small it is, the change does exactly one thing and gets it right. Don't mix other changes into it. Tests A pull request should be test covered, whether the tests are unit tests, integration tests, or end-to-end tests. Tests should be sufficient, correct and don't slow down the CI pipeline largely. Functionality The pull request should implement what the author intends to do, fit well in the existing code base, and resolve a real problem for users. Thus you should check whether or not the pull request achieve the intention and you could follow the discussions in the corresponding GitHub issue . Style Code in the pull request should follow common programming style . However, sometimes the existing code is inconsistent with the style guide, you should maintain consistency with the existing code or file a new issue to fix the existing code style first. Documentation If a pull request changes how users build, test, interact with, or release code, you must check whether it also updates the related documentation such as README.md and any generated reference docs. Similarly, if a pull request deletes or deprecates code, you must check whether or not the corresponding documentation should also be deleted. Performance If you find the pull request may affect performance, you could ask the author to provide a benchmark result.","title":"Checking pull requests"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/","text":"Types of Contributions Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community: Contribute Code Contribution type Description Report a bug To report a problem with MatrixOne, file an issue on GitHub. Include detailed information about the problem you've encountered. Contribute code You can fix a bug for any outstanding issues on GitHub, improve the code, or propose a design or implementation for a new MatrixOne feature. See Contribute Code for the contribution conventions and best practices. Review or approve pull requests Review or approve pull requests for the MatrixOne project as a reviewer or maintainer. Contribute to MatrixOne Documentation Contribution type Description Report or fix a technical documentation issue You can either click edit the page directly on the target page of MatrixOne, or file an issue on MatrixOne repository with detailed information, and, if possible, propose changes by creating a pull request . Contribute a new piece of technical document Before contributing a full-length technical document, read Contribution Documentation . Other Contributions Contribution type Description Share your demos and solutions Show MatrixOne users how to leverage the platform in specific scenarios. Send your use case to dengnan@matrixorigin.io and we'll post it in the community. Author a blog article, user story, or whitepapers Write high-quality content that clearly and accurately explains technical details about MatrixOne. Give a tech talk or host a live broadcast Give talks or host live broadcasts that help raise awareness around MatrixOne. Support MatrixOne users Help users on GitHub solve the problems they meet while using MatrixOne. Issue triage Adding descriptive labels to our GitHub issues speeds up routing issues to the right person in charge. It is a great contribution to the operation of the MatrixOne project. Contribute otherwise Any contribution that plays a positive role in the development of MatrixOne and its open-source community will be considered for eligibility.","title":"Types of Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#types-of-contributions","text":"Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community:","title":"Types of Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#contribute-code","text":"Contribution type Description Report a bug To report a problem with MatrixOne, file an issue on GitHub. Include detailed information about the problem you've encountered. Contribute code You can fix a bug for any outstanding issues on GitHub, improve the code, or propose a design or implementation for a new MatrixOne feature. See Contribute Code for the contribution conventions and best practices. Review or approve pull requests Review or approve pull requests for the MatrixOne project as a reviewer or maintainer.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#contribute-to-matrixone-documentation","text":"Contribution type Description Report or fix a technical documentation issue You can either click edit the page directly on the target page of MatrixOne, or file an issue on MatrixOne repository with detailed information, and, if possible, propose changes by creating a pull request . Contribute a new piece of technical document Before contributing a full-length technical document, read Contribution Documentation .","title":"Contribute to MatrixOne Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#other-contributions","text":"Contribution type Description Share your demos and solutions Show MatrixOne users how to leverage the platform in specific scenarios. Send your use case to dengnan@matrixorigin.io and we'll post it in the community. Author a blog article, user story, or whitepapers Write high-quality content that clearly and accurately explains technical details about MatrixOne. Give a tech talk or host a live broadcast Give talks or host live broadcasts that help raise awareness around MatrixOne. Support MatrixOne users Help users on GitHub solve the problems they meet while using MatrixOne. Issue triage Adding descriptive labels to our GitHub issues speeds up routing issues to the right person in charge. It is a great contribution to the operation of the MatrixOne project. Contribute otherwise Any contribution that plays a positive role in the development of MatrixOne and its open-source community will be considered for eligibility.","title":"Other Contributions"},{"location":"MatrixOne/Develop/design-a-database/","text":"Design A Database","title":"Design A Database"},{"location":"MatrixOne/Develop/design-a-database/#design-a-database","text":"","title":"Design A Database"},{"location":"MatrixOne/FAQs/general-faqs/","text":"General FAQs","title":"General FAQs"},{"location":"MatrixOne/FAQs/general-faqs/#general-faqs","text":"","title":"General FAQs"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/","text":"Connect to MatrixOne Server Before you begin Make sure you have already installed MatrixOne . 1. Install MySQL client MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. Currently, MatrixOne is only compatible with Oracle MySQL client. This means that some features might not work with MariaDB client or Percona client. 2. Connect to MatrixOne server You can use the MySQL command-line client to connect to MatrixOne server: $ mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 $ mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Currently, MatrixOne only supports the TCP listener.","title":"Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#connect-to-matrixone-server","text":"","title":"Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#before-you-begin","text":"Make sure you have already installed MatrixOne .","title":"Before you begin"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#1-install-mysql-client","text":"MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. Currently, MatrixOne is only compatible with Oracle MySQL client. This means that some features might not work with MariaDB client or Percona client.","title":"1. Install MySQL client"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#2-connect-to-matrixone-server","text":"You can use the MySQL command-line client to connect to MatrixOne server: $ mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 $ mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Currently, MatrixOne only supports the TCP listener.","title":"2. Connect to MatrixOne server"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/","text":"Install distributed MatrixOne MatrixOne supports distributed deloyment. At least 3 stores (same as Nodes) are required for the distributed setting. Two Types of Stores There are two types of stores in a MatrixOne cluster: prophet stores and pure storage stores. The first three stores are prophet stores. The others are pure storage stores. For example, if there're three stores in the cluster, all the stores are prophet stores. If there're five nodes in the cluster, three are prophet stores, two are pure storage stores. Installation This tutorial is an example of 5 stores installation. Step1 : Prepare 3 servers as prophet stores (recommended specification: x86 CPU with 16 cores and 64GB memory, with CentOS 7+ OS). Each store must install a MatrixOne as standalone version. Installation steps are the same as the standalone . Step2 : Set up store1, which is also called the Prophet Genesis Store . Set id of the Prophet Genesis Store: nodeID = 1 Set addr-raft and addr-client to receive Raft protocol and Shard Proxy messages from other MatrixCube stores: addr-raft = \"your_ip_address:10000\" addr-client = \"your_ip_address:20000\" Set the size limit of a Shard : shard-capacity-bytes = \"96MB\" Set rpc-addr to receive heartbeats from the whole cluster: rpc-addr = \"your_ip_address:30000\" Set join , client-urls and peer-urls to group into a Etcd-server cluster. As the Prophet Genesis Store is the first store, the join parameter can remain empty: join = \"\" client-urls = \"your_ip_address:40000\" peer-urls = \"your_ip_address:50000\" 6. Set storage-node to TRUE, as the prophet store will hold the cluster metadata: storage-node = true 7. Set max-replicas number to the replica numbers that you want, it can only be 2*N+1 numbers: max-replicas = 3 Step3 : Set up store2 and store3 as prophet stores. Repeat the same procedure of step1 and step2 for each store. The only two differences are setting a unique nodeID and a join ip address. nodeID = 2 or 3; join = \"ip_address_of_store1\" Step4 : Set up the other two stores as pure storage store. Repeat the same procedure of step1 and step2 for each store. There are three more parameters to be set: * Set a unique number for nodeID. * Set storage-node to TRUE. * Fill the three empty string with the three client-urls of the three prophet node for the external-etcd parameter. nodeID = 4/5; storage-node = false; storage-node = [\"ip_address_of_prophet_store1\",\"ip_address_of_prophet_store2\",\"ip_address_of_prophet_store3\"] To learn more about our distribute system parameters, please refer to distributed settings .","title":"Install Distributed MatrixOne"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#install-distributed-matrixone","text":"MatrixOne supports distributed deloyment. At least 3 stores (same as Nodes) are required for the distributed setting.","title":"Install distributed MatrixOne"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#two-types-of-stores","text":"There are two types of stores in a MatrixOne cluster: prophet stores and pure storage stores. The first three stores are prophet stores. The others are pure storage stores. For example, if there're three stores in the cluster, all the stores are prophet stores. If there're five nodes in the cluster, three are prophet stores, two are pure storage stores.","title":"Two Types of Stores"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#installation","text":"This tutorial is an example of 5 stores installation.","title":"Installation"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#step1","text":"Prepare 3 servers as prophet stores (recommended specification: x86 CPU with 16 cores and 64GB memory, with CentOS 7+ OS). Each store must install a MatrixOne as standalone version. Installation steps are the same as the standalone .","title":"Step1:"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#step2","text":"Set up store1, which is also called the Prophet Genesis Store . Set id of the Prophet Genesis Store: nodeID = 1 Set addr-raft and addr-client to receive Raft protocol and Shard Proxy messages from other MatrixCube stores: addr-raft = \"your_ip_address:10000\" addr-client = \"your_ip_address:20000\" Set the size limit of a Shard : shard-capacity-bytes = \"96MB\" Set rpc-addr to receive heartbeats from the whole cluster: rpc-addr = \"your_ip_address:30000\" Set join , client-urls and peer-urls to group into a Etcd-server cluster. As the Prophet Genesis Store is the first store, the join parameter can remain empty: join = \"\" client-urls = \"your_ip_address:40000\" peer-urls = \"your_ip_address:50000\" 6. Set storage-node to TRUE, as the prophet store will hold the cluster metadata: storage-node = true 7. Set max-replicas number to the replica numbers that you want, it can only be 2*N+1 numbers: max-replicas = 3","title":"Step2:"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#step3","text":"Set up store2 and store3 as prophet stores. Repeat the same procedure of step1 and step2 for each store. The only two differences are setting a unique nodeID and a join ip address. nodeID = 2 or 3; join = \"ip_address_of_store1\"","title":"Step3:"},{"location":"MatrixOne/Get-Started/install-distributed-matrixone/#step4","text":"Set up the other two stores as pure storage store. Repeat the same procedure of step1 and step2 for each store. There are three more parameters to be set: * Set a unique number for nodeID. * Set storage-node to TRUE. * Fill the three empty string with the three client-urls of the three prophet node for the external-etcd parameter. nodeID = 4/5; storage-node = false; storage-node = [\"ip_address_of_prophet_store1\",\"ip_address_of_prophet_store2\",\"ip_address_of_prophet_store3\"] To learn more about our distribute system parameters, please refer to distributed settings .","title":"Step4:"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/","text":"Install standalone MatrixOne MatrixOne supports Linux and MacOS. You can install a standalone MatrixOne version either by building from source or using docker . Building from source 1. Install Go as necessary Go version 1.17+ is required. 2. Get the MatrixOne code $ git clone https://github.com/matrixorigin/matrixone.git $ cd matrixone 3. Run make You can run make debug , make clean , or anything else our Makefile offers. $ make config $ make build 4. Boot MatrixOne server $ ./mo-server system_vars_config.toml Using docker 1. Install Docker Please verify that Docker daemon is running in the background: $ docker --version 2. Create and run the container for the latest release of MatrixOne It will pull the image from Docker Hub if not exists. $ docker run -d -p 6001:6001 --name matrixone matrixorigin/matrixone:latest","title":"Install Standalone MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#install-standalone-matrixone","text":"MatrixOne supports Linux and MacOS. You can install a standalone MatrixOne version either by building from source or using docker .","title":"Install standalone MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#building-from-source","text":"","title":"Building from source"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-install-go-as-necessary","text":"Go version 1.17+ is required.","title":"1. Install Go as necessary"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2-get-the-matrixone-code","text":"$ git clone https://github.com/matrixorigin/matrixone.git $ cd matrixone","title":"2. Get the MatrixOne code"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#3-run-make","text":"You can run make debug , make clean , or anything else our Makefile offers. $ make config $ make build","title":"3. Run make"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#4-boot-matrixone-server","text":"$ ./mo-server system_vars_config.toml","title":"4. Boot MatrixOne server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#using-docker","text":"","title":"Using docker"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-install-docker","text":"Please verify that Docker daemon is running in the background: $ docker --version","title":"1. Install Docker"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2-create-and-run-the-container-for-the-latest-release-of-matrixone","text":"It will pull the image from Docker Hub if not exists. $ docker run -d -p 6001:6001 --name matrixone matrixorigin/matrixone:latest","title":"2. Create and run the container for the latest release of MatrixOne"},{"location":"MatrixOne/Get-Started/set-up-matrixone/","text":"Set Up MatrixOne Matrixone supports both single node and distributed deployment, for single node deployment, you can start your journey with MatrixOne out of box. For distributed deployment, change each node's config file(system_vars_config.toml) according to the following instructions. Deploy MatrixOne on a distributed bare-metal cluster 1. Requirements: at least three nodes 2. set up the prophet genesis node 2.1. make sure the nodeID is unique 2.2. change the addr-raft ip to the machine ip 2.3. change the addr-client ip to the machine ip 2.4. make sure the prophet name is different from the names of other two prophet node 2.5. change the rpc-addr ip to the machine ip 2.6. change the client-urls ip to the machine ip 2.7. change the peer-urls ip to the machine ip 2.8. make sure the dir-data is different from the other nodes in the cluster 3. set up the other two prophet nodes 3.1. apply the above 8 steps of prophet genesis node setting 3.2. change the prophet join address from empty string to the prophet genesis node's peer-urls 4. set up pure storage node 4.1. make sure the nodeID is unique 4.2. change storage-node to false 4.3. change the addr-raft ip to the machine ip 4.4. change the addr-client ip to the machine ip 4.5. In the external-etcd attribute, fill the three empty string with the three client-urls of the three prophet node 4.6. make sure the dir-data is different from the other nodes in the cluster Deploy MatrixOne on a docker cluster Start MatrixOne cluster on docker or kubernetes, please refer to this repo matrixorigin/matrixone-operator","title":"**Set Up MatrixOne**"},{"location":"MatrixOne/Get-Started/set-up-matrixone/#set-up-matrixone","text":"Matrixone supports both single node and distributed deployment, for single node deployment, you can start your journey with MatrixOne out of box. For distributed deployment, change each node's config file(system_vars_config.toml) according to the following instructions.","title":"Set Up MatrixOne"},{"location":"MatrixOne/Get-Started/set-up-matrixone/#deploy-matrixone-on-a-distributed-bare-metal-cluster","text":"1. Requirements: at least three nodes 2. set up the prophet genesis node 2.1. make sure the nodeID is unique 2.2. change the addr-raft ip to the machine ip 2.3. change the addr-client ip to the machine ip 2.4. make sure the prophet name is different from the names of other two prophet node 2.5. change the rpc-addr ip to the machine ip 2.6. change the client-urls ip to the machine ip 2.7. change the peer-urls ip to the machine ip 2.8. make sure the dir-data is different from the other nodes in the cluster 3. set up the other two prophet nodes 3.1. apply the above 8 steps of prophet genesis node setting 3.2. change the prophet join address from empty string to the prophet genesis node's peer-urls 4. set up pure storage node 4.1. make sure the nodeID is unique 4.2. change storage-node to false 4.3. change the addr-raft ip to the machine ip 4.4. change the addr-client ip to the machine ip 4.5. In the external-etcd attribute, fill the three empty string with the three client-urls of the three prophet node 4.6. make sure the dir-data is different from the other nodes in the cluster","title":"Deploy MatrixOne on a distributed bare-metal cluster"},{"location":"MatrixOne/Get-Started/set-up-matrixone/#deploy-matrixone-on-a-docker-cluster","text":"Start MatrixOne cluster on docker or kubernetes, please refer to this repo matrixorigin/matrixone-operator","title":"Deploy MatrixOne on a docker cluster"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/","text":"Complete a NYC Test with MatrixOne New York City (NYC) Taxi data set captures detailed information on billions of individual taxi trips in New York City, including pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts(Most of the raw data comes from the NYC Taxi & Limousine Commission). By going through this tutorial, you\u2019ll learn how to complete some queries on NYC Taxi data with MatrixOne. For detail description and instructions for downloading about NYC Taxi Data , you can see: https://github.com/toddwschneider/nyc-taxi-data http://tech.marksblogg.com/billion-nyc-taxi-rides-redshift.html . Before you begin Make sure you have already installed MatrixOne and connected to MatrixOne Server . 1. Download and Import data This section of the tutorial references here , and you can get original information about how to download and import raw data there. The data set has 1.7 billion rows data and takes up 450 GB of space, so make sure there are enough space to hold the data. Install PostgreSQL and PostGIS Both are available via Homebrew on Mac. Download raw data ./download_raw_data.sh && ./remove_bad_rows.sh The remove_bad_rows.sh script fixes two particular files that have a few rows with too many columns. For more detailed information about this, you can see the original references. Initialize database and set up schema ./initialize_database.sh Import taxi and FHV data ./import_trip_data.sh ./import_fhv_trip_data.sh Optional: download and import 2014 Uber data The FiveThirtyEight Uber dataset contains Uber trip records from Apr\u2013Sep 2014. Uber and other FHV (Lyft, Juno, Via, etc.) data is available since Jan 2015 in the TLC's data. ./download_raw_2014_uber_data.sh ./import_2014_uber_trip_data.sh 2. Exporting the data from PostgreSQL COPY ( SELECT trips.id, trips.vendor_id, trips.pickup_datetime, trips.dropoff_datetime, trips.store_and_fwd_flag, trips.rate_code_id, trips.pickup_longitude, trips.pickup_latitude, trips.dropoff_longitude, trips.dropoff_latitude, trips.passenger_count, trips.trip_distance, trips.fare_amount, trips.extra, trips.mta_tax, trips.tip_amount, trips.tolls_amount, trips.ehail_fee, trips.improvement_surcharge, trips.total_amount, trips.payment_type, trips.trip_type, trips.pickup_location_id, trips.dropoff_location_id, cab_types.type cab_type, weather.precipitation rain, weather.snow_depth, weather.snowfall, weather.max_temperature max_temp, weather.min_temperature min_temp, weather.average_wind_speed wind, pick_up.gid pickup_nyct2010_gid, pick_up.ctlabel pickup_ctlabel, pick_up.borocode pickup_borocode, pick_up.boroname pickup_boroname, pick_up.ct2010 pickup_ct2010, pick_up.boroct2010 pickup_boroct2010, pick_up.cdeligibil pickup_cdeligibil, pick_up.ntacode pickup_ntacode, pick_up.ntaname pickup_ntaname, pick_up.puma pickup_puma, drop_off.gid dropoff_nyct2010_gid, drop_off.ctlabel dropoff_ctlabel, drop_off.borocode dropoff_borocode, drop_off.boroname dropoff_boroname, drop_off.ct2010 dropoff_ct2010, drop_off.boroct2010 dropoff_boroct2010, drop_off.cdeligibil dropoff_cdeligibil, drop_off.ntacode dropoff_ntacode, drop_off.ntaname dropoff_ntaname, drop_off.puma dropoff_puma FROM trips LEFT JOIN cab_types ON trips.cab_type_id = cab_types.id LEFT JOIN central_park_weather_observations weather ON weather.date = trips.pickup_datetime::date LEFT JOIN nyct2010 pick_up ON pick_up.gid = trips.pickup_nyct2010_gid LEFT JOIN nyct2010 drop_off ON drop_off.gid = trips.dropoff_nyct2010_gid ) TO '/matrixone/export_data/trips.tsv'; 3. Create tables in MatrixOne CREATE TABLE trips ( trip_id int unsigned, vendor_id varchar(64), pickup_datetime bigint unsigned, dropoff_datetime bigint unsigned, store_and_fwd_flag char(1), rate_code_id smallint unsigned, pickup_longitude double, pickup_latitude double, dropoff_longitude double, dropoff_latitude double, passenger_count smallint unsigned, trip_distance double, distance bigint, fare_amount float, extra float, mta_tax float, tip_amount float, tolls_amount float, ehail_fee float, improvement_surcharge float, total_amount float, payment_type varchar(64), trip_type smallint unsigned, pickup varchar(64), dropoff varchar(64), cab_type varchar(64), precipitation float, snow_depth float, snowfall float, max_temperature smallint, min_temperature smallint, average_wind_speed float, pickup_nyct2010_gid smallint unsigned, pickup_ctlabel varchar(64), pickup_borocode smallint unsigned, pickup_boroname varchar(64), pickup_ct2010 varchar(64), pickup_boroct2010 varchar(64), pickup_cdeligibil char(1), pickup_ntacode varchar(64), pickup_ntaname varchar(64), pickup_puma varchar(64), dropoff_nyct2010_gid smallint unsigned, dropoff_ctlabel varchar(64), dropoff_borocode smallint unsigned, dropoff_boroname varchar(64), dropoff_ct2010 varchar(64), dropoff_boroct2010 varchar(64), dropoff_cdeligibil varchar(64), dropoff_ntacode varchar(64), dropoff_ntaname varchar(64), dropoff_puma varchar(64) ) ; 4. Insert data into the created tables load data infile '/matrixone/export_data/trips.tsv ' into table trips FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. 5. Run Queries # Q1 SELECT cab_type, count(*) FROM trips GROUP BY cab_type; # Q2 SELECT passenger_count, avg(total_amount) FROM trips GROUP BY passenger_count; # Q3 SELECT passenger_count, year(pickup_datetime) as year, count(*) FROM trips GROUP BY passenger_count, year; # Q4 SELECT passenger_count, year(pickup_datetime) as year, round(trip_distance) AS distance, count(*) as count FROM trips GROUP BY passenger_count, year, distance ORDER BY year,count DESC;","title":"NYC Test with MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#complete-a-nyc-test-with-matrixone","text":"New York City (NYC) Taxi data set captures detailed information on billions of individual taxi trips in New York City, including pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts(Most of the raw data comes from the NYC Taxi & Limousine Commission). By going through this tutorial, you\u2019ll learn how to complete some queries on NYC Taxi data with MatrixOne. For detail description and instructions for downloading about NYC Taxi Data , you can see: https://github.com/toddwschneider/nyc-taxi-data http://tech.marksblogg.com/billion-nyc-taxi-rides-redshift.html .","title":"Complete a NYC Test with MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#before-you-begin","text":"Make sure you have already installed MatrixOne and connected to MatrixOne Server .","title":"Before you begin"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#1-download-and-import-data","text":"This section of the tutorial references here , and you can get original information about how to download and import raw data there. The data set has 1.7 billion rows data and takes up 450 GB of space, so make sure there are enough space to hold the data. Install PostgreSQL and PostGIS Both are available via Homebrew on Mac. Download raw data ./download_raw_data.sh && ./remove_bad_rows.sh The remove_bad_rows.sh script fixes two particular files that have a few rows with too many columns. For more detailed information about this, you can see the original references. Initialize database and set up schema ./initialize_database.sh Import taxi and FHV data ./import_trip_data.sh ./import_fhv_trip_data.sh Optional: download and import 2014 Uber data The FiveThirtyEight Uber dataset contains Uber trip records from Apr\u2013Sep 2014. Uber and other FHV (Lyft, Juno, Via, etc.) data is available since Jan 2015 in the TLC's data. ./download_raw_2014_uber_data.sh ./import_2014_uber_trip_data.sh","title":"1. Download and Import data"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#2-exporting-the-data-from-postgresql","text":"COPY ( SELECT trips.id, trips.vendor_id, trips.pickup_datetime, trips.dropoff_datetime, trips.store_and_fwd_flag, trips.rate_code_id, trips.pickup_longitude, trips.pickup_latitude, trips.dropoff_longitude, trips.dropoff_latitude, trips.passenger_count, trips.trip_distance, trips.fare_amount, trips.extra, trips.mta_tax, trips.tip_amount, trips.tolls_amount, trips.ehail_fee, trips.improvement_surcharge, trips.total_amount, trips.payment_type, trips.trip_type, trips.pickup_location_id, trips.dropoff_location_id, cab_types.type cab_type, weather.precipitation rain, weather.snow_depth, weather.snowfall, weather.max_temperature max_temp, weather.min_temperature min_temp, weather.average_wind_speed wind, pick_up.gid pickup_nyct2010_gid, pick_up.ctlabel pickup_ctlabel, pick_up.borocode pickup_borocode, pick_up.boroname pickup_boroname, pick_up.ct2010 pickup_ct2010, pick_up.boroct2010 pickup_boroct2010, pick_up.cdeligibil pickup_cdeligibil, pick_up.ntacode pickup_ntacode, pick_up.ntaname pickup_ntaname, pick_up.puma pickup_puma, drop_off.gid dropoff_nyct2010_gid, drop_off.ctlabel dropoff_ctlabel, drop_off.borocode dropoff_borocode, drop_off.boroname dropoff_boroname, drop_off.ct2010 dropoff_ct2010, drop_off.boroct2010 dropoff_boroct2010, drop_off.cdeligibil dropoff_cdeligibil, drop_off.ntacode dropoff_ntacode, drop_off.ntaname dropoff_ntaname, drop_off.puma dropoff_puma FROM trips LEFT JOIN cab_types ON trips.cab_type_id = cab_types.id LEFT JOIN central_park_weather_observations weather ON weather.date = trips.pickup_datetime::date LEFT JOIN nyct2010 pick_up ON pick_up.gid = trips.pickup_nyct2010_gid LEFT JOIN nyct2010 drop_off ON drop_off.gid = trips.dropoff_nyct2010_gid ) TO '/matrixone/export_data/trips.tsv';","title":"2. Exporting the data from PostgreSQL"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#3-create-tables-in-matrixone","text":"CREATE TABLE trips ( trip_id int unsigned, vendor_id varchar(64), pickup_datetime bigint unsigned, dropoff_datetime bigint unsigned, store_and_fwd_flag char(1), rate_code_id smallint unsigned, pickup_longitude double, pickup_latitude double, dropoff_longitude double, dropoff_latitude double, passenger_count smallint unsigned, trip_distance double, distance bigint, fare_amount float, extra float, mta_tax float, tip_amount float, tolls_amount float, ehail_fee float, improvement_surcharge float, total_amount float, payment_type varchar(64), trip_type smallint unsigned, pickup varchar(64), dropoff varchar(64), cab_type varchar(64), precipitation float, snow_depth float, snowfall float, max_temperature smallint, min_temperature smallint, average_wind_speed float, pickup_nyct2010_gid smallint unsigned, pickup_ctlabel varchar(64), pickup_borocode smallint unsigned, pickup_boroname varchar(64), pickup_ct2010 varchar(64), pickup_boroct2010 varchar(64), pickup_cdeligibil char(1), pickup_ntacode varchar(64), pickup_ntaname varchar(64), pickup_puma varchar(64), dropoff_nyct2010_gid smallint unsigned, dropoff_ctlabel varchar(64), dropoff_borocode smallint unsigned, dropoff_boroname varchar(64), dropoff_ct2010 varchar(64), dropoff_boroct2010 varchar(64), dropoff_cdeligibil varchar(64), dropoff_ntacode varchar(64), dropoff_ntaname varchar(64), dropoff_puma varchar(64) ) ;","title":"3. Create tables in MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#4-insert-data-into-the-created-tables","text":"load data infile '/matrixone/export_data/trips.tsv ' into table trips FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table.","title":"4. Insert data into the created tables"},{"location":"MatrixOne/Get-Started/Tutorial/NYC-test-with-matrixone/#5-run-queries","text":"# Q1 SELECT cab_type, count(*) FROM trips GROUP BY cab_type; # Q2 SELECT passenger_count, avg(total_amount) FROM trips GROUP BY passenger_count; # Q3 SELECT passenger_count, year(pickup_datetime) as year, count(*) FROM trips GROUP BY passenger_count, year; # Q4 SELECT passenger_count, year(pickup_datetime) as year, round(trip_distance) AS distance, count(*) as count FROM trips GROUP BY passenger_count, year, distance ORDER BY year,count DESC;","title":"5. Run Queries"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/","text":"Complete a SSB Test with MatrixOne Star Schema Benchmark\uff08SSB\uff09Test is a popular scenario for OLAP database performance tests. By going through this tutorial, you\u2019ll learn how to complete a SSB Test with MatrixOne. In v0.1.0, only single table can work in MatrixOne. The following contents can be followed to data generation, data importing and querying. Before you begin Make sure you have already installed MatrixOne and connected to MatrixOne Server . 1. Compile dbgen $ git clone git@github.com:vadimtk/ssb-dbgen.git $ cd ssb-dbgen $ make 2. Generate data With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) $ ./dbgen -s 1 -T c $ ./dbgen -s 1 -T l` $ ./dbgen -s 1 -T p $ ./dbgen -s 1 -T s $ ./dbgen -s 1 -T d 3. Create tables in MatrixOne create database if not exists ssb; use ssb drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dim_date; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate char(10), lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate char(10), lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dim_date ( d_datekey int, d_date char (18), d_dayofweek char (9), d_month char (9), d_year int, d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek int, d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE int, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE double, LO_SUPPLYCOST double, LO_TAX double, LO_COMMITDATE int, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); 4. Load data into the created tables If you use dbgen to generate date for ssb, there is still an extra step to replace the \u2018,\u2019 in the end of every line. In the directory of ssb-dbgen, use the following command. $ sed -i 's/.$//' customer.tbl $ sed -i 's/.$//' date.tbl $ sed -i 's/.$//' supplier.tbl $ sed -i 's/.$//' lineorder.tbl $ sed -i 's/.$//' part.tbl Then modify the parameter of system_vars_config.toml to a larger one in matrixone directory, such as 10GB. And restart MatrixOne service. max-entry-bytes = \"10GB\" Load data into related tables with this command in MatrixOne. load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl ' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl ' into table dim_date FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl ' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl ' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. If you want to run a single table SSB query test, there is still one more data files needed for lineorder_flat. You can get the data files directly: https://pan.baidu.com/s/1dCpcKsygdVuHzd-H-RWHFA code: k1rs Load data into lineorder_flat. load data infile '/ssb-dbgen-path/lineorder_flat.tbl ' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; 5. Run SSB Queries # Q1.1 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19930131 AND LO_ORDERDATE>=19930101 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25; # Q1.2 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19920131 AND LO_ORDERDATE>=19920101 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35; # Q1.3 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE = 19920101 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35; # Q2.1 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#11' AND S_REGION = 'AMERICA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.2 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.3 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q3.1 SELECT C_NATION, S_NATION, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19970101 GROUP BY C_NATION, S_NATION, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.2 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.3 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7') AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.4 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4') AND LO_ORDERDATE >= 19971201 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q4.1 SELECT LO_ORDERDATE, C_NATION, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, C_NATION ORDER BY LO_ORDERDATE, C_NATION; # Q4.2 SELECT LO_ORDERDATE, S_NATION, P_CATEGORY, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, S_NATION, P_CATEGORY ORDER BY LO_ORDERDATE, S_NATION, P_CATEGORY; # Q4.3 SELECT LO_ORDERDATE, S_CITY, P_BRAND, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND P_CATEGORY = 'MFGR#14' GROUP BY LO_ORDERDATE, S_CITY, P_BRAND ORDER BY LO_ORDERDATE, S_CITY, P_BRAND;","title":"SSB Test with MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#complete-a-ssb-test-with-matrixone","text":"Star Schema Benchmark\uff08SSB\uff09Test is a popular scenario for OLAP database performance tests. By going through this tutorial, you\u2019ll learn how to complete a SSB Test with MatrixOne. In v0.1.0, only single table can work in MatrixOne. The following contents can be followed to data generation, data importing and querying.","title":"Complete a SSB Test with MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#before-you-begin","text":"Make sure you have already installed MatrixOne and connected to MatrixOne Server .","title":"Before you begin"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#1-compile-dbgen","text":"$ git clone git@github.com:vadimtk/ssb-dbgen.git $ cd ssb-dbgen $ make","title":"1. Compile dbgen"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#2-generate-data","text":"With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) $ ./dbgen -s 1 -T c $ ./dbgen -s 1 -T l` $ ./dbgen -s 1 -T p $ ./dbgen -s 1 -T s $ ./dbgen -s 1 -T d","title":"2. Generate data"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#3-create-tables-in-matrixone","text":"create database if not exists ssb; use ssb drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dim_date; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate char(10), lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate char(10), lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dim_date ( d_datekey int, d_date char (18), d_dayofweek char (9), d_month char (9), d_year int, d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek int, d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE int, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE double, LO_SUPPLYCOST double, LO_TAX double, LO_COMMITDATE int, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) );","title":"3. Create tables in MatrixOne"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#4-load-data-into-the-created-tables","text":"If you use dbgen to generate date for ssb, there is still an extra step to replace the \u2018,\u2019 in the end of every line. In the directory of ssb-dbgen, use the following command. $ sed -i 's/.$//' customer.tbl $ sed -i 's/.$//' date.tbl $ sed -i 's/.$//' supplier.tbl $ sed -i 's/.$//' lineorder.tbl $ sed -i 's/.$//' part.tbl Then modify the parameter of system_vars_config.toml to a larger one in matrixone directory, such as 10GB. And restart MatrixOne service. max-entry-bytes = \"10GB\" Load data into related tables with this command in MatrixOne. load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl ' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl ' into table dim_date FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/supplier.tbl ' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl ' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl ' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. If you want to run a single table SSB query test, there is still one more data files needed for lineorder_flat. You can get the data files directly: https://pan.baidu.com/s/1dCpcKsygdVuHzd-H-RWHFA code: k1rs Load data into lineorder_flat. load data infile '/ssb-dbgen-path/lineorder_flat.tbl ' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n';","title":"4. Load data into the created tables"},{"location":"MatrixOne/Get-Started/Tutorial/SSB-test-with-matrixone/#5-run-ssb-queries","text":"# Q1.1 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19930131 AND LO_ORDERDATE>=19930101 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25; # Q1.2 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE<=19920131 AND LO_ORDERDATE>=19920101 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35; # Q1.3 SELECT sum(LO_EXTENDEDPRICE * LO_DISCOUNT) AS revenue FROM lineorder_flat WHERE LO_ORDERDATE = 19920101 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35; # Q2.1 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#11' AND S_REGION = 'AMERICA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.2 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q2.3 SELECT sum(LO_REVENUE), LO_ORDERDATE, P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY LO_ORDERDATE, P_BRAND ORDER BY LO_ORDERDATE, P_BRAND; # Q3.1 SELECT C_NATION, S_NATION, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19970101 GROUP BY C_NATION, S_NATION, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.2 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.3 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7') AND LO_ORDERDATE >= 19920101 AND LO_ORDERDATE <= 19971231 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q3.4 SELECT C_CITY, S_CITY, LO_ORDERDATE, sum(LO_REVENUE) AS revenue FROM lineorder_flat WHERE (C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7') AND (S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4') AND LO_ORDERDATE >= 19971201 GROUP BY C_CITY, S_CITY, LO_ORDERDATE ORDER BY LO_ORDERDATE asc, revenue desc; # Q4.1 SELECT LO_ORDERDATE, C_NATION, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, C_NATION ORDER BY LO_ORDERDATE, C_NATION; # Q4.2 SELECT LO_ORDERDATE, S_NATION, P_CATEGORY, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND (P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2') GROUP BY LO_ORDERDATE, S_NATION, P_CATEGORY ORDER BY LO_ORDERDATE, S_NATION, P_CATEGORY; # Q4.3 SELECT LO_ORDERDATE, S_CITY, P_BRAND, sum(LO_REVENUE - LO_SUPPLYCOST) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND (LO_ORDERDATE>= 19970101 OR LO_ORDERDATE <= 19981231) AND P_CATEGORY = 'MFGR#14' GROUP BY LO_ORDERDATE, S_CITY, P_BRAND ORDER BY LO_ORDERDATE, S_CITY, P_BRAND;","title":"5. Run SSB Queries"},{"location":"MatrixOne/Get-Started/Tutorial/add_builtin_functions/","text":"A little primer for adding builtin functions add unary functions: In this guide, we use the function abs(get the absolute value) as an example. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/builtin/types.go register builtin functions as operators and we assign each operator a distinct integer number. To add a new function abs, add a new const Abs in the const declaration. const ( Length = iota + overload . NE + 1 Year Round Floor Abs ) In the directory pkg/builtin/unary, create a new go file abs.go. This abs.go file has the following functionalities: 1. function name registration 2. declare all the different parameter types this function accepts, and the different return type when given different parameter types. 3. the stringification method for this function. 4. preparation for function calling and function calling. package unary func init () { } In Golang, init function will be called when a package is initialized. We wrap all abs.go's functionality inside this init function so we don't need to call it explicitly. function name registration func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } In MatrixOne, all letters in a function name will be lowercased during the parsing process, so register function names using only lowercase letters otherwise the function won't be recognized. declare function parameter types and return types. The function abs accepts all numeric types as its parameter(uint8, int8, float32...), we can return a 64bit value covering all different parameter types, or, to optimize the performance of our function, we can return different types with respect to the parameter type. Outside the init function, declare these variables for each pair of parameter type and return type. var argAndRets = [] argsAndRet { {[] types . T { types . T_uint8 }, types . T_uint8 }, {[] types . T { types . T_uint16 }, types . T_uint16 }, {[] types . T { types . T_uint32 }, types . T_uint32 }, {[] types . T { types . T_uint64 }, types . T_uint64 }, {[] types . T { types . T_int8 }, types . T_int8 }, {[] types . T { types . T_int16 }, types . T_int16 }, {[] types . T { types . T_int32 }, types . T_int32 }, {[] types . T { types . T_int64 }, types . T_int64 }, {[] types . T { types . T_float32 }, types . T_float32 }, {[] types . T { types . T_float64 }, types . T_float64 }, } func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } Register parameter types and return types for abs function: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } } Define a stringify function and register abs function type: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type } For simplicity, we demonstrate only two cases where abs function has parameter type float32 and float64. Preparation for function calling: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } Since the result vector has the same type as the original vector, we could use the original vector to store our result when we don't need our original vector anymore in our execution plan(i.e., the reference count of the original vector is 0 or 1). To reuse the original vector when possible: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } For float64 type parameter: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, { Typ : types . T_float64 , ReturnType : types . T_float64 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float64 ) if origVec . Ref == 1 || origVec . Ref == 0 { origVec . Ref = 0 abs . AbsFloat64 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 8 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float64 , Size : 8 }) if err != nil { return nil , err } results := encoding . DecodeFloat64Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) vector . SetCol ( resultVector , abs . AbsFloat64 ( origVecCol , results )) return resultVector , nil }, }, } } Step 2: Implement Abs function In MatrixOne, We put all of our builtin function definition code in the vectorize directory, to implement abs functions, first we need to create a subdirectory abs in this vectorize directory. In this fresh abs directory, create a file abs.go, the place where our abs function implementation code goes. For certain cpu architectures, we could utilize the cpu's intrinsic SIMD instruction to compute the absolute value and hence boost our function's performance, to differentiate function implementations for different cpu architectures, we declare our pure go version of abs function this way: package abs var ( absFloat32 func ([] float32 , [] float32 ) [] float32 absFloat64 func ([] float64 , [] float64 ) [] float64 ) func init () { absFloat32 = absFloat32Pure absFloat64 = absFloat64Pure } func AbsFloat32 ( xs , rs [] float32 ) [] float32 { return absFloat32 ( xs , rs ) } func absFloat32Pure ( xs , rs [] float32 ) [] float32 { } func AbsFloat64 ( xs , rs [] float64 ) [] float64 { return absFloat64 ( xs , rs ) } func absFloat64Pure ( xs , rs [] float64 ) [] float64 { } Inside the absFloat32Pure and absFloat64Pure, we implement our golang version of abs function for float32 and float64 type. func absFloat32Pure ( xs , rs [] float32 ) [] float32 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } func absFloat64Pure ( xs , rs [] float64 ) [] float64 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } Here we go. Now we can fire up MatrixOne and take our abs function for a little spin. mysql > create table abs_test_table ( a float , b double ); Query OK , 0 rows affected ( 0 . 44 sec ) mysql > insert into abs_test_table values ( 12 . 34 , - 43 . 21 ); Query OK , 1 row affected ( 0 . 08 sec ) mysql > insert into abs_test_table values ( - 12 . 34 , 43 . 21 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > insert into abs_test_table values ( 2 . 718 , - 3 . 14 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > select a , b , abs ( a ), abs ( b ) from abs_test_table ; + ----------+----------+---------+---------+ | a | b | abs ( a ) | abs ( b ) | + ----------+----------+---------+---------+ | 12 . 3400 | - 43 . 2100 | 12 . 3400 | 43 . 2100 | | - 12 . 3400 | 43 . 2100 | 12 . 3400 | 43 . 2100 | | 2 . 7180 | - 3 . 1400 | 2 . 7180 | 3 . 1400 | + ----------+----------+---------+---------+ 3 rows in set ( 0 . 01 sec ) Bingo! add binary and variadic functions for MatrixOne: MatrixOne has some neat examples for adding binary and variadic functions(bitAnd function, floor function, etc. ), with some minor corresponding changes, the procedure is quite the same as the unary function. \u200b Special thanks to nnsgmsone !","title":"Add builtin functions"},{"location":"MatrixOne/Get-Started/Tutorial/add_builtin_functions/#a-little-primer-for-adding-builtin-functions","text":"","title":"A little primer for adding builtin functions"},{"location":"MatrixOne/Get-Started/Tutorial/add_builtin_functions/#add-unary-functions","text":"In this guide, we use the function abs(get the absolute value) as an example. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/builtin/types.go register builtin functions as operators and we assign each operator a distinct integer number. To add a new function abs, add a new const Abs in the const declaration. const ( Length = iota + overload . NE + 1 Year Round Floor Abs ) In the directory pkg/builtin/unary, create a new go file abs.go. This abs.go file has the following functionalities: 1. function name registration 2. declare all the different parameter types this function accepts, and the different return type when given different parameter types. 3. the stringification method for this function. 4. preparation for function calling and function calling. package unary func init () { } In Golang, init function will be called when a package is initialized. We wrap all abs.go's functionality inside this init function so we don't need to call it explicitly. function name registration func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } In MatrixOne, all letters in a function name will be lowercased during the parsing process, so register function names using only lowercase letters otherwise the function won't be recognized. declare function parameter types and return types. The function abs accepts all numeric types as its parameter(uint8, int8, float32...), we can return a 64bit value covering all different parameter types, or, to optimize the performance of our function, we can return different types with respect to the parameter type. Outside the init function, declare these variables for each pair of parameter type and return type. var argAndRets = [] argsAndRet { {[] types . T { types . T_uint8 }, types . T_uint8 }, {[] types . T { types . T_uint16 }, types . T_uint16 }, {[] types . T { types . T_uint32 }, types . T_uint32 }, {[] types . T { types . T_uint64 }, types . T_uint64 }, {[] types . T { types . T_int8 }, types . T_int8 }, {[] types . T { types . T_int16 }, types . T_int16 }, {[] types . T { types . T_int32 }, types . T_int32 }, {[] types . T { types . T_int64 }, types . T_int64 }, {[] types . T { types . T_float32 }, types . T_float32 }, {[] types . T { types . T_float64 }, types . T_float64 }, } func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } Register parameter types and return types for abs function: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } } Define a stringify function and register abs function type: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type } For simplicity, we demonstrate only two cases where abs function has parameter type float32 and float64. Preparation for function calling: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } Since the result vector has the same type as the original vector, we could use the original vector to store our result when we don't need our original vector anymore in our execution plan(i.e., the reference count of the original vector is 0 or 1). To reuse the original vector when possible: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } For float64 type parameter: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, { Typ : types . T_float64 , ReturnType : types . T_float64 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float64 ) if origVec . Ref == 1 || origVec . Ref == 0 { origVec . Ref = 0 abs . AbsFloat64 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 8 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float64 , Size : 8 }) if err != nil { return nil , err } results := encoding . DecodeFloat64Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) vector . SetCol ( resultVector , abs . AbsFloat64 ( origVecCol , results )) return resultVector , nil }, }, } } Step 2: Implement Abs function In MatrixOne, We put all of our builtin function definition code in the vectorize directory, to implement abs functions, first we need to create a subdirectory abs in this vectorize directory. In this fresh abs directory, create a file abs.go, the place where our abs function implementation code goes. For certain cpu architectures, we could utilize the cpu's intrinsic SIMD instruction to compute the absolute value and hence boost our function's performance, to differentiate function implementations for different cpu architectures, we declare our pure go version of abs function this way: package abs var ( absFloat32 func ([] float32 , [] float32 ) [] float32 absFloat64 func ([] float64 , [] float64 ) [] float64 ) func init () { absFloat32 = absFloat32Pure absFloat64 = absFloat64Pure } func AbsFloat32 ( xs , rs [] float32 ) [] float32 { return absFloat32 ( xs , rs ) } func absFloat32Pure ( xs , rs [] float32 ) [] float32 { } func AbsFloat64 ( xs , rs [] float64 ) [] float64 { return absFloat64 ( xs , rs ) } func absFloat64Pure ( xs , rs [] float64 ) [] float64 { } Inside the absFloat32Pure and absFloat64Pure, we implement our golang version of abs function for float32 and float64 type. func absFloat32Pure ( xs , rs [] float32 ) [] float32 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } func absFloat64Pure ( xs , rs [] float64 ) [] float64 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } Here we go. Now we can fire up MatrixOne and take our abs function for a little spin. mysql > create table abs_test_table ( a float , b double ); Query OK , 0 rows affected ( 0 . 44 sec ) mysql > insert into abs_test_table values ( 12 . 34 , - 43 . 21 ); Query OK , 1 row affected ( 0 . 08 sec ) mysql > insert into abs_test_table values ( - 12 . 34 , 43 . 21 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > insert into abs_test_table values ( 2 . 718 , - 3 . 14 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > select a , b , abs ( a ), abs ( b ) from abs_test_table ; + ----------+----------+---------+---------+ | a | b | abs ( a ) | abs ( b ) | + ----------+----------+---------+---------+ | 12 . 3400 | - 43 . 2100 | 12 . 3400 | 43 . 2100 | | - 12 . 3400 | 43 . 2100 | 12 . 3400 | 43 . 2100 | | 2 . 7180 | - 3 . 1400 | 2 . 7180 | 3 . 1400 | + ----------+----------+---------+---------+ 3 rows in set ( 0 . 01 sec ) Bingo!","title":"add unary functions:"},{"location":"MatrixOne/Get-Started/Tutorial/add_builtin_functions/#add-binary-and-variadic-functions-for-matrixone","text":"MatrixOne has some neat examples for adding binary and variadic functions(bitAnd function, floor function, etc. ), with some minor corresponding changes, the procedure is quite the same as the unary function. \u200b Special thanks to nnsgmsone !","title":"add binary and variadic functions for MatrixOne:"},{"location":"MatrixOne/Glossary/glossary/","text":"MatrixOne Glossary **","title":"**MatrixOne Glossary**"},{"location":"MatrixOne/Glossary/glossary/#matrixone-glossary","text":"**","title":"MatrixOne Glossary"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/","text":"NYC Test Performance Overview With MatrixOne v0.2.0, we follow the Tutorial to execute NYC Taxi test with a standalone server, and compare the results with that of other products, which shows the performance of MatrixOne in query processing time. note The following test results are the average of the three tests in seconds. Standalone node Info The following server was used: AMD EPYC\u2122 Rome CPU 2.6GHz/3.3GHz, 16 physical cores total, 32 GiB Memory. Query ID MatrixOne 0.2.0 ClickHouse v21.11.4.14 Starrocks v1.19.3 (Only 30M unique data) Q1 8.37 5.99 2.58 Q2 2.67 4.13 2.18 Q3 3.48 4.56 3.43 Q4 5.34 7.09 4.19 SUM 19.86 21.77 12.38 Limitations There are some limitations on quiries in MatrixOne v0.2.0: The filter command WHERE is not surpported The table cannot be partitioned currently, so commands as PARTITION series are not surpported Learn More This page shows the results of NYC Test with MatrixOne. For information on other benchmarks that are available when trying out MatrixOne, see the following: SSB Test with MatrixOne SSB Test Performance","title":"NYC Test Performance"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/#nyc-test-performance","text":"","title":"NYC Test Performance"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/#overview","text":"With MatrixOne v0.2.0, we follow the Tutorial to execute NYC Taxi test with a standalone server, and compare the results with that of other products, which shows the performance of MatrixOne in query processing time. note The following test results are the average of the three tests in seconds.","title":"Overview"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/#standalone-node","text":"Info The following server was used: AMD EPYC\u2122 Rome CPU 2.6GHz/3.3GHz, 16 physical cores total, 32 GiB Memory. Query ID MatrixOne 0.2.0 ClickHouse v21.11.4.14 Starrocks v1.19.3 (Only 30M unique data) Q1 8.37 5.99 2.58 Q2 2.67 4.13 2.18 Q3 3.48 4.56 3.43 Q4 5.34 7.09 4.19 SUM 19.86 21.77 12.38","title":"Standalone node"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/#limitations","text":"There are some limitations on quiries in MatrixOne v0.2.0: The filter command WHERE is not surpported The table cannot be partitioned currently, so commands as PARTITION series are not surpported","title":"Limitations"},{"location":"MatrixOne/Overview/NYC%20Test%20Performance/#learn-more","text":"This page shows the results of NYC Test with MatrixOne. For information on other benchmarks that are available when trying out MatrixOne, see the following: SSB Test with MatrixOne SSB Test Performance","title":"Learn More"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/","text":"SSB Test Performance Overview We present the SSB Test results for MatrixOne with different hardwares and query modes. For instructions to reproduce the SSB test results listed here, see SSB Test with MatrixOne , and if you fail to achieve similar results, there is likely a problem in either the hardware, workload, or test design. In v0.2.0, both single table and multiple tables can work in MatrixOne, and we compared results of MatrixOne with other similar database products. Through the clear comparison of the bar chart, you will see that MatrixOne has an obvious advantage in the query processing time. Recommended server specification: x86 CPU with 16 cores and 64GB memory, with CentOS 7+ OS. note The following test results are the average of the three tests in seconds. In order to show the single-table query performance, we combine five tables into a flat table called lineorder_flat . Standalone node&Single table We use standalone service to execute flat table( lineorder_flat ) queries with MatrixOne, and compared the results with ClickHouse in the same configuration. The table lineorder_flat has 600 million rows data and takes up 220 GB of space. Info The following server was used: AMD EPYC\u2122 Rome CPU 2.6GHz/3.3GHz, 16 physical cores total, 32 GiB Memory. Query ID MatrixOne v0.2.0 ClickHouse v21.11.4.14 Q2 2.71 3.82 Q3.1 4.23 5.01 Q3.2 11.05 21.34 Q4.1 2.94 3.1 Q4.2 4.27 5.32 Q4.3 16.91 26.32 SUM 42.11 64.91 Standalone node&Multiple tables With a standalone server again, now we execute multiple tables queries on the original tables of SSB Test. There are 600 million rows of data in all, and the main table takes up 67 GB of space. Query ID MatrixOne v0.2.0 ClickHouse v21.11.4.14 Starrocks v1.19.3 Q2 13.6 28.05 15.83 Q3.1 12.94 27.81 16.98 Q3.2 23.56 54.84 29.25 Q4.1 13.96 27.2 16.77 Q4.2 19.72 41.82 21.54 Q4.3 46.07 85.99 35.95 SUM 129.85 265.71 136.37 Cluster&Multiple tables There are three nodes in the cluster, each of which is installed as standalone version, and process time is shorter than that of standclone node, demonstrating the overall performance will improve as the number of nodes increases. Query ID MatrixOne v0.2.0 Starrocks v1.19.3 Q2 4.94 6.08 Q3.1 5.85 6.27 Q3.2 9.67 9.79 Q4.1 6.05 6.87 Q4.2 6.87 9.51 Q4.3 20.1 15.55 SUM 53.48 54.07 Limitations We didn't finished all the quiries of SSB Test in MatrixOne v0.2.0 because: The filter command WHERE is not surpported The table cannot be partitioned currently, so commands as PARTITION series are not surpported Learn More This page shows the results of SSB Test with MatrixOne. For information on other benchmarks that are available when trying out MatrixOne, see the following: NYC Test with MatrixOne NYC Test Performance","title":"SSB Test Performance"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#ssb-test-performance","text":"","title":"SSB Test Performance"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#overview","text":"We present the SSB Test results for MatrixOne with different hardwares and query modes. For instructions to reproduce the SSB test results listed here, see SSB Test with MatrixOne , and if you fail to achieve similar results, there is likely a problem in either the hardware, workload, or test design. In v0.2.0, both single table and multiple tables can work in MatrixOne, and we compared results of MatrixOne with other similar database products. Through the clear comparison of the bar chart, you will see that MatrixOne has an obvious advantage in the query processing time. Recommended server specification: x86 CPU with 16 cores and 64GB memory, with CentOS 7+ OS. note The following test results are the average of the three tests in seconds. In order to show the single-table query performance, we combine five tables into a flat table called lineorder_flat .","title":"Overview"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#standalone-nodesingle-table","text":"We use standalone service to execute flat table( lineorder_flat ) queries with MatrixOne, and compared the results with ClickHouse in the same configuration. The table lineorder_flat has 600 million rows data and takes up 220 GB of space. Info The following server was used: AMD EPYC\u2122 Rome CPU 2.6GHz/3.3GHz, 16 physical cores total, 32 GiB Memory. Query ID MatrixOne v0.2.0 ClickHouse v21.11.4.14 Q2 2.71 3.82 Q3.1 4.23 5.01 Q3.2 11.05 21.34 Q4.1 2.94 3.1 Q4.2 4.27 5.32 Q4.3 16.91 26.32 SUM 42.11 64.91","title":"Standalone node&amp;Single table"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#standalone-nodemultiple-tables","text":"With a standalone server again, now we execute multiple tables queries on the original tables of SSB Test. There are 600 million rows of data in all, and the main table takes up 67 GB of space. Query ID MatrixOne v0.2.0 ClickHouse v21.11.4.14 Starrocks v1.19.3 Q2 13.6 28.05 15.83 Q3.1 12.94 27.81 16.98 Q3.2 23.56 54.84 29.25 Q4.1 13.96 27.2 16.77 Q4.2 19.72 41.82 21.54 Q4.3 46.07 85.99 35.95 SUM 129.85 265.71 136.37","title":"Standalone node&amp;Multiple tables"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#clustermultiple-tables","text":"There are three nodes in the cluster, each of which is installed as standalone version, and process time is shorter than that of standclone node, demonstrating the overall performance will improve as the number of nodes increases. Query ID MatrixOne v0.2.0 Starrocks v1.19.3 Q2 4.94 6.08 Q3.1 5.85 6.27 Q3.2 9.67 9.79 Q4.1 6.05 6.87 Q4.2 6.87 9.51 Q4.3 20.1 15.55 SUM 53.48 54.07","title":"Cluster&amp;Multiple tables"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#limitations","text":"We didn't finished all the quiries of SSB Test in MatrixOne v0.2.0 because: The filter command WHERE is not surpported The table cannot be partitioned currently, so commands as PARTITION series are not surpported","title":"Limitations"},{"location":"MatrixOne/Overview/SSB%20Test%20Performance/#learn-more","text":"This page shows the results of SSB Test with MatrixOne. For information on other benchmarks that are available when trying out MatrixOne, see the following: NYC Test with MatrixOne NYC Test Performance","title":"Learn More"},{"location":"MatrixOne/Overview/matrixone-architecture/","text":"MatrixOne Architecture Architecture MatrixOne is totally redesigned. It consists of multiple components and form a complete system. The architecture is as follows: Query Parser Layer Parser: Parses SQL, Streaming Query, or Python language into an abstract syntax tree for further processing. Planner: Finds the best execution plan through rule-based, cost-based optimization algorithms, and transfers abstract syntax tree to plan tree. IR Generator: Converts Python code into an intermediate representation. Computation Layer JIT Compilation: Turns SQL plan tree or IR code into a native program using LLVM at runtime. Vectorized Execution: MatrixOne leverages SIMD instructions to construct vectorized execution pipelines. Cache: Multi-version cache of data, indexes, and metadata for queries. Cluster Management Layer (MatrixCube) MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. Prophet: Used by MatrixCube to manage and schedule the MatrixOne cluster. Transaction Manager: MatrixOne supports distributed transaction of snapshot isolation level. Replicated State Machine: MatrixOne uses RAFT-based consensus algorithms and hyper logic clocks to implement strong consistency of the clusters. Introduction of more advanced state-machine replication protocols is yet to come. Replicated Storage Layer Row Storage: Stores serving workload, metadata, and catalog. Column Storage: Stores analytical workload and materialized views. Storage Provision Layer As an infrastructure agnostic DBMS, MtrixOne stores data in shared storage of S3 / HDFS, or the local disk, on-premise server, hybrid and any cloud, or even smart devices. Learn More This page outlines the architecture design of MatrixOne. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne MySQL Compatibility What\u2018s New","title":"MatrixOne Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#matrixone-architecture","text":"","title":"MatrixOne Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#architecture","text":"MatrixOne is totally redesigned. It consists of multiple components and form a complete system. The architecture is as follows:","title":"Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#query-parser-layer","text":"Parser: Parses SQL, Streaming Query, or Python language into an abstract syntax tree for further processing. Planner: Finds the best execution plan through rule-based, cost-based optimization algorithms, and transfers abstract syntax tree to plan tree. IR Generator: Converts Python code into an intermediate representation.","title":"Query Parser Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#computation-layer","text":"JIT Compilation: Turns SQL plan tree or IR code into a native program using LLVM at runtime. Vectorized Execution: MatrixOne leverages SIMD instructions to construct vectorized execution pipelines. Cache: Multi-version cache of data, indexes, and metadata for queries.","title":"Computation Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#cluster-management-layer-matrixcube","text":"MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. Prophet: Used by MatrixCube to manage and schedule the MatrixOne cluster. Transaction Manager: MatrixOne supports distributed transaction of snapshot isolation level. Replicated State Machine: MatrixOne uses RAFT-based consensus algorithms and hyper logic clocks to implement strong consistency of the clusters. Introduction of more advanced state-machine replication protocols is yet to come.","title":"Cluster Management Layer (MatrixCube)"},{"location":"MatrixOne/Overview/matrixone-architecture/#replicated-storage-layer","text":"Row Storage: Stores serving workload, metadata, and catalog. Column Storage: Stores analytical workload and materialized views.","title":"Replicated Storage Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#storage-provision-layer","text":"As an infrastructure agnostic DBMS, MtrixOne stores data in shared storage of S3 / HDFS, or the local disk, on-premise server, hybrid and any cloud, or even smart devices.","title":"Storage Provision Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#learn-more","text":"This page outlines the architecture design of MatrixOne. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne MySQL Compatibility What\u2018s New","title":"Learn More"},{"location":"MatrixOne/Overview/matrixone-introduction/","text":"MatrixOne Introduction MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures. Key Features Hyperconverged Engine Monolitic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Built-in Streaming Engine With the built-in streaming engine, MatrixOne supports in-database streaming processing by groundbreaking incremental materialized view maintenance. Cloud & Edge Native Real Infrastructure Agnostic MatrixOne supports seemless workload migration and bursting among different locations and infrastructures. Multi-site Active/Active MatrixOne provides industry-leading latency control with optimized consistency protocol. Extreme Performance High Performance Accelerated queries supported by patented vectorized execution as well as optimal computation push down strategies through factorization techniques. Strong Consistency MatrixOne introduces a global, high-performance distributed transaction protocol across storage engines. High Scalability Seamless and non-disruptive scaling by disaggregated storage and compute. User Values Simplify Database Management and Maintenance To solve the problem of high and unpredictable cost of database selection process, management & maintenance due to database overabundance, MatrixOne all-in-one architecture will significantly simplify database management and maintenance, single database can serve multiple data applications. Reduce Data Fragmentation and Inconsistency Data flow and copy between different databases makes data sync and consistency increasingly difficult. The unified incrementally materialized view of MatrixOne makes the downstream can support real-time upstream update, achieve the end-to-end data processing without redundant ETL process. Decoupling Data Architecture From Infrastructure Currently the architecture design across different infrastructures is complicated, causes new data silos between cloud and edge, cloud and on-premise.MatrixOne is designed with unified architecture to support simplified data management and operations across different type of infrastructures. Extremely Fast Complex Query Performance Poor business agility as a result of slow complex queries and redundant intermediate tables in current data warehousing solutions. MatrixOne supports blazing fast experience even for star and snowflake schema queries, improving business agility by real-time analytics. An Solid OLTP-like OLAP Experience Current data warehousing solutions have the following problems such as high latency and absense of immediate visibility for data updates. MatrixOne brings OLTP (Online Transactional Processing) level consistency and high availability to CRUD operations in OLAP (Online Analytical Processing). Seamless and Non-disruptive Scaling It is difficult to balance performance and scalability to achieve optimum price-performance ratio in current data warehousing solutions. MatrixOne's disaggregated storage and compute architecture makes it fully automated and efficient scale in/out and up/down without disrupting applications. Learn More This page outlines the overall introduction of MatrixOne. For information on other options that are available when you what to know more about MatrixOne product design, see the following: MatrixOne Architecture","title":"MatrixOne Introduction"},{"location":"MatrixOne/Overview/matrixone-introduction/#matrixone-introduction","text":"MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures.","title":"MatrixOne Introduction"},{"location":"MatrixOne/Overview/matrixone-introduction/#key-features","text":"","title":"Key Features"},{"location":"MatrixOne/Overview/matrixone-introduction/#hyperconverged-engine","text":"Monolitic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Built-in Streaming Engine With the built-in streaming engine, MatrixOne supports in-database streaming processing by groundbreaking incremental materialized view maintenance.","title":"Hyperconverged Engine"},{"location":"MatrixOne/Overview/matrixone-introduction/#cloud-edge-native","text":"Real Infrastructure Agnostic MatrixOne supports seemless workload migration and bursting among different locations and infrastructures. Multi-site Active/Active MatrixOne provides industry-leading latency control with optimized consistency protocol.","title":"Cloud &amp; Edge Native"},{"location":"MatrixOne/Overview/matrixone-introduction/#extreme-performance","text":"High Performance Accelerated queries supported by patented vectorized execution as well as optimal computation push down strategies through factorization techniques. Strong Consistency MatrixOne introduces a global, high-performance distributed transaction protocol across storage engines. High Scalability Seamless and non-disruptive scaling by disaggregated storage and compute.","title":"Extreme Performance"},{"location":"MatrixOne/Overview/matrixone-introduction/#user-values","text":"Simplify Database Management and Maintenance To solve the problem of high and unpredictable cost of database selection process, management & maintenance due to database overabundance, MatrixOne all-in-one architecture will significantly simplify database management and maintenance, single database can serve multiple data applications. Reduce Data Fragmentation and Inconsistency Data flow and copy between different databases makes data sync and consistency increasingly difficult. The unified incrementally materialized view of MatrixOne makes the downstream can support real-time upstream update, achieve the end-to-end data processing without redundant ETL process. Decoupling Data Architecture From Infrastructure Currently the architecture design across different infrastructures is complicated, causes new data silos between cloud and edge, cloud and on-premise.MatrixOne is designed with unified architecture to support simplified data management and operations across different type of infrastructures. Extremely Fast Complex Query Performance Poor business agility as a result of slow complex queries and redundant intermediate tables in current data warehousing solutions. MatrixOne supports blazing fast experience even for star and snowflake schema queries, improving business agility by real-time analytics. An Solid OLTP-like OLAP Experience Current data warehousing solutions have the following problems such as high latency and absense of immediate visibility for data updates. MatrixOne brings OLTP (Online Transactional Processing) level consistency and high availability to CRUD operations in OLAP (Online Analytical Processing). Seamless and Non-disruptive Scaling It is difficult to balance performance and scalability to achieve optimum price-performance ratio in current data warehousing solutions. MatrixOne's disaggregated storage and compute architecture makes it fully automated and efficient scale in/out and up/down without disrupting applications.","title":"User Values"},{"location":"MatrixOne/Overview/matrixone-introduction/#learn-more","text":"This page outlines the overall introduction of MatrixOne. For information on other options that are available when you what to know more about MatrixOne product design, see the following: MatrixOne Architecture","title":"Learn More"},{"location":"MatrixOne/Overview/mysql-compatibility/","text":"MySQL Compatibility MatrixOne SQL syntax conforms with MySQL 8.0.23 version. SQL Type SQL Syntax Compability with MySQL8.0.23 DDL CREATE DATABASE A database with Chinese name will be displayed incorrectly. Names with Latins support limitedly. ENCRYPTION can be used but doesn't work till now. CREATE TABLE Temporary tables are not supported seperatedly. Partition tables are not supported. Create table .. as clause is not supported now. All column level constraints are not supported now. DEFAULT can be supported now. For cluster table, there should be properties(\"bucket\"=\"n\") in the end of DDL. KEY(column) is not supported yet. CREATE other projects Not supported now. ALTER Not supported now. DROP DATABASE Same as MySQL. DROP TABLE Same as MySQL. Drop Other objects Only DROP INDEX is supported. DML INSERT LOW_PRIORITY, DELAYED, HIGH_PRIORITY are not supported now. Insert with select is not supported now. Batch Insert can be supported less than 5,000 rows. ON DUPLICATE KEY UPDATE is not supported now. DELAYED is not supported now. HAVING clause is not supported now. Names with Latins support limitedly. The current mode is just like only_full_group_by mode in MySQL. DELETE Not supported now. UPDATE Not supported now. SELECT Only INNER JOIN with GROUP BY and ORDER BY is supported in multi table scenarios. Table alias is not supported in INNER JOIN. Sub query is not supported now. Distinct is limitedly support. For clause is not supported now. INTO OUTFILE is not supported now. LOAD DATA Only csv files can be loaded currently. The enclosed character shoud be \"\". FILEDS TERMINATED BY should be \",\" or \" LINES TERMINATED BY should be \"\\n\". SET is not supported now. Local key word is not supported now. Relative path is limited supported now. Only based on mo-server file can be supported. Database Administration Statements SHOW Only show tables and show databases are supported. Show CREATE TABLE and CREATE DATABASE are supported. Where can be supported limitedly. Other statements Not supported now. Utility Statements USE Use database is the same as MySQL. Explain The result of explain a SQL is quite different with MySQL. Other statements Not supported now. Data Types Int/Bigint/Smallint/Tinyint Same as MySQL. char/varchar Same as MySQL. Float/double The precsion is a bit different with MySQL. It will be adjusted in future release. Date Only 'YYYY-MM-DD' and 'YYYYMMDD' formats are supported. Datetime Only 'YYYY-MM-DD HH:MM:SS' and 'YYYYMMDD HH:MM:SS' formats are supported. Other types Not supported now. Operatiors \"+\",\"-\",\"*\",\"/\" Same as MySQL. DIV, %, MOD Not supported now. LIKE, IN Not supported now. NOT, AND, &&,OR, \"||\" Same as MySQL. XOR Not supported now. MAX, MIN, COUNT, AVG Same as MySQL. CAST Supported limitedly.","title":"MySQL Compatibility"},{"location":"MatrixOne/Overview/mysql-compatibility/#mysql-compatibility","text":"MatrixOne SQL syntax conforms with MySQL 8.0.23 version. SQL Type SQL Syntax Compability with MySQL8.0.23 DDL CREATE DATABASE A database with Chinese name will be displayed incorrectly. Names with Latins support limitedly. ENCRYPTION can be used but doesn't work till now. CREATE TABLE Temporary tables are not supported seperatedly. Partition tables are not supported. Create table .. as clause is not supported now. All column level constraints are not supported now. DEFAULT can be supported now. For cluster table, there should be properties(\"bucket\"=\"n\") in the end of DDL. KEY(column) is not supported yet. CREATE other projects Not supported now. ALTER Not supported now. DROP DATABASE Same as MySQL. DROP TABLE Same as MySQL. Drop Other objects Only DROP INDEX is supported. DML INSERT LOW_PRIORITY, DELAYED, HIGH_PRIORITY are not supported now. Insert with select is not supported now. Batch Insert can be supported less than 5,000 rows. ON DUPLICATE KEY UPDATE is not supported now. DELAYED is not supported now. HAVING clause is not supported now. Names with Latins support limitedly. The current mode is just like only_full_group_by mode in MySQL. DELETE Not supported now. UPDATE Not supported now. SELECT Only INNER JOIN with GROUP BY and ORDER BY is supported in multi table scenarios. Table alias is not supported in INNER JOIN. Sub query is not supported now. Distinct is limitedly support. For clause is not supported now. INTO OUTFILE is not supported now. LOAD DATA Only csv files can be loaded currently. The enclosed character shoud be \"\". FILEDS TERMINATED BY should be \",\" or \" LINES TERMINATED BY should be \"\\n\". SET is not supported now. Local key word is not supported now. Relative path is limited supported now. Only based on mo-server file can be supported. Database Administration Statements SHOW Only show tables and show databases are supported. Show CREATE TABLE and CREATE DATABASE are supported. Where can be supported limitedly. Other statements Not supported now. Utility Statements USE Use database is the same as MySQL. Explain The result of explain a SQL is quite different with MySQL. Other statements Not supported now. Data Types Int/Bigint/Smallint/Tinyint Same as MySQL. char/varchar Same as MySQL. Float/double The precsion is a bit different with MySQL. It will be adjusted in future release. Date Only 'YYYY-MM-DD' and 'YYYYMMDD' formats are supported. Datetime Only 'YYYY-MM-DD HH:MM:SS' and 'YYYYMMDD HH:MM:SS' formats are supported. Other types Not supported now. Operatiors \"+\",\"-\",\"*\",\"/\" Same as MySQL. DIV, %, MOD Not supported now. LIKE, IN Not supported now. NOT, AND, &&,OR, \"||\" Same as MySQL. XOR Not supported now. MAX, MIN, COUNT, AVG Same as MySQL. CAST Supported limitedly.","title":"MySQL Compatibility"},{"location":"MatrixOne/Overview/what%27s-new/","text":"What's New The lastest version of MatrixOne is 0.2.0, releases on 6th Jan, 2022. See the following: v0.2.0 Release Notes","title":"What's New"},{"location":"MatrixOne/Overview/what%27s-new/#whats-new","text":"The lastest version of MatrixOne is 0.2.0, releases on 6th Jan, 2022. See the following: v0.2.0 Release Notes","title":"What's New"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-auto-rebalance-scheduling/","text":"Auto-Rebalance & Scheduling MatrixCube is a framework to implement distributed system. For a distributed system, data are stored across many machines. When the number of machines changes, with cluster scaling out or machine crash for example, data need to be moved across machines. Prophet is the key component of MatrixCube for Auto-Rebalance and Scheduling. An Etcd Server is embedded inside Prophet for storing the metadata of the cluster. It has three main objectives to reach: Keep the storage level of each Store balanced. Keep the write/read requests balanced. Keep the logical table distribution balanced. We designed a mechanism of Heartbeat and Event Notify to achieve these objectives. Each Store and Leader Replica will send Hearbeat information to Prophet , Prophet will make scheduling decision based on the information. We need to configure certain Store s to take the duty of Prophet . Store Hearbeat Each Store sends Heartbeat periodically to Prophet , the Heartbeat includes: At the moment, how many Replicas are in this Store . At the moment, how much storage space does this Store have, how much space is already used, how much space remaining. Prophet collects all Heartbeats , and Prophet will understand a global Replica mapping and the storage space of each Store . Based on this information, Prophet sends scheduling orders, moving some Replica s to proper Store s, in order to balance the Replica numbers for each Store . Since each Replica of a Shard is the same size, the storage space is thus equalized. Replica Hearbeat For each Shard , it has several Replicas distributed in several Stores . These Replica s form a Raft-Group and a Leader is elected. This Leader sends periodically Heartbeats to Prophet . This Heartbeat has information as: At the moment, how many Replicas a Shard has, and the latest active time of each Replica . At the moment, who is the Leader Replica . Prophet collects all Hearbeat s and constructs a global Shard Replica and Replica Leader mapping. With this information, Prophet launches scheduling orders under the following circumstances: Add Replica order: if the number of Shard Replica is not enough, look for appropriate Stores to add Replicas . Remove Replica order: if the number of Shard Replica exceeds the limit, delete Replicas in appropriate Stores . Move Replica order: if the number of Shard Replica is not balanced, some Replicas will be moved to achieve the balance. Transfer Leader order: if the Leader number is not balanced in the cluster, some Leaders will be transferred. Event Notify The Heartbeat information collected will be synchronized to all MatrixCube Stores . Each Store will form the global routing table.","title":"Auto Rebalancing and Scheduling"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-auto-rebalance-scheduling/#auto-rebalance-scheduling","text":"MatrixCube is a framework to implement distributed system. For a distributed system, data are stored across many machines. When the number of machines changes, with cluster scaling out or machine crash for example, data need to be moved across machines. Prophet is the key component of MatrixCube for Auto-Rebalance and Scheduling. An Etcd Server is embedded inside Prophet for storing the metadata of the cluster. It has three main objectives to reach: Keep the storage level of each Store balanced. Keep the write/read requests balanced. Keep the logical table distribution balanced. We designed a mechanism of Heartbeat and Event Notify to achieve these objectives. Each Store and Leader Replica will send Hearbeat information to Prophet , Prophet will make scheduling decision based on the information. We need to configure certain Store s to take the duty of Prophet .","title":"Auto-Rebalance &amp; Scheduling"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-auto-rebalance-scheduling/#store-hearbeat","text":"Each Store sends Heartbeat periodically to Prophet , the Heartbeat includes: At the moment, how many Replicas are in this Store . At the moment, how much storage space does this Store have, how much space is already used, how much space remaining. Prophet collects all Heartbeats , and Prophet will understand a global Replica mapping and the storage space of each Store . Based on this information, Prophet sends scheduling orders, moving some Replica s to proper Store s, in order to balance the Replica numbers for each Store . Since each Replica of a Shard is the same size, the storage space is thus equalized.","title":"Store Hearbeat"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-auto-rebalance-scheduling/#replica-hearbeat","text":"For each Shard , it has several Replicas distributed in several Stores . These Replica s form a Raft-Group and a Leader is elected. This Leader sends periodically Heartbeats to Prophet . This Heartbeat has information as: At the moment, how many Replicas a Shard has, and the latest active time of each Replica . At the moment, who is the Leader Replica . Prophet collects all Hearbeat s and constructs a global Shard Replica and Replica Leader mapping. With this information, Prophet launches scheduling orders under the following circumstances: Add Replica order: if the number of Shard Replica is not enough, look for appropriate Stores to add Replicas . Remove Replica order: if the number of Shard Replica exceeds the limit, delete Replicas in appropriate Stores . Move Replica order: if the number of Shard Replica is not balanced, some Replicas will be moved to achieve the balance. Transfer Leader order: if the Leader number is not balanced in the cluster, some Leaders will be transferred.","title":"Replica Hearbeat"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-auto-rebalance-scheduling/#event-notify","text":"The Heartbeat information collected will be synchronized to all MatrixCube Stores . Each Store will form the global routing table.","title":"Event Notify"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/","text":"MatrixCube Introduction MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. Unlike many other distributed systems, MatrixCube is designed as part of the storage nodes. A matrixone distributed deployment doesn't not have dedicated scheduling nodes. MatrixCube cannot work as a standalone module. MatrixCube Architecture Key Concepts There are several key concepts for understanding how MatrixCube works. Store A MatrixCube distributed system consists of several physical computers, our data are stored across these physical computers. We call each computer inside this cluster a Store . Shard Our data in database are organized in tables logically. But for physical storage, the data are split into different partitions to store in order to get better scalability. Each partition is called a Shard . In our design, a new created table is initially a Shard . When the size of the table exceeds the Shard size limit, the Shard will split. Replica To provide reliable service, each Shard is stored not only once, it will have several copy stored in different Stores . We call each copy a Replica . A Shard can have multiple Replica , the data in each Replica are the same. Raft-group and Leader Since multiple Replicas are located in different Stores , once a Replica is updated, the other Replicas must be updated to keep data consistency. When a client makes query to no matter which Replica , it always gets the same result. We deploy Raft protocol to implement the concensus process. The Replicas of a particular Shard group into a Raft-group . In each Raft-group , a Leader is elected to be the representative of this group. All consistent read and write requests are handled only by the leader. Learn more about: How does a Leader get elected in Raft? Data Storage A DataStorage is an interface for implementing distributed storage service. It must be defined in prior to using MatrixCube. DataStorage needs to be implemented based on the characteristics of storage engine. Some common distributed storage service can be easily constructed based on DataStorage , such as Distributed Redis , Distributed Key-Value , Distributed File System etc. A default Key-Value based DataStorage is provided to meet the requirements of most scenarios. Prophet Prophet is a scheduling module. It takes charge of Auto-Rebalance , which keeps the system storage level and read/write throughput level balanced across Stores . The inital 3 Stores of a MatrixCube cluster are all Prophet Nodes . Learn more about How does Prophet handle the scheduling? Raftstore Raftstore is the core component of MatrixCube, it implements the most important features of MatrixCube: Metadata storage: including the metadata of Store , Shard , Raft-log . Multi-Raft management: the relationship between Store , Shard , Replica , Raft-Group , the communication between multiple Raft-Group s, Leader election and re-election. Global Routing: a global routing table will be constructed with the Event Notify mechanism of Prophet . The read/write routing will be based on this routing table. Shard Proxy: a proxy for read/write request for Shard . With the proxy, the detailed implementation of Multi-Raft is senseless and all Store s are equal for users. User can make request to any Store , all requests will be routed to the right Store by Shard Proxy . Learn more about How do the Shard Proxy and Global Routing work? Key Features Strong Consistency MatrixCube provides a strong consistency. It is guaranteed that after any successful data write, the reading afterwards will get the latest value, no matter from which store. Fault Tolerance The distributed storage service implemented by MatrixCube is a fault tolerant and high available service. When a Shard has 2*N+1 Replicas , the system can still work until N+1 Replicas fail. For example, a cluster with 3 Stores can survive with 1 Store failure; a cluster with 5 Stores can survive with 2 Stores failure. Shard Splitting There is a certain limit to a Shard size. Whenever a Shard exceeds its storage limit, MatrixCube splits a Shard into two Shards and keep each Shard with the same storage level. You can checkout a more detailed descripition about this process with How does the Shard Splitting work? . Auto-Rebalance A distributed system should leverage all the computation power and storage of all nodes. For a MatrixCube cluster, when there is an increase or decrease of Stores , an Auto-Rebalance will occur, which moves data across Stores to reach balance for each single Store . Learn more about: How does the Auto-Rebalance work? . Scale-out With shard splitting and auto-rebalance, a MatrixCube distributed system is capable of scaling out. The cluster storage and throughput capability are proportional to the number of Stores . User-defined storage engine MatrixCube has no limit to standalone data storage engine. Any storage engine implementing DataStorage interface defined by MatrixCube could construct a MatrixCube-based distributed system. By default, MatrixCube provides a Pebble -based Key-Value storage engine. ( Pebble is a Go version of RocksDB ). User-defined Read/Write As a general distributed framework, different distributed storage system could be build based on MatrixCube. User can also customize their read/write commands. As long as it works in a standalone version, MatrixCube can help you upgrading it to a distributed version.","title":"MatrixCube Introduction"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#matrixcube-introduction","text":"MatrixCube is a fundamental library for building distributed systems, which offers guarantees about reliability, consistency, and scalability. It is designed to facilitate distributed, stateful application building to allow developers only need to focus on the business logic on a single node. MatrixCube is currently built upon multi-raft to provide replicated state machine and will migrate to Paxos families to increase friendliness to scenarios spanning multiple data centers. Unlike many other distributed systems, MatrixCube is designed as part of the storage nodes. A matrixone distributed deployment doesn't not have dedicated scheduling nodes. MatrixCube cannot work as a standalone module.","title":"MatrixCube Introduction"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#matrixcube-architecture","text":"","title":"MatrixCube Architecture"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#key-concepts","text":"There are several key concepts for understanding how MatrixCube works.","title":"Key Concepts"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#store","text":"A MatrixCube distributed system consists of several physical computers, our data are stored across these physical computers. We call each computer inside this cluster a Store .","title":"Store"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#shard","text":"Our data in database are organized in tables logically. But for physical storage, the data are split into different partitions to store in order to get better scalability. Each partition is called a Shard . In our design, a new created table is initially a Shard . When the size of the table exceeds the Shard size limit, the Shard will split.","title":"Shard"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#replica","text":"To provide reliable service, each Shard is stored not only once, it will have several copy stored in different Stores . We call each copy a Replica . A Shard can have multiple Replica , the data in each Replica are the same.","title":"Replica"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#raft-group-and-leader","text":"Since multiple Replicas are located in different Stores , once a Replica is updated, the other Replicas must be updated to keep data consistency. When a client makes query to no matter which Replica , it always gets the same result. We deploy Raft protocol to implement the concensus process. The Replicas of a particular Shard group into a Raft-group . In each Raft-group , a Leader is elected to be the representative of this group. All consistent read and write requests are handled only by the leader. Learn more about: How does a Leader get elected in Raft?","title":"Raft-group and Leader"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#data-storage","text":"A DataStorage is an interface for implementing distributed storage service. It must be defined in prior to using MatrixCube. DataStorage needs to be implemented based on the characteristics of storage engine. Some common distributed storage service can be easily constructed based on DataStorage , such as Distributed Redis , Distributed Key-Value , Distributed File System etc. A default Key-Value based DataStorage is provided to meet the requirements of most scenarios.","title":"Data Storage"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#prophet","text":"Prophet is a scheduling module. It takes charge of Auto-Rebalance , which keeps the system storage level and read/write throughput level balanced across Stores . The inital 3 Stores of a MatrixCube cluster are all Prophet Nodes . Learn more about How does Prophet handle the scheduling?","title":"Prophet"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#raftstore","text":"Raftstore is the core component of MatrixCube, it implements the most important features of MatrixCube: Metadata storage: including the metadata of Store , Shard , Raft-log . Multi-Raft management: the relationship between Store , Shard , Replica , Raft-Group , the communication between multiple Raft-Group s, Leader election and re-election. Global Routing: a global routing table will be constructed with the Event Notify mechanism of Prophet . The read/write routing will be based on this routing table. Shard Proxy: a proxy for read/write request for Shard . With the proxy, the detailed implementation of Multi-Raft is senseless and all Store s are equal for users. User can make request to any Store , all requests will be routed to the right Store by Shard Proxy . Learn more about How do the Shard Proxy and Global Routing work?","title":"Raftstore"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#key-features","text":"","title":"Key Features"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#strong-consistency","text":"MatrixCube provides a strong consistency. It is guaranteed that after any successful data write, the reading afterwards will get the latest value, no matter from which store.","title":"Strong Consistency"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#fault-tolerance","text":"The distributed storage service implemented by MatrixCube is a fault tolerant and high available service. When a Shard has 2*N+1 Replicas , the system can still work until N+1 Replicas fail. For example, a cluster with 3 Stores can survive with 1 Store failure; a cluster with 5 Stores can survive with 2 Stores failure.","title":"Fault Tolerance"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#shard-splitting","text":"There is a certain limit to a Shard size. Whenever a Shard exceeds its storage limit, MatrixCube splits a Shard into two Shards and keep each Shard with the same storage level. You can checkout a more detailed descripition about this process with How does the Shard Splitting work? .","title":"Shard Splitting"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#auto-rebalance","text":"A distributed system should leverage all the computation power and storage of all nodes. For a MatrixCube cluster, when there is an increase or decrease of Stores , an Auto-Rebalance will occur, which moves data across Stores to reach balance for each single Store . Learn more about: How does the Auto-Rebalance work? .","title":"Auto-Rebalance"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#scale-out","text":"With shard splitting and auto-rebalance, a MatrixCube distributed system is capable of scaling out. The cluster storage and throughput capability are proportional to the number of Stores .","title":"Scale-out"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#user-defined-storage-engine","text":"MatrixCube has no limit to standalone data storage engine. Any storage engine implementing DataStorage interface defined by MatrixCube could construct a MatrixCube-based distributed system. By default, MatrixCube provides a Pebble -based Key-Value storage engine. ( Pebble is a Go version of RocksDB ).","title":"User-defined storage engine"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-introduction/#user-defined-readwrite","text":"As a general distributed framework, different distributed storage system could be build based on MatrixCube. User can also customize their read/write commands. As long as it works in a standalone version, MatrixCube can help you upgrading it to a distributed version.","title":"User-defined Read/Write"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-proxy-routing/","text":"Shard Proxy and Global Routing A distributed system consists of multiple servers. A lot of complicated traffic and coordination mechanisms are implemented to make the data stored in all servers balanced and the service equally scaled. But users usually don't care and have little intention to understand the distributed detail. Therefore, we designed a Shard Proxy to get a simple user experience just like working with a standalone database.The Shard Proxy is a central module to accept all user read/write requests. For example, when a user is quering for a certain table from a database. For a distributed database system, this request is actually looking for a Shard in a ceratin Store . A user can send this request to any Store of the system. The Shard Proxy of the Store will take that request, it will look up for the Global Routing table to find the correct Store . As we have explained in the Raft Group and Leader , Leader is the representative of a Raft Group , all read and write requests are handled only by the leader. Therefore, when a request for certain rows are executed. * Firstly, we need to locate the Shard where these rows are stored. * Secondly, locate the Leader Replica of this Shard group. * Thirdly, route the request to the Store where the Leader Replica is located. * Finally, Leader Replica executes the request and returns response. Example We have a cluster of 3 Stores , and their status are as below: Range Store1 Store2 Store3 Shard1 [key1-key10) Leader Follower Follower Shard2 [key10-key20) Follower Leader Follower Shard3 [key20-key30) Follower Follower Leader A user sends requests on key1, key10 and key20, the following diagram illustrates how the requests gets through Shard Proxy and being routed.","title":"Shard Proxy and Routing"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-proxy-routing/#shard-proxy-and-global-routing","text":"A distributed system consists of multiple servers. A lot of complicated traffic and coordination mechanisms are implemented to make the data stored in all servers balanced and the service equally scaled. But users usually don't care and have little intention to understand the distributed detail. Therefore, we designed a Shard Proxy to get a simple user experience just like working with a standalone database.The Shard Proxy is a central module to accept all user read/write requests. For example, when a user is quering for a certain table from a database. For a distributed database system, this request is actually looking for a Shard in a ceratin Store . A user can send this request to any Store of the system. The Shard Proxy of the Store will take that request, it will look up for the Global Routing table to find the correct Store . As we have explained in the Raft Group and Leader , Leader is the representative of a Raft Group , all read and write requests are handled only by the leader. Therefore, when a request for certain rows are executed. * Firstly, we need to locate the Shard where these rows are stored. * Secondly, locate the Leader Replica of this Shard group. * Thirdly, route the request to the Store where the Leader Replica is located. * Finally, Leader Replica executes the request and returns response.","title":"Shard Proxy and Global Routing"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-proxy-routing/#example","text":"We have a cluster of 3 Stores , and their status are as below: Range Store1 Store2 Store3 Shard1 [key1-key10) Leader Follower Follower Shard2 [key10-key20) Follower Leader Follower Shard3 [key20-key30) Follower Follower Leader A user sends requests on key1, key10 and key20, the following diagram illustrates how the requests gets through Shard Proxy and being routed.","title":"Example"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-shard-splitting/","text":"Shard Splitting A Shard is a data partition, or a data slice. A distributed system ususally cut a big data trunk to pieces, and put these pieces to different machines to increase the overall storage capability and handle greater workloads. A Shard will also have several Replicas to maintain a high availability. All these Replicas form a Raft-Group . In our design, a created new table is a Shard . A Shard has a certain size limit defined by a user-defined parameter. As data size of a table increases, it will exceed the size limit of a Shard . At this moment, a Shard Splitting will occur. The original Shard will be cut in into two Shards , each Shard has a relatively equal storage level. In the meantime, all other Replicas of this Raft-Group will be splitted with the same behavior. The original Raft-Group will be removed, and two new Raft-Groups will be created . Once two new Raft-Groups are created, a re-election will immediately be hold. In most cases, the original Replica leader will still be elected as leaders . The belowing diagram illustrates how the shard splitting works:","title":"Shard Splitting"},{"location":"MatrixOne/Overview/matrixcube/matrixcube-shard-splitting/#shard-splitting","text":"A Shard is a data partition, or a data slice. A distributed system ususally cut a big data trunk to pieces, and put these pieces to different machines to increase the overall storage capability and handle greater workloads. A Shard will also have several Replicas to maintain a high availability. All these Replicas form a Raft-Group . In our design, a created new table is a Shard . A Shard has a certain size limit defined by a user-defined parameter. As data size of a table increases, it will exceed the size limit of a Shard . At this moment, a Shard Splitting will occur. The original Shard will be cut in into two Shards , each Shard has a relatively equal storage level. In the meantime, all other Replicas of this Raft-Group will be splitted with the same behavior. The original Raft-Group will be removed, and two new Raft-Groups will be created . Once two new Raft-Groups are created, a re-election will immediately be hold. In most cases, the original Replica leader will still be elected as leaders . The belowing diagram illustrates how the shard splitting works:","title":"Shard Splitting"},{"location":"MatrixOne/Reference/Customer-Functions/year/","text":"YEAR() Description The YEAR() or TOYEAR() function returns the year part for a given date (a number from 1000 to 9999). Syntax > YEAR(date) > TOYEAR(date) Arguments Arguments Description date Required. The date/datetime to extract the year from Examples > SELECT YEAR(\"2017-06-15\"); Constraints The date type supports only yyyy-mm-dd and yyyymmddd for now.","title":"YEAR()"},{"location":"MatrixOne/Reference/Customer-Functions/year/#year","text":"","title":"YEAR()"},{"location":"MatrixOne/Reference/Customer-Functions/year/#description","text":"The YEAR() or TOYEAR() function returns the year part for a given date (a number from 1000 to 9999).","title":"Description"},{"location":"MatrixOne/Reference/Customer-Functions/year/#syntax","text":"> YEAR(date) > TOYEAR(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Customer-Functions/year/#arguments","text":"Arguments Description date Required. The date/datetime to extract the year from","title":"Arguments"},{"location":"MatrixOne/Reference/Customer-Functions/year/#examples","text":"> SELECT YEAR(\"2017-06-15\");","title":"Examples"},{"location":"MatrixOne/Reference/Customer-Functions/year/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmddd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/","text":"Data Types MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html Integer Numbers Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615 Real Numbers Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE String Types Data Type Size Syntax String 24 byte CHAR, VARCHAR Time and Date Types Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD DateTime 4 byte second 1970-01-01 00:00:00 2105-12-31 23:59:59 YYYY-MM-DD hh:mm:ss Examples //Create a table named \"numtable\" with 3 attributes of an \"int\", a \"float\" and a \"double\" > create table numtable(id int,fl float, dl double); //Insert a dataset of int, float and double into table \"numtable\" > insert into numtable values(3,1.234567,1.2345678912345678912); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total, of which 3 digits may be after the decimal point. > create table numtable(id int,fl float(5,3)); //Insert a dataset of int, float into table \"numtable\" > insert into numtable values(3,99.123); //Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total. > create table numtable(id int,fl float(23)); //Insert a dataset of int, float into table \"numtable\" > insert into numtable values(1,1.2345678901234567890123456789); //Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\", an \"unsigned smallint\", an \"unsigned int\" and an \"unsigned bigint\" > create table numtable(a tinyint unsigned, b smallint unsigned, c int unsigned, d bigint unsigned); //Insert a dataset of unsigned (tinyint, smallint, int and bigint) into table \"numtable\" > insert into numtable values(255,65535,4294967295,18446744073709551615); //Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names(name varchar(255),age char(255)); //Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names(name, age) values('Abby', '24');","title":"Data Types"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#data-types","text":"MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html","title":"Data Types"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#integer-numbers","text":"Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615","title":"Integer Numbers"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#real-numbers","text":"Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE","title":"Real Numbers"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#string-types","text":"Data Type Size Syntax String 24 byte CHAR, VARCHAR","title":"String Types"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#time-and-date-types","text":"Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD DateTime 4 byte second 1970-01-01 00:00:00 2105-12-31 23:59:59 YYYY-MM-DD hh:mm:ss","title":"Time and Date Types"},{"location":"MatrixOne/Reference/SQL-Reference/data-types/#examples","text":"//Create a table named \"numtable\" with 3 attributes of an \"int\", a \"float\" and a \"double\" > create table numtable(id int,fl float, dl double); //Insert a dataset of int, float and double into table \"numtable\" > insert into numtable values(3,1.234567,1.2345678912345678912); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total, of which 3 digits may be after the decimal point. > create table numtable(id int,fl float(5,3)); //Insert a dataset of int, float into table \"numtable\" > insert into numtable values(3,99.123); //Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total. > create table numtable(id int,fl float(23)); //Insert a dataset of int, float into table \"numtable\" > insert into numtable values(1,1.2345678901234567890123456789); //Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\", an \"unsigned smallint\", an \"unsigned int\" and an \"unsigned bigint\" > create table numtable(a tinyint unsigned, b smallint unsigned, c int unsigned, d bigint unsigned); //Insert a dataset of unsigned (tinyint, smallint, int and bigint) into table \"numtable\" > insert into numtable values(255,65535,4294967295,18446744073709551615); //Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names(name varchar(255),age char(255)); //Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names(name, age) values('Abby', '24');","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/","text":"AVG Description Aggregate function. The AVG() function calculates the average value of the argument. Syntax > AVG(expr) Arguments Arguments Description expr Any numerical expression Returned Value The arithmetic mean, always as Double. NaN if the input parameter is empty. Examples Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT AVG(*) FROM numbers(3); +--------+ | avg(*) | +--------+ | 1 | +--------+ > SELECT AVG(number) FROM numbers(3); +-------------+ | avg(number) | +-------------+ | 1 | +-------------+ > SELECT AVG(number+1) FROM numbers(3); +----------------------+ | avg(plus(number, 1)) | +----------------------+ | 2 | +----------------------+ > SELECT AVG(number+1) AS a FROM numbers(3); +------+ | a | +------+ | 2 | +------+","title":"AVG"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#avg","text":"","title":"AVG"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#description","text":"Aggregate function. The AVG() function calculates the average value of the argument.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#syntax","text":"> AVG(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#arguments","text":"Arguments Description expr Any numerical expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#returned-value","text":"The arithmetic mean, always as Double. NaN if the input parameter is empty.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#examples","text":"Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT AVG(*) FROM numbers(3); +--------+ | avg(*) | +--------+ | 1 | +--------+ > SELECT AVG(number) FROM numbers(3); +-------------+ | avg(number) | +-------------+ | 1 | +-------------+ > SELECT AVG(number+1) FROM numbers(3); +----------------------+ | avg(plus(number, 1)) | +----------------------+ | 2 | +----------------------+ > SELECT AVG(number+1) AS a FROM numbers(3); +------+ | a | +------+ | 2 | +------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/","text":"COUNT Description Aggregate function. The COUNT() function calculates the number of records returned by a select query. Note: NULL values are not counted. Syntax > COUNT(expr) Arguments Arguments Description expr Any expression.This may be a column name, the result of another function, or a math operation. * is also allowed, to indicate pure row counting. Returned Value Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. If there are no matching rows, COUNT() returns 0. Examples Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT count(*) FROM numbers(3); +----------+ | count(*) | +----------+ | 3 | +----------+ > SELECT count(number) FROM numbers(3); +---------------+ | count(number) | +---------------+ | 3 | +---------------+ > SELECT count(number) AS c FROM numbers(3); +------+ | c | +------+ | 3 | +------+","title":"COUNT"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#count","text":"","title":"COUNT"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#description","text":"Aggregate function. The COUNT() function calculates the number of records returned by a select query. Note: NULL values are not counted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#syntax","text":"> COUNT(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#arguments","text":"Arguments Description expr Any expression.This may be a column name, the result of another function, or a math operation. * is also allowed, to indicate pure row counting.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#returned-value","text":"Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. If there are no matching rows, COUNT() returns 0.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#examples","text":"Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT count(*) FROM numbers(3); +----------+ | count(*) | +----------+ | 3 | +----------+ > SELECT count(number) FROM numbers(3); +---------------+ | count(number) | +---------------+ | 3 | +---------------+ > SELECT count(number) AS c FROM numbers(3); +------+ | c | +------+ | 3 | +------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/","text":"MAX Description Aggregate function. The MAX() function calculates the maximum value across a group of values. Syntax > MAX(expr) Arguments Arguments Description expr Any expression Returned Value Returns the maximum value of expr. MAX() may take a string argument, in such cases, it returns the maximum string value. Examples Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT MAX(*) FROM numbers(3); +--------+ | max(*) | +--------+ | 2 | +--------+ > SELECT MAX(number) FROM numbers(3); +-------------+ | max(number) | +-------------+ | 2 | +-------------+ > SELECT MAX(number) AS max FROM numbers(3); +------+ | max | +------+ | 2 | +------+","title":"MAX"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#max","text":"","title":"MAX"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#description","text":"Aggregate function. The MAX() function calculates the maximum value across a group of values.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#syntax","text":"> MAX(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#returned-value","text":"Returns the maximum value of expr. MAX() may take a string argument, in such cases, it returns the maximum string value.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#examples","text":"Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT MAX(*) FROM numbers(3); +--------+ | max(*) | +--------+ | 2 | +--------+ > SELECT MAX(number) FROM numbers(3); +-------------+ | max(number) | +-------------+ | 2 | +-------------+ > SELECT MAX(number) AS max FROM numbers(3); +------+ | max | +------+ | 2 | +------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/","text":"MIN Description Aggregate function. The MAX() function calculates the maximum value across a group of values. Syntax > MIN(expr) Arguments Arguments Description expr Any expression Returned Value Returns the minimum value of expr. MIN() may take a string argument, in such cases, it returns the minimum string value. Examples Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT MIN(*) FROM numbers(3); +--------+ | min(*) | +--------+ | 0 | +--------+ > SELECT MIN(number) FROM numbers(3); +-------------+ | min(number) | +-------------+ | 0 | +-------------+ > SELECT MIN(number) AS min FROM numbers(3); +------+ | min | +------+ | 0 | +------+","title":"MIN"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#min","text":"","title":"MIN"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#description","text":"Aggregate function. The MAX() function calculates the maximum value across a group of values.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#syntax","text":"> MIN(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#returned-value","text":"Returns the minimum value of expr. MIN() may take a string argument, in such cases, it returns the minimum string value.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#examples","text":"Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT MIN(*) FROM numbers(3); +--------+ | min(*) | +--------+ | 0 | +--------+ > SELECT MIN(number) FROM numbers(3); +-------------+ | min(number) | +-------------+ | 0 | +-------------+ > SELECT MIN(number) AS min FROM numbers(3); +------+ | min | +------+ | 0 | +------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/","text":"SUM Description Aggregate function. The SUM() function calculates the sum of a set of values. Note: NULL values are not counted. Syntax > SUM(expr) Arguments Arguments Description expr Any expression Returned Value Returns the sum of expr. A double if the input type is double, otherwise integer. f there are no matching rows, SUM() returns NULL. Examples Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT SUM(*) FROM numbers(3); +--------+ | sum(*) | +--------+ | 3 | +--------+ > SELECT SUM(number) FROM numbers(3); +-------------+ | sum(number) | +-------------+ | 3 | +-------------+ > SELECT SUM(number) AS sum FROM numbers(3); +------+ | sum | +------+ | 3 | +------+ > SELECT SUM(number+2) AS sum FROM numbers(3); +------+ | sum | +------+ | 9 | +------+","title":"SUM"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#sum","text":"","title":"SUM"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#description","text":"Aggregate function. The SUM() function calculates the sum of a set of values. Note: NULL values are not counted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#syntax","text":"> SUM(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#returned-value","text":"Returns the sum of expr. A double if the input type is double, otherwise integer. f there are no matching rows, SUM() returns NULL.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#examples","text":"Note: numbers(N) \u2013 A table for test with the single number column (UInt64) that contains integers from 0 to N-1. > SELECT SUM(*) FROM numbers(3); +--------+ | sum(*) | +--------+ | 3 | +--------+ > SELECT SUM(number) FROM numbers(3); +-------------+ | sum(number) | +-------------+ | 3 | +-------------+ > SELECT SUM(number) AS sum FROM numbers(3); +------+ | sum | +------+ | 3 | +------+ > SELECT SUM(number+2) AS sum FROM numbers(3); +------+ | sum | +------+ | 9 | +------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/","text":"CREATE DATABASE Description Create a database. Syntax > CREATE DATABASE [IF NOT EXISTS] <database_name> [create_option] ... > create_option: [DEFAULT] { CHARACTER SET [=] charset_name | COLLATE [=] collation_name | ENCRYPTION [=] {'Y' | 'N'} } create_database_statement: Examples > CREATE DATABASE test01; > CREATE DATABASE IF NOT EXISTS test01; > CREATE DATABASE test03 DEFAULT CHARACTER SET utf8 collate utf8_general_ci ENCRYPTION 'Y'; > CREATE DATABASE test04 CHARACTER SET=utf8 collate=utf8_general_ci ENCRYPTION='N'; Constraints Only UTF-8 CHARACTER SET is supported for now.","title":"CREATE DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#create-database","text":"","title":"CREATE DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#description","text":"Create a database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#syntax","text":"> CREATE DATABASE [IF NOT EXISTS] <database_name> [create_option] ... > create_option: [DEFAULT] { CHARACTER SET [=] charset_name | COLLATE [=] collation_name | ENCRYPTION [=] {'Y' | 'N'} }","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#create_database_statement","text":"","title":"create_database_statement:"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#examples","text":"> CREATE DATABASE test01; > CREATE DATABASE IF NOT EXISTS test01; > CREATE DATABASE test03 DEFAULT CHARACTER SET utf8 collate utf8_general_ci ENCRYPTION 'Y'; > CREATE DATABASE test04 CHARACTER SET=utf8 collate=utf8_general_ci ENCRYPTION='N';","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#constraints","text":"Only UTF-8 CHARACTER SET is supported for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/","text":"CREATE INDEX Description Create an index on a table column. Syntax > CREATE INDEX index_name ON table_name (column_name) Examples > CREATE INDEX PIndex ON Persons (LastName); Constraints The index can only be applied for a single column. The index type, UNIQUE/FULLTEXT statements are not supported yet.","title":"CREATE INDEX"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/#create-index","text":"","title":"CREATE INDEX"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/#description","text":"Create an index on a table column.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/#syntax","text":"> CREATE INDEX index_name ON table_name (column_name)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/#examples","text":"> CREATE INDEX PIndex ON Persons (LastName);","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-index/#constraints","text":"The index can only be applied for a single column. The index type, UNIQUE/FULLTEXT statements are not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/","text":"CREATE TABLE Description Create a new table. Syntax > CREATE TABLE [IF NOT EXISTS] [db.]table_name ( name1 type1, name2 type2, ... ) create_table_statement: Examples > CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#create-table","text":"","title":"CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#description","text":"Create a new table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#syntax","text":"> CREATE TABLE [IF NOT EXISTS] [db.]table_name ( name1 type1, name2 type2, ... )","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#create_table_statement","text":"","title":"create_table_statement:"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#examples","text":"> CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/","text":"DROP DATABASE Description Drop a database. Syntax > DROP DATABASE [IF EXISTS] <database_name> drop_database_statement: Examples > DROP DATABASE test01;","title":"DROP DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#drop-database","text":"","title":"DROP DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#description","text":"Drop a database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#syntax","text":"> DROP DATABASE [IF EXISTS] <database_name>","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#drop_database_statement","text":"","title":"drop_database_statement:"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#examples","text":"> DROP DATABASE test01;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-index/","text":"DROP INDEX Description DROP INDEX drops the index named index_name from the table table_name. Syntax > DROP INDEX index_name ON table_name; Examples > DROP INDEX PIndex ON Persons;","title":"DROP INDEX"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-index/#drop-index","text":"","title":"DROP INDEX"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-index/#description","text":"DROP INDEX drops the index named index_name from the table table_name.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-index/#syntax","text":"> DROP INDEX index_name ON table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-index/#examples","text":"> DROP INDEX PIndex ON Persons;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/","text":"DROP TABLE Description Deletes the table. Syntax > DROP TABLE [IF EXISTS] [db.]name drop_table_statement: Examples > CREATE TABLE table01(a int); > DROP TABLE table01;","title":"DROP TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#drop-table","text":"","title":"DROP TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#description","text":"Deletes the table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#syntax","text":"> DROP TABLE [IF EXISTS] [db.]name","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#drop_table_statement","text":"","title":"drop_table_statement:"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#examples","text":"> CREATE TABLE table01(a int); > DROP TABLE table01;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/","text":"PRIMARY KEY Description The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields). SQL PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) ); To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, CONSTRAINT PK_Person PRIMARY KEY (ID,LastName) ); Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName). Constraints DROP PRIMARY KEY is not supported yet.","title":"PRIMARY KEY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#primary-key","text":"","title":"PRIMARY KEY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#description","text":"The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#sql-primary-key-on-create-table","text":"The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) ); To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, CONSTRAINT PK_Person PRIMARY KEY (ID,LastName) ); Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).","title":"SQL PRIMARY KEY on CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#constraints","text":"DROP PRIMARY KEY is not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/","text":"CAST Description The CAST() function converts a value (of any type) into the specified datatype. Syntax > CAST(value AS datatype) Parameter Values Parameter Description value Required. The value to convert datatype Required. The datatype to convert to The datatype can be one of the following: Value Description DATE Converts value to DATE. Format: \"YYYY-MM-DD\" DATETIME Converts value to DATETIME. Format: \"YYYY-MM-DD HH:MM:SS\" DECIMAL Converts value to DECIMAL. Use the optional M and D parameters to specify the maximum number of digits (M) and the number of digits following the decimal point (D). TIME Converts value to TIME. Format: \"HH:MM:SS\" CHAR Converts value to CHAR (a fixed length string) NCHAR Converts value to NCHAR (like CHAR, but produces a string with the national character set) SIGNED Converts value to SIGNED (a signed 64-bit integer) UNSIGNED Converts value to UNSIGNED (an unsigned 64-bit integer) BINARY Converts value to BINARY (a binary string) Examples #Convert a value to a DATE datatype: > SELECT CAST(\"2017-08-29\" AS DATE); #Convert a value to a CHAR datatype: > SELECT CAST(150 AS CHAR); #Convert a value to a SIGNED datatype: >SELECT CAST(5-10 AS SIGNED); Constraints","title":"CAST"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#cast","text":"","title":"CAST"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#description","text":"The CAST() function converts a value (of any type) into the specified datatype.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#syntax","text":"> CAST(value AS datatype)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#parameter-values","text":"Parameter Description value Required. The value to convert datatype Required. The datatype to convert to The datatype can be one of the following: Value Description DATE Converts value to DATE. Format: \"YYYY-MM-DD\" DATETIME Converts value to DATETIME. Format: \"YYYY-MM-DD HH:MM:SS\" DECIMAL Converts value to DECIMAL. Use the optional M and D parameters to specify the maximum number of digits (M) and the number of digits following the decimal point (D). TIME Converts value to TIME. Format: \"HH:MM:SS\" CHAR Converts value to CHAR (a fixed length string) NCHAR Converts value to NCHAR (like CHAR, but produces a string with the national character set) SIGNED Converts value to SIGNED (a signed 64-bit integer) UNSIGNED Converts value to UNSIGNED (an unsigned 64-bit integer) BINARY Converts value to BINARY (a binary string)","title":"Parameter Values"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#examples","text":"#Convert a value to a DATE datatype: > SELECT CAST(\"2017-08-29\" AS DATE); #Convert a value to a CHAR datatype: > SELECT CAST(150 AS CHAR); #Convert a value to a SIGNED datatype: >SELECT CAST(5-10 AS SIGNED);","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/cast/#constraints","text":"","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/","text":"INNER JOIN Description The INNER JOIN keyword selects records that have matching values in both tables. Syntax > SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; Parameter Values Parameter Description value Required. The value to convert datatype Required. The datatype to convert to The datatype can be one of the following: Value Description DATE Converts value to DATE. Format: \"YYYY-MM-DD\" DATETIME Converts value to DATETIME. Format: \"YYYY-MM-DD HH:MM:SS\" DECIMAL Converts value to DECIMAL. Use the optional M and D parameters to specify the maximum number of digits (M) and the number of digits following the decimal point (D). TIME Converts value to TIME. Format: \"HH:MM:SS\" CHAR Converts value to CHAR (a fixed length string) NCHAR Converts value to NCHAR (like CHAR, but produces a string with the national character set) SIGNED Converts value to SIGNED (a signed 64-bit integer) UNSIGNED Converts value to UNSIGNED (an unsigned 64-bit integer) BINARY Converts value to BINARY (a binary string) Examples Let's look at a selection from the \"Orders\" table: OrderID CustomerID OrderDate 10308 2 1996-09-18 10309 37 1996-09-19 10310 77 1996-09-20 Then, look at a selection from the \"Customers\" table: CustomerID CustomerName ContactName Country 1 Alfreds Futterkiste Maria Anders Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mexico Notice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column. Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables: > SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID; and it will produce something like this: OrderID CustomerName OrderDate 10308 Ana Trujillo Emparedados y helados 9/18/1996 10365 Antonio Moreno Taquer\u00eda 11/27/1996 10383 Around the Horn 12/16/1996 10355 Around the Horn 11/15/1996 10278 Berglunds snabbk\u00f6p 8/12/1996","title":"INNER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/#inner-join","text":"","title":"INNER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/#description","text":"The INNER JOIN keyword selects records that have matching values in both tables.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/#syntax","text":"> SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/#parameter-values","text":"Parameter Description value Required. The value to convert datatype Required. The datatype to convert to The datatype can be one of the following: Value Description DATE Converts value to DATE. Format: \"YYYY-MM-DD\" DATETIME Converts value to DATETIME. Format: \"YYYY-MM-DD HH:MM:SS\" DECIMAL Converts value to DECIMAL. Use the optional M and D parameters to specify the maximum number of digits (M) and the number of digits following the decimal point (D). TIME Converts value to TIME. Format: \"HH:MM:SS\" CHAR Converts value to CHAR (a fixed length string) NCHAR Converts value to NCHAR (like CHAR, but produces a string with the national character set) SIGNED Converts value to SIGNED (a signed 64-bit integer) UNSIGNED Converts value to UNSIGNED (an unsigned 64-bit integer) BINARY Converts value to BINARY (a binary string)","title":"Parameter Values"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/inner-join/#examples","text":"Let's look at a selection from the \"Orders\" table: OrderID CustomerID OrderDate 10308 2 1996-09-18 10309 37 1996-09-19 10310 77 1996-09-20 Then, look at a selection from the \"Customers\" table: CustomerID CustomerName ContactName Country 1 Alfreds Futterkiste Maria Anders Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Mexico 3 Antonio Moreno Taquer\u00eda Antonio Moreno Mexico Notice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column. Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables: > SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID; and it will produce something like this: OrderID CustomerName OrderDate 10308 Ana Trujillo Emparedados y helados 9/18/1996 10365 Antonio Moreno Taquer\u00eda 11/27/1996 10383 Around the Horn 12/16/1996 10355 Around the Horn 11/15/1996 10278 Berglunds snabbk\u00f6p 8/12/1996","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/","text":"INSERT Description Writing data. Syntax > INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ... Examples > CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#insert","text":"","title":"INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#description","text":"Writing data.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#syntax","text":"> INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#examples","text":"> CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/","text":"LIKE Description The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the LIKE operator: The percent sign (%) represents zero, one, or multiple characters The underscore sign (_) represents one, single character Syntax > SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern; Examples > SELECT * FROM Customers WHERE CustomerName LIKE 'a%'; //The following SQL statement selects all customers with a CustomerName starting with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%a'; //The following SQL statement selects all customers with a CustomerName ending with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%or%'; //The following SQL statement selects all customers with a CustomerName that have \"or\" in any position > SELECT * FROM Customers WHERE CustomerName LIKE '_r%'; //The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position > SELECT * FROM Customers WHERE CustomerName LIKE 'a__%'; //The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length > SELECT * FROM Customers WHERE ContactName LIKE 'a%o'; //The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\" > SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%'; //The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\" Constraints NOT LIKE is not supported for now.","title":"LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/#like","text":"","title":"LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/#description","text":"The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the LIKE operator: The percent sign (%) represents zero, one, or multiple characters The underscore sign (_) represents one, single character","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/#examples","text":"> SELECT * FROM Customers WHERE CustomerName LIKE 'a%'; //The following SQL statement selects all customers with a CustomerName starting with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%a'; //The following SQL statement selects all customers with a CustomerName ending with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%or%'; //The following SQL statement selects all customers with a CustomerName that have \"or\" in any position > SELECT * FROM Customers WHERE CustomerName LIKE '_r%'; //The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position > SELECT * FROM Customers WHERE CustomerName LIKE 'a__%'; //The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length > SELECT * FROM Customers WHERE ContactName LIKE 'a%o'; //The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\" > SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%'; //The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/like/#constraints","text":"NOT LIKE is not supported for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/","text":"LOAD DATA Description The LOAD DATA statement reads rows from a text file into a table at a very high speed. Syntax > LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name' [REPLACE | IGNORE] INTO TABLE tbl_name [PARTITION (partition_name [, partition_name] ...)] [CHARACTER SET charset_name] [{FIELDS | COLUMNS} [TERMINATED BY 'string'] [[OPTIONALLY] ENCLOSED BY 'char'] [ESCAPED BY 'char'] ] [LINES [STARTING BY 'string'] [TERMINATED BY 'string'] ] [IGNORE number {LINES | ROWS}] [(col_name_or_user_var [, col_name_or_user_var] ...)] [SET col_name={expr | DEFAULT} [, col_name={expr | DEFAULT}] ...] Examples The SSB Test is an example of LOAD DATA syntax. Complete a SSB Test with MatrixOne > LOAD DATA INFILE '/ssb-dbgen-path/lineorder_flat.tbl ' INTO TABLE lineorder_flat;","title":"LOAD DATA"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#load-data","text":"","title":"LOAD DATA"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#description","text":"The LOAD DATA statement reads rows from a text file into a table at a very high speed.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#syntax","text":"> LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name' [REPLACE | IGNORE] INTO TABLE tbl_name [PARTITION (partition_name [, partition_name] ...)] [CHARACTER SET charset_name] [{FIELDS | COLUMNS} [TERMINATED BY 'string'] [[OPTIONALLY] ENCLOSED BY 'char'] [ESCAPED BY 'char'] ] [LINES [STARTING BY 'string'] [TERMINATED BY 'string'] ] [IGNORE number {LINES | ROWS}] [(col_name_or_user_var [, col_name_or_user_var] ...)] [SET col_name={expr | DEFAULT} [, col_name={expr | DEFAULT}] ...]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#examples","text":"The SSB Test is an example of LOAD DATA syntax. Complete a SSB Test with MatrixOne > LOAD DATA INFILE '/ssb-dbgen-path/lineorder_flat.tbl ' INTO TABLE lineorder_flat;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/","text":"SELECT Description Retrieves data from a table. Syntax > SELECT [ALL | DISTINCT] select_expr [[AS] alias], ... [INTO variable [, ...]] [ FROM table_references [WHERE expr] [GROUP BY {{col_name | expr | position}, ... | extended_grouping_expr}] [HAVING expr] [ORDER BY {col_name | expr} [ASC | DESC], ...] [LIMIT row_count] [OFFSET row_count] ] Examples > SELECT number FROM numbers(3); +--------+ | number | +--------+ | 0 | | 1 | | 2 | +--------+ > SELECT * FROM t1 WHERE spID>2 AND userID <2 || userID >=2 OR userID < 2 LIMIT 3; > SELECT userID,MAX(score) max_score FROM t1 WHERE userID <2 || userID > 3 GROUP BY userID ORDER BY max_score;","title":"SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#select","text":"","title":"SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#description","text":"Retrieves data from a table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#syntax","text":"> SELECT [ALL | DISTINCT] select_expr [[AS] alias], ... [INTO variable [, ...]] [ FROM table_references [WHERE expr] [GROUP BY {{col_name | expr | position}, ... | extended_grouping_expr}] [HAVING expr] [ORDER BY {col_name | expr} [ASC | DESC], ...] [LIMIT row_count] [OFFSET row_count] ]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#examples","text":"> SELECT number FROM numbers(3); +--------+ | number | +--------+ | 0 | | 1 | | 2 | +--------+ > SELECT * FROM t1 WHERE spID>2 AND userID <2 || userID >=2 OR userID < 2 LIMIT 3; > SELECT userID,MAX(score) max_score FROM t1 WHERE userID <2 || userID > 3 GROUP BY userID ORDER BY max_score;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/","text":"SHOW DATABASES Description Shows the list of databases that exist on the instance. Syntax > SHOW DATABASES [LIKE expr | WHERE expr] Examples > SHOW DATABASES; +----------+ | Database | +----------+ | default | | for_test | | local | | ss | | ss1 | | ss2 | | ss3 | | system | | test | +----------+ 9 rows in set (0.00 sec)","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#show-databases","text":"","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#description","text":"Shows the list of databases that exist on the instance.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#syntax","text":"> SHOW DATABASES [LIKE expr | WHERE expr]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#examples","text":"> SHOW DATABASES; +----------+ | Database | +----------+ | default | | for_test | | local | | ss | | ss1 | | ss2 | | ss3 | | system | | test | +----------+ 9 rows in set (0.00 sec)","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/","text":"SHOW TABLES Description Shows the list of tables in the currently selected database. Syntax > SHOW TABLES [LIKE 'pattern' | WHERE expr | FROM 'pattern' | IN 'pattern'] Examples > SHOW TABLES; +---------------+ | name | +---------------+ | clusters | | contributors | | databases | | functions | | numbers | | numbers_local | | numbers_mt | | one | | processes | | settings | | tables | | tracing | +---------------+","title":"SHOW TABLES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#show-tables","text":"","title":"SHOW TABLES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#description","text":"Shows the list of tables in the currently selected database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#syntax","text":"> SHOW TABLES [LIKE 'pattern' | WHERE expr | FROM 'pattern' | IN 'pattern']","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#examples","text":"> SHOW TABLES; +---------------+ | name | +---------------+ | clusters | | contributors | | databases | | functions | | numbers | | numbers_local | | numbers_mt | | one | | processes | | settings | | tables | | tracing | +---------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/","text":"USE Description The USE statement tells MatrixOne to use the named database as the default (current) database for subsequent statements. Syntax > USE db_name Examples > USE db1; > SELECT COUNT(*) FROM mytable;","title":"USE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#use","text":"","title":"USE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#description","text":"The USE statement tells MatrixOne to use the named database as the default (current) database for subsequent statements.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#syntax","text":"> USE db_name","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#examples","text":"> USE db1; > SELECT COUNT(*) FROM mytable;","title":"Examples"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/","text":"The configuration file is located in matrixone/pkg/config/test/system_vars_config.toml . The 0.1.0 version is a standalone version, only the following parameters should be paied attention to. The other settings should remain default. General Settings Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip sendRow bool false [true, false] send data row while producing dumpEnv bool false [true, false] dump Environment with memEngine Null nodes for testing Debug Settings Parameter Type Default Value Range Functionality level string debug [debug, info, warn, error, fatal] the log output level format string json [json, console] output log style filename string \"\" string value output log filename max-size int64 512 [0 - 314572800] maximum log file size max-days int64 0 [0 - 314572800] maximum log file days kept max-backups int64 0 [0 - 314572800] maximum numbers of old log files to retain Memory Settings Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960","title":"General Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#general-settings","text":"Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip sendRow bool false [true, false] send data row while producing dumpEnv bool false [true, false] dump Environment with memEngine Null nodes for testing","title":"General Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#debug-settings","text":"Parameter Type Default Value Range Functionality level string debug [debug, info, warn, error, fatal] the log output level format string json [json, console] output log style filename string \"\" string value output log filename max-size int64 512 [0 - 314572800] maximum log file size max-days int64 0 [0 - 314572800] maximum log file days kept max-backups int64 0 [0 - 314572800] maximum numbers of old log files to retain","title":"Debug Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#memory-settings","text":"Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960","title":"Memory Settings"},{"location":"MatrixOne/Reference/System-Parameters/distributed-settings/","text":"For a distributed setting, the following parameters should be paied attention to. Configuration Settings To configurate a distributed setting, following parameters need to be modified in the default Configuration file 'system_vars_config.toml'. nodeID nodeID is the Node ID of the cube. In a cluster, each node should have a different nodeID . addr-raft and addr-advertise-raft addr-raft is the address for raft-group rpc communication. It is the 10000 port of the node. addr-raft = \"localhost:10000\" Only docker deployment need adjust addr-advertise-raft For docker deployment, the ip is 0.0.0.0 addr-raft = \"0.0.0.0:10000\" In the case that some clients cannot access the raft-group, addr-advertise-raft must be manually set. addr-advertise-raft = \"${HOST}:10000\" addr-client and addr-advertise-client addr-client is the address for cube service. It is the 20000 port of the node. addr-client = \"localhost:20000\" Only docker deployment need adjust addr-advertise-client For docker deployment, the ip is 0.0.0.0 addr-client = \"0.0.0.0:20000\" In the case that a client cannot access Cube through the default client URLs listened to by Cube, addr-advertise-client must be manually set. addr-advertise-client = \"${HOST}:20000\" dir-data dir-data is the directory for cube data. In a cluster, each node should have a different dir-data . store-heartbeat-duration store-heartbeat-duration is the period for this node to report information to scheduler. It should be less than 10s. prophet name name in Prophet Configs is the name of the node. In a cluster, each node should have a different prophet name. name = \"node0\" rpc-addr and rpc-advertise-addr rpc-addr is the address for other clients to access prophet. It is the 30000 port of the node. rpc-addr = \"localhost:30000\" Only docker deployment need adjust rpc-advertise-addr For docker deployment, the ip is 0.0.0.0 rpc-addr = \"0.0.0.0:30000\" In the case that a client cannot access prophet, rpc-advertise-addr must be manually set. rpc-advertise-addr = \"${HOST}:30000\" storage-node storage-node is whether the node is a pure storage node. For the three prophet nodes, storage-node is true . storage-node = true For pure storage nodes, storage-node is false storage-node = false external-etcd For the three prophet nodes, external-etcd is empty. external-etcd = [\"\", \"\", \"\"] For pure storage nodes, external-etcd is the list of the client-urls of the three prophet nodes, i.e. the 40000 port of the prophet nodes. external-etcd = [\"http://ip_of_prophet_node1:40000\", \"http://ip_of_prophet_node2:40000\", \"http://ip_of_prophet_node3:40000\"] join join is for the second and third prophet nodes to join the raft group. For the first prophet node, join is a empty string. join = \"\" For the second and third prophet node, join is the peer-urls of the first prophet node. join = \"http://ip_of_the_first_prophet_node:40000\" For pure storage nodes, there's no need to adjust join . client-urls and advertise-client-urls client-urls is exposed to other nodes in the cluster. It is 40000 port of the node client-urls = \"http://localhost:40000\" Only docker deployment need adjust advertise-client-urls For docker deployment, the ip is 0.0.0.0 client-urls = \"http://0.0.0.0:40000\" In the case that some clients ccannot access prophet through the default client URLs listened to by prophet, advertise-client-urls must be manually set. advertise-client-urls = \"http://${HOST}:40000 peer-urls and advertise-peer-urls peer-urls is the list of peer URLs to be listened to by a prophet node. It is the 40000 port of the node. peer-urls = \"http://localhost:50000\" Only docker deployment need adjust advertise-peer-urls For docker deployment, the ip is 0.0.0.0 peer-urls = \"http://0.0.0.0:50000\" In the case that a node cannot be listened to by a prophet node, advertise-peer-urls should be manually set. advertise-peer-urls = \"http://${HOST}:50000\" max-replicas max-replicas is the max number of replica in a prophet group. It should be 3. max-replicas = 3","title":"Distributed Settings"},{"location":"MatrixOne/Reference/System-Parameters/distributed-settings/#configuration-settings","text":"To configurate a distributed setting, following parameters need to be modified in the default Configuration file 'system_vars_config.toml'. nodeID nodeID is the Node ID of the cube. In a cluster, each node should have a different nodeID . addr-raft and addr-advertise-raft addr-raft is the address for raft-group rpc communication. It is the 10000 port of the node. addr-raft = \"localhost:10000\" Only docker deployment need adjust addr-advertise-raft For docker deployment, the ip is 0.0.0.0 addr-raft = \"0.0.0.0:10000\" In the case that some clients cannot access the raft-group, addr-advertise-raft must be manually set. addr-advertise-raft = \"${HOST}:10000\" addr-client and addr-advertise-client addr-client is the address for cube service. It is the 20000 port of the node. addr-client = \"localhost:20000\" Only docker deployment need adjust addr-advertise-client For docker deployment, the ip is 0.0.0.0 addr-client = \"0.0.0.0:20000\" In the case that a client cannot access Cube through the default client URLs listened to by Cube, addr-advertise-client must be manually set. addr-advertise-client = \"${HOST}:20000\" dir-data dir-data is the directory for cube data. In a cluster, each node should have a different dir-data . store-heartbeat-duration store-heartbeat-duration is the period for this node to report information to scheduler. It should be less than 10s. prophet name name in Prophet Configs is the name of the node. In a cluster, each node should have a different prophet name. name = \"node0\" rpc-addr and rpc-advertise-addr rpc-addr is the address for other clients to access prophet. It is the 30000 port of the node. rpc-addr = \"localhost:30000\" Only docker deployment need adjust rpc-advertise-addr For docker deployment, the ip is 0.0.0.0 rpc-addr = \"0.0.0.0:30000\" In the case that a client cannot access prophet, rpc-advertise-addr must be manually set. rpc-advertise-addr = \"${HOST}:30000\" storage-node storage-node is whether the node is a pure storage node. For the three prophet nodes, storage-node is true . storage-node = true For pure storage nodes, storage-node is false storage-node = false external-etcd For the three prophet nodes, external-etcd is empty. external-etcd = [\"\", \"\", \"\"] For pure storage nodes, external-etcd is the list of the client-urls of the three prophet nodes, i.e. the 40000 port of the prophet nodes. external-etcd = [\"http://ip_of_prophet_node1:40000\", \"http://ip_of_prophet_node2:40000\", \"http://ip_of_prophet_node3:40000\"] join join is for the second and third prophet nodes to join the raft group. For the first prophet node, join is a empty string. join = \"\" For the second and third prophet node, join is the peer-urls of the first prophet node. join = \"http://ip_of_the_first_prophet_node:40000\" For pure storage nodes, there's no need to adjust join . client-urls and advertise-client-urls client-urls is exposed to other nodes in the cluster. It is 40000 port of the node client-urls = \"http://localhost:40000\" Only docker deployment need adjust advertise-client-urls For docker deployment, the ip is 0.0.0.0 client-urls = \"http://0.0.0.0:40000\" In the case that some clients ccannot access prophet through the default client URLs listened to by prophet, advertise-client-urls must be manually set. advertise-client-urls = \"http://${HOST}:40000 peer-urls and advertise-peer-urls peer-urls is the list of peer URLs to be listened to by a prophet node. It is the 40000 port of the node. peer-urls = \"http://localhost:50000\" Only docker deployment need adjust advertise-peer-urls For docker deployment, the ip is 0.0.0.0 peer-urls = \"http://0.0.0.0:50000\" In the case that a node cannot be listened to by a prophet node, advertise-peer-urls should be manually set. advertise-peer-urls = \"http://${HOST}:50000\" max-replicas max-replicas is the max number of replica in a prophet group. It should be 3. max-replicas = 3","title":"Configuration Settings"},{"location":"MatrixOne/Release-Notes/v0.1.0/","text":"MatrixOne v0.1.0 Release Notes We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers! Docker docker pull matrixorigin/matrixone:0.1.0 Features SQL Following SQL statements are supported in this release. DDL CREATE / DROP DATABASE CREATE / DROP TABLE DML INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE Data Types TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR Operators <, >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST Aggregation Functions COUNT SUM AVG MAX MIN Database Engine MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy. Contributors This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"v0.1.0"},{"location":"MatrixOne/Release-Notes/v0.1.0/#matrixone-v010-release-notes","text":"We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers!","title":"MatrixOne v0.1.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.1.0/#docker","text":"docker pull matrixorigin/matrixone:0.1.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.1.0/#features","text":"","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.1.0/#sql","text":"Following SQL statements are supported in this release.","title":"SQL"},{"location":"MatrixOne/Release-Notes/v0.1.0/#ddl","text":"CREATE / DROP DATABASE CREATE / DROP TABLE","title":"DDL"},{"location":"MatrixOne/Release-Notes/v0.1.0/#dml","text":"INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE","title":"DML"},{"location":"MatrixOne/Release-Notes/v0.1.0/#data-types","text":"TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR","title":"Data Types"},{"location":"MatrixOne/Release-Notes/v0.1.0/#operators","text":"<, >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST","title":"Operators"},{"location":"MatrixOne/Release-Notes/v0.1.0/#aggregation-functions","text":"COUNT SUM AVG MAX MIN","title":"Aggregation Functions"},{"location":"MatrixOne/Release-Notes/v0.1.0/#database-engine","text":"MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy.","title":"Database Engine"},{"location":"MatrixOne/Release-Notes/v0.1.0/#contributors","text":"This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.2.0/","text":"MatrixOne v0.2.0 Release Notes We are excited to announce MatrixOne 0.2.0 release. Cheers! Docker docker pull matrixorigin/matrixone:0.2.0 Features Support automatic rebalancing for the built-in AOE columnar storage engine. Introduce new SQL parser. Introduce factorized SQL execution engine which is the fastest MPP in Golang. Support CREATE / DROP INDEX. Support PRIMARY KEY in CREATE TABLE. Support more data types for SQL binary operators. Support equi join with group by or aggregation statements. Support new types of DATE and DATETIME. Database Engine For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence. Contributors This release includes 243 commits by 21 authors. BingLin Chang (@decster) Chen Mingsong\uff08@m-schen\uff09 Nan Deng (@dengn) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) broccoliSpicy(@broccoliSpicy) Ryan Wang(@wanglei4687) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"v0.2.0"},{"location":"MatrixOne/Release-Notes/v0.2.0/#matrixone-v020-release-notes","text":"We are excited to announce MatrixOne 0.2.0 release. Cheers!","title":"MatrixOne v0.2.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.2.0/#docker","text":"docker pull matrixorigin/matrixone:0.2.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.2.0/#features","text":"Support automatic rebalancing for the built-in AOE columnar storage engine. Introduce new SQL parser. Introduce factorized SQL execution engine which is the fastest MPP in Golang. Support CREATE / DROP INDEX. Support PRIMARY KEY in CREATE TABLE. Support more data types for SQL binary operators. Support equi join with group by or aggregation statements. Support new types of DATE and DATETIME.","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.2.0/#database-engine","text":"For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence.","title":"Database Engine"},{"location":"MatrixOne/Release-Notes/v0.2.0/#contributors","text":"This release includes 243 commits by 21 authors. BingLin Chang (@decster) Chen Mingsong\uff08@m-schen\uff09 Nan Deng (@dengn) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) broccoliSpicy(@broccoliSpicy) Ryan Wang(@wanglei4687) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"}]}