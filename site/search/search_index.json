{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MatrixOne Documentation Welcome to MatrixOne documentation! MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures. If you find documentation issues, feel free to create an Issue to let us know or directly create a Pull Request to help fix or update it. Recommended articles Overview Get Started Reference MatrixOne Introduction Install MatrixOne SQL Reference MatrixOne Architecture Connect to MatrixOne Server v0.5.1 Release Notes Mysql Compatibility SSB Test with MatrixOne","title":"Home"},{"location":"#matrixone-documentation","text":"Welcome to MatrixOne documentation! MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple datacenters, clouds, edges and other heterogenous infrastructures. If you find documentation issues, feel free to create an Issue to let us know or directly create a Pull Request to help fix or update it.","title":"MatrixOne Documentation"},{"location":"#recommended-articles","text":"Overview Get Started Reference MatrixOne Introduction Install MatrixOne SQL Reference MatrixOne Architecture Connect to MatrixOne Server v0.5.1 Release Notes Mysql Compatibility SSB Test with MatrixOne","title":"Recommended articles"},{"location":"MatrixOne/glossary/","text":"Glossary Terms It's helpful to understand a few terms before reading our architecture documentation. Term Definition A AST (Abstract syntax tree) Abstract Syntax Trees or ASTs are tree representations of code. They are a fundamental part of the way a compiler works. C Cluster A distributed MatrixOne deployment, which acts as a single logical application. E Explicit Transactions Explicit Transaction has the beginning, ending and rollback of transactions with the command Begin Transaction, Commit Transaction and Rollback Transaction. I Implicit Transactions Implicit Transaction is the auto commit. There is no beginning or ending of the transaction. S Snapshot Isolation (SI) Snapshot Isolation is a multi-version concurrency control approach that is widely used in practice. MatrixOne supports distributed transaction of snapshot isolation level. Concepts MatrixOne relies heavily on the following concepts. Being familiar with them will help you understand what our architecture achieves. Term Definition A Auto-Rebalance A modern distributed database should do more than just split data amongst a number of servers. The automatic process of storage and workload distribution among servers is called an Auto-Rebalance. C Consistency MatrixOne supports a strong consistency. It is guaranted that after any successful data write, the reading afterwards will get the latest value, no matter from which store. E Execution Plan An execution plan in a database is a simple graphical representation of the operations that the query optimizer generates to calculate the most efficient way to return a set of results. F Fault-Tolerance Fault-Tolerance simply means a system's ability to continue operating uninterrupted despite the failure of one or more of its components. M Monolithic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Materialized View A materialized view is a pre-computed data set derived from a query specification (the SELECT in the view definition) and stored for later use. Materialized view is usually used for increasing performance and efficiency. Metadata Metadata is the data that describes the structure and creation method of data in a database. P Paxos Paxos is an algorithm that is used to achieve consensus among a distributed set of computers that communicate via an asynchronous network. R Raft Raft is a consensus algorithm that is designed to be easy to understand. It's equivalent to Paxos in fault-tolerance and performance. The difference is that it's decomposed into relatively independent subproblems, and it cleanly addresses all major pieces needed for practical systems. Raft Group and Leader Raft defines a strong, single leader and number of followers in a group of peers. The group represents a replicated state machine. Only the leader may service client requests. The leader replicates actions to the followers. S SIMD instruction SIMD is short for Single Instruction/Multiple Data, while the term SIMD operations refers to a computing method that enables processing of multiple data with a single instruction. T Transaction A set of operations performed on your database that satisfy the requirements of ACID semantics. V Vectorized Execution Vectorized data processing helps with developing faster analytical query engines by making efficient utilization of CPU cache. Arrow's columnar format allows to use lightweight schemes like dictionary encoding, bit packing, and run length encoding, which favor query performance over compression ratio.","title":"Glossary"},{"location":"MatrixOne/glossary/#glossary","text":"","title":"Glossary"},{"location":"MatrixOne/glossary/#terms","text":"It's helpful to understand a few terms before reading our architecture documentation. Term Definition A AST (Abstract syntax tree) Abstract Syntax Trees or ASTs are tree representations of code. They are a fundamental part of the way a compiler works. C Cluster A distributed MatrixOne deployment, which acts as a single logical application. E Explicit Transactions Explicit Transaction has the beginning, ending and rollback of transactions with the command Begin Transaction, Commit Transaction and Rollback Transaction. I Implicit Transactions Implicit Transaction is the auto commit. There is no beginning or ending of the transaction. S Snapshot Isolation (SI) Snapshot Isolation is a multi-version concurrency control approach that is widely used in practice. MatrixOne supports distributed transaction of snapshot isolation level.","title":"Terms"},{"location":"MatrixOne/glossary/#concepts","text":"MatrixOne relies heavily on the following concepts. Being familiar with them will help you understand what our architecture achieves. Term Definition A Auto-Rebalance A modern distributed database should do more than just split data amongst a number of servers. The automatic process of storage and workload distribution among servers is called an Auto-Rebalance. C Consistency MatrixOne supports a strong consistency. It is guaranted that after any successful data write, the reading afterwards will get the latest value, no matter from which store. E Execution Plan An execution plan in a database is a simple graphical representation of the operations that the query optimizer generates to calculate the most efficient way to return a set of results. F Fault-Tolerance Fault-Tolerance simply means a system's ability to continue operating uninterrupted despite the failure of one or more of its components. M Monolithic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Materialized View A materialized view is a pre-computed data set derived from a query specification (the SELECT in the view definition) and stored for later use. Materialized view is usually used for increasing performance and efficiency. Metadata Metadata is the data that describes the structure and creation method of data in a database. P Paxos Paxos is an algorithm that is used to achieve consensus among a distributed set of computers that communicate via an asynchronous network. R Raft Raft is a consensus algorithm that is designed to be easy to understand. It's equivalent to Paxos in fault-tolerance and performance. The difference is that it's decomposed into relatively independent subproblems, and it cleanly addresses all major pieces needed for practical systems. Raft Group and Leader Raft defines a strong, single leader and number of followers in a group of peers. The group represents a replicated state machine. Only the leader may service client requests. The leader replicates actions to the followers. S SIMD instruction SIMD is short for Single Instruction/Multiple Data, while the term SIMD operations refers to a computing method that enables processing of multiple data with a single instruction. T Transaction A set of operations performed on your database that satisfy the requirements of ACID semantics. V Vectorized Execution Vectorized data processing helps with developing faster analytical query engines by making efficient utilization of CPU cache. Arrow's columnar format allows to use lightweight schemes like dictionary encoding, bit packing, and run length encoding, which favor query performance over compression ratio.","title":"Concepts"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-aggregation/","text":"Explain Statements Using Aggregation The aggregation may be used in SQL, and the execution plan of the aggregate query can be interpreted through EXPLAIN statements. Example We have prepared a simple example to help you understand the execution plan for interpreting the Aggregation using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); Hash Aggregation The Hash Aggregation algorithm uses a hash table to store intermediate results while performing aggregation. It executes in parallel using multiple threads but consumes more memory than Stream Aggregation. The following is an example of the Hash Aggregation operator: > SELECT /*+ HASH_AGG() */ count ( * ) FROM t1 ; + ----------+ | count ( * ) | + ----------+ | 9 | + ----------+ 1 row in set ( 0 . 01 sec ) mysql > EXPLAIN SELECT /*+ HASH_AGG() */ count ( * ) FROM t1 ; + -------------------------------------------+ | QUERY PLAN | + -------------------------------------------+ | Project | | -> Aggregate | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on db1 . t1 | + -------------------------------------------+ 4 rows in set ( 0 . 01 sec )","title":"Explain Statements Using Aggregation"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-aggregation/#explain-statements-using-aggregation","text":"The aggregation may be used in SQL, and the execution plan of the aggregate query can be interpreted through EXPLAIN statements.","title":"Explain Statements Using Aggregation"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-aggregation/#example","text":"We have prepared a simple example to help you understand the execution plan for interpreting the Aggregation using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' );","title":"Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-aggregation/#hash-aggregation","text":"The Hash Aggregation algorithm uses a hash table to store intermediate results while performing aggregation. It executes in parallel using multiple threads but consumes more memory than Stream Aggregation. The following is an example of the Hash Aggregation operator: > SELECT /*+ HASH_AGG() */ count ( * ) FROM t1 ; + ----------+ | count ( * ) | + ----------+ | 9 | + ----------+ 1 row in set ( 0 . 01 sec ) mysql > EXPLAIN SELECT /*+ HASH_AGG() */ count ( * ) FROM t1 ; + -------------------------------------------+ | QUERY PLAN | + -------------------------------------------+ | Project | | -> Aggregate | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on db1 . t1 | + -------------------------------------------+ 4 rows in set ( 0 . 01 sec )","title":"Hash Aggregation"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-joins/","text":"Explain Statements Using JOIN The SQL Optimizer needs to decide in which order tables should be joined and what is the most efficient join algorithm for a particular SQL statement. Example We have prepared a simple example to help you understand the execution plan for interpreting the JOIN using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); Hash Join In the Hash Join operation, MatrixOne first reads the smaller tables in t1 and t2 and uses a hash function for each value to be joined to obtain a hash table. Then each row of the other table is scanned, and the hash value is calculated and compared with the hash table generated in the previous step. A new join table is generated based on the joinif any values meet the join criteria. The hash join operator is multi-threaded in MatrixOne and executes in parallel. An example of hash join is as below: > SELECT /*+ HASH_JOIN(t1, t2) */ * FROM t1 , t2 WHERE t1 . id = t2 . id ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 1 | 1 | 4 | 3 | 1113 . 32 | 111332 | 1113 | hello | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 1 | 1 | 4 | 3 | 1113 . 32 | 111332 | 1113 | hello | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 2 | 2 | 5 | 2 | 2252 . 05 | 225205 | 2252 | bye | sub query | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 2 | 2 | 5 | 2 | 2252 . 05 | 225205 | 2252 | bye | sub query | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 9 rows in set ( 0 . 00 sec ) mysql > EXPLAIN SELECT /*+ HASH_JOIN(t1, t2) */ * FROM t1 , t2 WHERE t1 . id = t2 . id ; + ------------------------------------+ | QUERY PLAN | + ------------------------------------+ | Project | | -> Join | | Join Type : INNER | | Join Cond : ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Table Scan on db1 . t2 | + ------------------------------------+ 6 rows in set ( 0 . 01 sec ) MatrixOne executes the Hash Join operator in the following order: Scan table t2 and t1 in parallel. Execute the JOIN filter query: (t1.id = t2.id) . Execute INNER JOIN .","title":"Explain Statements Using JOIN"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-joins/#explain-statements-using-join","text":"The SQL Optimizer needs to decide in which order tables should be joined and what is the most efficient join algorithm for a particular SQL statement.","title":"Explain Statements Using JOIN"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-joins/#example","text":"We have prepared a simple example to help you understand the execution plan for interpreting the JOIN using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' );","title":"Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-joins/#hash-join","text":"In the Hash Join operation, MatrixOne first reads the smaller tables in t1 and t2 and uses a hash function for each value to be joined to obtain a hash table. Then each row of the other table is scanned, and the hash value is calculated and compared with the hash table generated in the previous step. A new join table is generated based on the joinif any values meet the join criteria. The hash join operator is multi-threaded in MatrixOne and executes in parallel. An example of hash join is as below: > SELECT /*+ HASH_JOIN(t1, t2) */ * FROM t1 , t2 WHERE t1 . id = t2 . id ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 1 | 1 | 4 | 3 | 1113 . 32 | 111332 | 1113 | hello | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 1 | 1 | 4 | 3 | 1113 . 32 | 111332 | 1113 | hello | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 2 | 2 | 5 | 2 | 2252 . 05 | 225205 | 2252 | bye | sub query | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 2 | 2 | 5 | 2 | 2252 . 05 | 225205 | 2252 | bye | sub query | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 9 rows in set ( 0 . 00 sec ) mysql > EXPLAIN SELECT /*+ HASH_JOIN(t1, t2) */ * FROM t1 , t2 WHERE t1 . id = t2 . id ; + ------------------------------------+ | QUERY PLAN | + ------------------------------------+ | Project | | -> Join | | Join Type : INNER | | Join Cond : ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Table Scan on db1 . t2 | + ------------------------------------+ 6 rows in set ( 0 . 01 sec ) MatrixOne executes the Hash Join operator in the following order: Scan table t2 and t1 in parallel. Execute the JOIN filter query: (t1.id = t2.id) . Execute INNER JOIN .","title":"Hash Join"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-overview/","text":"MatrixOne Query Execution Plan Overview The EXPLAIN statement shows the MatrixOne execution plan for the SQL statement. Note When you use the MySQL client to connect to MatrixOne, to read the output result in a clearer way without line wrapping, you can use the pager less -S command. Then, after the EXPLAIN result is output, you can press the right arrow \u2192 button on your keyboard to horizontally scroll through the output. EXPLAIN Example Data preparation \uff1a CREATE TABLE t ( id INT NOT NULL PRIMARY KEY auto_increment , a INT NOT NULL , pad1 VARCHAR ( 255 ), INDEX ( a )); INSERT INTO t VALUES ( 1 , 1 , 'aaa' ),( 2 , 2 , 'bbb' ); EXPLAIN SELECT * FROM t WHERE a = 1 ; Return result \uff1a + ------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------+ | Project | | -> Table Scan on aab . t | | Filter Cond : ( CAST ( t . a AS BIGINT ) = 1 ) | + ------------------------------------------------+ EXPLAIN does not execute the actual query. EXPLAIN ANALYZE can be used to execute the query and show EXPLAIN information. This can be useful in diagnosing cases where the execution plan selected is suboptimal. EXPLAIN output analysis QUERY PLAN: the name of an operator. Filter Cond\uff1aFilter conditions Table Scan\uff1ascans the table Project is the parent node of the executive order in the query process. The structure of the Project is tree-like, and the child node \"flows into\" the parent node after the calculation is completed. The parent, child, and sibling nodes may execute parts of the query in parallel. Range query In the WHERE/HAVING/ON conditions, the MatrixOne optimizer analyzes the result returned by the primary key query. For example, these conditions might include comparison operators of the numeric and date type, such as > , < , = , >= , <= , and the character type such as LIKE .","title":"Query Execution Plan Overview"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-overview/#matrixone-query-execution-plan-overview","text":"The EXPLAIN statement shows the MatrixOne execution plan for the SQL statement. Note When you use the MySQL client to connect to MatrixOne, to read the output result in a clearer way without line wrapping, you can use the pager less -S command. Then, after the EXPLAIN result is output, you can press the right arrow \u2192 button on your keyboard to horizontally scroll through the output.","title":"MatrixOne Query Execution Plan Overview"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-overview/#explain-example","text":"Data preparation \uff1a CREATE TABLE t ( id INT NOT NULL PRIMARY KEY auto_increment , a INT NOT NULL , pad1 VARCHAR ( 255 ), INDEX ( a )); INSERT INTO t VALUES ( 1 , 1 , 'aaa' ),( 2 , 2 , 'bbb' ); EXPLAIN SELECT * FROM t WHERE a = 1 ; Return result \uff1a + ------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------+ | Project | | -> Table Scan on aab . t | | Filter Cond : ( CAST ( t . a AS BIGINT ) = 1 ) | + ------------------------------------------------+ EXPLAIN does not execute the actual query. EXPLAIN ANALYZE can be used to execute the query and show EXPLAIN information. This can be useful in diagnosing cases where the execution plan selected is suboptimal. EXPLAIN output analysis QUERY PLAN: the name of an operator. Filter Cond\uff1aFilter conditions Table Scan\uff1ascans the table Project is the parent node of the executive order in the query process. The structure of the Project is tree-like, and the child node \"flows into\" the parent node after the calculation is completed. The parent, child, and sibling nodes may execute parts of the query in parallel. Range query In the WHERE/HAVING/ON conditions, the MatrixOne optimizer analyzes the result returned by the primary key query. For example, these conditions might include comparison operators of the numeric and date type, such as > , < , = , >= , <= , and the character type such as LIKE .","title":"EXPLAIN Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-subqueries/","text":"Explain Statements Using Subqueries MatrixOne performs several optimizations to improve the performance of subqueries. This document describes some of these optimizations for common subqueries and how to interpret the output of EXPLAIN . From the execution of SQL statements, subquery generally has the following two types: Self-contained Subquery : In a database nested query, the inner query is entirely independent of the outer query. For example: select * from t1 where t1.id in (select t2.id from t2 where t2.id>=3); , the execution sequence is as follows: Execute the inner query first: (select t2.id from t2 where t2.id>=3) \u3002 The result of the inner query is carried into the outer layer, and then the outer query is executed. Correlated Subquery : In Correlated Subquery nested in databases, the inner and outer queries would not be independent, and the inner queries would depend on the outer queries. For example: SELECT * FROM t1 WHERE id in (SELECT id FROM t2 WHERE t1.ti = t2.ti and t2.id>=4); , generally, the execution sequence is as follows: Queries a record from the outer query: SELECT * FROM t1 WHERE id \u3002 Put the queried records into the inner query, then put the records that meet the conditions into the outer query. Repeat the above steps. However, MatrixOne will rewrite the SQL statement as an equivalent JOIN statement: select t1.* from t1 join t2 on t1.id=t2.id where t2.id>=4; Example We have prepared a simple example to help you understand the execution plan for interpreting the SUBQUERY using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); Self-contained Subquery > select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 7 rows in set ( 0 . 02 sec ) > explain select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); + ---------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------+ | Project | | -> Join | | Join Type : SEMI | | Join Cond : ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Project | | -> Table Scan on db1 . t2 | | Filter Cond : ( CAST ( t2 . id AS BIGINT ) >= 3 ) | + ---------------------------------------------------------------+ 8 rows in set ( 0 . 00 sec ) The execution sequence is as follows: Execute the inner query first: (select t2.id from t2 where t2.id>=3) \u3002 The result of the inner query is carried into the outer layer, and then the outer query is executed. Correlated subquery > SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 6 rows in set ( 0 . 01 sec ) mysql > explain SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); + ---------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------+ | Project | | -> Join | | Join Type : SEMI | | Join Cond : ( t1 . ti = t2 . ti ), ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Project | | -> Table Scan on db1 . t2 | | Filter Cond : ( CAST ( t2 . id AS BIGINT ) >= 4 ) | + ---------------------------------------------------------------+ 8 rows in set ( 0 . 01 sec ) MatrixOne will rewrite the SQL statement as an equivalent JOIN statement: select t1.* from t1 join t2 on t1.id=t2.id where t2.id>=4; , the execution sequence is as follows: Execute the filter query: where t2.id>=4; \u3002 Scan Table: Table Scan on db1.t2 , and then the result \"flow into\" into the parent node. Scan table table scan on db1.t1 . Execute JOIN .","title":"Explain Statements Using Subqueries"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-subqueries/#explain-statements-using-subqueries","text":"MatrixOne performs several optimizations to improve the performance of subqueries. This document describes some of these optimizations for common subqueries and how to interpret the output of EXPLAIN . From the execution of SQL statements, subquery generally has the following two types: Self-contained Subquery : In a database nested query, the inner query is entirely independent of the outer query. For example: select * from t1 where t1.id in (select t2.id from t2 where t2.id>=3); , the execution sequence is as follows: Execute the inner query first: (select t2.id from t2 where t2.id>=3) \u3002 The result of the inner query is carried into the outer layer, and then the outer query is executed. Correlated Subquery : In Correlated Subquery nested in databases, the inner and outer queries would not be independent, and the inner queries would depend on the outer queries. For example: SELECT * FROM t1 WHERE id in (SELECT id FROM t2 WHERE t1.ti = t2.ti and t2.id>=4); , generally, the execution sequence is as follows: Queries a record from the outer query: SELECT * FROM t1 WHERE id \u3002 Put the queried records into the inner query, then put the records that meet the conditions into the outer query. Repeat the above steps. However, MatrixOne will rewrite the SQL statement as an equivalent JOIN statement: select t1.* from t1 join t2 on t1.id=t2.id where t2.id>=4;","title":"Explain Statements Using Subqueries"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-subqueries/#example","text":"We have prepared a simple example to help you understand the execution plan for interpreting the SUBQUERY using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' );","title":"Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-subqueries/#self-contained-subquery","text":"> select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 7 rows in set ( 0 . 02 sec ) > explain select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); + ---------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------+ | Project | | -> Join | | Join Type : SEMI | | Join Cond : ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Project | | -> Table Scan on db1 . t2 | | Filter Cond : ( CAST ( t2 . id AS BIGINT ) >= 3 ) | + ---------------------------------------------------------------+ 8 rows in set ( 0 . 00 sec ) The execution sequence is as follows: Execute the inner query first: (select t2.id from t2 where t2.id>=3) \u3002 The result of the inner query is carried into the outer layer, and then the outer query is executed.","title":"Self-contained Subquery"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-subqueries/#correlated-subquery","text":"> SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 6 rows in set ( 0 . 01 sec ) mysql > explain SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); + ---------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------+ | Project | | -> Join | | Join Type : SEMI | | Join Cond : ( t1 . ti = t2 . ti ), ( t1 . id = t2 . id ) | | -> Table Scan on db1 . t1 | | -> Project | | -> Table Scan on db1 . t2 | | Filter Cond : ( CAST ( t2 . id AS BIGINT ) >= 4 ) | + ---------------------------------------------------------------+ 8 rows in set ( 0 . 01 sec ) MatrixOne will rewrite the SQL statement as an equivalent JOIN statement: select t1.* from t1 join t2 on t1.id=t2.id where t2.id>=4; , the execution sequence is as follows: Execute the filter query: where t2.id>=4; \u3002 Scan Table: Table Scan on db1.t2 , and then the result \"flow into\" into the parent node. Scan table table scan on db1.t1 . Execute JOIN .","title":"Correlated subquery"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-views/","text":"EXPLAIN Statements Using Views EXPLAIN displays the tables that a view references, not the name of the view itself. This is because views are only virtual tables and do not store any data themselves. The definition of the view and the rest of the statement are merged together during SQL optimization. Example We have prepared a simple example to help you understand the execution plan for interpreting the VIEW using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > create view v1 as select * from ( select * from t1 ) sub where id > 4 ; > select * from v1 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 01 sec ) As shown in the above example, a new VIEW named v1 is created, then query the result of v1 . So let's learn the query plan in this VIEW : > explain select * from v1 ; + --------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------+ | Project | | -> Project | | -> Project | | -> Table Scan on db1 . t1 | | Filter Cond : ( CAST ( t1 . id AS BIGINT ) > 4 ) | + --------------------------------------------------------------+ 5 rows in set ( 0 . 00 sec ) You can see that Project is the parent node in the execution order of this query. It starts from the most indented child node, then \"flows into\" its upper parent node, and finally \"flow into\" the Project parent node. To execute firstly: Filter Cond: the filter condition To execute secondly: Table Scan: scans all tables The following query is executed similarly to the above: > explain select * from ( select * from t1 ) sub where id > 4 ; + --------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------+ | Project | | -> Project | | -> Table Scan on db1 . t1 | | Filter Cond : ( CAST ( t1 . id AS BIGINT ) > 4 ) | + --------------------------------------------------------+ 4 rows in set ( 0 . 03 sec )","title":"EXPLAIN Statements Using Views"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-views/#explain-statements-using-views","text":"EXPLAIN displays the tables that a view references, not the name of the view itself. This is because views are only virtual tables and do not store any data themselves. The definition of the view and the rest of the statement are merged together during SQL optimization.","title":"EXPLAIN Statements Using Views"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-views/#example","text":"We have prepared a simple example to help you understand the execution plan for interpreting the VIEW using EXPLAIN . > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > create view v1 as select * from ( select * from t1 ) sub where id > 4 ; > select * from v1 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 01 sec ) As shown in the above example, a new VIEW named v1 is created, then query the result of v1 . So let's learn the query plan in this VIEW : > explain select * from v1 ; + --------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------+ | Project | | -> Project | | -> Project | | -> Table Scan on db1 . t1 | | Filter Cond : ( CAST ( t1 . id AS BIGINT ) > 4 ) | + --------------------------------------------------------------+ 5 rows in set ( 0 . 00 sec ) You can see that Project is the parent node in the execution order of this query. It starts from the most indented child node, then \"flows into\" its upper parent node, and finally \"flow into\" the Project parent node. To execute firstly: Filter Cond: the filter condition To execute secondly: Table Scan: scans all tables The following query is executed similarly to the above: > explain select * from ( select * from t1 ) sub where id > 4 ; + --------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------+ | Project | | -> Project | | -> Table Scan on db1 . t1 | | Filter Cond : ( CAST ( t1 . id AS BIGINT ) > 4 ) | + --------------------------------------------------------+ 4 rows in set ( 0 . 03 sec )","title":"Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-walkthrough/","text":"Using EXPLAIN to learn the execution plan Because SQL is a declarative language, you cannot automatically tell whether a query is executed efficiently. You must first use the EXPLAIN statement to learn the current execution plan. Example We have prepared a simple example to help you understand how to interpret an execution plan using EXPLAIN . > drop table if exists a ; > create table a ( a int ); > insert into a values ( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ),( 8 ); > select count ( * ) from a where a >= 2 and a <= 8 ; + ----------+ | count ( * ) | + ----------+ | 7 | + ----------+ 1 row in set ( 0 . 00 sec ) > explain select count ( * ) from a where a >= 2 and a <= 8 ; + -----------------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------------+ | Project | | -> Aggregate | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on aab . a | | Filter Cond : ( CAST ( a . a AS BIGINT ) >= 2 ), ( CAST ( a . a AS BIGINT ) <= 8 ) | + -----------------------------------------------------------------------------------+ 5 rows in set ( 0 . 00 sec ) Above are the execution plan results for this query. Starting from the Filter Cond operator, the execution process of the query is as follows: Execute the Filter condition Filter Cond first: the integer whose data type is BIGINT and is greater than or equal to 2 and less than or equal to 8 is filtered out. According to the calculation reasoning, it should be (2) , (3) , (4) , (5) , (6) , (7) , (8) . Scan Table in database aab . The number of integers is 7. In the end, the query result is 7, which means count(*) = 7. Assess the current performance EXPLAIN only returns the query execution plan but does not execute the query. To get the actual execution time, you can either execute the query or use EXPLAIN ANALYZE : > explain analyze select count ( * ) from a where a >= 2 and a <= 8 ; + -------------------------------------------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------------------------------------------+ | Project | | Analyze : timeConsumed = 0 us inputRows = 1 outputRows = 1 inputSize = 8 bytes outputSize = 8 bytes memorySize = 8 bytes | | -> Aggregate | | Analyze : timeConsumed = 3317 us inputRows = 2 outputRows = 2 inputSize = 8 bytes outputSize = 16 bytes memorySize = 16 bytes | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on aab . a | | Analyze : timeConsumed = 6643 us inputRows = 31 outputRows = 24 inputSize = 96 bytes outputSize = 64 bytes memorySize = 64 bytes | | Filter Cond : ( CAST ( a . a AS BIGINT ) >= 2 ), ( CAST ( a . a AS BIGINT ) <= 8 ) | + -------------------------------------------------------------------------------------------------------------------------------+ 8 rows in set ( 0 . 00 sec ) The example query above takes 0.00 seconds to execute, which is an ideal performance. Also, because the query we executed in this example is simple, it meets the high execution performance.","title":"Using EXPLAIN to learn the execution plan"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-walkthrough/#using-explain-to-learn-the-execution-plan","text":"Because SQL is a declarative language, you cannot automatically tell whether a query is executed efficiently. You must first use the EXPLAIN statement to learn the current execution plan.","title":"Using EXPLAIN to learn the execution plan"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-walkthrough/#example","text":"We have prepared a simple example to help you understand how to interpret an execution plan using EXPLAIN . > drop table if exists a ; > create table a ( a int ); > insert into a values ( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ),( 8 ); > select count ( * ) from a where a >= 2 and a <= 8 ; + ----------+ | count ( * ) | + ----------+ | 7 | + ----------+ 1 row in set ( 0 . 00 sec ) > explain select count ( * ) from a where a >= 2 and a <= 8 ; + -----------------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------------+ | Project | | -> Aggregate | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on aab . a | | Filter Cond : ( CAST ( a . a AS BIGINT ) >= 2 ), ( CAST ( a . a AS BIGINT ) <= 8 ) | + -----------------------------------------------------------------------------------+ 5 rows in set ( 0 . 00 sec ) Above are the execution plan results for this query. Starting from the Filter Cond operator, the execution process of the query is as follows: Execute the Filter condition Filter Cond first: the integer whose data type is BIGINT and is greater than or equal to 2 and less than or equal to 8 is filtered out. According to the calculation reasoning, it should be (2) , (3) , (4) , (5) , (6) , (7) , (8) . Scan Table in database aab . The number of integers is 7. In the end, the query result is 7, which means count(*) = 7.","title":"Example"},{"location":"MatrixOne/0.6-Performance-Tuning/explain-walkthrough/#assess-the-current-performance","text":"EXPLAIN only returns the query execution plan but does not execute the query. To get the actual execution time, you can either execute the query or use EXPLAIN ANALYZE : > explain analyze select count ( * ) from a where a >= 2 and a <= 8 ; + -------------------------------------------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------------------------------------------+ | Project | | Analyze : timeConsumed = 0 us inputRows = 1 outputRows = 1 inputSize = 8 bytes outputSize = 8 bytes memorySize = 8 bytes | | -> Aggregate | | Analyze : timeConsumed = 3317 us inputRows = 2 outputRows = 2 inputSize = 8 bytes outputSize = 16 bytes memorySize = 16 bytes | | Aggregate Functions : starcount ( 1 ) | | -> Table Scan on aab . a | | Analyze : timeConsumed = 6643 us inputRows = 31 outputRows = 24 inputSize = 96 bytes outputSize = 64 bytes memorySize = 64 bytes | | Filter Cond : ( CAST ( a . a AS BIGINT ) >= 2 ), ( CAST ( a . a AS BIGINT ) <= 8 ) | + -------------------------------------------------------------------------------------------------------------------------------+ 8 rows in set ( 0 . 00 sec ) The example query above takes 0.00 seconds to execute, which is an ideal performance. Also, because the query we executed in this example is simple, it meets the high execution performance.","title":"Assess the current performance"},{"location":"MatrixOne/0.6-Security/TLS-introduction/","text":"TLS Introduction Transport Layer Security (TLS) is a widely adopted security protocol designed to promote Internet communications' privacy and data security. MatrixOne uses non-encrypted connections by default and supports enabling encrypted connections based on the TLS protocol. The supported protocol versions are TLS 1.0, TLS 1.1, and TLS 1.2. To use encrypted connections, you need to enable encrypted connection support on the Matrix One server and specify the use of encrypted connections on the client side. Enable TLS for MatrixOne Generate certificate and key MatrixOne does not yet support loading password-protected private keys, so a private key file without a password must be provided. Certificates and keys can be signed and generated using OpenSSL. It is recommended to use the tool mysql_ssl_rsa_setup that comes with MySQL to generate quickly: mysql_ssl_rsa_setup --datadir=./yourpath yourpath \u251c\u2500\u2500 ca-key.pem \u251c\u2500\u2500 ca.pem \u251c\u2500\u2500 client-cert.pem \u251c\u2500\u2500 client-key.pem \u251c\u2500\u2500 private_key.pem \u251c\u2500\u2500 public_key.pem \u251c\u2500\u2500 server-cert.pem \u2514\u2500\u2500 server-key.pem Modify TLS configuration of MatrixOne To enable TLS support of MatrixOne, you need to modify the configuration information of [cn.frontend] . The configuration information is explained as follows: Parameter Description enableTls Boolean type, whether to enable TLS support on the MO server. Defaults to false. tlsCertFile Specify the SSL certificate file path tlsKeyFile Specifies the private key corresponding to the certificate file tlsCaFile Optional. Specify trusted CA certificate file path An example of modifying the TLS configuration is as below: [cn.frontend] #default is false. With true. Server will support tls enableTls = true #default is ''. Path of file that contains X509 certificate in PEM format for client tlsCertFile = \"yourpath/server-cert.pem\" #default is ''. Path of file that contains X509 key in PEM format for client tlsKeyFile = \"yourpath/server-key.pem\" #default is ''. Path of file that contains list of trusted SSL CAs for client tlsCaFile = \"yourpath/ca.pem\" If the configured file path or content is wrong, the MatrixOne server will fail to start. Verify that MatrixOne's SSL is enabled After logging in with the MySQL client, use the Status command to check whether SSL is enabled. The value of the returned SSL will have a corresponding description. If it is not enabled, the returned result is Not in use : mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 Type 'help;' or '\\h' for help . Type '\\c' to clear the current input statement . mysql > status -------------- / usr / local / mysql / bin / mysql Ver 8 . 0 . 30 for macos12 on arm64 ( MySQL Community Server - GPL ) Connection id : 1001 Current database : Current user : dump @ 0 . 0 . 0 . 0 SSL : Not in use Current pager : stdout Using outfile : '' Using delimiter : ; Server version : 0 . 5 . 1 MatrixOne Protocol version : 10 Connection : 127 . 0 . 0 . 1 via TCP / IP ERROR 1105 ( HY000 ): the system variable does not exist ERROR 2014 ( HY000 ): Commands out of sync ; you can ' t run this command now Client characterset : utf8mb4 Server characterset : utf8mb4 TCP port : 6001 Binary data as : Hexadecimal -------------- If enabled, the result is: mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 Type 'help;' or '\\h' for help . Type '\\c' to clear the current input statement . mysql > status mysql Ver 8 . 0 . 28 for macos11 on arm64 ( MySQL Community Server - GPL ) Connection id : 1001 Current database : Current user : dump @ 0 . 0 . 0 . 0 SSL : Cipher in use is TLS_AES_128_GCM_SHA256 Current pager : stdout Using outfile : '' Using delimiter : ; Server version : 0 . 5 . 0 MatrixOne Protocol version : 10 Connection : 127 . 0 . 0 . 1 via TCP / IP ERROR 20101 ( HY000 ): internal error : the system variable does not exist ERROR 2014 ( HY000 ): Commands out of sync ; you can ' t run this command now Client characterset : utf8mb4 Server characterset : utf8mb4 TCP port : 6001 Binary data as : Hexadecimal -------------- Configure MySQL client When a MySQL client connects to Matrix One Server, the encrypted connection behavior needs to be specified by the --ssl-mode parameter, such as: mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 --ssl-mode=PREFFERED The value types of ssl mode are as follows: ssl-mode value Description DISABLED Establish an encrypted connection without SSL/TLS, synonymous with skip-ssl. PREFFERED The default behavior is first to establish an encrypted connection using SSL/TLS; if it cannot be established, it will try to establish a non-SSL/TLS connection. REQUIRED Only SSL/TLS will be attempted to establish an encrypted connection, and if the connection cannot be established, the connection will fail. VERIFY_CA As with the REQUIRED behavior, and also verifies that the CA certificate on the Server side is valid. VERIFY_IDENTITY It acts like VERIFY_CA and verifies that the host in the server-side CA certificate is the same as the hostname for the actual connection. Note When the client specifies --ssl-mode=VERIFY_CA , it needs to use --ssl-ca to specify the CA certificate; If --ssl-mode=VERIFY_IDENTITY is specified on the client, you need to specify the CA certificate. You need to use --ssl-key to specify the client private key and --ssl-cert to specify the client certificate.","title":"TLS Introduction"},{"location":"MatrixOne/0.6-Security/TLS-introduction/#tls-introduction","text":"Transport Layer Security (TLS) is a widely adopted security protocol designed to promote Internet communications' privacy and data security. MatrixOne uses non-encrypted connections by default and supports enabling encrypted connections based on the TLS protocol. The supported protocol versions are TLS 1.0, TLS 1.1, and TLS 1.2. To use encrypted connections, you need to enable encrypted connection support on the Matrix One server and specify the use of encrypted connections on the client side.","title":"TLS Introduction"},{"location":"MatrixOne/0.6-Security/TLS-introduction/#enable-tls-for-matrixone","text":"Generate certificate and key MatrixOne does not yet support loading password-protected private keys, so a private key file without a password must be provided. Certificates and keys can be signed and generated using OpenSSL. It is recommended to use the tool mysql_ssl_rsa_setup that comes with MySQL to generate quickly: mysql_ssl_rsa_setup --datadir=./yourpath yourpath \u251c\u2500\u2500 ca-key.pem \u251c\u2500\u2500 ca.pem \u251c\u2500\u2500 client-cert.pem \u251c\u2500\u2500 client-key.pem \u251c\u2500\u2500 private_key.pem \u251c\u2500\u2500 public_key.pem \u251c\u2500\u2500 server-cert.pem \u2514\u2500\u2500 server-key.pem Modify TLS configuration of MatrixOne To enable TLS support of MatrixOne, you need to modify the configuration information of [cn.frontend] . The configuration information is explained as follows: Parameter Description enableTls Boolean type, whether to enable TLS support on the MO server. Defaults to false. tlsCertFile Specify the SSL certificate file path tlsKeyFile Specifies the private key corresponding to the certificate file tlsCaFile Optional. Specify trusted CA certificate file path An example of modifying the TLS configuration is as below: [cn.frontend] #default is false. With true. Server will support tls enableTls = true #default is ''. Path of file that contains X509 certificate in PEM format for client tlsCertFile = \"yourpath/server-cert.pem\" #default is ''. Path of file that contains X509 key in PEM format for client tlsKeyFile = \"yourpath/server-key.pem\" #default is ''. Path of file that contains list of trusted SSL CAs for client tlsCaFile = \"yourpath/ca.pem\" If the configured file path or content is wrong, the MatrixOne server will fail to start. Verify that MatrixOne's SSL is enabled After logging in with the MySQL client, use the Status command to check whether SSL is enabled. The value of the returned SSL will have a corresponding description. If it is not enabled, the returned result is Not in use : mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 Type 'help;' or '\\h' for help . Type '\\c' to clear the current input statement . mysql > status -------------- / usr / local / mysql / bin / mysql Ver 8 . 0 . 30 for macos12 on arm64 ( MySQL Community Server - GPL ) Connection id : 1001 Current database : Current user : dump @ 0 . 0 . 0 . 0 SSL : Not in use Current pager : stdout Using outfile : '' Using delimiter : ; Server version : 0 . 5 . 1 MatrixOne Protocol version : 10 Connection : 127 . 0 . 0 . 1 via TCP / IP ERROR 1105 ( HY000 ): the system variable does not exist ERROR 2014 ( HY000 ): Commands out of sync ; you can ' t run this command now Client characterset : utf8mb4 Server characterset : utf8mb4 TCP port : 6001 Binary data as : Hexadecimal -------------- If enabled, the result is: mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 Type 'help;' or '\\h' for help . Type '\\c' to clear the current input statement . mysql > status mysql Ver 8 . 0 . 28 for macos11 on arm64 ( MySQL Community Server - GPL ) Connection id : 1001 Current database : Current user : dump @ 0 . 0 . 0 . 0 SSL : Cipher in use is TLS_AES_128_GCM_SHA256 Current pager : stdout Using outfile : '' Using delimiter : ; Server version : 0 . 5 . 0 MatrixOne Protocol version : 10 Connection : 127 . 0 . 0 . 1 via TCP / IP ERROR 20101 ( HY000 ): internal error : the system variable does not exist ERROR 2014 ( HY000 ): Commands out of sync ; you can ' t run this command now Client characterset : utf8mb4 Server characterset : utf8mb4 TCP port : 6001 Binary data as : Hexadecimal --------------","title":"Enable TLS for MatrixOne"},{"location":"MatrixOne/0.6-Security/TLS-introduction/#configure-mysql-client","text":"When a MySQL client connects to Matrix One Server, the encrypted connection behavior needs to be specified by the --ssl-mode parameter, such as: mysql - h 127 . 0 . 0 . 1 - P 6001 - udump - p111 --ssl-mode=PREFFERED The value types of ssl mode are as follows: ssl-mode value Description DISABLED Establish an encrypted connection without SSL/TLS, synonymous with skip-ssl. PREFFERED The default behavior is first to establish an encrypted connection using SSL/TLS; if it cannot be established, it will try to establish a non-SSL/TLS connection. REQUIRED Only SSL/TLS will be attempted to establish an encrypted connection, and if the connection cannot be established, the connection will fail. VERIFY_CA As with the REQUIRED behavior, and also verifies that the CA certificate on the Server side is valid. VERIFY_IDENTITY It acts like VERIFY_CA and verifies that the host in the server-side CA certificate is the same as the hostname for the actual connection. Note When the client specifies --ssl-mode=VERIFY_CA , it needs to use --ssl-ca to specify the CA certificate; If --ssl-mode=VERIFY_IDENTITY is specified on the client, you need to specify the CA certificate. You need to use --ssl-key to specify the client private key and --ssl-cert to specify the client certificate.","title":"Configure MySQL client"},{"location":"MatrixOne/0.6-Security/access-control-overview/","text":"Privilege Control in MatrixOne - Access Control Overview MatrixOne \u7684\u6743\u9650\u63a7\u5236\u662f\u7ed3\u5408\u4e86\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236 (RBAC\uff0cRole-based access control) \u548c\u81ea\u4e3b\u8bbf\u95ee\u63a7\u5236 (DAC\uff0cDiscretionary access control) \u4e24\u79cd\u5b89\u5168\u6a21\u578b\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\uff0c\u5b83\u65e2\u4fdd\u8bc1\u4e86\u6570\u636e\u8bbf\u95ee\u7684\u5b89\u5168\u6027\uff0c\u53c8\u7ed9\u6570\u636e\u5e93\u8fd0\u7ef4\u4eba\u5458\u63d0\u4f9b\u4e86\u7075\u6d3b\u4e14\u4fbf\u6377\u7684\u7ba1\u7406\u65b9\u6cd5\u3002 MatrixOne's permission control is designed and implemented by combining two security models of role-based access control (RBAC, Role-based access control) and discretionary access control (DAC, Discretionary access control), which ensures the security of data access, and it provides a flexible and convenient management method for database operation and maintenance personnel. Role-based access control: Assign permissions to roles, and then assign roles to users. Discretionary Access Control: Every object has an owner who can set and grant access to that object. Basic concepts Object An object is an entity that encapsulates permissions in MatrixOne, and these entities have a certain hierarchical structure. For example, a Cluster contains multiple Account (Account), and a Account contains multiple User , Role , Database , and a Database contains multiple Table , **View, etc. This hierarchical structure is shown in the following figure: Each object has one and only one Owner ; otherwise, the Owner has the Ownership permission of the object. !!! note - Owner is for a specific object rather than a class of objects. For example, Role_1 is the Owner of db1, Role_2 is the Owner of db2, and Role_1 and db2 do not have a necessary permission relationship. - The Owner of an upper-level object does not necessarily have access rights to the lower-level object. For example, if Role_1 is the Owner of db1, and Role_2 created db1.table1, then Role_2 is the Owner of db1.table1, and Role_1 cannot view its data. The initial Owner of an object is its creator, and the Owner identity can be transferred by the Owner itself or an owner with advanced control. If the object owner is deleted, the object's owner is automatically changed to the owner of the deleted object. The ACCOUNTADMIN role has Ownership permissions on all objects by default. The set of access permissions for each object is different. For more information, please refer to Access Control Permissions . Role A role is an entity with access rights. Any database user who wants to access an object must first be granted a role that has access rights to the object. The roles of MatrixOne are divided into system roles and user-defined roles. When the system is first started, or a new account is created, some system default roles will be initialized. They are often the highest administrator roles and users and cannot be modified or deleted. Use them to create more custom roles to manage the database as needed. A role can be granted multiple access rights to an object. A role can be granted access to multiple objects. Permissions can be passed between roles, usually there are two methods of Grant and Inheritance . \u6388\u4e88 \uff1a\u6743\u9650\u7684\u6388\u4e88\u5177\u6709\u4e00\u6b21\u6388\u4e88\u6c38\u4e45\u751f\u6548\u7684\u7279\u6027\u3002\u4f8b\u5982 \u89d2\u82721 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff1b \u89d2\u82722 \u62e5\u6709\u6743\u9650 d\uff0c\u6b64\u65f6\u5c06 \u89d2\u82721 \u7684\u6743\u9650\u6388\u4e88\u7ed9 \u89d2\u82722 \uff0c\u5219 \u89d2\u82722 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c d\uff0c\u5f53\u5220\u9664 \u89d2\u82721 \u540e\uff0c \u89d2\u82722 \u4ecd\u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c d\u3002 \u7ee7\u627f \uff1a\u6743\u9650\u7684\u7ee7\u627f\u5177\u6709\u52a8\u6001\u4f20\u9012\u7684\u7279\u6027\u3002\u4f8b\u5982 \u89d2\u82721 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff1b \u89d2\u82723 \u62e5\u6709\u6743\u9650 e\uff0c f\uff0c\u53ef\u4ee5\u6307\u5b9a \u89d2\u82723 \u7ee7\u627f \u89d2\u82721 \uff0c\u5219 \u89d2\u82723 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c e\uff0c f\uff1b \u5f53\u5220\u9664 \u89d2\u82721 \u540e\uff0c \u89d2\u82723 \u4ec5\u62e5\u6709\u6743\u9650 e\uff0c f\u3002 Grant: The grant of permission has the characteristic of granting a permanent effect. For example, role 1 has permissions a, b, c, and role 2 has permission d. At this time, if the permissions of role 1 are granted to role 2, then role 2 has permissions a, b, c, and d. When role 1 is deleted, role 2 Still have permissions a, b, c, d. Inheritance: Inheritance of permissions has the characteristics of dynamic transfer. For example, role 1 has permissions a, b, c, role 3 has permissions e, f, you can specify role 3 to inherit role 1, then role 3 has permissions a, b, c, e, f, when role 1 is deleted, role 3 Only have permissions e, f. !!! note 1.Manipulating granted and inherited roles requires Ownership permission on the object or one of the advanced grant permissions. 2.The inheritance relationship of roles cannot be looped. \u5728 MatrixOne \u4e2d\uff0c\u5b9e\u73b0\u4e86\u79df\u6237\u95f4\u6743\u9650\u9694\u79bb\uff0c\u5373 Account \u5185\u7684\u89d2\u8272\u548c\u7528\u6237\u4ec5\u5728\u8be5 Account \u5185\u751f\u6548\uff0c\u4e0d\u4f1a\u5f71\u54cd\u548c\u4f20\u9012\u7ed9\u5176\u4ed6 Account\uff0c\u89d2\u8272\u4e4b\u95f4\u7684\u6388\u6743\u4e5f\u4ec5\u9650\u5728 Account \u5185\u3002 Switching Role When a user wants to gain access to an object, he must first grant permission to a role and then grant the role to the user. A user can have multiple roles, but at the same time, the user can only use one role to access the database, we call this role the primary role , and the rest of the roles are secondary roles . When a user executes a specific SQL, the system will determine whether the primary role has the permissions required to execute the SQL and then decide whether to execute the SQL. In some scenarios (for example, administrators do not have a well-established role system), SQL needs to be executed in combination with the permissions of multiple roles. MatrixOne provides the function of using secondary roles to help such users complete queries: use secondary role { all | none } The default parameter is all . If you choose to use all , the permissions of all secondary roles can be provided to the user; if you choose to use none , only the permissions of the primary role can be used. Deleting Object When deleting a tenant, you need to close or suspend the tenant first, that is, you need to execute the SQL statement close or suspend . When deleting a role, it will force all authorized role revoke users, that is, you need to execute the SQL statement revoke . When deleting a user, the deletion of the user fails if the user currently has a session. Initialize access control For the convenience of management, after the cluster or account is created, the system will automatically generate some default users and default roles . Default users Username Description root After the cluster is created, it is automatically created and granted the MOADMIN role, which cannot be modified or deleted. admin Account is automatically created after creation and is granted the ACCOUNTADMIN role, which cannot be modified or deleted. Default roles Username Description MOADMIN The super administrator role is created automatically after the cluster is initialized and cannot be modified or deleted. ACCOUNTADMIN Account is created automatically after initialization and is the super administrator role of the ACCOUNT PUBLIC After the Account is created, it is automatically created. All users under the Account will be added to the PUBLIC role when they are created, and users cannot be removed. The initial permission of the PUBLIC role is CONNECT.","title":"Access Control Overview"},{"location":"MatrixOne/0.6-Security/access-control-overview/#privilege-control-in-matrixone-access-control-overview","text":"MatrixOne \u7684\u6743\u9650\u63a7\u5236\u662f\u7ed3\u5408\u4e86\u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236 (RBAC\uff0cRole-based access control) \u548c\u81ea\u4e3b\u8bbf\u95ee\u63a7\u5236 (DAC\uff0cDiscretionary access control) \u4e24\u79cd\u5b89\u5168\u6a21\u578b\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\uff0c\u5b83\u65e2\u4fdd\u8bc1\u4e86\u6570\u636e\u8bbf\u95ee\u7684\u5b89\u5168\u6027\uff0c\u53c8\u7ed9\u6570\u636e\u5e93\u8fd0\u7ef4\u4eba\u5458\u63d0\u4f9b\u4e86\u7075\u6d3b\u4e14\u4fbf\u6377\u7684\u7ba1\u7406\u65b9\u6cd5\u3002 MatrixOne's permission control is designed and implemented by combining two security models of role-based access control (RBAC, Role-based access control) and discretionary access control (DAC, Discretionary access control), which ensures the security of data access, and it provides a flexible and convenient management method for database operation and maintenance personnel. Role-based access control: Assign permissions to roles, and then assign roles to users. Discretionary Access Control: Every object has an owner who can set and grant access to that object.","title":"Privilege Control in MatrixOne - Access Control Overview"},{"location":"MatrixOne/0.6-Security/access-control-overview/#basic-concepts","text":"","title":"Basic concepts"},{"location":"MatrixOne/0.6-Security/access-control-overview/#object","text":"An object is an entity that encapsulates permissions in MatrixOne, and these entities have a certain hierarchical structure. For example, a Cluster contains multiple Account (Account), and a Account contains multiple User , Role , Database , and a Database contains multiple Table , **View, etc. This hierarchical structure is shown in the following figure: Each object has one and only one Owner ; otherwise, the Owner has the Ownership permission of the object. !!! note - Owner is for a specific object rather than a class of objects. For example, Role_1 is the Owner of db1, Role_2 is the Owner of db2, and Role_1 and db2 do not have a necessary permission relationship. - The Owner of an upper-level object does not necessarily have access rights to the lower-level object. For example, if Role_1 is the Owner of db1, and Role_2 created db1.table1, then Role_2 is the Owner of db1.table1, and Role_1 cannot view its data. The initial Owner of an object is its creator, and the Owner identity can be transferred by the Owner itself or an owner with advanced control. If the object owner is deleted, the object's owner is automatically changed to the owner of the deleted object. The ACCOUNTADMIN role has Ownership permissions on all objects by default. The set of access permissions for each object is different. For more information, please refer to Access Control Permissions .","title":"Object"},{"location":"MatrixOne/0.6-Security/access-control-overview/#role","text":"A role is an entity with access rights. Any database user who wants to access an object must first be granted a role that has access rights to the object. The roles of MatrixOne are divided into system roles and user-defined roles. When the system is first started, or a new account is created, some system default roles will be initialized. They are often the highest administrator roles and users and cannot be modified or deleted. Use them to create more custom roles to manage the database as needed. A role can be granted multiple access rights to an object. A role can be granted access to multiple objects. Permissions can be passed between roles, usually there are two methods of Grant and Inheritance . \u6388\u4e88 \uff1a\u6743\u9650\u7684\u6388\u4e88\u5177\u6709\u4e00\u6b21\u6388\u4e88\u6c38\u4e45\u751f\u6548\u7684\u7279\u6027\u3002\u4f8b\u5982 \u89d2\u82721 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff1b \u89d2\u82722 \u62e5\u6709\u6743\u9650 d\uff0c\u6b64\u65f6\u5c06 \u89d2\u82721 \u7684\u6743\u9650\u6388\u4e88\u7ed9 \u89d2\u82722 \uff0c\u5219 \u89d2\u82722 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c d\uff0c\u5f53\u5220\u9664 \u89d2\u82721 \u540e\uff0c \u89d2\u82722 \u4ecd\u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c d\u3002 \u7ee7\u627f \uff1a\u6743\u9650\u7684\u7ee7\u627f\u5177\u6709\u52a8\u6001\u4f20\u9012\u7684\u7279\u6027\u3002\u4f8b\u5982 \u89d2\u82721 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff1b \u89d2\u82723 \u62e5\u6709\u6743\u9650 e\uff0c f\uff0c\u53ef\u4ee5\u6307\u5b9a \u89d2\u82723 \u7ee7\u627f \u89d2\u82721 \uff0c\u5219 \u89d2\u82723 \u62e5\u6709\u6743\u9650 a\uff0c b\uff0c c\uff0c e\uff0c f\uff1b \u5f53\u5220\u9664 \u89d2\u82721 \u540e\uff0c \u89d2\u82723 \u4ec5\u62e5\u6709\u6743\u9650 e\uff0c f\u3002 Grant: The grant of permission has the characteristic of granting a permanent effect. For example, role 1 has permissions a, b, c, and role 2 has permission d. At this time, if the permissions of role 1 are granted to role 2, then role 2 has permissions a, b, c, and d. When role 1 is deleted, role 2 Still have permissions a, b, c, d. Inheritance: Inheritance of permissions has the characteristics of dynamic transfer. For example, role 1 has permissions a, b, c, role 3 has permissions e, f, you can specify role 3 to inherit role 1, then role 3 has permissions a, b, c, e, f, when role 1 is deleted, role 3 Only have permissions e, f. !!! note 1.Manipulating granted and inherited roles requires Ownership permission on the object or one of the advanced grant permissions. 2.The inheritance relationship of roles cannot be looped. \u5728 MatrixOne \u4e2d\uff0c\u5b9e\u73b0\u4e86\u79df\u6237\u95f4\u6743\u9650\u9694\u79bb\uff0c\u5373 Account \u5185\u7684\u89d2\u8272\u548c\u7528\u6237\u4ec5\u5728\u8be5 Account \u5185\u751f\u6548\uff0c\u4e0d\u4f1a\u5f71\u54cd\u548c\u4f20\u9012\u7ed9\u5176\u4ed6 Account\uff0c\u89d2\u8272\u4e4b\u95f4\u7684\u6388\u6743\u4e5f\u4ec5\u9650\u5728 Account \u5185\u3002","title":"Role"},{"location":"MatrixOne/0.6-Security/access-control-overview/#switching-role","text":"When a user wants to gain access to an object, he must first grant permission to a role and then grant the role to the user. A user can have multiple roles, but at the same time, the user can only use one role to access the database, we call this role the primary role , and the rest of the roles are secondary roles . When a user executes a specific SQL, the system will determine whether the primary role has the permissions required to execute the SQL and then decide whether to execute the SQL. In some scenarios (for example, administrators do not have a well-established role system), SQL needs to be executed in combination with the permissions of multiple roles. MatrixOne provides the function of using secondary roles to help such users complete queries: use secondary role { all | none } The default parameter is all . If you choose to use all , the permissions of all secondary roles can be provided to the user; if you choose to use none , only the permissions of the primary role can be used.","title":"Switching Role"},{"location":"MatrixOne/0.6-Security/access-control-overview/#deleting-object","text":"When deleting a tenant, you need to close or suspend the tenant first, that is, you need to execute the SQL statement close or suspend . When deleting a role, it will force all authorized role revoke users, that is, you need to execute the SQL statement revoke . When deleting a user, the deletion of the user fails if the user currently has a session.","title":"Deleting Object"},{"location":"MatrixOne/0.6-Security/access-control-overview/#initialize-access-control","text":"For the convenience of management, after the cluster or account is created, the system will automatically generate some default users and default roles .","title":"Initialize access control"},{"location":"MatrixOne/0.6-Security/access-control-overview/#default-users","text":"Username Description root After the cluster is created, it is automatically created and granted the MOADMIN role, which cannot be modified or deleted. admin Account is automatically created after creation and is granted the ACCOUNTADMIN role, which cannot be modified or deleted.","title":"Default users"},{"location":"MatrixOne/0.6-Security/access-control-overview/#default-roles","text":"Username Description MOADMIN The super administrator role is created automatically after the cluster is initialized and cannot be modified or deleted. ACCOUNTADMIN Account is created automatically after initialization and is the super administrator role of the ACCOUNT PUBLIC After the Account is created, it is automatically created. All users under the Account will be added to the PUBLIC role when they are created, and users cannot be removed. The initial permission of the PUBLIC role is CONNECT.","title":"Default roles"},{"location":"MatrixOne/0.6-Security/access-control/","text":"Privilege Control in MatrixOne - Access Control Permission The access control permissions of a MatrixOne are classified into System Permission and Object Permission . You can refer to the permissions granted to roles. System Permission System permissions are those of the initial system account. The system account can create and delete other accounts, and manage accounts. A system account cannot manage other resources of other accounts. Permissions Description CREATE ACCOUNT Create an account. It belongs only to the SYS account. DROP ACCOUNT Delete an account. It belongs only to the SYS account. ALTER ACCOUNT Manage accounts. It belongs only to the SYS account. Object Permission Object permission can be classified into Account Permission , User Permission , Role Permission , Database Permission , and Table Permission . Account Permission Permissions Description CREATE USER Create a user DROP USER Delete a user ALTER USER Modify users CREATE ROLE Create a role DROP ROLE Delete a role CREATE DATABASE Create a database DROP DATABASE Delete a database SHOW DATABASES View all databases in the current account CONNECT Use use [database | role] , execute SELECT which does not involve concrete object MANAGE GRANTS Permission management. You can authorize roles and inherit permission from roles ALL [PRIVILEGES] All permissions of the Account OWNERSHIP All permissions of the Account. The account can be set using WITH GRANT OPTION User Permission Permissions Description Ownership You can manage all user permission, including modifying user information, passwords, and deleting users, and transfer these permissions to other roles. Role Permission Permissions Description Ownership You can manage all rights of a role, including modifying the name, description, and deletion of a role, and transfer these rights to other roles. Database Permission Permissions Description SHOW TABLES View all tables in the current database CREATE TABLE Create a table DROP TABLE Delete a table CREATE VIEW Create a view\uff0c\u65e0\u5bf9\u5e94\u8868\u6743\u9650\u65f6\u521b\u5efa\u89c6\u56fe\u65e0\u6cd5\u67e5\u8be2 DROP VIEW Delete a view ALTER TABLE Modify a table ALTER VIEW Modify a view. A view created without the corresponding table permission cannot be queried. ALL [PRIVILEGES] All permission of database OWNERSHIP All permission of database. The database can be set using WITH GRANT OPTION Table Permission Permissions Description SELECT Execute the SELECT statement INSERT Execute the INSERT statement UPDATE Execute the UPDATE statement TRUNCATE Execute the TRUNCATE TABLE statement DELETE Execute the DELETE statement REFERENCE Allows a table to be referenced as a unique/primary key table for external constraints. View the structure of the table with the DESCRIBE or SHOW command INDEX Create or drop INDEX ALL Specifies all permissions for the table OWNERSHIP Specifies all permissions for the table, append WITH GRANT OPTION Table Routine Level Permission Permissions Description EXECUTE Permission to execute a function or stored procedure","title":"Access Control Permission"},{"location":"MatrixOne/0.6-Security/access-control/#privilege-control-in-matrixone-access-control-permission","text":"The access control permissions of a MatrixOne are classified into System Permission and Object Permission . You can refer to the permissions granted to roles.","title":"Privilege Control in MatrixOne - Access Control Permission"},{"location":"MatrixOne/0.6-Security/access-control/#system-permission","text":"System permissions are those of the initial system account. The system account can create and delete other accounts, and manage accounts. A system account cannot manage other resources of other accounts. Permissions Description CREATE ACCOUNT Create an account. It belongs only to the SYS account. DROP ACCOUNT Delete an account. It belongs only to the SYS account. ALTER ACCOUNT Manage accounts. It belongs only to the SYS account.","title":"System Permission"},{"location":"MatrixOne/0.6-Security/access-control/#object-permission","text":"Object permission can be classified into Account Permission , User Permission , Role Permission , Database Permission , and Table Permission .","title":"Object Permission"},{"location":"MatrixOne/0.6-Security/access-control/#account-permission","text":"Permissions Description CREATE USER Create a user DROP USER Delete a user ALTER USER Modify users CREATE ROLE Create a role DROP ROLE Delete a role CREATE DATABASE Create a database DROP DATABASE Delete a database SHOW DATABASES View all databases in the current account CONNECT Use use [database | role] , execute SELECT which does not involve concrete object MANAGE GRANTS Permission management. You can authorize roles and inherit permission from roles ALL [PRIVILEGES] All permissions of the Account OWNERSHIP All permissions of the Account. The account can be set using WITH GRANT OPTION","title":"Account Permission"},{"location":"MatrixOne/0.6-Security/access-control/#user-permission","text":"Permissions Description Ownership You can manage all user permission, including modifying user information, passwords, and deleting users, and transfer these permissions to other roles.","title":"User Permission"},{"location":"MatrixOne/0.6-Security/access-control/#role-permission","text":"Permissions Description Ownership You can manage all rights of a role, including modifying the name, description, and deletion of a role, and transfer these rights to other roles.","title":"Role Permission"},{"location":"MatrixOne/0.6-Security/access-control/#database-permission","text":"Permissions Description SHOW TABLES View all tables in the current database CREATE TABLE Create a table DROP TABLE Delete a table CREATE VIEW Create a view\uff0c\u65e0\u5bf9\u5e94\u8868\u6743\u9650\u65f6\u521b\u5efa\u89c6\u56fe\u65e0\u6cd5\u67e5\u8be2 DROP VIEW Delete a view ALTER TABLE Modify a table ALTER VIEW Modify a view. A view created without the corresponding table permission cannot be queried. ALL [PRIVILEGES] All permission of database OWNERSHIP All permission of database. The database can be set using WITH GRANT OPTION","title":"Database Permission"},{"location":"MatrixOne/0.6-Security/access-control/#table-permission","text":"Permissions Description SELECT Execute the SELECT statement INSERT Execute the INSERT statement UPDATE Execute the UPDATE statement TRUNCATE Execute the TRUNCATE TABLE statement DELETE Execute the DELETE statement REFERENCE Allows a table to be referenced as a unique/primary key table for external constraints. View the structure of the table with the DESCRIBE or SHOW command INDEX Create or drop INDEX ALL Specifies all permissions for the table OWNERSHIP Specifies all permissions for the table, append WITH GRANT OPTION","title":"Table Permission"},{"location":"MatrixOne/0.6-Security/access-control/#table-routine-level-permission","text":"Permissions Description EXECUTE Permission to execute a function or stored procedure","title":"Table Routine Level Permission"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/","text":"Make Your First Contribution Thank you for your interest in contributing to MatrixOne. Contributions are welcome from everyone. This document will help you get started on your first contribution to MatrixOne. How to Contribute? Before setting out contributions, you need to figure out what area you are trying to help us in. You can see Types of contributions for more details. As your first-ever contribution, it can be selected from the following categories which require little technical background of the contributor: To report a bug in the code To improve the MatrixOne documentation File an issue to describe the problem before working on it. In addition, you will also find issues labeled with good-first-issue , which represents issues suitable for new contributors. Such Issues contain clear steps and expected output. You may start your first contribution based on these issues. Assign Your Issue It's difficult to report an issue when you are just a newcomer on account of little knowledge of MatrixOne or relative contents, so we list good-first-issues suitable for new contributors to work with and be easy to fix. After deciding on a suitable issue to work on, you can comment /assign on the issue you would like to work on, and you will be automatically assigned to the issue. You can then find yourself listed under the Assignees section. Prerequisite Before working on the issue you are assigned, please make sure you have set up a development environment and installed MatrixOne. You can see Preparation for more details. Workflow Step 1: Fork the Repository Visit our Github Repository . On the top right of the page, click the Fork button (top right) to create a cloud-based fork of the repository. Step 2: Clone fork to local storage Open the repository you forked from MatrixOne. Click on the Code button and then the Copy to Clipboard icon. Next, move to the working directory you expect in local and launch your terminal. Run the following Git command: git clone <content you just copied> For example: git clone git@github.com:<yourname>/matrixone.git <yourname> is the ID you signed in at GitHub. This Git command downloads the content of MatrixOne repository you forked on GitHub to your local device. Step 3: Add MatrixOne repo as a remote repository You can add MatrixOrigin/MatrixOne repository as a remote repository in local with: git remote add upstream https://github.com/matrixorigin/matrixone.git upstream is the designation of this remote repository. If you want to replace it with other words you want, don't forget to replace it as well in the next steps, or some errors will happen. Step 4: Develop Make some changes Now you can edit the code, modify the documents, and make whatever changes you want about your issue in the branch you just created. Run MatrixOne in a standalone mode If you want to demonstrate whether the changes you made are valid or produce an issue, you need to run MatrixOne in a standalone mode. Before running, make sure you have installed MatrixOne according to our Install tutorial . And you can connect MatrixOne Serve according to the Connect tutorial . Step 5: Commit to your local repo Having completed your modification, you can add the files you just modified using the git add command: git add <filename> <filename> is the name of the file you just modified. And you can use the following command to add all the files in the current folder: git add . Next, you can commit these changes using the git commit command: git commit -m \"<commit message>\" -s Summarize and describe your modification briefly in the place of <commit message> . -s adds your sign-off message to your commit message. Step 6: Push to your remote repo After committing your modification, you should push your local branch to GitHub using the git push command, and we recommend you to push to a new branch: git push origin main:NEW_BRANCH NEW_BRANCH is the name of the new branch you created and push to. Also, you can replace it with another name you want. Step 7 Create a pull request Having pushed your changes, you can visit your folk at https://github.com/$user/matrixone , and click the Compare & Pull Request button to create a pull request in NEW_BRANCH for your modification to the MatrixOne repository. Note You should fill in the required information based on the PR template. Once your PR is opened, it will be assigned to reviewers. These reviewers will check your contribution and do a detailed review according to the correctness, bugs, style, sand so on. Step 8 After merging, Keep your repo in sync Congratulations that your contributions are accepted and merged into the project! And there are some operations left to do, which help keep project committing history clean and keep your local and remote repo synchronized with MatrixOne repo. Overrides local committing history with the following command: git pull --force upstream main:main Lastly, upgrade the main branch of your folk in Github: git push --force origin main:main","title":"Make Your First Contribution"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#make-your-first-contribution","text":"Thank you for your interest in contributing to MatrixOne. Contributions are welcome from everyone. This document will help you get started on your first contribution to MatrixOne.","title":"Make Your First Contribution"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#how-to-contribute","text":"Before setting out contributions, you need to figure out what area you are trying to help us in. You can see Types of contributions for more details. As your first-ever contribution, it can be selected from the following categories which require little technical background of the contributor: To report a bug in the code To improve the MatrixOne documentation File an issue to describe the problem before working on it. In addition, you will also find issues labeled with good-first-issue , which represents issues suitable for new contributors. Such Issues contain clear steps and expected output. You may start your first contribution based on these issues.","title":"How to Contribute?"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#assign-your-issue","text":"It's difficult to report an issue when you are just a newcomer on account of little knowledge of MatrixOne or relative contents, so we list good-first-issues suitable for new contributors to work with and be easy to fix. After deciding on a suitable issue to work on, you can comment /assign on the issue you would like to work on, and you will be automatically assigned to the issue. You can then find yourself listed under the Assignees section.","title":"Assign Your Issue"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#prerequisite","text":"Before working on the issue you are assigned, please make sure you have set up a development environment and installed MatrixOne. You can see Preparation for more details.","title":"Prerequisite"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#workflow","text":"","title":"Workflow"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-1-fork-the-repository","text":"Visit our Github Repository . On the top right of the page, click the Fork button (top right) to create a cloud-based fork of the repository.","title":"Step 1: Fork the Repository"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-2-clone-fork-to-local-storage","text":"Open the repository you forked from MatrixOne. Click on the Code button and then the Copy to Clipboard icon. Next, move to the working directory you expect in local and launch your terminal. Run the following Git command: git clone <content you just copied> For example: git clone git@github.com:<yourname>/matrixone.git <yourname> is the ID you signed in at GitHub. This Git command downloads the content of MatrixOne repository you forked on GitHub to your local device.","title":"Step 2: Clone fork to local storage"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-3-add-matrixone-repo-as-a-remote-repository","text":"You can add MatrixOrigin/MatrixOne repository as a remote repository in local with: git remote add upstream https://github.com/matrixorigin/matrixone.git upstream is the designation of this remote repository. If you want to replace it with other words you want, don't forget to replace it as well in the next steps, or some errors will happen.","title":"Step 3: Add MatrixOne repo as a remote repository"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-4-develop","text":"","title":"Step 4: Develop"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#make-some-changes","text":"Now you can edit the code, modify the documents, and make whatever changes you want about your issue in the branch you just created.","title":"Make some changes"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#run-matrixone-in-a-standalone-mode","text":"If you want to demonstrate whether the changes you made are valid or produce an issue, you need to run MatrixOne in a standalone mode. Before running, make sure you have installed MatrixOne according to our Install tutorial . And you can connect MatrixOne Serve according to the Connect tutorial .","title":"Run MatrixOne in a standalone mode"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-5-commit-to-your-local-repo","text":"Having completed your modification, you can add the files you just modified using the git add command: git add <filename> <filename> is the name of the file you just modified. And you can use the following command to add all the files in the current folder: git add . Next, you can commit these changes using the git commit command: git commit -m \"<commit message>\" -s Summarize and describe your modification briefly in the place of <commit message> . -s adds your sign-off message to your commit message.","title":"Step 5: Commit to your local repo"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-6-push-to-your-remote-repo","text":"After committing your modification, you should push your local branch to GitHub using the git push command, and we recommend you to push to a new branch: git push origin main:NEW_BRANCH NEW_BRANCH is the name of the new branch you created and push to. Also, you can replace it with another name you want.","title":"Step 6: Push to your remote repo"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-7-create-a-pull-request","text":"Having pushed your changes, you can visit your folk at https://github.com/$user/matrixone , and click the Compare & Pull Request button to create a pull request in NEW_BRANCH for your modification to the MatrixOne repository. Note You should fill in the required information based on the PR template. Once your PR is opened, it will be assigned to reviewers. These reviewers will check your contribution and do a detailed review according to the correctness, bugs, style, sand so on.","title":"Step 7 Create a pull request"},{"location":"MatrixOne/Contribution-Guide/make-your-first-contribution/#step-8-after-merging-keep-your-repo-in-sync","text":"Congratulations that your contributions are accepted and merged into the project! And there are some operations left to do, which help keep project committing history clean and keep your local and remote repo synchronized with MatrixOne repo. Overrides local committing history with the following command: git pull --force upstream main:main Lastly, upgrade the main branch of your folk in Github: git push --force origin main:main","title":"Step 8 After merging, Keep your repo in sync"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/","text":"Code Comment Style This document describes the code comment style applied to MatrixOne style. When you are ready to commit, please follow the style to write good code comments. Why does a good comment matter? To speed up the reviewing process To help maintain the code To improve the API document readability To improve the development efficiency of the whole team Where/When to comment? Write a comment where/when: For important code For obscure code For tricky or interesting code For a complex code block If a bug exists in the code but you cannot fix it or you just want to ignore it for the moment If the code is not optimal but you don't have a smarter way now To remind yourself or others of missing functionality or upcoming requirements not present in the code A comment is generally required for: Package (Go) File Type Constant Function Method Variable Typical algorithm Exported name Test case TODO FIXME How to comment? Format of a good comment Go Use // for a single-line comment and trailing comment Use /* ... */ for a block comment (used only when needed) Use gofmt to format your code Place the single-line and block comment above the code it's annotating Fold long lines of comments Each line of text in your code and comment should be at most 100 characters long For a comment containing a URL Use a relative URL if the text is linked to a file within the same GitHub repository Use an absolute URL in docs and docs-cn repositories if the code with this comment is copied from another repository Language for a good comment Word Use American English rather than British English color, canceling, synchronize (Recommended) colour, cancelling, synchronise (Not recommended) Use correct spelling Use standard or official capitalization MatrixOne, Raft, SQL (Right) matrixone, RAFT, sql (Wrong) Use words and expressions consistently \"dead link\" vs. \"broken link\" (Only one of them can appear in a single document) Do not use lengthy compound words Do not abbreviate unless it is absolutely necessary We should be used only when it means the code writer and the reader Sentence Use standard grammar and correct punctuation Use relatively short sentences Capitalize the first letter of sentences and end them with periods If a lower-case identifier comes at the beginning of a sentence, don't capitalize it // enterGame causes Players to enter the // video game, which is about a romantic // story in ancient China. func enterGame() os.Error { ... } When used for description, comments should be descriptive rather than imperative Opens the file (Right) Open the file (Wrong) Use \"this\" instead of \"the\" to refer to the current thing Gets the toolkit for this component (Recommended) Gets the toolkit for the component (Not recommended) The Markdown format is allowed Opens the log file Tips for a good comment Comment code while writing it Do not assume the code is self-evident Avoid unnecessary comments for simple code Write comments as if they were for you Make sure the comment is up-to-date Let the code speak for itself Thanks for your contribution!","title":"Code Comment Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#code-comment-style","text":"This document describes the code comment style applied to MatrixOne style. When you are ready to commit, please follow the style to write good code comments.","title":"Code Comment Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#why-does-a-good-comment-matter","text":"To speed up the reviewing process To help maintain the code To improve the API document readability To improve the development efficiency of the whole team","title":"Why does a good comment matter?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#wherewhen-to-comment","text":"Write a comment where/when: For important code For obscure code For tricky or interesting code For a complex code block If a bug exists in the code but you cannot fix it or you just want to ignore it for the moment If the code is not optimal but you don't have a smarter way now To remind yourself or others of missing functionality or upcoming requirements not present in the code A comment is generally required for: Package (Go) File Type Constant Function Method Variable Typical algorithm Exported name Test case TODO FIXME","title":"Where/When to comment?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#how-to-comment","text":"","title":"How to comment?"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#format-of-a-good-comment","text":"Go Use // for a single-line comment and trailing comment Use /* ... */ for a block comment (used only when needed) Use gofmt to format your code Place the single-line and block comment above the code it's annotating Fold long lines of comments Each line of text in your code and comment should be at most 100 characters long For a comment containing a URL Use a relative URL if the text is linked to a file within the same GitHub repository Use an absolute URL in docs and docs-cn repositories if the code with this comment is copied from another repository","title":"Format of a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#language-for-a-good-comment","text":"Word Use American English rather than British English color, canceling, synchronize (Recommended) colour, cancelling, synchronise (Not recommended) Use correct spelling Use standard or official capitalization MatrixOne, Raft, SQL (Right) matrixone, RAFT, sql (Wrong) Use words and expressions consistently \"dead link\" vs. \"broken link\" (Only one of them can appear in a single document) Do not use lengthy compound words Do not abbreviate unless it is absolutely necessary We should be used only when it means the code writer and the reader Sentence Use standard grammar and correct punctuation Use relatively short sentences Capitalize the first letter of sentences and end them with periods If a lower-case identifier comes at the beginning of a sentence, don't capitalize it // enterGame causes Players to enter the // video game, which is about a romantic // story in ancient China. func enterGame() os.Error { ... } When used for description, comments should be descriptive rather than imperative Opens the file (Right) Open the file (Wrong) Use \"this\" instead of \"the\" to refer to the current thing Gets the toolkit for this component (Recommended) Gets the toolkit for the component (Not recommended) The Markdown format is allowed Opens the log file","title":"Language for a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-comment-style/#tips-for-a-good-comment","text":"Comment code while writing it Do not assume the code is self-evident Avoid unnecessary comments for simple code Write comments as if they were for you Make sure the comment is up-to-date Let the code speak for itself Thanks for your contribution!","title":"Tips for a good comment"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/","text":"MatrixOne Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity, and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hai.jin@matrixorigin.io. All complaints will be reviewed and investigated and resulting in a response deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other the project leadership members. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#matrixone-code-of-conduct","text":"","title":"MatrixOne Code of Conduct"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity, and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#scope","text":"This Code of Conduct applies within all project spaces, and when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hai.jin@matrixorigin.io. All complaints will be reviewed and investigated and resulting in a response deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other the project leadership members.","title":"Enforcement"},{"location":"MatrixOne/Contribution-Guide/Code-Style/code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/","text":"Commit Message and Pull Request Style This document describes the commit message and Pull Request style applied to all MatrixOrigin repositories. When you are ready to commit, be sure to follow the style guide to write a good commit message, a good Pull Request title, and a description. Why a good commit message matters To speed up the reviewing process Help the reviewers better understand the PR Allow ignoring unimportant commits To help us write good Release Notes To help the future maintainers establish the context Provide better information when browsing the history What is a good commit message Elements of a good commit message: What is your change? (mandatory) It can be fixing a specific bug, adding a feature, improving performance, reliability, and stability, or just being a change for the sake of correctness. Why was this change made? (mandatory) For short and obvious patches, this part can be omitted, but it should be a clear description of what the approach was. What effect does the commit have? (optional) In addition to the obvious effects, this may include benchmarks, side effects, etc. For short and obvious patches, this part can be omitted. How to write a good commit message To write a good commitment message, we suggest following a good format, cultivating good habits, and using good language. Format of a good commit message Please follow the following style for all your commits : <subsystem>: <what changed> <BLANK LINE> <why this change was made> <BLANK LINE> <footer>(optional) For the first subject line: Use no more than 70 characters. If the changes affect two subsystems, use a comma (and whitespace) to separate them like util/codec, util/types: . If the changes affect three or more subsystems, you can use * instead, like *: . Use a lowercase letter on the text that immediately follows the colon. For example: \"media: update the DM architecture image\" Do not add a period at the end of a commit message. For the second line, always leave it blank. For the why part, if there is no specific reason for the change, you can use one of the generic reasons like \"Improve performance\", \"Improve test coverage.\" For other lines, use no more than 80 characters. Habits for a good commit message Summarize your change Describe clearly one logical change and avoid lazy messages as misc fixes Describe any limitations of the current code Do not end the subject with a period \".\" Do not assume the code is self-evident Do not assume reviewers understand the original issue Language for a good commit message Use the imperative mood for the first subject line Use simple verb tenses (eg. use \"add\" not \"added\") Use correct and standard grammar Use words and expressions consistently Use relatively short sentences Do not use lengthy compound words Do not abbreviate unless it's absolutely necessary Pull Request description style For the Pull Request description in the Conversation box, please refer to the following Pull Request description template and include the necessary information: **What type of PR is this?** - [ ] API-change - [ ] BUG - [ ] Improvement - [ ] Documentation - [ ] Feature - [ ] Test and CI - [ ] Code Refactoring **Which issue(s) this PR fixes:** issue # **What this PR does / why we need it:** **Special notes for your reviewer:** **Additional documentation (e.g. design docs, usage docs, etc.):** You may also use the checklist style to list contents if needed. The Markdown syntax is as follows: - [x] A checked line, something already done or fulfilled - [ ] An unchecked line, something not finished yet For short and obvious Pull Requests, you can omit some of the above information. Thanks for your contribution\uff01","title":"Commit & Pull Request Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#commit-message-and-pull-request-style","text":"This document describes the commit message and Pull Request style applied to all MatrixOrigin repositories. When you are ready to commit, be sure to follow the style guide to write a good commit message, a good Pull Request title, and a description.","title":"Commit Message and Pull Request Style"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#why-a-good-commit-message-matters","text":"To speed up the reviewing process Help the reviewers better understand the PR Allow ignoring unimportant commits To help us write good Release Notes To help the future maintainers establish the context Provide better information when browsing the history","title":"Why a good commit message matters"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#what-is-a-good-commit-message","text":"Elements of a good commit message: What is your change? (mandatory) It can be fixing a specific bug, adding a feature, improving performance, reliability, and stability, or just being a change for the sake of correctness. Why was this change made? (mandatory) For short and obvious patches, this part can be omitted, but it should be a clear description of what the approach was. What effect does the commit have? (optional) In addition to the obvious effects, this may include benchmarks, side effects, etc. For short and obvious patches, this part can be omitted.","title":"What is a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#how-to-write-a-good-commit-message","text":"To write a good commitment message, we suggest following a good format, cultivating good habits, and using good language.","title":"How to write a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#format-of-a-good-commit-message","text":"Please follow the following style for all your commits : <subsystem>: <what changed> <BLANK LINE> <why this change was made> <BLANK LINE> <footer>(optional) For the first subject line: Use no more than 70 characters. If the changes affect two subsystems, use a comma (and whitespace) to separate them like util/codec, util/types: . If the changes affect three or more subsystems, you can use * instead, like *: . Use a lowercase letter on the text that immediately follows the colon. For example: \"media: update the DM architecture image\" Do not add a period at the end of a commit message. For the second line, always leave it blank. For the why part, if there is no specific reason for the change, you can use one of the generic reasons like \"Improve performance\", \"Improve test coverage.\" For other lines, use no more than 80 characters.","title":"Format of a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#habits-for-a-good-commit-message","text":"Summarize your change Describe clearly one logical change and avoid lazy messages as misc fixes Describe any limitations of the current code Do not end the subject with a period \".\" Do not assume the code is self-evident Do not assume reviewers understand the original issue","title":"Habits for a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#language-for-a-good-commit-message","text":"Use the imperative mood for the first subject line Use simple verb tenses (eg. use \"add\" not \"added\") Use correct and standard grammar Use words and expressions consistently Use relatively short sentences Do not use lengthy compound words Do not abbreviate unless it's absolutely necessary","title":"Language for a good commit message"},{"location":"MatrixOne/Contribution-Guide/Code-Style/commit-pr-style/#pull-request-description-style","text":"For the Pull Request description in the Conversation box, please refer to the following Pull Request description template and include the necessary information: **What type of PR is this?** - [ ] API-change - [ ] BUG - [ ] Improvement - [ ] Documentation - [ ] Feature - [ ] Test and CI - [ ] Code Refactoring **Which issue(s) this PR fixes:** issue # **What this PR does / why we need it:** **Special notes for your reviewer:** **Additional documentation (e.g. design docs, usage docs, etc.):** You may also use the checklist style to list contents if needed. The Markdown syntax is as follows: - [x] A checked line, something already done or fulfilled - [ ] An unchecked line, something not finished yet For short and obvious Pull Requests, you can omit some of the above information. Thanks for your contribution\uff01","title":"Pull Request description style"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/","text":"Contribute Code MatrixOne is an open-source project maintained, improved, and extended by code contributors. This document describes the conventions of development workflow, and some styles and templates you need while contributing code to MatrixOne. If you encounter any problems or find some mistakes in participating in contribution to MatrixOne, please file an issue on GitHub or contact us on other platforms we support. Before Contributions Before you start developing, make sure you have read Preparation where you can follow the instructions to learn more about MatrixOne, development knowledge, and how to set up the development environment. Get familiar with the style It's necessary to keep a consistent style for code, code comments, commit messages, and pull requests when contributing to MatrixOne. When you put together your pull request, we highly recommend you comply with the following style guides which make MatrixOne easy to review, maintain, and develop. Code Style The coding style suggested by the Golang community is used in MatrixOne. See the style doc for details. Code Comment Style See the code comment style for details. Commit Message & Pull Request Style See the Commit Message & Pull Request Style for details. Workflow You can follow the workflow to operate development, and you can see Make Your First Contribution if you are a newcomer and need more detailed instructions about workflow. 1. Fork the MatrixOne repository on GitHub. 2. Clone your fork to your local machine with: git clone git@github.com:<yourname>/matrixone.git And add MatrixOne repo as a remote repository with: git remote add upstream https://github.com/matrixorigin/matrixone.git 3. Create a new branch. The branch name is up to you. git checkout -b topic-branch 4. Commit changes to your own branch locally, add necessary unit tests. 5. Push to a new branch in your own fork. git push origin main:NEW_BRANCH 6. Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. Add some labels if needed, and don't forget to refer to the related issue . 7. Once your PR gets approved, it will be merged sooner. After merging, synchronize your local repository. git pull --force upstream main:main 8. Synchronized the main branch of your remote repository in Github. git push --force origin main:main If you still have some trouble, please refer to GitHub Docs for help. Code review When you open a pull request, you can assign some reviewers, or just leave it blank. And you can add some related labels to make it easier to recognize the PR's type/priority/etc. During the review, reviewers would comment on your code snippet, and you can modify the code on your topic branch locally, commit the changes, and push it to GitHub where the new commits would be attached to the PR automatically. For detailed code review tips, See Review a pull request for details.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#contribute-code","text":"MatrixOne is an open-source project maintained, improved, and extended by code contributors. This document describes the conventions of development workflow, and some styles and templates you need while contributing code to MatrixOne. If you encounter any problems or find some mistakes in participating in contribution to MatrixOne, please file an issue on GitHub or contact us on other platforms we support.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#before-contributions","text":"Before you start developing, make sure you have read Preparation where you can follow the instructions to learn more about MatrixOne, development knowledge, and how to set up the development environment.","title":"Before Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#get-familiar-with-the-style","text":"It's necessary to keep a consistent style for code, code comments, commit messages, and pull requests when contributing to MatrixOne. When you put together your pull request, we highly recommend you comply with the following style guides which make MatrixOne easy to review, maintain, and develop. Code Style The coding style suggested by the Golang community is used in MatrixOne. See the style doc for details. Code Comment Style See the code comment style for details. Commit Message & Pull Request Style See the Commit Message & Pull Request Style for details.","title":"Get familiar with the style "},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#workflow","text":"You can follow the workflow to operate development, and you can see Make Your First Contribution if you are a newcomer and need more detailed instructions about workflow. 1. Fork the MatrixOne repository on GitHub. 2. Clone your fork to your local machine with: git clone git@github.com:<yourname>/matrixone.git And add MatrixOne repo as a remote repository with: git remote add upstream https://github.com/matrixorigin/matrixone.git 3. Create a new branch. The branch name is up to you. git checkout -b topic-branch 4. Commit changes to your own branch locally, add necessary unit tests. 5. Push to a new branch in your own fork. git push origin main:NEW_BRANCH 6. Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. Add some labels if needed, and don't forget to refer to the related issue . 7. Once your PR gets approved, it will be merged sooner. After merging, synchronize your local repository. git pull --force upstream main:main 8. Synchronized the main branch of your remote repository in Github. git push --force origin main:main If you still have some trouble, please refer to GitHub Docs for help.","title":"Workflow"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-code/#code-review","text":"When you open a pull request, you can assign some reviewers, or just leave it blank. And you can add some related labels to make it easier to recognize the PR's type/priority/etc. During the review, reviewers would comment on your code snippet, and you can modify the code on your topic branch locally, commit the changes, and push it to GitHub where the new commits would be attached to the PR automatically. For detailed code review tips, See Review a pull request for details.","title":"Code review"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/","text":"Contributing to MatrixOne Documentation Contributions to the MatrixOne documentation are welcome from everyone. The MatrixOne community strives to make the contribution process simple and straightforward. To do that, we create this page to walk you through the whole process step by step. Before you start Before you contribute, please take a minute to familiarize yourself with basic Markdown syntax and look at our Code of Conduct and the Google Developer Documentation Style Guide for some guidance on writing accessible, consistent, and inclusive documentation. How is MatrixOne documentation project organized? The MatrixOne documentation is managed in 3 repositories: The main project framework and CI&CD settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule that links to matrixone repo contents. The images are referred to as web image links from artwork repo. The matrixorigin.io has implemented a CI&CD project, which will be triggered by a new code merge and manual launch. This CI&CD workflow publishes the documentation to https://docs.matrixorigin.io/ . The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project. MatrixOne Documentation Structure The MatrixOne documentation content is planned with 6 main modules. Overview : MatrixOne's introduction, features, architecture. Get Started : How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Reference : SQL reference, Configuration parameters, Error Codes. FAQs : Product, Technical Design, SQL, Deployment FAQs. Develop : How to develop some applications based on MatrixOne using different programming languages. Troubleshoot : Introduce common errors and debugging tools. Release Notes : Release notes of all versions. Contribution Guide : How to contribute to MatrixOne project. Lift a finger If you are just correcting a typo or grammatical error, feel free to go ahead and create a pull request . Contribute Workflow 1 . File an issue and assign it to yourself by commenting /assign . 2 . Fork matrixorigin.io and matrixone repos. 3 . Clone the matrixorigin.io repo, using --recursive to retrieve the submodule of matrixone repo. git clone --recursive git@github.com:yourusername/matrixorigin.io.git Clone the matrixone repo to the other folder in local: git clone git@github.com:yourusername/matrixone.git 4 . Add matrixone repo as a remote repository in your local matrixone folder with: git remote add upstream https://github.com/matrixorigin/matrixone.git Add matrixorigin.io repo as a remote repository in your local matrixorigin.io folder with: git remote add upstream https://github.com/matrixorigin/matrixorigin.io.git 5 . As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. mkdocs serve 6 . Make your modification. If the modification concerns the project settings, update the sitemap with new pages, or update the CI&CD workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modification should be applied to the matrixone repository. 7 . Push your git commits to your remote Github matrixorigin.io and matrixone repos. We recommend you push to a new branch using the following commands: git push origin main:NEW_BRANCH 8 . Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. 9 . Once your code for both repositories is merged, you'll wait for a CI&CD workflow to restart running until the documentation website being updated. Note So once your pull requests are merged, the update to the website is not immediate. We'll need to run a manual launch to update it. 10 . At last, you should update your local and remote repo to help keep committing history clean. Override your local committing repo with: git pull --force upstream main:main Update the main branch of your remote repo in Github: git push --force origin main:main Note Most processes should be implemented in both matrixorigin.io and matrixone . Contribute a blog article If you would like to write an article for our blog, please file an issue or send it to dengnan@matrixorigin.io . Feel free to submit either a completed draft or any article ideas. All submissions will be reviewed as quickly as possible. If your article or idea seems like a good fit for the blog, we will reach out to you directly.","title":"Contribute Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contributing-to-matrixone-documentation","text":"Contributions to the MatrixOne documentation are welcome from everyone. The MatrixOne community strives to make the contribution process simple and straightforward. To do that, we create this page to walk you through the whole process step by step.","title":"Contributing to MatrixOne Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#before-you-start","text":"Before you contribute, please take a minute to familiarize yourself with basic Markdown syntax and look at our Code of Conduct and the Google Developer Documentation Style Guide for some guidance on writing accessible, consistent, and inclusive documentation.","title":"Before you start"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#how-is-matrixone-documentation-project-organized","text":"The MatrixOne documentation is managed in 3 repositories: The main project framework and CI&CD settings are in the matrixorigin.io repo. The markdown contents are in the docs/en/MatrixOne folder of matrixone repo. The images and unstructured data are located in the artwork repo. The matrixorigin.io repo contains a submodule that links to matrixone repo contents. The images are referred to as web image links from artwork repo. The matrixorigin.io has implemented a CI&CD project, which will be triggered by a new code merge and manual launch. This CI&CD workflow publishes the documentation to https://docs.matrixorigin.io/ . The documentation project is based on the mkdocs-material . You can find the corresponding syntax and commands with this project.","title":"How is MatrixOne documentation project organized?"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#matrixone-documentation-structure","text":"The MatrixOne documentation content is planned with 6 main modules. Overview : MatrixOne's introduction, features, architecture. Get Started : How to quickly deploy and run a MatrixOne in a standalone or a distributed environment. Reference : SQL reference, Configuration parameters, Error Codes. FAQs : Product, Technical Design, SQL, Deployment FAQs. Develop : How to develop some applications based on MatrixOne using different programming languages. Troubleshoot : Introduce common errors and debugging tools. Release Notes : Release notes of all versions. Contribution Guide : How to contribute to MatrixOne project.","title":"MatrixOne Documentation Structure"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#lift-a-finger","text":"If you are just correcting a typo or grammatical error, feel free to go ahead and create a pull request .","title":"Lift a finger"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contribute-workflow","text":"1 . File an issue and assign it to yourself by commenting /assign . 2 . Fork matrixorigin.io and matrixone repos. 3 . Clone the matrixorigin.io repo, using --recursive to retrieve the submodule of matrixone repo. git clone --recursive git@github.com:yourusername/matrixorigin.io.git Clone the matrixone repo to the other folder in local: git clone git@github.com:yourusername/matrixone.git 4 . Add matrixone repo as a remote repository in your local matrixone folder with: git remote add upstream https://github.com/matrixorigin/matrixone.git Add matrixorigin.io repo as a remote repository in your local matrixorigin.io folder with: git remote add upstream https://github.com/matrixorigin/matrixorigin.io.git 5 . As the local repo has the full documentation project code, you can run mkdocs serve under matrixorigin.io folder, and check http://localhost:8000 to check if this project runs well. mkdocs serve 6 . Make your modification. If the modification concerns the project settings, update the sitemap with new pages, or update the CI&CD workflow code. You can always check http://localhost:8000 to see if your modification is effective. If your modification is about the markdown contents, after you update the docs submodule of matrixorigin.io , the same modification should be applied to the matrixone repository. 7 . Push your git commits to your remote Github matrixorigin.io and matrixone repos. We recommend you push to a new branch using the following commands: git push origin main:NEW_BRANCH 8 . Go back to GitHub, and submit a pull request in NEW_BRANCH so that we can review your changes. 9 . Once your code for both repositories is merged, you'll wait for a CI&CD workflow to restart running until the documentation website being updated. Note So once your pull requests are merged, the update to the website is not immediate. We'll need to run a manual launch to update it. 10 . At last, you should update your local and remote repo to help keep committing history clean. Override your local committing repo with: git pull --force upstream main:main Update the main branch of your remote repo in Github: git push --force origin main:main Note Most processes should be implemented in both matrixorigin.io and matrixone .","title":"Contribute Workflow"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/contribute-documentation/#contribute-a-blog-article","text":"If you would like to write an article for our blog, please file an issue or send it to dengnan@matrixorigin.io . Feel free to submit either a completed draft or any article ideas. All submissions will be reviewed as quickly as possible. If your article or idea seems like a good fit for the blog, we will reach out to you directly.","title":"Contribute a blog article"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/","text":"Make a Design Proposal Many changes including bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow, which we have already introduced in the previous chapter. However, when you come up with a new feature you need or expect MatrixOne to achieve, we encourage you to propose your idea and express it as a technical design document. Therefore, this page is intended to guide you to provide a consistent and controlled path for new features to enter the MatrixOne projects, so that all stakeholders can fully understand the direction the project is evolving towards. This page defines the best practices procedure for making a proposal in MatrixOne projects. Before writing a design document Making enough preparations ahead of the design document can promote your working efficiency and increase the likelihood of it being accepted. Oppositely, a rough and casual design document may be rejected quickly. We motivate you to ask for help from experienced developers in order to obtain valuable suggestions to frame your design architecture or fill in details, which undoubtedly will upgrade the document to be desirable. The most common channel for preparing for writing a design document is the Github issue. You can file a Feature Request or Refactoring Request to discuss your ideas. Process Generally, you can follow these steps to finish the whole process: Create an issue describing the problem, goal, and solution. Get responses from other contributors to see if your proposal is generally acceptable and whether or not you should make some modifications. Create a pull request with a design document based on the design template . Make conversation with reviewers, and revise the text in response. The design document is accepted or rejected when at least two committers reach a consensus and there is no objection from the committer. If accepted, create a tracking issue for the design document or convert one from a previous discussion issue. The tracking issue basically tracks subtasks and progress. And refer to the tracking issue in the design document replacing the placeholder in the template. Merge the pull request of design. Start the implementation. Please refer to the tracking issue from subtasks to track the progress.","title":"Make a Design"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#make-a-design-proposal","text":"Many changes including bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow, which we have already introduced in the previous chapter. However, when you come up with a new feature you need or expect MatrixOne to achieve, we encourage you to propose your idea and express it as a technical design document. Therefore, this page is intended to guide you to provide a consistent and controlled path for new features to enter the MatrixOne projects, so that all stakeholders can fully understand the direction the project is evolving towards. This page defines the best practices procedure for making a proposal in MatrixOne projects.","title":"Make a Design Proposal"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#before-writing-a-design-document","text":"Making enough preparations ahead of the design document can promote your working efficiency and increase the likelihood of it being accepted. Oppositely, a rough and casual design document may be rejected quickly. We motivate you to ask for help from experienced developers in order to obtain valuable suggestions to frame your design architecture or fill in details, which undoubtedly will upgrade the document to be desirable. The most common channel for preparing for writing a design document is the Github issue. You can file a Feature Request or Refactoring Request to discuss your ideas.","title":"Before writing a design document"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/make-a-design/#process","text":"Generally, you can follow these steps to finish the whole process: Create an issue describing the problem, goal, and solution. Get responses from other contributors to see if your proposal is generally acceptable and whether or not you should make some modifications. Create a pull request with a design document based on the design template . Make conversation with reviewers, and revise the text in response. The design document is accepted or rejected when at least two committers reach a consensus and there is no objection from the committer. If accepted, create a tracking issue for the design document or convert one from a previous discussion issue. The tracking issue basically tracks subtasks and progress. And refer to the tracking issue in the design document replacing the placeholder in the template. Merge the pull request of design. Start the implementation. Please refer to the tracking issue from subtasks to track the progress.","title":"Process"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/","text":"Preparation Before contributing, it's necessary to make some preparations to learn more about MatrixOne and other prerevalant information which can improve developing and reviewing efficiency. Thanks for understanding that this repository uses English as a shared language. Maintainers do not use machine translation to avoid miscommunication due to errors in translation. If the description of an issue / PR is written in non-English languages, it may be closed. If English is not your native language and you aren't sure about any of these, don't hesitate to ask for help in your pull request! What is MatrixOne Basic Information You can see MatrixOne Introduction for key features of MatrixOne, MatrixOne Architecture for MatrixOne architecture, and operational logic. Besides, you can browse SQL Reference and Custom Functions to know more about our interactive details. These introductions will help you go through you the key concepts and user details to understand the project. Roadmap MatrixOne v0.5.1 has been released, you can see Release Notes know more information. Currently, we are working on v0.6.0 releases, the job tasks of these releases are listed in the Github milestones 0.6.0 . For the long-term project roadmap, please refer to MatrixOne roadmap for a more general overview. What Contributions Can I Make Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community. See Types of Contributions for more details. To report a bug or a problem with the documentation, please file an issue providing the details of the problem. Don't forget to add a proper label for your issue, and follow the issue templates . To propose a new feature, please file a new feature request . Describe the intended feature and discuss the design and implementation with the team and community. Once the team agrees on the plan, you can follow the Contribution Workflow to implement it. To implement a feature or bug-fix for an existing outstanding issue, follow the Contribution workflow . If you need more context on a particular issue, comment on the issue to let people know. Working Directories and Files For contributing code, matrixone is the main repository you'll be working on. The main working directories are listed below: Directory Working Files /LICENSES The license of dependant libraries /cmd The binary entry of Go executables optools The test and deployment utilities pkg The main codebase of MatrixOne project For different technical modules, a code structure under /pkg is as shown in the following table. Directory Modules frontend/ SQL Frontend sql/parser SQL Parser sql/ MPP SQL Execution sql/vectorize Vectorization of SQL Execution catalog/ Catalog for storing metadata vm/engine Storage engine vm/engine/aoe Analytics Optimized Engine vm/engine/tpe Transaction Processing Engine buildin/ System builtin functions For contributing documentation, matrixone , matrixorigin.io and artwork are all the main repositories you'll be working on. For more details, please refer to Contribute Documentation . Directory Working Files matrixone/docs/en/MatrixOne The content files of MatrixOne documentation website matrixone/docs/rfcs The design docs of MatrixOne project matrixorigin.io/mkdocs.yml The configuration file of the documentation website artwork/docs The images, screenshots and diagrams of documentation webstie Set up your Development Environment Go Environment MatrixOne is written in Go. Before you start contributing code to MatrixOne, you need to set up your GO development environment. Install Go version 1.18 . You can see How to Write Go Code for more information. Define GOPATH environment variable and modify PATH to access your Go binaries. A common setup is as follows. You could always specify it based on your own flavor. export GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Note MatrixOne uses Go Modules to manage dependencies. Github & Git MatrixOne is an open-source project built on Github, providing project maintainers and contributors with a platform to work together. Thus, in order to start working with MatrixOne repository, you will need a GitHub account and learn basic git commands. If you don't have a Github account, please register at https://github.com . In case you do not have SSH keys, you should generate them and then upload them on GitHub. It is required for sending over your patches. It is also possible to use the same SSH keys that you use with any other SSH servers - probably you already have those. For detailed information about Github, you can see Github Docs . To work with git repositories, please install git . And you can learn how to use it throuth following introduction: A brief manual can be found here . A detailed manual can be found here . Install and Run MatrixOne See Install Standalone MatrixOne for more details.","title":"Preparation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#preparation","text":"Before contributing, it's necessary to make some preparations to learn more about MatrixOne and other prerevalant information which can improve developing and reviewing efficiency. Thanks for understanding that this repository uses English as a shared language. Maintainers do not use machine translation to avoid miscommunication due to errors in translation. If the description of an issue / PR is written in non-English languages, it may be closed. If English is not your native language and you aren't sure about any of these, don't hesitate to ask for help in your pull request!","title":"Preparation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#what-is-matrixone","text":"","title":"What is MatrixOne"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#basic-information","text":"You can see MatrixOne Introduction for key features of MatrixOne, MatrixOne Architecture for MatrixOne architecture, and operational logic. Besides, you can browse SQL Reference and Custom Functions to know more about our interactive details. These introductions will help you go through you the key concepts and user details to understand the project.","title":"Basic Information"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#roadmap","text":"MatrixOne v0.5.1 has been released, you can see Release Notes know more information. Currently, we are working on v0.6.0 releases, the job tasks of these releases are listed in the Github milestones 0.6.0 . For the long-term project roadmap, please refer to MatrixOne roadmap for a more general overview.","title":"Roadmap"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#what-contributions-can-i-make","text":"Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community. See Types of Contributions for more details. To report a bug or a problem with the documentation, please file an issue providing the details of the problem. Don't forget to add a proper label for your issue, and follow the issue templates . To propose a new feature, please file a new feature request . Describe the intended feature and discuss the design and implementation with the team and community. Once the team agrees on the plan, you can follow the Contribution Workflow to implement it. To implement a feature or bug-fix for an existing outstanding issue, follow the Contribution workflow . If you need more context on a particular issue, comment on the issue to let people know.","title":"What Contributions Can I Make"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#working-directories-and-files","text":"For contributing code, matrixone is the main repository you'll be working on. The main working directories are listed below: Directory Working Files /LICENSES The license of dependant libraries /cmd The binary entry of Go executables optools The test and deployment utilities pkg The main codebase of MatrixOne project For different technical modules, a code structure under /pkg is as shown in the following table. Directory Modules frontend/ SQL Frontend sql/parser SQL Parser sql/ MPP SQL Execution sql/vectorize Vectorization of SQL Execution catalog/ Catalog for storing metadata vm/engine Storage engine vm/engine/aoe Analytics Optimized Engine vm/engine/tpe Transaction Processing Engine buildin/ System builtin functions For contributing documentation, matrixone , matrixorigin.io and artwork are all the main repositories you'll be working on. For more details, please refer to Contribute Documentation . Directory Working Files matrixone/docs/en/MatrixOne The content files of MatrixOne documentation website matrixone/docs/rfcs The design docs of MatrixOne project matrixorigin.io/mkdocs.yml The configuration file of the documentation website artwork/docs The images, screenshots and diagrams of documentation webstie","title":"Working Directories and Files"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#set-up-your-development-environment","text":"","title":"Set up your Development Environment"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#go-environment","text":"MatrixOne is written in Go. Before you start contributing code to MatrixOne, you need to set up your GO development environment. Install Go version 1.18 . You can see How to Write Go Code for more information. Define GOPATH environment variable and modify PATH to access your Go binaries. A common setup is as follows. You could always specify it based on your own flavor. export GOPATH = $HOME /go export PATH = $PATH : $GOPATH /bin Note MatrixOne uses Go Modules to manage dependencies.","title":"Go Environment"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#github-git","text":"MatrixOne is an open-source project built on Github, providing project maintainers and contributors with a platform to work together. Thus, in order to start working with MatrixOne repository, you will need a GitHub account and learn basic git commands. If you don't have a Github account, please register at https://github.com . In case you do not have SSH keys, you should generate them and then upload them on GitHub. It is required for sending over your patches. It is also possible to use the same SSH keys that you use with any other SSH servers - probably you already have those. For detailed information about Github, you can see Github Docs . To work with git repositories, please install git . And you can learn how to use it throuth following introduction: A brief manual can be found here . A detailed manual can be found here .","title":"Github &amp; Git"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/preparation/#install-and-run-matrixone","text":"See Install Standalone MatrixOne for more details.","title":"Install and Run MatrixOne"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/","text":"Report Issues Any problem is encouraged to be published when you participate in MatrixOne, and you can report issues about this problem on GitHub with templates and labels we suggest. This page is intended to introduce templates, labels, and precautions you will follow when you report issues. Avoid Duplicated Issues Before reporting an issue, you should see whether the problem has already been reported. You can use the search bar to search for existing issues. Issue Templates If the problem you're reporting is not already in the issue tracker, you can file an issue with your GitHub account. MatrixOne uses issue templates for different kinds of issues. Issue templates are a bundle of questions to collect necessary information about the problem to make it easy for other contributors to participate. MatrixOne suggests 6 types of issue templates: A Bug report issue template consists of the information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type, and so on. Steps to Reproduce List steps to reproduce what you encountered. Actual & Expected Behavior Describe what's the observed and your expected behavior respectively. A Feature Request consists of the information below: Is your feature request related to a problem? A clear and concise description of the problem and state why you need this feature. Describe the feature you'd like: A clear and concise description of what you want to happen. Describe alternatives you've considered: A clear and concise description of any alternative solutions or features you've considered. Teachability, Documentation, Adoption, Migration Strategy: If you can, explain some scenarios in how users might use this, and situations it would be helpful. Any API designs, mockups, or diagrams are also helpful. A Documentation Issue consists of the information below: Describe the issue A clear and concise description of what's wrong in the documentation. Additional context Add any other context about the problem here. A Performance Question consists of the information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type, and so on. Steps to Reproduce List steps detailedly to reproduce the operations to test performance. Expected & Actual Performance Describe what's the observed and your expected performance respectively. Additional context Add any other context about the problem here. For example: Have you compared MatrixOne with other databases? If yes, what's their difference? An Enhancement consists of the information below: What would you like to be added A concise description of what you're expecting/suggesting. Why is this needed A concise description of the reason/motivation. Anything else Anything that will give us more details about your issue! A Refactoring Request consists of the information below: Is your refactoring request related to a problem? A clear and concise description of what the problem is. Describe the solution you'd like A clear and concise description of the refactoring you want to do. Describe alternatives you've considered A clear and concise description of any alternative solutions or refactoring methods you've considered. Additional context Add any other context or screenshots about the refactoring request here. A General Question : If the previous templates don't fit with what you'd like to report or ask, please use this general question template to file the issue. Before asking a question, make sure you have: Searched open and closed GitHub issues Read the documentation: MatrixOne Readme MatrixOne Doc Issue Labels Once your issue is submitted, it will automatically be labeled with needs-triage , a MatrixOne maintainer will look at the issue, tag it with more suitable labels, and assign it to a suitable developer. If you'd like to work on the issue by yourself, you can comment /assign on the issue you would like to work on, and you will be automatically assigned to the issue. You can then find yourself listed under the Assignees section. Good First Issues When you make the first contribution to MatrixOne, you can select one of the issues labeled good-first-issues each of which is relatively approachable for first-time contributors. For detailed suggestions, you need when you make the first contribution, you can see Make Your First Contribution .","title":"Report an Issue"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#report-issues","text":"Any problem is encouraged to be published when you participate in MatrixOne, and you can report issues about this problem on GitHub with templates and labels we suggest. This page is intended to introduce templates, labels, and precautions you will follow when you report issues.","title":"Report Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#avoid-duplicated-issues","text":"Before reporting an issue, you should see whether the problem has already been reported. You can use the search bar to search for existing issues.","title":"Avoid Duplicated Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#issue-templates","text":"If the problem you're reporting is not already in the issue tracker, you can file an issue with your GitHub account. MatrixOne uses issue templates for different kinds of issues. Issue templates are a bundle of questions to collect necessary information about the problem to make it easy for other contributors to participate. MatrixOne suggests 6 types of issue templates: A Bug report issue template consists of the information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type, and so on. Steps to Reproduce List steps to reproduce what you encountered. Actual & Expected Behavior Describe what's the observed and your expected behavior respectively. A Feature Request consists of the information below: Is your feature request related to a problem? A clear and concise description of the problem and state why you need this feature. Describe the feature you'd like: A clear and concise description of what you want to happen. Describe alternatives you've considered: A clear and concise description of any alternative solutions or features you've considered. Teachability, Documentation, Adoption, Migration Strategy: If you can, explain some scenarios in how users might use this, and situations it would be helpful. Any API designs, mockups, or diagrams are also helpful. A Documentation Issue consists of the information below: Describe the issue A clear and concise description of what's wrong in the documentation. Additional context Add any other context about the problem here. A Performance Question consists of the information below: Detail Environment Describe the details about the operating environment including version, hardware parameters, OS type, and so on. Steps to Reproduce List steps detailedly to reproduce the operations to test performance. Expected & Actual Performance Describe what's the observed and your expected performance respectively. Additional context Add any other context about the problem here. For example: Have you compared MatrixOne with other databases? If yes, what's their difference? An Enhancement consists of the information below: What would you like to be added A concise description of what you're expecting/suggesting. Why is this needed A concise description of the reason/motivation. Anything else Anything that will give us more details about your issue! A Refactoring Request consists of the information below: Is your refactoring request related to a problem? A clear and concise description of what the problem is. Describe the solution you'd like A clear and concise description of the refactoring you want to do. Describe alternatives you've considered A clear and concise description of any alternative solutions or refactoring methods you've considered. Additional context Add any other context or screenshots about the refactoring request here. A General Question : If the previous templates don't fit with what you'd like to report or ask, please use this general question template to file the issue. Before asking a question, make sure you have: Searched open and closed GitHub issues Read the documentation: MatrixOne Readme MatrixOne Doc","title":"Issue Templates"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#issue-labels","text":"Once your issue is submitted, it will automatically be labeled with needs-triage , a MatrixOne maintainer will look at the issue, tag it with more suitable labels, and assign it to a suitable developer. If you'd like to work on the issue by yourself, you can comment /assign on the issue you would like to work on, and you will be automatically assigned to the issue. You can then find yourself listed under the Assignees section.","title":"Issue Labels"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/report-an-issue/#good-first-issues","text":"When you make the first contribution to MatrixOne, you can select one of the issues labeled good-first-issues each of which is relatively approachable for first-time contributors. For detailed suggestions, you need when you make the first contribution, you can see Make Your First Contribution .","title":"Good First Issues"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/","text":"Reviews For MatrixOne, any type of review for a pull request is crucial, where you can classify the pull request to help look for more suitable experts to solve related problems or propose your suggestions to code for not only content but style. It's not necessary to doubt whether your review is constructive and useful enough because no matter how tiny, a suggestion may profoundly influence MatrixOne. Certainly, before reviewing we ask that you browse this page to learn basic requirements and relative methods. Principles of the code review When you review a pull request, there are several rules and suggestions you should take to propose better comments. Regardless of the specifics, we suggest you stay friendly first: Be respectful Be respectful to every pull request author and other reviewers. Code review is a part of community activities so you should follow the community requirements. Be careful with tone Try to frame your comments as suggestions or questions instead of commands. If the tone is softer, your reviews will be easier to accept. Be generous with your compliments We recommend you offer encouragement and appreciation to the authors for their good practices in the code segments. In many cases, telling the authors what they did is right is even more valuable than telling them what they did is wrong. Additionally, here are some suggestions in terms of content: Provide more We encourage you to provide additional details and context of your review process as much as you can. Undoubtedly, the more detailed your review, the more useful it will be to others. If you test the pull request, please report the result and your test environment details. If you request some changes, try to suggest how. Keep objective Avoid individual biased opinions and subjective emotions. Of course, everyone will comment with more or less subjective opinions. However, as a good reviewer, you should consider the technique and data facts rather than your own personal preferences. Case by case It's difficult to decide whether it's more reasonable to accept or reject when you are faced with a complex problem. Regrettably, we can't provide a certain answer because it always depends on the specific situation, which asks you to balance the pros and cons. Classifying pull requests Some pull request authors may not be familiar with MatrixOne, the MatriOne development workflow, or the MatrixOne community. They don't know what labels should be added to the pull requests or which expert could be asked for a review. If you are able to, it would be great for you to triage the pull requests, add suitable labels to the pull requests, and request corresponding experts to review the pull requests. These actions could help more contributors notice the pull requests and make quick responses. Checking pull requests There are some basic aspects to check when you review a pull request: Concentration One pull request should only do one thing. No matter how small it is, the change does exactly one thing and gets it right. Don't mix other changes into it. Tests A pull request should be test covered, whether the tests are unit tests, integration tests, or end-to-end tests. Tests should be sufficient, correct, and don't slow down the CI pipeline largely. Functionality The pull request should implement what the author intends to do, fit well in the existing code base, and resolve a real problem for users. Thus you should check whether or not the pull request achieves the intention and you could follow the discussions in the corresponding GitHub issue . Style Code in the pull request should follow a common programming style . However, sometimes the existing code is inconsistent with the style guide. You should maintain consistency with the existing code or file a new issue to fix the existing code style first. Documentation If a pull request changes how users build, test, interact with, or release code, you must check whether it also updates the related documentation such as README.md and any generated reference docs. Similarly, if a pull request deletes or deprecates code, you must check whether or not the corresponding documentation should also be deleted. Performance If you find the pull request may affect performance, you could ask the author to provide a benchmark result.","title":"Review a Pull Request"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#reviews","text":"For MatrixOne, any type of review for a pull request is crucial, where you can classify the pull request to help look for more suitable experts to solve related problems or propose your suggestions to code for not only content but style. It's not necessary to doubt whether your review is constructive and useful enough because no matter how tiny, a suggestion may profoundly influence MatrixOne. Certainly, before reviewing we ask that you browse this page to learn basic requirements and relative methods.","title":"Reviews"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#principles-of-the-code-review","text":"When you review a pull request, there are several rules and suggestions you should take to propose better comments. Regardless of the specifics, we suggest you stay friendly first: Be respectful Be respectful to every pull request author and other reviewers. Code review is a part of community activities so you should follow the community requirements. Be careful with tone Try to frame your comments as suggestions or questions instead of commands. If the tone is softer, your reviews will be easier to accept. Be generous with your compliments We recommend you offer encouragement and appreciation to the authors for their good practices in the code segments. In many cases, telling the authors what they did is right is even more valuable than telling them what they did is wrong. Additionally, here are some suggestions in terms of content: Provide more We encourage you to provide additional details and context of your review process as much as you can. Undoubtedly, the more detailed your review, the more useful it will be to others. If you test the pull request, please report the result and your test environment details. If you request some changes, try to suggest how. Keep objective Avoid individual biased opinions and subjective emotions. Of course, everyone will comment with more or less subjective opinions. However, as a good reviewer, you should consider the technique and data facts rather than your own personal preferences. Case by case It's difficult to decide whether it's more reasonable to accept or reject when you are faced with a complex problem. Regrettably, we can't provide a certain answer because it always depends on the specific situation, which asks you to balance the pros and cons.","title":"Principles of the code review"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#classifying-pull-requests","text":"Some pull request authors may not be familiar with MatrixOne, the MatriOne development workflow, or the MatrixOne community. They don't know what labels should be added to the pull requests or which expert could be asked for a review. If you are able to, it would be great for you to triage the pull requests, add suitable labels to the pull requests, and request corresponding experts to review the pull requests. These actions could help more contributors notice the pull requests and make quick responses.","title":"Classifying pull requests"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/review-a-pull-request/#checking-pull-requests","text":"There are some basic aspects to check when you review a pull request: Concentration One pull request should only do one thing. No matter how small it is, the change does exactly one thing and gets it right. Don't mix other changes into it. Tests A pull request should be test covered, whether the tests are unit tests, integration tests, or end-to-end tests. Tests should be sufficient, correct, and don't slow down the CI pipeline largely. Functionality The pull request should implement what the author intends to do, fit well in the existing code base, and resolve a real problem for users. Thus you should check whether or not the pull request achieves the intention and you could follow the discussions in the corresponding GitHub issue . Style Code in the pull request should follow a common programming style . However, sometimes the existing code is inconsistent with the style guide. You should maintain consistency with the existing code or file a new issue to fix the existing code style first. Documentation If a pull request changes how users build, test, interact with, or release code, you must check whether it also updates the related documentation such as README.md and any generated reference docs. Similarly, if a pull request deletes or deprecates code, you must check whether or not the corresponding documentation should also be deleted. Performance If you find the pull request may affect performance, you could ask the author to provide a benchmark result.","title":"Checking pull requests"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/","text":"Types of Contributions Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community: Contribute Code Contribution type Description Report a bug To report a problem with MatrixOne, file an issue on GitHub. Include detailed information about the problem you've encountered. Contribute code You can fix a bug for any outstanding issues on GitHub, improve the code, or propose a design or implementation for a new MatrixOne feature. See Contribute Code for the contribution conventions and best practices. Review or approve pull requests Review or approve pull requests for the MatrixOne project as a reviewer or maintainer. Contribute to MatrixOne Documentation Contribution type Description Report or fix a technical documentation issue You can either click edit the page directly on the target page of MatrixOne, or file an issue on MatrixOne repository with detailed information, and, if possible, propose changes by creating a pull request . Contribute a new piece of technical document Before contributing a full-length technical document, read Contribution Documentation . Other Contributions Contribution type Description Share your demos and solutions Show MatrixOne users how to leverage the platform in specific scenarios. Send your use case to dengnan@matrixorigin.io and we'll post it in the community. Author a blog article, user story, or whitepapers Write high-quality content that clearly and accurately explains technical details about MatrixOne. Give a tech talk or host a live broadcast Give talks or host live broadcasts that help raise awareness around MatrixOne. Support MatrixOne users Help users on GitHub solve the problems they meet while using MatrixOne. Issue triage Adding descriptive labels to our GitHub issues speeds up routing issues to the right person in charge. It is a great contribution to the operation of the MatrixOne project. Contribute otherwise Any contribution that plays a positive role in the development of MatrixOne and its open-source community will be considered for eligibility.","title":"Types of Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#types-of-contributions","text":"Contributions to MatrixOne are not limited to writing code. What follows are different ways to participate in the MatrixOne project and engage with our vibrant open-source community:","title":"Types of Contributions"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#contribute-code","text":"Contribution type Description Report a bug To report a problem with MatrixOne, file an issue on GitHub. Include detailed information about the problem you've encountered. Contribute code You can fix a bug for any outstanding issues on GitHub, improve the code, or propose a design or implementation for a new MatrixOne feature. See Contribute Code for the contribution conventions and best practices. Review or approve pull requests Review or approve pull requests for the MatrixOne project as a reviewer or maintainer.","title":"Contribute Code"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#contribute-to-matrixone-documentation","text":"Contribution type Description Report or fix a technical documentation issue You can either click edit the page directly on the target page of MatrixOne, or file an issue on MatrixOne repository with detailed information, and, if possible, propose changes by creating a pull request . Contribute a new piece of technical document Before contributing a full-length technical document, read Contribution Documentation .","title":"Contribute to MatrixOne Documentation"},{"location":"MatrixOne/Contribution-Guide/How-to-Contribute/types-of-contributions/#other-contributions","text":"Contribution type Description Share your demos and solutions Show MatrixOne users how to leverage the platform in specific scenarios. Send your use case to dengnan@matrixorigin.io and we'll post it in the community. Author a blog article, user story, or whitepapers Write high-quality content that clearly and accurately explains technical details about MatrixOne. Give a tech talk or host a live broadcast Give talks or host live broadcasts that help raise awareness around MatrixOne. Support MatrixOne users Help users on GitHub solve the problems they meet while using MatrixOne. Issue triage Adding descriptive labels to our GitHub issues speeds up routing issues to the right person in charge. It is a great contribution to the operation of the MatrixOne project. Contribute otherwise Any contribution that plays a positive role in the development of MatrixOne and its open-source community will be considered for eligibility.","title":"Other Contributions"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/","text":"Develop an aggregate function Prerequisite To develop an aggregate function for MatrixOne, you need a basic knowledge of Golang programming. You can go through this excellent Golang tutorial to learn some basic Golang concepts. Before you start Make sure that you have Go installed and have cloned the MatrixOne code base. Please refer to Preparation and Contribute Code for more details. What is an aggregation function? In database systems, an aggregate function or aggregation function is a function where the values of multiple rows are grouped together to form a single summary value. Common aggregate functions include: COUNT counts how many rows are in a particular column. SUM adds together all the values in a particular column. MIN and MAX return the lowest and highest values in a particular column, respectively. AVG calculates the average of a group of selected values. Aggregate function in MatrixOne The function join in MatrixOne's database is highly efficient and less redundant in comparison with other state-of-the-art databases via factorisation making it a key feature. Therefore, many operations in MatrixOne need to be adapted to the factorisation method, in order to improve efficiency when performing join . Aggregate functions are an example of an important feature among these operations. To implement aggragate functions in MatrixOne, we design a data structure named Ring . Every aggregate function needs to implement the Ring interface in order to be factorized when join occurs. For the common aggregate function AVG as an example, we need to calculate the number of groups and their total numeric sum, then get an average result. This is common practice for any database design. However, when a query with join occurs between two tables, the common method is to get a Cartesian product by joining tables first, then perform an AVG with that Cartesian product. This is an expensive computational cost as a Cartesian product can be very large. In MatrixOne's implementation, the factorisation method pushs down the calculation of group statistics and sum before the join operation is performed. This method helps to reduce a lot in computational and storage cost. Factorisation is realized by the Ring interface and its inner functions. To checkout more about the factorisation theory and factorised database, please refer to Principles of Factorised Databases . What is a Ring Ring is an important data structure for MatrixOne factorisation, as well as a mathematical algebraic concept with a clear definition . An algebraic Ring is a set equipped with two binary operations + (addition) and \u22c5 (multiplication) satisfying several axioms. A Ring in MatrixOne is an interface with several functions similar to the algebraic Ring structure. We use Ring interface to implement aggragate functions. The + (addition) is defined as merging two Ring s groups and the \u22c5 (multiplication) operation is defined as the computation of a grouped aggregate value combined with its grouping key frequency information. Method of Ring Interface Do What Count Return the number of groups Size Return the memory size of Ring Dup Duplicate a Ring of same type Type Return the type of a Ring String Return some basic information of Ring for execution plan log Free Free the Ring memory Grow Add a group for the Ring Grows Add multiple groups for the Ring SetLength Shrink the size of Ring, keep the first N groups Shrink Shrink the size of Ring, keep the designated groups Eval Return the eventual result of the aggregate function Fill Update the data of Ring by a row BulkFill Update the ring data by a whole vector BatchFill Update the ring data by a part of vector Add Merge a couple of groups for two Rings BatchAdd Merge several couples of groups for two Rings Mul Multiplication between groups for two Rings, called when join occurs The implementation of Ring data structure is under /pkg/container/ring/ . How does Ring work with query: To better understand the Ring interface, we can take aggregate function sum() as an example. We'll walk you through the whole process of Ring . There are two different scenarios for aggregation functions with Ring s. 1. Query with single table. In the single table scenario, when we run the below query, it generates one or several Ring s, depending on the storage blocks the T1 table is stored. The number of blocks depends on the storage strategy. Each Ring will store several groups of sums. The number of the group depends on how many duplicate rows are in this Ring . T1 ( id , class , age ) + ------+-------+------+ | id | class | age | + ------+-------+------+ | 1 | one | 23 | | 2 | one | 20 | | 3 | one | 22 | | 4 | two | 20 | | 5 | two | 19 | | 6 | three | 18 | | 7 | three | 20 | | 8 | three | 21 | | 9 | three | 24 | | 10 | three | 19 | + ------+-------+------+ select class , sum ( age ) from T1 group by class ; For example, if two Ring s were generated, the first Ring holds the group sums of the first 4 rows, which will be like: | one | 23 + 20 + 22 | | two | 20 | The second Ring holds the group sums of the last 6 rows, which will be like: | two | 19 | | three | 18 + 20 + 21 + 24 + 19 | Then the Add method of Ring will be called to merge two groups together, and at last the Eval method will return the overall result to user. | one | 23 + 20 + 22 | | two | 20 + 19 | | three | 18 + 20 + 21 + 24 + 19 | 2. Query with joining multiple tables. In the multiple tables join scenario, we have two tables Tc and Ts . The query looks like the following. Tc ( id , class ) + ------+-------+ | id | class | + ------+-------+ | 1 | one | | 2 | one | | 3 | one | | 4 | two | | 5 | two | | 6 | three | | 7 | three | | 8 | three | | 9 | three | | 10 | three | + ------+-------+ Ts ( id , age ) + ------+------+ | id | age | + ------+------+ | 1 | 23 | | 2 | 20 | | 3 | 22 | | 4 | 20 | | 5 | 19 | | 6 | 18 | | 7 | 20 | | 8 | 24 | | 9 | 24 | | 10 | 19 | + ------+------+ select class , sum ( age ) from Tc join Ts on Tc . id = Ts . id group by class ; When we run this query, it will firstly generate Ring s for the Ts table since we are performing an aggeration over the age column. It might also generate one or several Ring s same as the single table. For simplicity, we imagine only one Ring is created for each table. The Ring-Ts will start to count sums for the group of id as all id s are different, so it will maintain the same. Then a hashtable will be created for performing join operation. The Ring-Tc is created in the same time as join is performed. This Ring-Tc will count the appearing frequency f of id. Then the Mul method of Ring-Ts is called to calculate the sum calculated from the Ring-Ts and frequency from Ring-Tc . sum[i] = sum[i] * f[i] Now we get values of [class, sum(age)] , then perform a group by with class which will give us the final result. The secret of factorisation From the above example, you can see that the Ring performs some pre calculations and only the result(like sum ) is stored in its structure. When performing operations like join , only simple Add or Multiplication is needed to get the result, which is called a push down calculation in factorisation . With the help of this push down, we no longer need to deal with a costly Cartesian product. As the joined table number increases, the factorisation allows us to take linear cost of performing that instead of exponential increase. Take the implementation of Variance function as an example. The variance formula is as below: Variance = \u03a3 [(xi - x\u0305)^2]/n Example: xi = 10,8,6,12,14, x\u0305 = 10 Calculation: ((10-10)^2+(8-10)^2+(6-10)^2+(12-10)^2+(14-10)^2)/5 = 8 If we proceed with implementing this formula, we have to record all values of each group, and also maintain these values with Add and Mul operations of Ring . Eventually the result is calculated in an Eval() function. This implementation has a drawback of high memory cost since we have to store all the values during processing. In the Avg implementation, it doesn't store all values in the Ring . Instead it stores only the sum of each group and the null numbers. It returns the final result with a simple division. This method saves a lot of memory space. Now let's turn the Variance formula a bit into a different form: Variance = \u03a3 (xi^2)/n-x\u0305^2 Example: xi = 10,8,6,12,14, x\u0305 = 10 Calculation: (10^2+8^2+6^2+12^2+14^2)/5-10^2 = 8 This formula's result is exactly the same as the previous one, but we only have to record the values sum of xi^2 and the sum of xi . We can largely reduce the memory space with this kind of reformulation. To conclude, every aggregate function needs to find a way to record as little values as possible in order to reduce memory cost. Below are two different implementations for Variance (the second one has a better performance): //Implementation1 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte // store all the Sums' bytes Sums [] float64 // sums of each group, its memory address is same to Data Values [][] float64 // values of each group NullCounts [] int64 // group to record number of the null value } //Implementation2 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte SumX [] float64 // sum of x, its memory address is same to Data, because we will use it to store result finally. SumX2 [] float64 // sum of x^2 NullCounts [] int64 // group to record number of the null value } Develop an var() function In this tutorial, we will walk you through the complete implementation of the Variance (get the standard overall variance value) aggregate function as an example with two different methods. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/sql/viewexec/transformer/types.go registers aggregate functions as operators and we assign each operator a distinct integer number. To add a new function var() , first add a new const Variance in the const declaration and var in the name declaration. const ( Sum = iota Avg Max Min Count StarCount ApproxCountDistinct Variance ) var TransformerNames = [ ... ] string { Sum : \"sum\" , Avg : \"avg\" , Max : \"max\" , Min : \"min\" , Count : \"count\" , StarCount : \"starcount\" , ApproxCountDistinct : \"approx_count_distinct\" , Variance : \"var\" , } Step2: implement the Ring interface 1. Define Ring structure Create variance.go under pkg/container/ring , and define a structure of VarRing . As we calculate the overall variance, we need to calculate: The numeric Sums and the null value numbers of each group, to calculate the average. Values of each group, to calculate the variance. //Implementation1 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte // store all the Sums' bytes Sums [] float64 // sums of each group, its memory address is same to Data Values [][] float64 // values of each group NullCounts [] int64 // group to record number of the null value } //Implementation2 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte SumX [] float64 // sum of x, its memory address is same to Data, because we will use it to store result finally. SumX2 [] float64 // sum of x^2 NullCounts [] int64 // group to record number of the null value } 2. Implement the functions of Ring interface You can checkout the full implmetation at variance.go . Fill function //Implementation1 func ( v * VarRing ) Fill ( i , j int64 , z int64 , vec * vector . Vector ) { var value float64 = 0 switch vec . Typ . Oid { case types . T_int8 : value = float64 ( vec . Col .([] int8 )[ j ]) case ... } for k := z ; k > 0 ; k -- { v . Values [ i ] = append ( v . Values [ i ], value ) } v . Sums [ i ] += value * float64 ( z ) if nulls . Contains ( vec . Nsp , uint64 ( z )) { v . NullCounts [ i ] += z } } //Implementation2 func ( v * VarRing ) Fill ( i , j int64 , z int64 , vec * vector . Vector ) { var value float64 = 0 switch vec . Typ . Oid { case types . T_int8 : value = float64 ( vec . Col .([] int8 )[ j ]) case ... } v . SumX [ i ] += value * float64 ( z ) v . SumX2 [ i ] += math . Pow ( value , 2 ) * float64 ( z ) if nulls . Contains ( vec . Nsp , uint64 ( z )) { v . NullCounts [ i ] += z } } Add function //Implementation1 func ( v * VarRing ) Add ( a interface {}, x , y int64 ) { v2 := a .( * VarRing ) v . Sums [ x ] += v2 . Sums [ y ] v . NullCounts [ x ] += v2 . NullCounts [ y ] v . Values [ x ] = append ( v . Values [ x ], v2 . Values [ y ] ... ) } //Implementation2 func ( v * VarRing ) Add ( a interface {}, x , y int64 ) { v2 := a .( * VarRing ) v . SumX [ x ] += v2 . SumX [ y ] v . SumX2 [ x ] += v2 . SumX2 [ y ] v . NullCounts [ x ] += v2 . NullCounts [ y ] } Mul function //Implementation1 func ( v * VarRing ) Mul ( a interface {}, x , y , z int64 ) { v2 := a .( * VarRing ) { v . Sums [ x ] += v2 . Sums [ y ] * float64 ( z ) v . NullCounts [ x ] += v2 . NullCounts [ y ] * z for k := z ; k > 0 ; k -- { v . Values [ x ] = append ( v . Values [ x ], v2 . Values [ y ] ... ) } } } //Implementation2 func ( v * VarRing ) Mul ( a interface {}, x , y , z int64 ) { v2 := a .( * VarRing ) { v . SumX [ x ] += v2 . SumX [ y ] * float64 ( z ) v . SumX2 [ x ] += v2 . SumX2 [ y ] * float64 ( z ) v . NullCounts [ x ] += v2 . NullCounts [ y ] * z } } Eval function //Implementation1 func ( v * VarRing ) Eval ( zs [] int64 ) * vector . Vector { defer func () { ... }() nsp := new ( nulls . Nulls ) for i , z := range zs { if n := z - v . NullCounts [ i ]; n == 0 { nulls . Add ( nsp , uint64 ( i )) } else { v . Sums [ i ] /= float64 ( n ) var variance float64 = 0 avg := v . Sums [ i ] for _ , value := range v . Values [ i ] { variance += math . Pow ( value - avg , 2.0 ) / float64 ( n ) } v . Sums [ i ] = variance } } return ... } //Implementation2 func ( v * VarRing ) Eval ( zs [] int64 ) * vector . Vector { defer func () { ... }() nsp := new ( nulls . Nulls ) for i , z := range zs { if n := z - v . NullCounts [ i ]; n == 0 { nulls . Add ( nsp , uint64 ( i )) } else { v . SumX [ i ] /= float64 ( n ) // compute E(x) v . SumX2 [ i ] /= float64 ( n ) // compute E(x^2) variance := v . SumX2 [ i ] - math . Pow ( v . SumX [ i ], 2 ) v . SumX [ i ] = variance // using v.SumX to record the result and return. } } return ... } 3. Implement encoding and decoding for VarRing In the pkg/sql/protocol/protocol.go file, implement the code for serialization and deserialization of VarRing . Serialization function Deserialization function EncodeRing DecodeRing DecodeRingWithProcess Serialization: case * variance . VarRing : buf . WriteByte ( VarianceRing ) // NullCounts n := len ( v . NullCounts ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( encoding . EncodeInt64Slice ( v . NullCounts )) } // Sumx2 n = len ( v . SumX2 ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( encoding . EncodeFloat64Slice ( v . SumX2 )) } // Sumx da := encoding . EncodeFloat64Slice ( v . SumX ) n = len ( da ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( da ) } // Typ buf . Write ( encoding . EncodeType ( v . Typ )) return nil Deserialization: case VarianceRing : r := new ( variance . VarRing ) data = data [ 1 :] // decode NullCounts n := encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . NullCounts = make ([] int64 , n ) copy ( r . NullCounts , encoding . DecodeInt64Slice ( data [: n * 8 ])) data = data [ n * 8 :] } // decode Sumx2 n = encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . SumX2 = make ([] float64 , n ) copy ( r . SumX2 , encoding . DecodeFloat64Slice ( data [: n * 8 ])) data = data [ n * 8 :] } // decode Sumx n = encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . Data = data [: n ] data = data [ n :] } r . SumX = encoding . DecodeFloat64Slice ( r . Data ) // decode typ typ := encoding . DecodeType ( data [: encoding . TypeSize ]) data = data [ encoding . TypeSize :] r . Typ = typ // return return r , data , nil Here we go. Now we can fire up MatrixOne and try with our var() function. Compile and run MatrixOne Once the aggregation function is ready, we can compile and run MatrixOne to see the function behavior. Step1: Run make config and make build to compile the MatrixOne project and build binary file. make build Info make config generates a new configuration file. In this tutorial you only need to run it once. If you modify some code and want to recompile, you only have to run make build . Step2: Run ./mo-service -cfg ./etc/cn-standalone-test.toml to launch MatrixOne, the MatrixOne server will start to listen for client connecting. ./mo-service -cfg ./etc/cn-standalone-test.toml Info The logger print level of system_vars_config.toml is set to default as DEBUG , which will print a lot of information for you. If you only care about what your function will print, you can modify the system_vars_config.toml and set cubeLogLevel and level to ERROR level. cubeLogLevel = \"error\" level = \"error\" Info Sometimes a port is in use error at port 50000 will occur. You could checkout what process in occupying port 50000 by lsof -i:50000 . This command helps you to get the PIDNAME of this process, then you can kill the process by kill -9 PIDNAME . Step3: Connect to MatrixOne server with a MySQL client. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Step4: Test your function behavior with some data. Below is an example. You can check if you get the right mathematical variance result. You can also try an inner join and check the result, if the result is correct, the factorisation is valid. mysql > select * from variance ; + ------+------+ | a | b | + ------+------+ | 1 | 4 | | 10 | 3 | | 19 | 12 | | 239 | 114 | | 49 | 149 | | 10 | 159 | | 1 | 3 | | 34 | 35 | + ------+------+ 8 rows in set ( 0 . 04 sec ) mysql > select * from variance2 ; + ------+------+ | a | b | + ------+------+ | 14 | 3514 | | 10 | 3514 | | 1 | 61 | + ------+------+ 3 rows in set ( 0 . 02 sec ) mysql > select var ( variance . a ), var ( variance . b ) from variance ; + -----------------+-----------------+ | var ( variance . a ) | var ( variance . b ) | + -----------------+-----------------+ | 5596 . 2344 | 4150 . 1094 | + -----------------+-----------------+ 1 row in set ( 0 . 06 sec ) mysql > select variance . a , var ( variance . b ) from variance inner join variance2 on variance . a = variance2 . a group by variance . a ; + ------------+-----------------+ | variance . a | var ( variance . b ) | + ------------+-----------------+ | 10 | 6084 . 0000 | | 1 | 0 . 2500 | + ------------+-----------------+ 2 rows in set ( 0 . 04 sec ) Bingo! Info Except for var() , MatrixOne has already some neat examples for aggregate functions, such as sum() , count() , max() , min() and avg() . With some minor corresponding changes, the procedure is quite the same as other functions. \u200b Write unit Test for your function We recommend that you also write a unit test for the new function. Go has a built-in testing command called go test and a package testing which combine to give a minimal yet complete testing experience. It automates execution of any function of the form. func TestXxx(*testing.T) To write a new test suite, create a file whose name ends _test.go that contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the go test command is run. Step1: Create a file named variance_test.go under pkg/container/ring/variance/ directory. Import the testing framework and the reflect framework we are going to use for testing. package variance import ( \"fmt\" \"github.com/matrixorigin/matrixone/pkg/container/types\" \"reflect\" \"testing\" ) // TestVariance just for verify varRing related process func TestVariance ( t * testing . T ) { } Step2: Implement the TestVariance function with some predefined values. func TestVariance ( t * testing . T ) { // verify that if we can calculate // the variance of {1, 2, null, 0, 3, 4} and {2, 3, null, null, 4, 5} correctly // 1. make the test case v1 := NewVarianceRing ( types . Type { Oid : types . T_float64 }) v2 := v1 . Dup ().( * VarRing ) { // first 3 rows. // column1: {1, 2, null}, column2: {2, 3, null} v1 . SumX = [] float64 { 1 + 2 , 2 + 3 } v1 . SumX2 = [] float64 { 1 * 1 + 2 * 2 , 2 * 2 + 3 * 3 } v1 . NullCounts = [] int64 { 1 , 1 } } { // last 3 rows. // column1: {0, 3, 4}, column2: {null, 4, 5} v2 . SumX = [] float64 { 0 + 3 + 4 , 4 + 5 } v2 . SumX2 = [] float64 { 3 * 3 + 4 * 4 , 4 * 4 + 5 * 5 } v2 . NullCounts = [] int64 { 0 , 1 } } v1 . Add ( v2 , 0 , 0 ) v1 . Add ( v2 , 1 , 1 ) result := v1 . Eval ([] int64 { 6 , 6 }) expected := [] float64 { 2.0 , 1.25 } if ! reflect . DeepEqual ( result . Col , expected ) { t . Errorf ( fmt . Sprintf ( \"TestVariance wrong, expected %v, but got %v\" , expected , result . Col )) } } Step3: Complete the unit test for Serialization and Deserialization in the function TestRing in the file pkg/sql/protocol/protocol_test.go . You can check the complete test code of VarRing there. & variance . VarRing { NullCounts : [] int64 { 1 , 2 , 3 }, SumX : [] float64 { 4 , 9 , 13 }, SumX2 : [] float64 { 16 , 81 , 169 }, Typ : types . Type { Oid : types . T ( types . T_float64 ), Size : 8 }, } case * variance . VarRing : oriRing := r .( * variance . VarRing ) // Sumx if string ( ExpectRing . Data ) != string ( encoding . EncodeFloat64Slice ( oriRing . SumX )) { t . Errorf ( \"Decode varRing Sums failed.\" ) return } // NullCounts for i , n := range oriRing . NullCounts { if ExpectRing . NullCounts [ i ] != n { t . Errorf ( \"Decode varRing NullCounts failed. \\nExpected/Got:\\n%v\\n%v\" , n , ExpectRing . NullCounts [ i ]) return } } // Sumx2 for i , v := range oriRing . SumX2 { if ! reflect . DeepEqual ( ExpectRing . SumX2 [ i ], v ) { t . Errorf ( \"Decode varRing Values failed. \\nExpected/Got:\\n%v\\n%v\" , v , ExpectRing . SumX2 [ i ]) return } } Step4: Launch Test. Within the same directory as the test: go test This picks up any files matching packagename_test.go. If you are getting a PASS , you are passing the unit test. In MatrixOne, we have a bvt test framework which will run all the unit tests defined in the whole package, and each time your make a pull request to the code base, the test will automatically run. You code will be merged only if the bvt test pass. Conduct a Performance Test Aggregate functions are an important feature of a database system, with queries on hundreds of millions of data rows, the time consumption of an aggregate function is quite significant. Thus, we recommend you to run a performance test. Step1: Download the standard test dataset. We have prepared a single table SSB query dataset with 10 million rows of data. The raw data file size is about 4GB, 500MB after being zipped. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Step2: Unzip the file and Load the data into MatrixOne. With the following SQL you can create the database and table, and load the lineorder_flat.tbl into MatrixOne. create database if not exists ssb ; use ssb ; drop table if exists lineorder_flat ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint primary key , LO_LINENUMBER int , LO_CUSTKEY int , LO_PARTKEY int , LO_SUPPKEY int , LO_ORDERDATE date , LO_ORDERPRIORITY char ( 15 ), LO_SHIPPRIORITY tinyint , LO_QUANTITY double , LO_EXTENDEDPRICE double , LO_ORDTOTALPRICE double , LO_DISCOUNT double , LO_REVENUE int unsigned , LO_SUPPLYCOST int unsigned , LO_TAX double , LO_COMMITDATE date , LO_SHIPMODE char ( 10 ), C_NAME varchar ( 25 ), C_ADDRESS varchar ( 25 ), C_CITY char ( 10 ), C_NATION char ( 15 ), C_REGION char ( 12 ), C_PHONE char ( 15 ), C_MKTSEGMENT char ( 10 ), S_NAME char ( 25 ), S_ADDRESS varchar ( 25 ), S_CITY char ( 10 ), S_NATION char ( 15 ), S_REGION char ( 12 ), S_PHONE char ( 15 ), P_NAME varchar ( 22 ), P_MFGR char ( 6 ), P_CATEGORY char ( 7 ), P_BRAND char ( 9 ), P_COLOR varchar ( 11 ), P_TYPE varchar ( 25 ), P_SIZE int , P_CONTAINER char ( 10 ) ); load data infile '/Users/YOURPATH/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; If you load successfully this dataset, you are normally getting a result as: Query OK, 10272594 rows affected (1 min 7.09 sec) Step3: Run your aggregate function and sum() , avg() on the column LO_SUPPKEY respectively to check the performance. select avg ( LO_SUPPKEY ) from lineorder_flat ; select sum ( LO_SUPPKEY ) from lineorder_flat ; select yourfunction ( LO_SUPPKEY ) from lineorder_flat ; Step4: When you submit your PR, please submit these performance results in your PR comment as well.","title":"**Develop an aggregate function**"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#develop-an-aggregate-function","text":"","title":"Develop an aggregate function"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#prerequisite","text":"To develop an aggregate function for MatrixOne, you need a basic knowledge of Golang programming. You can go through this excellent Golang tutorial to learn some basic Golang concepts.","title":"Prerequisite"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#before-you-start","text":"Make sure that you have Go installed and have cloned the MatrixOne code base. Please refer to Preparation and Contribute Code for more details.","title":"Before you start"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#what-is-an-aggregation-function","text":"In database systems, an aggregate function or aggregation function is a function where the values of multiple rows are grouped together to form a single summary value. Common aggregate functions include: COUNT counts how many rows are in a particular column. SUM adds together all the values in a particular column. MIN and MAX return the lowest and highest values in a particular column, respectively. AVG calculates the average of a group of selected values.","title":"What is an aggregation function?"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#aggregate-function-in-matrixone","text":"The function join in MatrixOne's database is highly efficient and less redundant in comparison with other state-of-the-art databases via factorisation making it a key feature. Therefore, many operations in MatrixOne need to be adapted to the factorisation method, in order to improve efficiency when performing join . Aggregate functions are an example of an important feature among these operations. To implement aggragate functions in MatrixOne, we design a data structure named Ring . Every aggregate function needs to implement the Ring interface in order to be factorized when join occurs. For the common aggregate function AVG as an example, we need to calculate the number of groups and their total numeric sum, then get an average result. This is common practice for any database design. However, when a query with join occurs between two tables, the common method is to get a Cartesian product by joining tables first, then perform an AVG with that Cartesian product. This is an expensive computational cost as a Cartesian product can be very large. In MatrixOne's implementation, the factorisation method pushs down the calculation of group statistics and sum before the join operation is performed. This method helps to reduce a lot in computational and storage cost. Factorisation is realized by the Ring interface and its inner functions. To checkout more about the factorisation theory and factorised database, please refer to Principles of Factorised Databases .","title":"Aggregate function in MatrixOne"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#what-is-a-ring","text":"Ring is an important data structure for MatrixOne factorisation, as well as a mathematical algebraic concept with a clear definition . An algebraic Ring is a set equipped with two binary operations + (addition) and \u22c5 (multiplication) satisfying several axioms. A Ring in MatrixOne is an interface with several functions similar to the algebraic Ring structure. We use Ring interface to implement aggragate functions. The + (addition) is defined as merging two Ring s groups and the \u22c5 (multiplication) operation is defined as the computation of a grouped aggregate value combined with its grouping key frequency information. Method of Ring Interface Do What Count Return the number of groups Size Return the memory size of Ring Dup Duplicate a Ring of same type Type Return the type of a Ring String Return some basic information of Ring for execution plan log Free Free the Ring memory Grow Add a group for the Ring Grows Add multiple groups for the Ring SetLength Shrink the size of Ring, keep the first N groups Shrink Shrink the size of Ring, keep the designated groups Eval Return the eventual result of the aggregate function Fill Update the data of Ring by a row BulkFill Update the ring data by a whole vector BatchFill Update the ring data by a part of vector Add Merge a couple of groups for two Rings BatchAdd Merge several couples of groups for two Rings Mul Multiplication between groups for two Rings, called when join occurs The implementation of Ring data structure is under /pkg/container/ring/ .","title":"What is a Ring"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#how-does-ring-work-with-query","text":"To better understand the Ring interface, we can take aggregate function sum() as an example. We'll walk you through the whole process of Ring . There are two different scenarios for aggregation functions with Ring s. 1. Query with single table. In the single table scenario, when we run the below query, it generates one or several Ring s, depending on the storage blocks the T1 table is stored. The number of blocks depends on the storage strategy. Each Ring will store several groups of sums. The number of the group depends on how many duplicate rows are in this Ring . T1 ( id , class , age ) + ------+-------+------+ | id | class | age | + ------+-------+------+ | 1 | one | 23 | | 2 | one | 20 | | 3 | one | 22 | | 4 | two | 20 | | 5 | two | 19 | | 6 | three | 18 | | 7 | three | 20 | | 8 | three | 21 | | 9 | three | 24 | | 10 | three | 19 | + ------+-------+------+ select class , sum ( age ) from T1 group by class ; For example, if two Ring s were generated, the first Ring holds the group sums of the first 4 rows, which will be like: | one | 23 + 20 + 22 | | two | 20 | The second Ring holds the group sums of the last 6 rows, which will be like: | two | 19 | | three | 18 + 20 + 21 + 24 + 19 | Then the Add method of Ring will be called to merge two groups together, and at last the Eval method will return the overall result to user. | one | 23 + 20 + 22 | | two | 20 + 19 | | three | 18 + 20 + 21 + 24 + 19 | 2. Query with joining multiple tables. In the multiple tables join scenario, we have two tables Tc and Ts . The query looks like the following. Tc ( id , class ) + ------+-------+ | id | class | + ------+-------+ | 1 | one | | 2 | one | | 3 | one | | 4 | two | | 5 | two | | 6 | three | | 7 | three | | 8 | three | | 9 | three | | 10 | three | + ------+-------+ Ts ( id , age ) + ------+------+ | id | age | + ------+------+ | 1 | 23 | | 2 | 20 | | 3 | 22 | | 4 | 20 | | 5 | 19 | | 6 | 18 | | 7 | 20 | | 8 | 24 | | 9 | 24 | | 10 | 19 | + ------+------+ select class , sum ( age ) from Tc join Ts on Tc . id = Ts . id group by class ; When we run this query, it will firstly generate Ring s for the Ts table since we are performing an aggeration over the age column. It might also generate one or several Ring s same as the single table. For simplicity, we imagine only one Ring is created for each table. The Ring-Ts will start to count sums for the group of id as all id s are different, so it will maintain the same. Then a hashtable will be created for performing join operation. The Ring-Tc is created in the same time as join is performed. This Ring-Tc will count the appearing frequency f of id. Then the Mul method of Ring-Ts is called to calculate the sum calculated from the Ring-Ts and frequency from Ring-Tc . sum[i] = sum[i] * f[i] Now we get values of [class, sum(age)] , then perform a group by with class which will give us the final result.","title":"How does Ring work with query:"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#the-secret-of-factorisation","text":"From the above example, you can see that the Ring performs some pre calculations and only the result(like sum ) is stored in its structure. When performing operations like join , only simple Add or Multiplication is needed to get the result, which is called a push down calculation in factorisation . With the help of this push down, we no longer need to deal with a costly Cartesian product. As the joined table number increases, the factorisation allows us to take linear cost of performing that instead of exponential increase. Take the implementation of Variance function as an example. The variance formula is as below: Variance = \u03a3 [(xi - x\u0305)^2]/n Example: xi = 10,8,6,12,14, x\u0305 = 10 Calculation: ((10-10)^2+(8-10)^2+(6-10)^2+(12-10)^2+(14-10)^2)/5 = 8 If we proceed with implementing this formula, we have to record all values of each group, and also maintain these values with Add and Mul operations of Ring . Eventually the result is calculated in an Eval() function. This implementation has a drawback of high memory cost since we have to store all the values during processing. In the Avg implementation, it doesn't store all values in the Ring . Instead it stores only the sum of each group and the null numbers. It returns the final result with a simple division. This method saves a lot of memory space. Now let's turn the Variance formula a bit into a different form: Variance = \u03a3 (xi^2)/n-x\u0305^2 Example: xi = 10,8,6,12,14, x\u0305 = 10 Calculation: (10^2+8^2+6^2+12^2+14^2)/5-10^2 = 8 This formula's result is exactly the same as the previous one, but we only have to record the values sum of xi^2 and the sum of xi . We can largely reduce the memory space with this kind of reformulation. To conclude, every aggregate function needs to find a way to record as little values as possible in order to reduce memory cost. Below are two different implementations for Variance (the second one has a better performance): //Implementation1 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte // store all the Sums' bytes Sums [] float64 // sums of each group, its memory address is same to Data Values [][] float64 // values of each group NullCounts [] int64 // group to record number of the null value } //Implementation2 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte SumX [] float64 // sum of x, its memory address is same to Data, because we will use it to store result finally. SumX2 [] float64 // sum of x^2 NullCounts [] int64 // group to record number of the null value }","title":"The secret of factorisation"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#develop-an-var-function","text":"In this tutorial, we will walk you through the complete implementation of the Variance (get the standard overall variance value) aggregate function as an example with two different methods. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/sql/viewexec/transformer/types.go registers aggregate functions as operators and we assign each operator a distinct integer number. To add a new function var() , first add a new const Variance in the const declaration and var in the name declaration. const ( Sum = iota Avg Max Min Count StarCount ApproxCountDistinct Variance ) var TransformerNames = [ ... ] string { Sum : \"sum\" , Avg : \"avg\" , Max : \"max\" , Min : \"min\" , Count : \"count\" , StarCount : \"starcount\" , ApproxCountDistinct : \"approx_count_distinct\" , Variance : \"var\" , } Step2: implement the Ring interface 1. Define Ring structure Create variance.go under pkg/container/ring , and define a structure of VarRing . As we calculate the overall variance, we need to calculate: The numeric Sums and the null value numbers of each group, to calculate the average. Values of each group, to calculate the variance. //Implementation1 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte // store all the Sums' bytes Sums [] float64 // sums of each group, its memory address is same to Data Values [][] float64 // values of each group NullCounts [] int64 // group to record number of the null value } //Implementation2 type VarRing struct { // Typ is vector's value type Typ types . Type // attributes for computing the variance Data [] byte SumX [] float64 // sum of x, its memory address is same to Data, because we will use it to store result finally. SumX2 [] float64 // sum of x^2 NullCounts [] int64 // group to record number of the null value } 2. Implement the functions of Ring interface You can checkout the full implmetation at variance.go . Fill function //Implementation1 func ( v * VarRing ) Fill ( i , j int64 , z int64 , vec * vector . Vector ) { var value float64 = 0 switch vec . Typ . Oid { case types . T_int8 : value = float64 ( vec . Col .([] int8 )[ j ]) case ... } for k := z ; k > 0 ; k -- { v . Values [ i ] = append ( v . Values [ i ], value ) } v . Sums [ i ] += value * float64 ( z ) if nulls . Contains ( vec . Nsp , uint64 ( z )) { v . NullCounts [ i ] += z } } //Implementation2 func ( v * VarRing ) Fill ( i , j int64 , z int64 , vec * vector . Vector ) { var value float64 = 0 switch vec . Typ . Oid { case types . T_int8 : value = float64 ( vec . Col .([] int8 )[ j ]) case ... } v . SumX [ i ] += value * float64 ( z ) v . SumX2 [ i ] += math . Pow ( value , 2 ) * float64 ( z ) if nulls . Contains ( vec . Nsp , uint64 ( z )) { v . NullCounts [ i ] += z } } Add function //Implementation1 func ( v * VarRing ) Add ( a interface {}, x , y int64 ) { v2 := a .( * VarRing ) v . Sums [ x ] += v2 . Sums [ y ] v . NullCounts [ x ] += v2 . NullCounts [ y ] v . Values [ x ] = append ( v . Values [ x ], v2 . Values [ y ] ... ) } //Implementation2 func ( v * VarRing ) Add ( a interface {}, x , y int64 ) { v2 := a .( * VarRing ) v . SumX [ x ] += v2 . SumX [ y ] v . SumX2 [ x ] += v2 . SumX2 [ y ] v . NullCounts [ x ] += v2 . NullCounts [ y ] } Mul function //Implementation1 func ( v * VarRing ) Mul ( a interface {}, x , y , z int64 ) { v2 := a .( * VarRing ) { v . Sums [ x ] += v2 . Sums [ y ] * float64 ( z ) v . NullCounts [ x ] += v2 . NullCounts [ y ] * z for k := z ; k > 0 ; k -- { v . Values [ x ] = append ( v . Values [ x ], v2 . Values [ y ] ... ) } } } //Implementation2 func ( v * VarRing ) Mul ( a interface {}, x , y , z int64 ) { v2 := a .( * VarRing ) { v . SumX [ x ] += v2 . SumX [ y ] * float64 ( z ) v . SumX2 [ x ] += v2 . SumX2 [ y ] * float64 ( z ) v . NullCounts [ x ] += v2 . NullCounts [ y ] * z } } Eval function //Implementation1 func ( v * VarRing ) Eval ( zs [] int64 ) * vector . Vector { defer func () { ... }() nsp := new ( nulls . Nulls ) for i , z := range zs { if n := z - v . NullCounts [ i ]; n == 0 { nulls . Add ( nsp , uint64 ( i )) } else { v . Sums [ i ] /= float64 ( n ) var variance float64 = 0 avg := v . Sums [ i ] for _ , value := range v . Values [ i ] { variance += math . Pow ( value - avg , 2.0 ) / float64 ( n ) } v . Sums [ i ] = variance } } return ... } //Implementation2 func ( v * VarRing ) Eval ( zs [] int64 ) * vector . Vector { defer func () { ... }() nsp := new ( nulls . Nulls ) for i , z := range zs { if n := z - v . NullCounts [ i ]; n == 0 { nulls . Add ( nsp , uint64 ( i )) } else { v . SumX [ i ] /= float64 ( n ) // compute E(x) v . SumX2 [ i ] /= float64 ( n ) // compute E(x^2) variance := v . SumX2 [ i ] - math . Pow ( v . SumX [ i ], 2 ) v . SumX [ i ] = variance // using v.SumX to record the result and return. } } return ... } 3. Implement encoding and decoding for VarRing In the pkg/sql/protocol/protocol.go file, implement the code for serialization and deserialization of VarRing . Serialization function Deserialization function EncodeRing DecodeRing DecodeRingWithProcess Serialization: case * variance . VarRing : buf . WriteByte ( VarianceRing ) // NullCounts n := len ( v . NullCounts ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( encoding . EncodeInt64Slice ( v . NullCounts )) } // Sumx2 n = len ( v . SumX2 ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( encoding . EncodeFloat64Slice ( v . SumX2 )) } // Sumx da := encoding . EncodeFloat64Slice ( v . SumX ) n = len ( da ) buf . Write ( encoding . EncodeUint32 ( uint32 ( n ))) if n > 0 { buf . Write ( da ) } // Typ buf . Write ( encoding . EncodeType ( v . Typ )) return nil Deserialization: case VarianceRing : r := new ( variance . VarRing ) data = data [ 1 :] // decode NullCounts n := encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . NullCounts = make ([] int64 , n ) copy ( r . NullCounts , encoding . DecodeInt64Slice ( data [: n * 8 ])) data = data [ n * 8 :] } // decode Sumx2 n = encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . SumX2 = make ([] float64 , n ) copy ( r . SumX2 , encoding . DecodeFloat64Slice ( data [: n * 8 ])) data = data [ n * 8 :] } // decode Sumx n = encoding . DecodeUint32 ( data [: 4 ]) data = data [ 4 :] if n > 0 { r . Data = data [: n ] data = data [ n :] } r . SumX = encoding . DecodeFloat64Slice ( r . Data ) // decode typ typ := encoding . DecodeType ( data [: encoding . TypeSize ]) data = data [ encoding . TypeSize :] r . Typ = typ // return return r , data , nil Here we go. Now we can fire up MatrixOne and try with our var() function.","title":"Develop an var() function"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#compile-and-run-matrixone","text":"Once the aggregation function is ready, we can compile and run MatrixOne to see the function behavior. Step1: Run make config and make build to compile the MatrixOne project and build binary file. make build Info make config generates a new configuration file. In this tutorial you only need to run it once. If you modify some code and want to recompile, you only have to run make build . Step2: Run ./mo-service -cfg ./etc/cn-standalone-test.toml to launch MatrixOne, the MatrixOne server will start to listen for client connecting. ./mo-service -cfg ./etc/cn-standalone-test.toml Info The logger print level of system_vars_config.toml is set to default as DEBUG , which will print a lot of information for you. If you only care about what your function will print, you can modify the system_vars_config.toml and set cubeLogLevel and level to ERROR level. cubeLogLevel = \"error\" level = \"error\" Info Sometimes a port is in use error at port 50000 will occur. You could checkout what process in occupying port 50000 by lsof -i:50000 . This command helps you to get the PIDNAME of this process, then you can kill the process by kill -9 PIDNAME . Step3: Connect to MatrixOne server with a MySQL client. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Step4: Test your function behavior with some data. Below is an example. You can check if you get the right mathematical variance result. You can also try an inner join and check the result, if the result is correct, the factorisation is valid. mysql > select * from variance ; + ------+------+ | a | b | + ------+------+ | 1 | 4 | | 10 | 3 | | 19 | 12 | | 239 | 114 | | 49 | 149 | | 10 | 159 | | 1 | 3 | | 34 | 35 | + ------+------+ 8 rows in set ( 0 . 04 sec ) mysql > select * from variance2 ; + ------+------+ | a | b | + ------+------+ | 14 | 3514 | | 10 | 3514 | | 1 | 61 | + ------+------+ 3 rows in set ( 0 . 02 sec ) mysql > select var ( variance . a ), var ( variance . b ) from variance ; + -----------------+-----------------+ | var ( variance . a ) | var ( variance . b ) | + -----------------+-----------------+ | 5596 . 2344 | 4150 . 1094 | + -----------------+-----------------+ 1 row in set ( 0 . 06 sec ) mysql > select variance . a , var ( variance . b ) from variance inner join variance2 on variance . a = variance2 . a group by variance . a ; + ------------+-----------------+ | variance . a | var ( variance . b ) | + ------------+-----------------+ | 10 | 6084 . 0000 | | 1 | 0 . 2500 | + ------------+-----------------+ 2 rows in set ( 0 . 04 sec ) Bingo! Info Except for var() , MatrixOne has already some neat examples for aggregate functions, such as sum() , count() , max() , min() and avg() . With some minor corresponding changes, the procedure is quite the same as other functions. \u200b","title":"Compile and run MatrixOne"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#write-unit-test-for-your-function","text":"We recommend that you also write a unit test for the new function. Go has a built-in testing command called go test and a package testing which combine to give a minimal yet complete testing experience. It automates execution of any function of the form. func TestXxx(*testing.T) To write a new test suite, create a file whose name ends _test.go that contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the go test command is run. Step1: Create a file named variance_test.go under pkg/container/ring/variance/ directory. Import the testing framework and the reflect framework we are going to use for testing. package variance import ( \"fmt\" \"github.com/matrixorigin/matrixone/pkg/container/types\" \"reflect\" \"testing\" ) // TestVariance just for verify varRing related process func TestVariance ( t * testing . T ) { } Step2: Implement the TestVariance function with some predefined values. func TestVariance ( t * testing . T ) { // verify that if we can calculate // the variance of {1, 2, null, 0, 3, 4} and {2, 3, null, null, 4, 5} correctly // 1. make the test case v1 := NewVarianceRing ( types . Type { Oid : types . T_float64 }) v2 := v1 . Dup ().( * VarRing ) { // first 3 rows. // column1: {1, 2, null}, column2: {2, 3, null} v1 . SumX = [] float64 { 1 + 2 , 2 + 3 } v1 . SumX2 = [] float64 { 1 * 1 + 2 * 2 , 2 * 2 + 3 * 3 } v1 . NullCounts = [] int64 { 1 , 1 } } { // last 3 rows. // column1: {0, 3, 4}, column2: {null, 4, 5} v2 . SumX = [] float64 { 0 + 3 + 4 , 4 + 5 } v2 . SumX2 = [] float64 { 3 * 3 + 4 * 4 , 4 * 4 + 5 * 5 } v2 . NullCounts = [] int64 { 0 , 1 } } v1 . Add ( v2 , 0 , 0 ) v1 . Add ( v2 , 1 , 1 ) result := v1 . Eval ([] int64 { 6 , 6 }) expected := [] float64 { 2.0 , 1.25 } if ! reflect . DeepEqual ( result . Col , expected ) { t . Errorf ( fmt . Sprintf ( \"TestVariance wrong, expected %v, but got %v\" , expected , result . Col )) } } Step3: Complete the unit test for Serialization and Deserialization in the function TestRing in the file pkg/sql/protocol/protocol_test.go . You can check the complete test code of VarRing there. & variance . VarRing { NullCounts : [] int64 { 1 , 2 , 3 }, SumX : [] float64 { 4 , 9 , 13 }, SumX2 : [] float64 { 16 , 81 , 169 }, Typ : types . Type { Oid : types . T ( types . T_float64 ), Size : 8 }, } case * variance . VarRing : oriRing := r .( * variance . VarRing ) // Sumx if string ( ExpectRing . Data ) != string ( encoding . EncodeFloat64Slice ( oriRing . SumX )) { t . Errorf ( \"Decode varRing Sums failed.\" ) return } // NullCounts for i , n := range oriRing . NullCounts { if ExpectRing . NullCounts [ i ] != n { t . Errorf ( \"Decode varRing NullCounts failed. \\nExpected/Got:\\n%v\\n%v\" , n , ExpectRing . NullCounts [ i ]) return } } // Sumx2 for i , v := range oriRing . SumX2 { if ! reflect . DeepEqual ( ExpectRing . SumX2 [ i ], v ) { t . Errorf ( \"Decode varRing Values failed. \\nExpected/Got:\\n%v\\n%v\" , v , ExpectRing . SumX2 [ i ]) return } } Step4: Launch Test. Within the same directory as the test: go test This picks up any files matching packagename_test.go. If you are getting a PASS , you are passing the unit test. In MatrixOne, we have a bvt test framework which will run all the unit tests defined in the whole package, and each time your make a pull request to the code base, the test will automatically run. You code will be merged only if the bvt test pass.","title":"Write unit Test for your function"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_aggregate_functions/#conduct-a-performance-test","text":"Aggregate functions are an important feature of a database system, with queries on hundreds of millions of data rows, the time consumption of an aggregate function is quite significant. Thus, we recommend you to run a performance test. Step1: Download the standard test dataset. We have prepared a single table SSB query dataset with 10 million rows of data. The raw data file size is about 4GB, 500MB after being zipped. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Step2: Unzip the file and Load the data into MatrixOne. With the following SQL you can create the database and table, and load the lineorder_flat.tbl into MatrixOne. create database if not exists ssb ; use ssb ; drop table if exists lineorder_flat ; CREATE TABLE lineorder_flat ( LO_ORDERKEY bigint primary key , LO_LINENUMBER int , LO_CUSTKEY int , LO_PARTKEY int , LO_SUPPKEY int , LO_ORDERDATE date , LO_ORDERPRIORITY char ( 15 ), LO_SHIPPRIORITY tinyint , LO_QUANTITY double , LO_EXTENDEDPRICE double , LO_ORDTOTALPRICE double , LO_DISCOUNT double , LO_REVENUE int unsigned , LO_SUPPLYCOST int unsigned , LO_TAX double , LO_COMMITDATE date , LO_SHIPMODE char ( 10 ), C_NAME varchar ( 25 ), C_ADDRESS varchar ( 25 ), C_CITY char ( 10 ), C_NATION char ( 15 ), C_REGION char ( 12 ), C_PHONE char ( 15 ), C_MKTSEGMENT char ( 10 ), S_NAME char ( 25 ), S_ADDRESS varchar ( 25 ), S_CITY char ( 10 ), S_NATION char ( 15 ), S_REGION char ( 12 ), S_PHONE char ( 15 ), P_NAME varchar ( 22 ), P_MFGR char ( 6 ), P_CATEGORY char ( 7 ), P_BRAND char ( 9 ), P_COLOR varchar ( 11 ), P_TYPE varchar ( 25 ), P_SIZE int , P_CONTAINER char ( 10 ) ); load data infile '/Users/YOURPATH/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n' ; If you load successfully this dataset, you are normally getting a result as: Query OK, 10272594 rows affected (1 min 7.09 sec) Step3: Run your aggregate function and sum() , avg() on the column LO_SUPPKEY respectively to check the performance. select avg ( LO_SUPPKEY ) from lineorder_flat ; select sum ( LO_SUPPKEY ) from lineorder_flat ; select yourfunction ( LO_SUPPKEY ) from lineorder_flat ; Step4: When you submit your PR, please submit these performance results in your PR comment as well.","title":"Conduct a Performance Test"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/","text":"Develop a built-in function Prerequisite To develop a built-in function for MatrixOne, you need a basic knowledge of Golang programming. You can go through this excellent Golang tutorial to learn some basic Golang concepts. Preparation Before you start, please make sure that you have Go installed, cloned the MatrixOne code base. Please refer to Preparation and Contribute Code for more details. What is a built-in function? There are two types of functions in a database, built-in functions and user-defined functions. Built-in functions are functions that are shipped with the database. In contrast, user-defined functions are customized by the users. Built-in functions can be categorized according to the data types that they operate on i.e. strings, date and numeric built-in functions. An example of a built-in function is abs() , which calculates the absolute (non-negative) value of a given number. Some functions, such as abs() are used to perform calculations. Others such as getdate() are used to obtain a system value, such as the current data, or others, like left() , are used to manipulate textual data. Usually the built-in functions are categorized into major categories: Conversion Functions Logical Functions Math Functions String Functions Date Functions Develop an abs() function: In this tutorial, we use the function ABS (get the absolute value) as an example. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/builtin/types.go register builtin functions as operators and we assign each operator a distinct integer number. To add a new function abs() , add a new const Abs in the const declaration. const ( Length = iota + overload . NE + 1 Year Round Floor Abs ) In the directory pkg/builtin/unary , create a new go file abs.go . Info The functions under unary directory take only one value as input. The functions under binary directory take only two values as input. Other forms of functions are put under multi directory. This abs.go file has the following functionalities: 1. function name registration 2. declare all the different parameter types this function accepts, and the different return type when given different parameter types. 3. the stringification method for this function. 4. preparation for function calling and function calling. package unary func init () { } In Golang, init function will be called when a package is initialized. We wrap all ABS() 's functionality inside this init function so we don't need to call it explicitly. 1. function name registration func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } In MatrixOne, all letters in a function name will be lowercased during the parsing process, so the register function names using only lowercase letters otherwise the function won't be recognized. 2. declare function parameter types and return types. The function abs accepts all numeric types as its parameter (uint8, int8, float32...), we can return a 64bit value covering all different parameter types. To optimize the performance of our function, we can also return different types with respect to the parameter type. Outside the init function, declare these variables for each pair of parameter type and return type. var argAndRets = [] argsAndRet { {[] types . T { types . T_uint8 }, types . T_uint8 }, {[] types . T { types . T_uint16 }, types . T_uint16 }, {[] types . T { types . T_uint32 }, types . T_uint32 }, {[] types . T { types . T_uint64 }, types . T_uint64 }, {[] types . T { types . T_int8 }, types . T_int8 }, {[] types . T { types . T_int16 }, types . T_int16 }, {[] types . T { types . T_int32 }, types . T_int32 }, {[] types . T { types . T_int64 }, types . T_int64 }, {[] types . T { types . T_float32 }, types . T_float32 }, {[] types . T { types . T_float64 }, types . T_float64 }, } func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } Register parameter types and return types for abs function: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } } Define a stringify function and register abs function type: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type } For simplicity, we demonstrate only two cases where abs function has parameter type float32 and float64. Preparation for function calling: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } some annotations for this code snippet above: 1.process.Get: MatrixOne assigns each query a \"virtual process\", during the execution of a query, we may need to generate new Vector, allocate memory for it, and we do it using this Get function // proc: the process for this query, size: the memory allocation size we are asking for, type: the new Vector's type. func Get ( proc * Process , size int64 , typ types . Type ) ( * vector . Vector , error ) since we need a float32 vector here, its size should be 4 * len(origVecCol), 4 bytes for each float32. 2.encoding.DecodeFloat32Slice: this is just type casting. 3.Vector.Nsp: MatrixOne uses bitmaps to store the NULL values in a column, Vector.Nsp is a wrap up struct for this bitmap. 4.the boolean parameter of the Fn: this boolean value is usually used to indicate whether the vector passed in is a constant(it has length 1). Sometimes we could make use of this situation for our function implementation, for example, pkg/sql/colexec/extend/overload/plus.go. Since the result vector has the same type as the original vector, we could use the original vector to store our result when we don't need our original vector anymore in our execution plan(i.e., the reference count of the original vector is 0 or 1). To reuse the original vector when possible: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } For float64 type parameter: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, { Typ : types . T_float64 , ReturnType : types . T_float64 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float64 ) if origVec . Ref == 1 || origVec . Ref == 0 { origVec . Ref = 0 abs . AbsFloat64 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 8 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float64 , Size : 8 }) if err != nil { return nil , err } results := encoding . DecodeFloat64Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) vector . SetCol ( resultVector , abs . AbsFloat64 ( origVecCol , results )) return resultVector , nil }, }, } } Step 2: Implement Abs function In MatrixOne, We put all of our builtin function definition code in the pkg/vectorize/ directory. To implement abs functions, first we need to create a subdirectory abs in this vectorized directory. In this fresh abs directory, create a file abs.go , the place where our abs function implementation code goes. For certain cpu architectures, we could utilize the cpu's intrinsic SIMD instruction to compute the absolute value and hence boost our function's performance, to differentiate function implementations for different cpu architectures, we declare our pure go version of abs function this way: package abs var ( AbsFloat32 func ([] float32 , [] float32 ) [] float32 AbsFloat64 func ([] float64 , [] float64 ) [] float64 ) func init () { AbsFloat32 = absFloat32 AbsFloat64 = absFloat64 } func absFloat32 ( xs , rs [] float32 ) [] float32 { // See below } func absFloat64 ( xs , rs [] float64 ) [] float64 { // See below } Inside the absFloat32 and absFloat64, we implement our golang version of abs function for float32 and float64 type. The other data types (int8, int16, int32, int64) are more or less the same. func absFloat32 ( xs , rs [] float32 ) [] float32 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } func absFloat64 ( xs , rs [] float64 ) [] float64 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } Here we go. Now we can fire up MatrixOne and take our abs function for a little spin. Compile and run MatrixOne Once the function is ready, we could compile and run MatrixOne to see the function behavior. Step1: Run make config and make build to compile the MatrixOne project and build binary file. make build Info make config generates a new configuration file, in this tutorial, you only need to run it once. If you modify some code and want to recompile, you only have to run make build . Step2: Run ./mo-service -cfg ./etc/cn-standalone-test.toml to launch MatrixOne, the MatrixOne server will start to listen for client connecting. ./mo-service -cfg ./etc/cn-standalone-test.toml Info The logger print level of system_vars_config.toml is set to default as DEBUG , which will print a lot of information for you. If you only care about what your built-in function will print, you can modify the system_vars_config.toml and set cubeLogLevel and level to ERROR level. cubeLogLevel = \"error\" level = \"error\" Info Sometimes a port is in use error at port 50000 will occur. You could checkout what process in occupying port 50000 by lsof -i:50000 . This command helps you to get the PIDNAME of this process, then you can kill the process by kill -9 PIDNAME . Step3: Connect to MatrixOne server with a MySQL client. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Step4: Test your function behavior with some data. Below is an example. mysql > create table abs_test_table ( a float , b double ); Query OK , 0 rows affected ( 0 . 44 sec ) mysql > insert into abs_test_table values ( 12 . 34 , - 43 . 21 ); Query OK , 1 row affected ( 0 . 08 sec ) mysql > insert into abs_test_table values ( - 12 . 34 , 43 . 21 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > insert into abs_test_table values ( 2 . 718 , - 3 . 14 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > select a , b , abs ( a ), abs ( b ) from abs_test_table ; + ----------+----------+---------+---------+ | a | b | abs ( a ) | abs ( b ) | + ----------+----------+---------+---------+ | 12 . 3400 | - 43 . 2100 | 12 . 3400 | 43 . 2100 | | - 12 . 3400 | 43 . 2100 | 12 . 3400 | 43 . 2100 | | 2 . 7180 | - 3 . 1400 | 2 . 7180 | 3 . 1400 | + ----------+----------+---------+---------+ 3 rows in set ( 0 . 01 sec ) Bingo! Info Except for abs() , MatrixOne has already some neat examples for built-in functions, such as floor() , round() , year() . With some minor corresponding changes, the procedure is quite the same as other functions. \u200b Write a unit Test for your function We recommend that you also write a unit test for the new function. Go has a built-in testing command called go test and a package testing which combine to give a minimal but complete testing experience. It automates execution of any function of the form. func TestXxx(*testing.T) To write a new test suite, create a file whose name ends _test.go and contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the go test command is run. Step1: Create a file named abs_test.go under vectorize/abs/ directory. Import the testing framework and the testify framework we are going to use for testing mathematical equal . package abs import ( \"testing\" \"github.com/stretchr/testify/require\" ) function TestAbsFloat32(t *testing.T) { } function TestAbsFloat64(t *testing.T) { } Step2: Implement the TestXxx functions with some predefined values. func TestAbsFloat32(t *testing.T) { //Test values nums := []float32{1.5, -1.5, 2.5, -2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, -1.2, -12.3, -123.4, -1234.5, -12345.6} //Predefined Correct Values absNums := []float32{1.5, 1.5, 2.5, 2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, 1.2, 12.3, 123.4, 1234.5, 12345.6} //Init a new variable newNums := make([]float32, len(nums)) //Run abs function newNums = AbsFloat32(nums, newNums) for i := range newNums { require.Equal(t, absNums[i], newNums[i]) } } func TestAbsFloat64(t *testing.T) { //Test values nums := []float64{1.5, -1.5, 2.5, -2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, -1.2, -12.3, -123.4, -1234.5, -12345.6} //Predefined Correct Values absNums := []float64{1.5, 1.5, 2.5, 2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, 1.2, 12.3, 123.4, 1234.5, 12345.6} //Init a new variable newNums := make([]float64, len(nums)) //Run abs function newNums = AbsFloat64(nums, newNums) for i := range newNums { require.Equal(t, absNums[i], newNums[i]) } } Step3: Launch Test. Within the same directory as the test: go test This picks up any files matching packagename_test.go. If you are getting a PASS , you are passing the unit test. In MatrixOne, we have a bvt test framework which will run all the unit tests defined in the whole package, and each time your code is merged in the code base, the test will automatically run.","title":"**Develop a built-in function**"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#develop-a-built-in-function","text":"","title":"Develop a built-in function"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#prerequisite","text":"To develop a built-in function for MatrixOne, you need a basic knowledge of Golang programming. You can go through this excellent Golang tutorial to learn some basic Golang concepts.","title":"Prerequisite"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#preparation","text":"Before you start, please make sure that you have Go installed, cloned the MatrixOne code base. Please refer to Preparation and Contribute Code for more details.","title":"Preparation"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#what-is-a-built-in-function","text":"There are two types of functions in a database, built-in functions and user-defined functions. Built-in functions are functions that are shipped with the database. In contrast, user-defined functions are customized by the users. Built-in functions can be categorized according to the data types that they operate on i.e. strings, date and numeric built-in functions. An example of a built-in function is abs() , which calculates the absolute (non-negative) value of a given number. Some functions, such as abs() are used to perform calculations. Others such as getdate() are used to obtain a system value, such as the current data, or others, like left() , are used to manipulate textual data. Usually the built-in functions are categorized into major categories: Conversion Functions Logical Functions Math Functions String Functions Date Functions","title":"What is a built-in function?"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#develop-an-abs-function","text":"In this tutorial, we use the function ABS (get the absolute value) as an example. Step 1: register function MatrixOne doesn't distinguish between operators and functions. In our code repository, the file pkg/builtin/types.go register builtin functions as operators and we assign each operator a distinct integer number. To add a new function abs() , add a new const Abs in the const declaration. const ( Length = iota + overload . NE + 1 Year Round Floor Abs ) In the directory pkg/builtin/unary , create a new go file abs.go . Info The functions under unary directory take only one value as input. The functions under binary directory take only two values as input. Other forms of functions are put under multi directory. This abs.go file has the following functionalities: 1. function name registration 2. declare all the different parameter types this function accepts, and the different return type when given different parameter types. 3. the stringification method for this function. 4. preparation for function calling and function calling. package unary func init () { } In Golang, init function will be called when a package is initialized. We wrap all ABS() 's functionality inside this init function so we don't need to call it explicitly. 1. function name registration func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } In MatrixOne, all letters in a function name will be lowercased during the parsing process, so the register function names using only lowercase letters otherwise the function won't be recognized. 2. declare function parameter types and return types. The function abs accepts all numeric types as its parameter (uint8, int8, float32...), we can return a 64bit value covering all different parameter types. To optimize the performance of our function, we can also return different types with respect to the parameter type. Outside the init function, declare these variables for each pair of parameter type and return type. var argAndRets = [] argsAndRet { {[] types . T { types . T_uint8 }, types . T_uint8 }, {[] types . T { types . T_uint16 }, types . T_uint16 }, {[] types . T { types . T_uint32 }, types . T_uint32 }, {[] types . T { types . T_uint64 }, types . T_uint64 }, {[] types . T { types . T_int8 }, types . T_int8 }, {[] types . T { types . T_int16 }, types . T_int16 }, {[] types . T { types . T_int32 }, types . T_int32 }, {[] types . T { types . T_int64 }, types . T_int64 }, {[] types . T { types . T_float32 }, types . T_float32 }, {[] types . T { types . T_float64 }, types . T_float64 }, } func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name } Register parameter types and return types for abs function: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } } Define a stringify function and register abs function type: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type } For simplicity, we demonstrate only two cases where abs function has parameter type float32 and float64. Preparation for function calling: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } some annotations for this code snippet above: 1.process.Get: MatrixOne assigns each query a \"virtual process\", during the execution of a query, we may need to generate new Vector, allocate memory for it, and we do it using this Get function // proc: the process for this query, size: the memory allocation size we are asking for, type: the new Vector's type. func Get ( proc * Process , size int64 , typ types . Type ) ( * vector . Vector , error ) since we need a float32 vector here, its size should be 4 * len(origVecCol), 4 bytes for each float32. 2.encoding.DecodeFloat32Slice: this is just type casting. 3.Vector.Nsp: MatrixOne uses bitmaps to store the NULL values in a column, Vector.Nsp is a wrap up struct for this bitmap. 4.the boolean parameter of the Fn: this boolean value is usually used to indicate whether the vector passed in is a constant(it has length 1). Sometimes we could make use of this situation for our function implementation, for example, pkg/sql/colexec/extend/overload/plus.go. Since the result vector has the same type as the original vector, we could use the original vector to store our result when we don't need our original vector anymore in our execution plan(i.e., the reference count of the original vector is 0 or 1). To reuse the original vector when possible: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, } } For float64 type parameter: func init () { extend . FunctionRegistry [ \"abs\" ] = builtin . Abs // register function name for _ , item := range argAndRets { overload . AppendFunctionRets ( builtin . Abs , item . args , item . ret ) // append function parameter types and return types } extend . UnaryReturnTypes [ builtin . Abs ] = func ( extend extend . Extend ) types . T { // define a get return type function for abs function return getUnaryReturnType ( builtin . Abs , extend ) } extend . UnaryStrings [ builtin . Abs ] = func ( e extend . Extend ) string { // define a stringify function for abs return fmt . Sprintf ( \"abs(%s)\" , e ) } overload . OpTypes [ builtin . Abs ] = overload . Unary // register abs function type overload . UnaryOps [ builtin . Abs ] = [] * overload . UnaryOp { { Typ : types . T_float32 , ReturnType : types . T_float32 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float32 ) if origVec . Ref == 1 || origVec . Ref == 0 { // reuse the original vector when we don't need the original one anymore origVec . Ref = 0 abs . AbsFloat32 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 4 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float32 , Size : 4 }) // get a new types.T_float32 vector to store the result vector if err != nil { return nil , err } results := encoding . DecodeFloat32Slice ( resultVector . Data ) // decode the vector's data to float32 type results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) // the new vector's nulls are the same as the original vector vector . SetCol ( resultVector , abs . AbsFloat32 ( origVecCol , results )) // set the vector col with the return value from abs.AbsFloat32 function return resultVector , nil }, }, { Typ : types . T_float64 , ReturnType : types . T_float64 , Fn : func ( origVec * vector . Vector , proc * process . Process , _ bool ) ( * vector . Vector , error ) { origVecCol := origVec . Col .([] float64 ) if origVec . Ref == 1 || origVec . Ref == 0 { origVec . Ref = 0 abs . AbsFloat64 ( origVecCol , origVecCol ) return origVec , nil } resultVector , err := process . Get ( proc , 8 * int64 ( len ( origVecCol )), types . Type { Oid : types . T_float64 , Size : 8 }) if err != nil { return nil , err } results := encoding . DecodeFloat64Slice ( resultVector . Data ) results = results [: len ( origVecCol )] resultVector . Col = results nulls . Set ( resultVector . Nsp , origVec . Nsp ) vector . SetCol ( resultVector , abs . AbsFloat64 ( origVecCol , results )) return resultVector , nil }, }, } } Step 2: Implement Abs function In MatrixOne, We put all of our builtin function definition code in the pkg/vectorize/ directory. To implement abs functions, first we need to create a subdirectory abs in this vectorized directory. In this fresh abs directory, create a file abs.go , the place where our abs function implementation code goes. For certain cpu architectures, we could utilize the cpu's intrinsic SIMD instruction to compute the absolute value and hence boost our function's performance, to differentiate function implementations for different cpu architectures, we declare our pure go version of abs function this way: package abs var ( AbsFloat32 func ([] float32 , [] float32 ) [] float32 AbsFloat64 func ([] float64 , [] float64 ) [] float64 ) func init () { AbsFloat32 = absFloat32 AbsFloat64 = absFloat64 } func absFloat32 ( xs , rs [] float32 ) [] float32 { // See below } func absFloat64 ( xs , rs [] float64 ) [] float64 { // See below } Inside the absFloat32 and absFloat64, we implement our golang version of abs function for float32 and float64 type. The other data types (int8, int16, int32, int64) are more or less the same. func absFloat32 ( xs , rs [] float32 ) [] float32 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } func absFloat64 ( xs , rs [] float64 ) [] float64 { for i := range xs { if xs [ i ] < 0 { rs [ i ] = - xs [ i ] } else { rs [ i ] = xs [ i ] } } return rs } Here we go. Now we can fire up MatrixOne and take our abs function for a little spin.","title":"Develop an abs() function:"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#compile-and-run-matrixone","text":"Once the function is ready, we could compile and run MatrixOne to see the function behavior. Step1: Run make config and make build to compile the MatrixOne project and build binary file. make build Info make config generates a new configuration file, in this tutorial, you only need to run it once. If you modify some code and want to recompile, you only have to run make build . Step2: Run ./mo-service -cfg ./etc/cn-standalone-test.toml to launch MatrixOne, the MatrixOne server will start to listen for client connecting. ./mo-service -cfg ./etc/cn-standalone-test.toml Info The logger print level of system_vars_config.toml is set to default as DEBUG , which will print a lot of information for you. If you only care about what your built-in function will print, you can modify the system_vars_config.toml and set cubeLogLevel and level to ERROR level. cubeLogLevel = \"error\" level = \"error\" Info Sometimes a port is in use error at port 50000 will occur. You could checkout what process in occupying port 50000 by lsof -i:50000 . This command helps you to get the PIDNAME of this process, then you can kill the process by kill -9 PIDNAME . Step3: Connect to MatrixOne server with a MySQL client. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Step4: Test your function behavior with some data. Below is an example. mysql > create table abs_test_table ( a float , b double ); Query OK , 0 rows affected ( 0 . 44 sec ) mysql > insert into abs_test_table values ( 12 . 34 , - 43 . 21 ); Query OK , 1 row affected ( 0 . 08 sec ) mysql > insert into abs_test_table values ( - 12 . 34 , 43 . 21 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > insert into abs_test_table values ( 2 . 718 , - 3 . 14 ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > select a , b , abs ( a ), abs ( b ) from abs_test_table ; + ----------+----------+---------+---------+ | a | b | abs ( a ) | abs ( b ) | + ----------+----------+---------+---------+ | 12 . 3400 | - 43 . 2100 | 12 . 3400 | 43 . 2100 | | - 12 . 3400 | 43 . 2100 | 12 . 3400 | 43 . 2100 | | 2 . 7180 | - 3 . 1400 | 2 . 7180 | 3 . 1400 | + ----------+----------+---------+---------+ 3 rows in set ( 0 . 01 sec ) Bingo! Info Except for abs() , MatrixOne has already some neat examples for built-in functions, such as floor() , round() , year() . With some minor corresponding changes, the procedure is quite the same as other functions. \u200b","title":"Compile and run MatrixOne"},{"location":"MatrixOne/Contribution-Guide/Tutorial/develop_builtin_functions/#write-a-unit-test-for-your-function","text":"We recommend that you also write a unit test for the new function. Go has a built-in testing command called go test and a package testing which combine to give a minimal but complete testing experience. It automates execution of any function of the form. func TestXxx(*testing.T) To write a new test suite, create a file whose name ends _test.go and contains the TestXxx functions as described here. Put the file in the same package as the one being tested. The file will be excluded from regular package builds but will be included when the go test command is run. Step1: Create a file named abs_test.go under vectorize/abs/ directory. Import the testing framework and the testify framework we are going to use for testing mathematical equal . package abs import ( \"testing\" \"github.com/stretchr/testify/require\" ) function TestAbsFloat32(t *testing.T) { } function TestAbsFloat64(t *testing.T) { } Step2: Implement the TestXxx functions with some predefined values. func TestAbsFloat32(t *testing.T) { //Test values nums := []float32{1.5, -1.5, 2.5, -2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, -1.2, -12.3, -123.4, -1234.5, -12345.6} //Predefined Correct Values absNums := []float32{1.5, 1.5, 2.5, 2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, 1.2, 12.3, 123.4, 1234.5, 12345.6} //Init a new variable newNums := make([]float32, len(nums)) //Run abs function newNums = AbsFloat32(nums, newNums) for i := range newNums { require.Equal(t, absNums[i], newNums[i]) } } func TestAbsFloat64(t *testing.T) { //Test values nums := []float64{1.5, -1.5, 2.5, -2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, -1.2, -12.3, -123.4, -1234.5, -12345.6} //Predefined Correct Values absNums := []float64{1.5, 1.5, 2.5, 2.5, 1.2, 12.3, 123.4, 1234.5, 12345.6, 1234.567, 1.2, 12.3, 123.4, 1234.5, 12345.6} //Init a new variable newNums := make([]float64, len(nums)) //Run abs function newNums = AbsFloat64(nums, newNums) for i := range newNums { require.Equal(t, absNums[i], newNums[i]) } } Step3: Launch Test. Within the same directory as the test: go test This picks up any files matching packagename_test.go. If you are getting a PASS , you are passing the unit test. In MatrixOne, we have a bvt test framework which will run all the unit tests defined in the whole package, and each time your code is merged in the code base, the test will automatically run.","title":"Write a unit Test for your function"},{"location":"MatrixOne/Develop/0.6-read-data/cte/","text":"Common Table Expression A CTE (Common table expression) is a named temporary result set that exists only within the execution scope of a single SQL statement (such as SELECT , INSERT , UPDATE , or DELETE ). Like derived tables, CTEs are not stored as objects and persist only for the duration of query execution; Unlike derived tables, CTEs can be self-referenced (recursive Ctes, not currently supported) or referenced multiple times in the same query. In addition, CTEs provide better readability and performance than derived tables. The structure of a CTE includes a name, a list of optional columns, and the query that defines the CTE. CTE Statement: WITH < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ; Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . Preparation You can create a simple table and insert some data to help you understand the CTE statements shown later: > drop table if exists t1 ; > create table t1 ( a int , b int , c int ); > insert into t1 values ( null , null , null ),( 2 , 3 , 4 ); CTE Example In the following example, qn is created as a temporary result set and the corresponding query results are cached in MatrixOne. You can perform a formal qn query better than in a non-CTE scenario. WITH qn AS ( SELECT a FROM t1 ), qn2 as ( select b from t1 ) SELECT * FROM qn ; Result as below: +------+ | a | +------+ | NULL | | 2 | +------+","title":"Common Table Expression"},{"location":"MatrixOne/Develop/0.6-read-data/cte/#common-table-expression","text":"A CTE (Common table expression) is a named temporary result set that exists only within the execution scope of a single SQL statement (such as SELECT , INSERT , UPDATE , or DELETE ). Like derived tables, CTEs are not stored as objects and persist only for the duration of query execution; Unlike derived tables, CTEs can be self-referenced (recursive Ctes, not currently supported) or referenced multiple times in the same query. In addition, CTEs provide better readability and performance than derived tables. The structure of a CTE includes a name, a list of optional columns, and the query that defines the CTE. CTE Statement: WITH < query_name > AS ( < query_definition > ) SELECT ... FROM < query_name > ;","title":"Common Table Expression"},{"location":"MatrixOne/Develop/0.6-read-data/cte/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-read-data/cte/#preparation","text":"You can create a simple table and insert some data to help you understand the CTE statements shown later: > drop table if exists t1 ; > create table t1 ( a int , b int , c int ); > insert into t1 values ( null , null , null ),( 2 , 3 , 4 );","title":"Preparation"},{"location":"MatrixOne/Develop/0.6-read-data/cte/#cte-example","text":"In the following example, qn is created as a temporary result set and the corresponding query results are cached in MatrixOne. You can perform a formal qn query better than in a non-CTE scenario. WITH qn AS ( SELECT a FROM t1 ), qn2 as ( select b from t1 ) SELECT * FROM qn ; Result as below: +------+ | a | +------+ | NULL | | 2 | +------+","title":"CTE Example"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/","text":"Multi-table Join Queries In many scenarios, you need to use one query to get data from multiple tables. You can use the JOIN statement to combine the data from two or more tables. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . Preparation Create two tables to prepare for using the JOIN statement: > drop table if exists t1 ; > drop table if exists t2 ; > drop table if exists t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select * from t1 ; + --------------------+----------+ | libname1 | city | + --------------------+----------+ | NewYorkPublicLibra | NewYork | | SanFransiscoPublic | SanFran | | BerkeleyPublic1 | Berkeley | | BerkeleyPublic2 | Berkeley | | NYCLib | NewYork | + --------------------+----------+ 5 rows in set ( 0 . 01 sec ) > select * from t2 ; + -------+--------------+-----------------------+ | isbn2 | author | title | + -------+--------------+-----------------------+ | 000 | Anonymous | Wannabuythisbook ? | | 001 | Daffy | Aducklife | | 002 | Bugs | Arabbitlife | | 003 | Cowboy | Lifeontherange | | 004 | BestSeller | OneHeckuvabook | | 005 | EveryoneBuys | Thisverybook | | 006 | SanFran | Itisasanfranlifestyle | | 007 | BerkAuthor | Cool . Berkley . the . book | + -------+--------------+-----------------------+ 8 rows in set ( 0 . 00 sec ) > select * from t3 ; + -------+--------------------+----------+ | isbn3 | libname3 | quantity | + -------+--------------------+----------+ | 000 | NewYorkPublicLibra | 1 | | 001 | NewYorkPublicLibra | 2 | | 002 | NewYorkPublicLibra | 3 | | 003 | NewYorkPublicLibra | 4 | | 004 | NewYorkPublicLibra | 5 | | 005 | NewYorkPublicLibra | 6 | | 006 | SanFransiscoPublic | 5 | | 007 | BerkeleyPublic1 | 3 | | 007 | BerkeleyPublic2 | 3 | | 001 | NYC Lib | 8 | + -------+--------------------+----------+ 10 rows in set ( 0 . 01 sec ) Join Types LEFT JOIN The LEFT JOIN returns all the rows in the left table and the values \u200b\u200bin the right table that match the join condition. If no rows are matched in the right table, it will be filled with NULL. Statement Image SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL Example \uff1a Based on the data prepared above, here is an example to explain the left join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Left join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NULL | NULL | 0 | + ----------+--------------------+------+ 5 rows in set ( 0 . 01 sec ) For details about SQL execution, refer to the following code. The following examples of RIGHT JOIN and INNER JOIN will not describe the execution details: > explain select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------+ | Project | | -> Aggregate | | Group Key : t1 . city , t1 . libname1 | | Aggregate Functions : count ( t1 . libname1 ) | | -> Join | | Join Type : INNER | | Join Cond : ( t3 . isbn3 = t2 . isbn2 ) | | -> Join | | Join Type : LEFT | | Join Cond : ( t1 . libname1 = t3 . libname3 ) | | -> Table Scan on db1 . t3 | | -> Table Scan on db1 . t1 | | -> Table Scan on db1 . t2 | + ------------------------------------------------------------+ 13 rows in set ( 0 . 00 sec ) RIGHT JOIN A RIGHT JOIN returns all the records in the right table and the values \u200b\u200bin the left table that match the join condition. If there is no matching value, it is filled with NULL. Statement Image SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL Example \uff1a Based on the data prepared above, here is an example to explain the right join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Right join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 right join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 03 sec ) INNER JOIN The join result of an inner join returns only rows that match the join condition. Statement Image SELECT / FROM TableA A INNER JOIN TableB B ON A.Key=B.Key Example \uff1a Based on the data prepared above, here is an example to explain the inner join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Inner join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 01 sec ) Implicit join Before the JOIN statement that explicitly declared a join was added to the SQL standard, it was possible to join two or more tables in a SQL statement using the FROM t1, t2 clause, and specify the conditions for the join using the WHERE t1.id = t2.id clause. You can understand it as an implicit join, which uses the inner join to join tables.","title":"Multi-table Join Queries"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#multi-table-join-queries","text":"In many scenarios, you need to use one query to get data from multiple tables. You can use the JOIN statement to combine the data from two or more tables.","title":"Multi-table Join Queries"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#preparation","text":"Create two tables to prepare for using the JOIN statement: > drop table if exists t1 ; > drop table if exists t2 ; > drop table if exists t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select * from t1 ; + --------------------+----------+ | libname1 | city | + --------------------+----------+ | NewYorkPublicLibra | NewYork | | SanFransiscoPublic | SanFran | | BerkeleyPublic1 | Berkeley | | BerkeleyPublic2 | Berkeley | | NYCLib | NewYork | + --------------------+----------+ 5 rows in set ( 0 . 01 sec ) > select * from t2 ; + -------+--------------+-----------------------+ | isbn2 | author | title | + -------+--------------+-----------------------+ | 000 | Anonymous | Wannabuythisbook ? | | 001 | Daffy | Aducklife | | 002 | Bugs | Arabbitlife | | 003 | Cowboy | Lifeontherange | | 004 | BestSeller | OneHeckuvabook | | 005 | EveryoneBuys | Thisverybook | | 006 | SanFran | Itisasanfranlifestyle | | 007 | BerkAuthor | Cool . Berkley . the . book | + -------+--------------+-----------------------+ 8 rows in set ( 0 . 00 sec ) > select * from t3 ; + -------+--------------------+----------+ | isbn3 | libname3 | quantity | + -------+--------------------+----------+ | 000 | NewYorkPublicLibra | 1 | | 001 | NewYorkPublicLibra | 2 | | 002 | NewYorkPublicLibra | 3 | | 003 | NewYorkPublicLibra | 4 | | 004 | NewYorkPublicLibra | 5 | | 005 | NewYorkPublicLibra | 6 | | 006 | SanFransiscoPublic | 5 | | 007 | BerkeleyPublic1 | 3 | | 007 | BerkeleyPublic2 | 3 | | 001 | NYC Lib | 8 | + -------+--------------------+----------+ 10 rows in set ( 0 . 01 sec )","title":"Preparation"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#join-types","text":"","title":"Join Types"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#left-join","text":"The LEFT JOIN returns all the rows in the left table and the values \u200b\u200bin the right table that match the join condition. If no rows are matched in the right table, it will be filled with NULL. Statement Image SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL Example \uff1a Based on the data prepared above, here is an example to explain the left join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Left join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NULL | NULL | 0 | + ----------+--------------------+------+ 5 rows in set ( 0 . 01 sec ) For details about SQL execution, refer to the following code. The following examples of RIGHT JOIN and INNER JOIN will not describe the execution details: > explain select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------+ | Project | | -> Aggregate | | Group Key : t1 . city , t1 . libname1 | | Aggregate Functions : count ( t1 . libname1 ) | | -> Join | | Join Type : INNER | | Join Cond : ( t3 . isbn3 = t2 . isbn2 ) | | -> Join | | Join Type : LEFT | | Join Cond : ( t1 . libname1 = t3 . libname3 ) | | -> Table Scan on db1 . t3 | | -> Table Scan on db1 . t1 | | -> Table Scan on db1 . t2 | + ------------------------------------------------------------+ 13 rows in set ( 0 . 00 sec )","title":"LEFT JOIN"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#right-join","text":"A RIGHT JOIN returns all the records in the right table and the values \u200b\u200bin the left table that match the join condition. If there is no matching value, it is filled with NULL. Statement Image SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL Example \uff1a Based on the data prepared above, here is an example to explain the right join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Right join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 right join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 03 sec )","title":"RIGHT JOIN"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#inner-join","text":"The join result of an inner join returns only rows that match the join condition. Statement Image SELECT / FROM TableA A INNER JOIN TableB B ON A.Key=B.Key Example \uff1a Based on the data prepared above, here is an example to explain the inner join statement. Query the city column, libname1 column, and the aggregate functions count(t1.libname1) . The query procedure is as below: Inner join from table t3 to table t1. The constraint is that the columns in table t1 are the same as those in table t3, that is, libname1=libname3; Inner join from the result of Step 1 to table t2. The constraint condition is that the columns in table t3 are the same as those in table t2, that is, isbn3=isbn2; . Aggregate groups according to columns city and libname1 in table t1. > select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 01 sec )","title":"INNER JOIN"},{"location":"MatrixOne/Develop/0.6-read-data/multitable-join-query/#implicit-join","text":"Before the JOIN statement that explicitly declared a join was added to the SQL standard, it was possible to join two or more tables in a SQL statement using the FROM t1, t2 clause, and specify the conditions for the join using the WHERE t1.id = t2.id clause. You can understand it as an implicit join, which uses the inner join to join tables.","title":"Implicit join"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/","text":"Query Data from a Single Table This document describes how to use SQL to query data from a single table in a database. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . Preparation Create a tables named token_count to prepare for querying: CREATE TABLE token_count ( id int , token varchar ( 100 ) DEFAULT '' NOT NULL , count int DEFAULT 0 NOT NULL , qty int , phone char ( 1 ) DEFAULT '' NOT NULL , times datetime DEFAULT '2000-01-01 00:00:00' NOT NULL ); INSERT INTO token_count VALUES ( 21 , 'e45703b64de71482360de8fec94c3ade' , 3 , 7800 , 'n' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 22 , 'e45703b64de71482360de8fec94c3ade' , 4 , 5000 , 'y' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 18 , '346d1cb63c89285b2351f0ca4de40eda' , 3 , 13200 , 'b' , '1999-12-23 11:58:04' ); INSERT INTO token_count VALUES ( 17 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 4 , 15000 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 16 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 3 , 13200 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 26 , 'a71250b7ed780f6ef3185bfffe027983' , 5 , 1500 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 24 , '4d75906f3c37ecff478a1eb56637aa09' , 3 , 5400 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 25 , '4d75906f3c37ecff478a1eb56637aa09' , 4 , 6500 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 27 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 6200 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 28 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 5400 , 'y' , '1999-12-27 09:44:36' ); INSERT INTO token_count VALUES ( 29 , 'a71250b7ed780f6ef3185bfffe027983' , 4 , 17700 , 'b' , '1999-12-27 09:45:05' ); Simple query Execute the following SQL statement in a MySQL client: > SELECT id , token FROM token_count ; Result is as below\uff1a +------+----------------------------------+ | id | token | +------+----------------------------------+ | 21 | e45703b64de71482360de8fec94c3ade | | 22 | e45703b64de71482360de8fec94c3ade | | 18 | 346d1cb63c89285b2351f0ca4de40eda | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | | 26 | a71250b7ed780f6ef3185bfffe027983 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | | 27 | a71250b7ed780f6ef3185bfffe027983 | | 28 | a71250b7ed780f6ef3185bfffe027983 | | 29 | a71250b7ed780f6ef3185bfffe027983 | +------+----------------------------------+ Filter results To filter query results, you can use the WHERE statement. SELECT * FROM token_count WHERE id = 25 ; Result is as below\uff1a +------+----------------------------------+-------+------+-------+---------------------+ | id | token | count | qty | phone | times | +------+----------------------------------+-------+------+-------+---------------------+ | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 4 | 6500 | y | 1999-12-23 17:29:12 | +------+----------------------------------+-------+------+-------+---------------------+ Sort results To sort query results, you can use the ORDER BY statement. For example, the following SQL statement can be used to sort the data in the token_count table in descending order (DESC) by times column. SELECT id , token , times FROM token_count ORDER BY times DESC ; Result is as below\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 21 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 22 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 18 | 346d1cb63c89285b2351f0ca4de40eda | 1999-12-23 11:58:04 | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | +------+----------------------------------+---------------------+ Limit the number of query results To limit the number of query results, you can use the LIMIT statement. SELECT id , token , times FROM token_count ORDER BY times DESC LIMIT 5 ; Result is as below\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | +------+----------------------------------+---------------------+ Aggregate queries To have a better understanding of the overall data situation, you can use the GROUP BY statement to aggregate query results. For example, you can group basic information by id , count , and times columns and count them separately: SELECT id , count , times FROM token_count GROUP BY id , count , times ORDER BY times DESC LIMIT 5 ; Result is as below\uff1a +------+-------+---------------------+ | id | count | times | +------+-------+---------------------+ | 29 | 4 | 1999-12-27 09:45:05 | | 28 | 3 | 1999-12-27 09:44:36 | | 26 | 5 | 1999-12-27 09:44:24 | | 27 | 3 | 1999-12-27 09:44:24 | | 24 | 3 | 1999-12-23 17:29:12 | +------+-------+---------------------+","title":"Query Data from a Single Table"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#query-data-from-a-single-table","text":"This document describes how to use SQL to query data from a single table in a database.","title":"Query Data from a Single Table"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#preparation","text":"Create a tables named token_count to prepare for querying: CREATE TABLE token_count ( id int , token varchar ( 100 ) DEFAULT '' NOT NULL , count int DEFAULT 0 NOT NULL , qty int , phone char ( 1 ) DEFAULT '' NOT NULL , times datetime DEFAULT '2000-01-01 00:00:00' NOT NULL ); INSERT INTO token_count VALUES ( 21 , 'e45703b64de71482360de8fec94c3ade' , 3 , 7800 , 'n' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 22 , 'e45703b64de71482360de8fec94c3ade' , 4 , 5000 , 'y' , '1999-12-23 17:22:21' ); INSERT INTO token_count VALUES ( 18 , '346d1cb63c89285b2351f0ca4de40eda' , 3 , 13200 , 'b' , '1999-12-23 11:58:04' ); INSERT INTO token_count VALUES ( 17 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 4 , 15000 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 16 , 'ca6ddeb689e1b48a04146b1b5b6f936a' , 3 , 13200 , 'b' , '1999-12-23 11:36:53' ); INSERT INTO token_count VALUES ( 26 , 'a71250b7ed780f6ef3185bfffe027983' , 5 , 1500 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 24 , '4d75906f3c37ecff478a1eb56637aa09' , 3 , 5400 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 25 , '4d75906f3c37ecff478a1eb56637aa09' , 4 , 6500 , 'y' , '1999-12-23 17:29:12' ); INSERT INTO token_count VALUES ( 27 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 6200 , 'b' , '1999-12-27 09:44:24' ); INSERT INTO token_count VALUES ( 28 , 'a71250b7ed780f6ef3185bfffe027983' , 3 , 5400 , 'y' , '1999-12-27 09:44:36' ); INSERT INTO token_count VALUES ( 29 , 'a71250b7ed780f6ef3185bfffe027983' , 4 , 17700 , 'b' , '1999-12-27 09:45:05' );","title":"Preparation"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#simple-query","text":"Execute the following SQL statement in a MySQL client: > SELECT id , token FROM token_count ; Result is as below\uff1a +------+----------------------------------+ | id | token | +------+----------------------------------+ | 21 | e45703b64de71482360de8fec94c3ade | | 22 | e45703b64de71482360de8fec94c3ade | | 18 | 346d1cb63c89285b2351f0ca4de40eda | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | | 26 | a71250b7ed780f6ef3185bfffe027983 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | | 27 | a71250b7ed780f6ef3185bfffe027983 | | 28 | a71250b7ed780f6ef3185bfffe027983 | | 29 | a71250b7ed780f6ef3185bfffe027983 | +------+----------------------------------+","title":"Simple query"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#filter-results","text":"To filter query results, you can use the WHERE statement. SELECT * FROM token_count WHERE id = 25 ; Result is as below\uff1a +------+----------------------------------+-------+------+-------+---------------------+ | id | token | count | qty | phone | times | +------+----------------------------------+-------+------+-------+---------------------+ | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 4 | 6500 | y | 1999-12-23 17:29:12 | +------+----------------------------------+-------+------+-------+---------------------+","title":"Filter results"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#sort-results","text":"To sort query results, you can use the ORDER BY statement. For example, the following SQL statement can be used to sort the data in the token_count table in descending order (DESC) by times column. SELECT id , token , times FROM token_count ORDER BY times DESC ; Result is as below\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 25 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | | 21 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 22 | e45703b64de71482360de8fec94c3ade | 1999-12-23 17:22:21 | | 18 | 346d1cb63c89285b2351f0ca4de40eda | 1999-12-23 11:58:04 | | 17 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | | 16 | ca6ddeb689e1b48a04146b1b5b6f936a | 1999-12-23 11:36:53 | +------+----------------------------------+---------------------+","title":"Sort results"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#limit-the-number-of-query-results","text":"To limit the number of query results, you can use the LIMIT statement. SELECT id , token , times FROM token_count ORDER BY times DESC LIMIT 5 ; Result is as below\uff1a +------+----------------------------------+---------------------+ | id | token | times | +------+----------------------------------+---------------------+ | 29 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:45:05 | | 28 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:36 | | 26 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 27 | a71250b7ed780f6ef3185bfffe027983 | 1999-12-27 09:44:24 | | 24 | 4d75906f3c37ecff478a1eb56637aa09 | 1999-12-23 17:29:12 | +------+----------------------------------+---------------------+","title":"Limit the number of query results"},{"location":"MatrixOne/Develop/0.6-read-data/query-data-single-table/#aggregate-queries","text":"To have a better understanding of the overall data situation, you can use the GROUP BY statement to aggregate query results. For example, you can group basic information by id , count , and times columns and count them separately: SELECT id , count , times FROM token_count GROUP BY id , count , times ORDER BY times DESC LIMIT 5 ; Result is as below\uff1a +------+-------+---------------------+ | id | count | times | +------+-------+---------------------+ | 29 | 4 | 1999-12-27 09:45:05 | | 28 | 3 | 1999-12-27 09:44:36 | | 26 | 5 | 1999-12-27 09:44:24 | | 27 | 3 | 1999-12-27 09:44:24 | | 24 | 3 | 1999-12-23 17:29:12 | +------+-------+---------------------+","title":"Aggregate queries"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/","text":"Subquery This document describes how to use subquery statements in MatrixOne. Overview An subquery is a query within another SQL query. With subquery, the query result can be used in another query. In most cases, there are five types of subqueries: Scalar Subquery, such as SELECT (SELECT s1 FROM t2) FROM t1 . Derived Tables, such as SELECT t1.s1 FROM (SELECT s1 FROM t2) t1 . Existential Test, such as WHERE NOT EXISTS(SELECT ... FROM t2) , WHERE t1.a IN (SELECT ... FROM t2) . Quantified Comparison, such as WHERE t1.a = ANY(SELECT ... FROM t2) , WHERE t1.a = ANY(SELECT ... FROM t2) . Subquery as a comparison operator operand, such as WHERE t1.a > (SELECT ... FROM t2) . For more information on SQL statement, see SUBQUERY . In addition, from the execution of SQL statements, subquery generally has the following two types: Correlated Subquery: In Correlated Subquery nested in databases, the inner and outer queries would not be independent, and the inner queries would depend on the outer queries. The execution sequence is as follows: + Queries a record from the outer query. + Put the queried records into the inner query, then put the records that meet the conditions into the outer query. + Repeat the above steps For example: ``select * from tableA where tableA.cloumn &lt; (select column from tableB where tableA.id = tableB.id))`` Self-contained Subquery: In a database nested query, the inner query is entirely independent of the outer query. The execution sequence is as follows: + Execute the inner query first. + The result of the inner query is carried into the outer layer, and then the outer query is executed. For example: ``select * from tableA where tableA.column = (select tableB.column from tableB)`` Key Feature \uff1a Subqueries allow structured queries so that each part of a query statement can be separated. Subqueries provides another way to perform operations that require complex JOIN and UNION . Example Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . Preparation drop table if exists t1 ; create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); drop table if exists t2 ; create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); Self-contained subquery For a self-contained subquery that uses subquery as operand of comparison operators ( > , >= , < , <= , = , or ! = ), the inner subquery queries only once, and MatrixOne rewrites it as a constant during the execution plan phase. select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); The inner subquery is executed before MatrixOne executes the above query: select t2 . id from t2 where t2 . id >= 3 ; Result is as below: + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ For self-contained subqueries such as Existential Test and Quantified Comparison, MatrixOne rewrites and replaces them with equivalent queries for better performance. Correlated subquery For correlated subquery, because the inner subquery references the columns from the outer query, each subquery is executed once for each row of the outer query. That is, assuming that the outer query gets 10 million results, the subquery will also be executed 10 million times, which will consume more time and resources. Therefore, in the process of processing, MatrixOne will try to Decorrelate of Correlated Subquery to improve the query efficiency at the execution plan level. SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); Rewrites it to an equivalent join query: select t1 . * from t1 join t2 on t1 . id = t2 . id where t2 . id >= 4 ; As a best practice, in actual development, it is recommended to avoid querying through a correlated subquery if you can write another equivalent query with better performance.","title":"Subquery"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#subquery","text":"This document describes how to use subquery statements in MatrixOne.","title":"Subquery"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#overview","text":"An subquery is a query within another SQL query. With subquery, the query result can be used in another query. In most cases, there are five types of subqueries: Scalar Subquery, such as SELECT (SELECT s1 FROM t2) FROM t1 . Derived Tables, such as SELECT t1.s1 FROM (SELECT s1 FROM t2) t1 . Existential Test, such as WHERE NOT EXISTS(SELECT ... FROM t2) , WHERE t1.a IN (SELECT ... FROM t2) . Quantified Comparison, such as WHERE t1.a = ANY(SELECT ... FROM t2) , WHERE t1.a = ANY(SELECT ... FROM t2) . Subquery as a comparison operator operand, such as WHERE t1.a > (SELECT ... FROM t2) . For more information on SQL statement, see SUBQUERY . In addition, from the execution of SQL statements, subquery generally has the following two types: Correlated Subquery: In Correlated Subquery nested in databases, the inner and outer queries would not be independent, and the inner queries would depend on the outer queries. The execution sequence is as follows: + Queries a record from the outer query. + Put the queried records into the inner query, then put the records that meet the conditions into the outer query. + Repeat the above steps For example: ``select * from tableA where tableA.cloumn &lt; (select column from tableB where tableA.id = tableB.id))`` Self-contained Subquery: In a database nested query, the inner query is entirely independent of the outer query. The execution sequence is as follows: + Execute the inner query first. + The result of the inner query is carried into the outer layer, and then the outer query is executed. For example: ``select * from tableA where tableA.column = (select tableB.column from tableB)`` Key Feature \uff1a Subqueries allow structured queries so that each part of a query statement can be separated. Subqueries provides another way to perform operations that require complex JOIN and UNION .","title":"Overview"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#example","text":"","title":"Example"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#preparation","text":"drop table if exists t1 ; create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); drop table if exists t2 ; create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' );","title":"Preparation"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#self-contained-subquery","text":"For a self-contained subquery that uses subquery as operand of comparison operators ( > , >= , < , <= , = , or ! = ), the inner subquery queries only once, and MatrixOne rewrites it as a constant during the execution plan phase. select * from t1 where t1 . id in ( select t2 . id from t2 where t2 . id >= 3 ); The inner subquery is executed before MatrixOne executes the above query: select t2 . id from t2 where t2 . id >= 3 ; Result is as below: + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 3 | 6 | 6 | 3 | 3663 . 21 | 366321 | 3663 | hi | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 4 | 7 | 1 | 5 | 4715 . 22 | 471522 | 4715 | good morning | my subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ For self-contained subqueries such as Existential Test and Quantified Comparison, MatrixOne rewrites and replaces them with equivalent queries for better performance.","title":"Self-contained subquery"},{"location":"MatrixOne/Develop/0.6-read-data/subquery/#correlated-subquery","text":"For correlated subquery, because the inner subquery references the columns from the outer query, each subquery is executed once for each row of the outer query. That is, assuming that the outer query gets 10 million results, the subquery will also be executed 10 million times, which will consume more time and resources. Therefore, in the process of processing, MatrixOne will try to Decorrelate of Correlated Subquery to improve the query efficiency at the execution plan level. SELECT * FROM t1 WHERE id in ( SELECT id FROM t2 WHERE t1 . ti = t2 . ti and t2 . id >= 4 ); Rewrites it to an equivalent join query: select t1 . * from t1 join t2 on t1 . id = t2 . id where t2 . id >= 4 ; As a best practice, in actual development, it is recommended to avoid querying through a correlated subquery if you can write another equivalent query with better performance.","title":"Correlated subquery"},{"location":"MatrixOne/Develop/0.6-read-data/views/","text":"Views This document describes how to use views in MatrixOne. Overview A view acts as a virtual table, whose schema is defined by the SELECT statement that creates the view. Key Feature \uff1a Simplified user action : The view mechanism allows users to focus on the data they care about. If the data is not directly from the base table, you can define views to make the database look simple and simplify the user's data query operation. Multiple perspectives on the same data : The view mechanism enables different users to view the same data differently, which is necessary when many users share the same database. Provides a degree of logical independence for refactoring the database : Physical data independence means that the user's application does not depend on the physical structure of the database. The logical independence of the data indicates that when the database is restructured, such as adding new relationships or adding new fields to existing relationships, the user's application is not affected. Hierarchical databases and mesh databases can support the physical independence of data but can not fully support logical independence. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . Preparation Create two tables to prepare for using the VIEW: > CREATE TABLE t00 ( a INTEGER ); > INSERT INTO t00 VALUES ( 1 ),( 2 ); > CREATE TABLE t01 ( a INTEGER ); > INSERT INTO t01 VALUES ( 1 ); Query the table t00 : > select * from t00 ; + ------+ | a | + ------+ | 1 | | 2 | + ------+ Query the table t01 : > select * from t01 ; + ------+ | a | + ------+ | 1 | + ------+ Create a view A complex query can be defined as a view with the CREATE VIEW statement. The syntax is as follows: CREATE VIEW view_name AS query ; you cannot create a view with the same name as an existing view or table. Example : > CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); Query OK , 0 rows affected ( 0 . 02 sec ) Query views Once a view is created, you can use the SELECT statement to query the view just like a normal table. > SELECT * FROM v0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+ Get view related information Use the SHOW CREATE TABLE|VIEW view_name statement: > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Drop view Use the DROP VIEW view_name; statement to drop a view. DROP VIEW v0 ;","title":"Views"},{"location":"MatrixOne/Develop/0.6-read-data/views/#views","text":"This document describes how to use views in MatrixOne.","title":"Views"},{"location":"MatrixOne/Develop/0.6-read-data/views/#overview","text":"A view acts as a virtual table, whose schema is defined by the SELECT statement that creates the view. Key Feature \uff1a Simplified user action : The view mechanism allows users to focus on the data they care about. If the data is not directly from the base table, you can define views to make the database look simple and simplify the user's data query operation. Multiple perspectives on the same data : The view mechanism enables different users to view the same data differently, which is necessary when many users share the same database. Provides a degree of logical independence for refactoring the database : Physical data independence means that the user's application does not depend on the physical structure of the database. The logical independence of the data indicates that when the database is restructured, such as adding new relationships or adding new fields to existing relationships, the user's application is not affected. Hierarchical databases and mesh databases can support the physical independence of data but can not fully support logical independence.","title":"Overview"},{"location":"MatrixOne/Develop/0.6-read-data/views/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-read-data/views/#preparation","text":"Create two tables to prepare for using the VIEW: > CREATE TABLE t00 ( a INTEGER ); > INSERT INTO t00 VALUES ( 1 ),( 2 ); > CREATE TABLE t01 ( a INTEGER ); > INSERT INTO t01 VALUES ( 1 ); Query the table t00 : > select * from t00 ; + ------+ | a | + ------+ | 1 | | 2 | + ------+ Query the table t01 : > select * from t01 ; + ------+ | a | + ------+ | 1 | + ------+","title":"Preparation"},{"location":"MatrixOne/Develop/0.6-read-data/views/#create-a-view","text":"A complex query can be defined as a view with the CREATE VIEW statement. The syntax is as follows: CREATE VIEW view_name AS query ; you cannot create a view with the same name as an existing view or table. Example : > CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); Query OK , 0 rows affected ( 0 . 02 sec )","title":"Create a view"},{"location":"MatrixOne/Develop/0.6-read-data/views/#query-views","text":"Once a view is created, you can use the SELECT statement to query the view just like a normal table. > SELECT * FROM v0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+","title":"Query views"},{"location":"MatrixOne/Develop/0.6-read-data/views/#get-view-related-information","text":"Use the SHOW CREATE TABLE|VIEW view_name statement: > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Get view related information"},{"location":"MatrixOne/Develop/0.6-read-data/views/#drop-view","text":"Use the DROP VIEW view_name; statement to drop a view. DROP VIEW v0 ;","title":"Drop view"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/","text":"Create a Database This document describes how to create a database using SQL and various programming languages and lists the rules of database creation. In this document, the modatabase application is taken as an example to walk you through the steps of database creation. Before you start Before creating a database, do the following: Build a MatrixOne Cluster in MatrixOne. Read the Database Schema Design Overview . What is database Database objects in MatrixOne contain tables, views and other objects. Create databases To create a database, you can use the CREATE DATABASE statement. CREATE DATABASE IF NOT EXISTS ` modatabase ` ; For more information on CREATE DATABASE statement, see CREATE DATABASE . View databases To view the databases in a cluster, use the SHOW DATABASES statement. SHOW DATABASES ; The following is an example output: +--------------------+ | Database | +--------------------+ | mo_catalog | | system | | system_metrics | | mysql | | information_schema | | modatabase | +--------------------+ Rules in database creation Follow the Database Naming Conventions and name your database meaningfully. You can create your own database using the CREATE DATABASE statement and change the current database using the USE {databasename}; statement in a SQL session. Use the root user to create objects such as database, roles, and users. Grant only the necessary privileges to roles and users. For more information, see Access control in MatrixOne .","title":"Create Database"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#create-a-database","text":"This document describes how to create a database using SQL and various programming languages and lists the rules of database creation. In this document, the modatabase application is taken as an example to walk you through the steps of database creation.","title":"Create a Database"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#before-you-start","text":"Before creating a database, do the following: Build a MatrixOne Cluster in MatrixOne. Read the Database Schema Design Overview .","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#what-is-database","text":"Database objects in MatrixOne contain tables, views and other objects.","title":"What is database"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#create-databases","text":"To create a database, you can use the CREATE DATABASE statement. CREATE DATABASE IF NOT EXISTS ` modatabase ` ; For more information on CREATE DATABASE statement, see CREATE DATABASE .","title":"Create databases"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#view-databases","text":"To view the databases in a cluster, use the SHOW DATABASES statement. SHOW DATABASES ; The following is an example output: +--------------------+ | Database | +--------------------+ | mo_catalog | | system | | system_metrics | | mysql | | information_schema | | modatabase | +--------------------+","title":"View databases"},{"location":"MatrixOne/Develop/0.6-schema-design/create-database/#rules-in-database-creation","text":"Follow the Database Naming Conventions and name your database meaningfully. You can create your own database using the CREATE DATABASE statement and change the current database using the USE {databasename}; statement in a SQL session. Use the root user to create objects such as database, roles, and users. Grant only the necessary privileges to roles and users. For more information, see Access control in MatrixOne .","title":"Rules in database creation"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/","text":"Create a Table This document introduces how to create tables using the SQL statement and the related best practices. In the previous document, you created a database named modatabase . In this document, you will create a table in the database. Before you start Before reading this document, make sure that the following tasks are completed: Build a MatrixOne Cluster in MatrixOne. Read the Database Schema Design Overview . The database has been created. What is a table A table is a logical object in MatrixOne cluster that is subordinate to the database. It is used to store the data. Tables save data records in the form of rows and columns. A table has at least one column. If you have defined n columns, each row of data has exactly the same fields as the n columns. Name a table The first step for creating a table is to give your table a name. Do not use meaningless names that will cause great distress to yourself or your colleagues in the future. It is recommended that you follow your company or organization's table naming convention. The CREATE TABLE statement usually takes the following form: CREATE TABLE { table_name } ( { elements } ); For more information on CREATE TABLE statement, see CREATE TABLE . Parameter description {table_name}: The name of the table to be created. {elements}: A comma-separated list of table elements, such as column definitions and primary key definitions. Define columns A column is subordinate to a table. Each table has at least one column. Columns provide a structure to a table by dividing the values in each row into small cells of a single data type. Column definitions typically take the following form. {column_name} {data_type} {column_qualification} Parameter description {column_name}: The column name. {data_type}: The column data type. {column_qualification}: Column qualifications. Suppose you need to create a table to store the user information in the modatabase database. CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` nickname ` varchar ( 100 ), ` balance ` decimal ( 15 , 2 ) ); Explanations The following table explains the fields in the above example: Filed Name Data Types Function Description id bigint This is used to represent a unique user identifier. This means that all user identifiers should be of the bigint type. nickname varchar user's nickname The length limit of 100 characters balance decimal Balance of user decimal(5,2) means a precision of 5 and a scale of 2, with the range from -999.99 to 999.99. decimal(6,1) means a precision of 6 and a scale of 1, with the range from -99999.9 to 99999.9. decimal is a fixed-point types, which can be used to store numbers accurately. MatrixOne supports many other column data types, including the integer types, floating-point types, date and time types. For more information, see Data Types . Create a complex table Create a books table which will be the core of the modatabase data. The books table contains fields for the book's ids, titles, stock, prices, and publication dates. CREATE TABLE ` modatabase ` . ` books ` ( ` id ` bigint NOT NULL , ` title ` varchar ( 100 ), ` published_at ` datetime , ` stock ` int , ` price ` decimal ( 15 , 2 ) ); This table contains more data types than the users table. Filed Name Data Types Function Description stock int The type of right size is recommended To avoid using too much disk or even affecting performance (too large a type range) or data overflow (too small a data type range). published_at datetime publication dates The datetime type can be used to store time values. Select primary key A primary key is a column or a set of columns in a table whose values uniquely identify a row in the table. The primary key is defined in the CREATE TABLE statement. The primary key constraint requires that all constrained columns contain only non-NULL values. A table can be created without a primary key or with a non-integer primary key. Set default value To set a default value on a column, use the DEFAULT constraint. The default value allows you to insert data without specifying a value for each column. You can use DEFAULT together with supported SQL functions to move the calculation of defaults out of the application layer, thus saving resources of the application layer. The resources consumed by the calculation do not disappear and are moved to the MatrixOne cluster. Commonly, you can insert data with the default time. The following exemplifies setting the default value in the ratings table: CREATE TABLE ` modatabase ` . ` ratings ` ( ` book_id ` bigint , ` user_id ` bigint , ` score ` tinyint , ` rated_at ` datetime DEFAULT NOW (), PRIMARY KEY ( ` book_id ` , ` user_id ` ) ); Prevent duplicate values If you need to prevent duplicate values in a column, you can use the UNIQUE constraint. For example, to make sure that users' nicknames are unique, you can rewrite the table creation SQL statement for the users table like this: CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` balance ` decimal ( 15 , 2 ), ` nickname ` varchar ( 100 ) UNIQUE , PRIMARY KEY ( ` id ` ) ); If you try to insert the same nickname in the users table, an error is returned. Prevent null values If you need to prevent null values in a column, you can use the NOT NULL constraint. Take user nicknames as an example. To ensure that a nickname is not only unique but is also not null, you can rewrite the SQL statement for creating the users table as follows: CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` balance ` decimal ( 15 , 2 ), ` nickname ` varchar ( 100 ) UNIQUE NOT NULL , PRIMARY KEY ( ` id ` ) ); Execute the CREATE TABLE statement To view all tables under the modatabase database, use the SHOW TABLES statement. SHOW TABLES IN ` modatabase ` ; Running results: +----------------------+ | tables_in_modatabase | +----------------------+ | books | | ratings | | users | +----------------------+ Guidelines to follow when creating a table This section provides guidelines you need to follow when creating a table. Guidelines to follow when naming a table Use a fully-qualified table name (for example, CREATE TABLE {database_name}. {table_name} ). If you do not specify the database name, MatrixOne uses the current database in your SQL session. If you do not use USE {databasename}; to specify the database in your SQL session, MatrixOne returns an error. Use meaningful table names. For example, if you need to create a user table, you can use names: user , t_user , users , or follow your company or organization's naming convention. Multiple words are separated by an underscore, and it is recommended that the name is no more than 32 characters. Create a separate DATABASE for tables of different business modules and add comments accordingly. Guidelines to follow when defining columns Check the data types supported. Check the guidelines to follow for selecting primary keys and decide whether to use primary key columns. Check adding column constraints and decide whether to add constraints to the columns. Use meaningful column names. It is recommended that you follow your company or organization's table naming convention. If your company or organization does not have a corresponding naming convention, refer to the column naming convention. Guidelines to follow when selecting primary key Define a primary key or unique index within the table. Try to select meaningful columns as primary keys. For performance reasons, try to avoid storing extra-wide tables. It is not recommended that the number of table fields is over 60 and that the total data size of a single row is over 64K. It is recommended to split fields with too much data length to another table. It is not recommended to use complex data types. For the fields to be joined, ensure that the data types are consistent and avoid implicit conversion. Avoid defining primary keys on a single monotonic data column. If you use a single monotonic data column (for example, a column with the AUTO_INCREMENT attribute) to define the primary key, it might impact the write performance.","title":"Create Table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#create-a-table","text":"This document introduces how to create tables using the SQL statement and the related best practices. In the previous document, you created a database named modatabase . In this document, you will create a table in the database.","title":"Create a Table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#before-you-start","text":"Before reading this document, make sure that the following tasks are completed: Build a MatrixOne Cluster in MatrixOne. Read the Database Schema Design Overview . The database has been created.","title":"Before you start"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#what-is-a-table","text":"A table is a logical object in MatrixOne cluster that is subordinate to the database. It is used to store the data. Tables save data records in the form of rows and columns. A table has at least one column. If you have defined n columns, each row of data has exactly the same fields as the n columns.","title":"What is a table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#name-a-table","text":"The first step for creating a table is to give your table a name. Do not use meaningless names that will cause great distress to yourself or your colleagues in the future. It is recommended that you follow your company or organization's table naming convention. The CREATE TABLE statement usually takes the following form: CREATE TABLE { table_name } ( { elements } ); For more information on CREATE TABLE statement, see CREATE TABLE . Parameter description {table_name}: The name of the table to be created. {elements}: A comma-separated list of table elements, such as column definitions and primary key definitions.","title":"Name a table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#define-columns","text":"A column is subordinate to a table. Each table has at least one column. Columns provide a structure to a table by dividing the values in each row into small cells of a single data type. Column definitions typically take the following form. {column_name} {data_type} {column_qualification} Parameter description {column_name}: The column name. {data_type}: The column data type. {column_qualification}: Column qualifications. Suppose you need to create a table to store the user information in the modatabase database. CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` nickname ` varchar ( 100 ), ` balance ` decimal ( 15 , 2 ) ); Explanations The following table explains the fields in the above example: Filed Name Data Types Function Description id bigint This is used to represent a unique user identifier. This means that all user identifiers should be of the bigint type. nickname varchar user's nickname The length limit of 100 characters balance decimal Balance of user decimal(5,2) means a precision of 5 and a scale of 2, with the range from -999.99 to 999.99. decimal(6,1) means a precision of 6 and a scale of 1, with the range from -99999.9 to 99999.9. decimal is a fixed-point types, which can be used to store numbers accurately. MatrixOne supports many other column data types, including the integer types, floating-point types, date and time types. For more information, see Data Types . Create a complex table Create a books table which will be the core of the modatabase data. The books table contains fields for the book's ids, titles, stock, prices, and publication dates. CREATE TABLE ` modatabase ` . ` books ` ( ` id ` bigint NOT NULL , ` title ` varchar ( 100 ), ` published_at ` datetime , ` stock ` int , ` price ` decimal ( 15 , 2 ) ); This table contains more data types than the users table. Filed Name Data Types Function Description stock int The type of right size is recommended To avoid using too much disk or even affecting performance (too large a type range) or data overflow (too small a data type range). published_at datetime publication dates The datetime type can be used to store time values.","title":"Define columns"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#select-primary-key","text":"A primary key is a column or a set of columns in a table whose values uniquely identify a row in the table. The primary key is defined in the CREATE TABLE statement. The primary key constraint requires that all constrained columns contain only non-NULL values. A table can be created without a primary key or with a non-integer primary key.","title":"Select primary key"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#set-default-value","text":"To set a default value on a column, use the DEFAULT constraint. The default value allows you to insert data without specifying a value for each column. You can use DEFAULT together with supported SQL functions to move the calculation of defaults out of the application layer, thus saving resources of the application layer. The resources consumed by the calculation do not disappear and are moved to the MatrixOne cluster. Commonly, you can insert data with the default time. The following exemplifies setting the default value in the ratings table: CREATE TABLE ` modatabase ` . ` ratings ` ( ` book_id ` bigint , ` user_id ` bigint , ` score ` tinyint , ` rated_at ` datetime DEFAULT NOW (), PRIMARY KEY ( ` book_id ` , ` user_id ` ) );","title":"Set default value"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#prevent-duplicate-values","text":"If you need to prevent duplicate values in a column, you can use the UNIQUE constraint. For example, to make sure that users' nicknames are unique, you can rewrite the table creation SQL statement for the users table like this: CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` balance ` decimal ( 15 , 2 ), ` nickname ` varchar ( 100 ) UNIQUE , PRIMARY KEY ( ` id ` ) ); If you try to insert the same nickname in the users table, an error is returned.","title":"Prevent duplicate values"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#prevent-null-values","text":"If you need to prevent null values in a column, you can use the NOT NULL constraint. Take user nicknames as an example. To ensure that a nickname is not only unique but is also not null, you can rewrite the SQL statement for creating the users table as follows: CREATE TABLE ` modatabase ` . ` users ` ( ` id ` bigint , ` balance ` decimal ( 15 , 2 ), ` nickname ` varchar ( 100 ) UNIQUE NOT NULL , PRIMARY KEY ( ` id ` ) );","title":"Prevent null values"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#execute-the-create-table-statement","text":"To view all tables under the modatabase database, use the SHOW TABLES statement. SHOW TABLES IN ` modatabase ` ; Running results: +----------------------+ | tables_in_modatabase | +----------------------+ | books | | ratings | | users | +----------------------+","title":"Execute the CREATE TABLE statement"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#guidelines-to-follow-when-creating-a-table","text":"This section provides guidelines you need to follow when creating a table.","title":"Guidelines to follow when creating a table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#guidelines-to-follow-when-naming-a-table","text":"Use a fully-qualified table name (for example, CREATE TABLE {database_name}. {table_name} ). If you do not specify the database name, MatrixOne uses the current database in your SQL session. If you do not use USE {databasename}; to specify the database in your SQL session, MatrixOne returns an error. Use meaningful table names. For example, if you need to create a user table, you can use names: user , t_user , users , or follow your company or organization's naming convention. Multiple words are separated by an underscore, and it is recommended that the name is no more than 32 characters. Create a separate DATABASE for tables of different business modules and add comments accordingly.","title":"Guidelines to follow when naming a table"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#guidelines-to-follow-when-defining-columns","text":"Check the data types supported. Check the guidelines to follow for selecting primary keys and decide whether to use primary key columns. Check adding column constraints and decide whether to add constraints to the columns. Use meaningful column names. It is recommended that you follow your company or organization's table naming convention. If your company or organization does not have a corresponding naming convention, refer to the column naming convention.","title":"Guidelines to follow when defining columns"},{"location":"MatrixOne/Develop/0.6-schema-design/create-table/#guidelines-to-follow-when-selecting-primary-key","text":"Define a primary key or unique index within the table. Try to select meaningful columns as primary keys. For performance reasons, try to avoid storing extra-wide tables. It is not recommended that the number of table fields is over 60 and that the total data size of a single row is over 64K. It is recommended to split fields with too much data length to another table. It is not recommended to use complex data types. For the fields to be joined, ensure that the data types are consistent and avoid implicit conversion. Avoid defining primary keys on a single monotonic data column. If you use a single monotonic data column (for example, a column with the AUTO_INCREMENT attribute) to define the primary key, it might impact the write performance.","title":"Guidelines to follow when selecting primary key"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/","text":"Database Schema Design Overview This document provides the basics of MatrixOne database schema design. This document introduces terminology related to MatrixOne databases and subsequent data read and write examples. Key concept in MatrixOne Database Schema: The database schema mentioned in this article is the same as the logical object database. It is the same as MySQL. Database A database in MatrixOne is a collection of objects such as tables. To view the default database contained by MatrixOne, ues SHOW DATABASES; statment. To create a new database, ues CREATE DATABASE database_name; statement. Table A table is a collection of related data in a database. Each table consists of rows and columns. Each value in a row belongs to a specific column. Each column allows only a single data type. To further qualify columns, you can add some constraints. Other supported logical objects MatrixOne supports the following logical objects at the same level as table: View: a view acts as a virtual table, whose schema is defined by the SELECT statement that creates the view. Temporary table: a table whose data is not persistent. Access Control MatrixOne supports both user-based and role-based access control. To allow users to view, modify, or delete data, for more information, see Access control in MatrixOne . Object limitations Limitations on identifier length Identifier type Maximum length (number of characters allowed) Database 64 Table 64 Column 64 Sequence 64 Limitations on a single table Type Upper limit (default value) Columns Defaults to 1017 and can be adjusted up to 4096 Partitions 8192 Size of a single line 6 MB by default Size of a single column 6 MB Limitations on data types For more information on data types, see Data Types . Number of rows MatrixOne supports an unlimited number of rows by adding nodes to the cluster.","title":"Overview"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#database-schema-design-overview","text":"This document provides the basics of MatrixOne database schema design. This document introduces terminology related to MatrixOne databases and subsequent data read and write examples.","title":"Database Schema Design Overview"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#key-concept-in-matrixone","text":"Database Schema: The database schema mentioned in this article is the same as the logical object database. It is the same as MySQL.","title":"Key concept in MatrixOne"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#database","text":"A database in MatrixOne is a collection of objects such as tables. To view the default database contained by MatrixOne, ues SHOW DATABASES; statment. To create a new database, ues CREATE DATABASE database_name; statement.","title":"Database"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#table","text":"A table is a collection of related data in a database. Each table consists of rows and columns. Each value in a row belongs to a specific column. Each column allows only a single data type. To further qualify columns, you can add some constraints.","title":"Table"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#other-supported-logical-objects","text":"MatrixOne supports the following logical objects at the same level as table: View: a view acts as a virtual table, whose schema is defined by the SELECT statement that creates the view. Temporary table: a table whose data is not persistent.","title":"Other supported logical objects"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#access-control","text":"MatrixOne supports both user-based and role-based access control. To allow users to view, modify, or delete data, for more information, see Access control in MatrixOne .","title":"Access Control"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#object-limitations","text":"","title":"Object limitations"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#limitations-on-identifier-length","text":"Identifier type Maximum length (number of characters allowed) Database 64 Table 64 Column 64 Sequence 64","title":"Limitations on identifier length"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#limitations-on-a-single-table","text":"Type Upper limit (default value) Columns Defaults to 1017 and can be adjusted up to 4096 Partitions 8192 Size of a single line 6 MB by default Size of a single column 6 MB","title":"Limitations on a single table"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#limitations-on-data-types","text":"For more information on data types, see Data Types .","title":"Limitations on data types"},{"location":"MatrixOne/Develop/0.6-schema-design/overview/#number-of-rows","text":"MatrixOne supports an unlimited number of rows by adding nodes to the cluster.","title":"Number of rows"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/","text":"Connecting to MatrixOne with Database Client Tool MatrixOne now supports the following Database client tools: MySQL Shell Navicat DBeaver Before you start Make sure you have already installed and launched MatrixOne . Connect to the MatrixOne Server through MySQL Client Download and install MySQL Client \u3002 Connect to the MatrixOne server. You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: The successful result is as below: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 0.5.1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. For more information on deployment, see Deployment FAQs . Connect to the MatrixOne Server through Navicat Download and install Navicat . Open Navicat, click Connection > MySQL , and fill in the following parameters in the pop-up window: Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. To connect to the MatrixOne server, double-click MatrixOne in the database directory on the left. Connect to the MatrixOne Server through DBeaver Download and install DBeaver . Open DBeaver, click Connection , select MySQL , then click Next , and fill in the following parameters in the pop-up window: Host : 127.0.0.1 Port : 6001 Connction Name : MatrixOne User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. Right-click MatrixOne in database navigation on the left select Edit link , modify the configuration in the Driver Attribute area of the Connection Settings : - characterSetResults: \"utf8\" - continueBatchOnError: \"false\" - useServerPrepStmts: \"true\" - alwaysSendSetIsolation: \"false\" - useLocalSessionState: \"true\" - zeroDateTimeBehavior: \"CONVERT_TO_NULL\" - failoverReadOnly: \"false\" - serverTimezone: \"Asia/Shanghai\" - socketTimeout: 30000 To connect to the MatrixOne server, double-click MatrixOne in the database navigation on the left.","title":"Database Client IDE"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/#connecting-to-matrixone-with-database-client-tool","text":"MatrixOne now supports the following Database client tools: MySQL Shell Navicat DBeaver","title":"Connecting to MatrixOne with Database Client Tool"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/#before-you-start","text":"Make sure you have already installed and launched MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/#connect-to-the-matrixone-server-through-mysql-client","text":"Download and install MySQL Client \u3002 Connect to the MatrixOne server. You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: The successful result is as below: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 0.5.1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. For more information on deployment, see Deployment FAQs .","title":"Connect to the MatrixOne Server through MySQL Client"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/#connect-to-the-matrixone-server-through-navicat","text":"Download and install Navicat . Open Navicat, click Connection > MySQL , and fill in the following parameters in the pop-up window: Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. To connect to the MatrixOne server, double-click MatrixOne in the database directory on the left.","title":"Connect to the MatrixOne Server through Navicat"},{"location":"MatrixOne/Develop/connect-mo/0.6-database-ide/#connect-to-the-matrixone-server-through-dbeaver","text":"Download and install DBeaver . Open DBeaver, click Connection , select MySQL , then click Next , and fill in the following parameters in the pop-up window: Host : 127.0.0.1 Port : 6001 Connction Name : MatrixOne User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. Right-click MatrixOne in database navigation on the left select Edit link , modify the configuration in the Driver Attribute area of the Connection Settings : - characterSetResults: \"utf8\" - continueBatchOnError: \"false\" - useServerPrepStmts: \"true\" - alwaysSendSetIsolation: \"false\" - useLocalSessionState: \"true\" - zeroDateTimeBehavior: \"CONVERT_TO_NULL\" - failoverReadOnly: \"false\" - serverTimezone: \"Asia/Shanghai\" - socketTimeout: 30000 To connect to the MatrixOne server, double-click MatrixOne in the database navigation on the left.","title":"Connect to the MatrixOne Server through DBeaver"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/","text":"Connecting to MatrixOne with Database Client Tool MatrixOne now supports the following Database client tools: MySQL Shell Navicat DBeaver Before you start Make sure you have already installed and launched MatrixOne . Connect to the MatrixOne Server through MySQL Client Download and install MySQL Client \u3002 Connect to the MatrixOne server. You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: The successful result is as below: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 0.5.1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. For more information on deployment, see Deployment FAQs . Connect to the MatrixOne Server through Navicat Download and install Navicat . Open Navicat, click Connection > MySQL , and fill in the following parameters in the pop-up window: Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. To connect to the MatrixOne server, double-click MatrixOne in the database directory on the left. Connect to the MatrixOne Server through DBeaver Download and install DBeaver . Open DBeaver, click Connection , select MySQL , then click Next , and fill in the following parameters in the pop-up window: Host : 127.0.0.1 Port : 6001 Connction Name : MatrixOne User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. Right-click MatrixOne in database navigation on the left select Edit link , modify the configuration in the Driver Attribute area of the Connection Settings : - characterSetResults: \"utf8\" - continueBatchOnError: \"false\" - useServerPrepStmts: \"true\" - alwaysSendSetIsolation: \"false\" - useLocalSessionState: \"true\" - zeroDateTimeBehavior: \"CONVERT_TO_NULL\" - failoverReadOnly: \"false\" - serverTimezone: \"Asia/Shanghai\" - socketTimeout: 30000 To connect to the MatrixOne server, double-click MatrixOne in the database navigation on the left.","title":"Connecting to MatrixOne with Database Client Tool"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/#connecting-to-matrixone-with-database-client-tool","text":"MatrixOne now supports the following Database client tools: MySQL Shell Navicat DBeaver","title":"Connecting to MatrixOne with Database Client Tool"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/#before-you-start","text":"Make sure you have already installed and launched MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/#connect-to-the-matrixone-server-through-mysql-client","text":"Download and install MySQL Client \u3002 Connect to the MatrixOne server. You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: The successful result is as below: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1031 Server version: 0.5.1 MatrixOne Copyright (c) 2000, 2022, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. For more information on deployment, see Deployment FAQs .","title":"Connect to the MatrixOne Server through MySQL Client"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/#connect-to-the-matrixone-server-through-navicat","text":"Download and install Navicat . Open Navicat, click Connection > MySQL , and fill in the following parameters in the pop-up window: Connction Name : MatrixOne Host : 127.0.0.1 Port : 6001 User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. To connect to the MatrixOne server, double-click MatrixOne in the database directory on the left.","title":"Connect to the MatrixOne Server through Navicat"},{"location":"MatrixOne/Develop/connect-mo/client-connect-to-matrixone/#connect-to-the-matrixone-server-through-dbeaver","text":"Download and install DBeaver . Open DBeaver, click Connection , select MySQL , then click Next , and fill in the following parameters in the pop-up window: Host : 127.0.0.1 Port : 6001 Connction Name : MatrixOne User Name : dump Password : 111 Save password \uff1aYes Click Save , save the configuration. Right-click MatrixOne in database navigation on the left select Edit link , modify the configuration in the Driver Attribute area of the Connection Settings : - characterSetResults: \"utf8\" - continueBatchOnError: \"false\" - useServerPrepStmts: \"true\" - alwaysSendSetIsolation: \"false\" - useLocalSessionState: \"true\" - zeroDateTimeBehavior: \"CONVERT_TO_NULL\" - failoverReadOnly: \"false\" - serverTimezone: \"Asia/Shanghai\" - socketTimeout: 30000 To connect to the MatrixOne server, double-click MatrixOne in the database navigation on the left.","title":"Connect to the MatrixOne Server through DBeaver"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/","text":"How to configure MatrixOne SSL connection Overview This document describes how to configure your MatrixOne server to use SSL for database connections. After you secure your MatrixOne connections, malicious users cannot intercept your traffic. Configure MatrixOne SSL connections Create the directory to store the SSL keys To create the directory that will contain the SSL keys, perform the following steps: Log into your server via SSH. Check if you have the mysql_ssl_rsa_setup tool in place. If you see this following message, it means you have installed it. If not, please install MySQL first, and this mysql_ssl_rsa_setup will be installed along. [pcusername@VM-0-12-centos matrixone]$ mysql_ssl_rsa_setup 2022-10-19 10:57:30 [ERROR] Failed to access directory pointed by --datadir. Please make sure that directory exists and is accessible by mysql_ssl_rsa_setup. Supplied value : /var/lib/mysql Create an SSL key storage directory that MatrixOne can access. For example, run the mkdir /home/user/mo_keys command to create a mo_keys directory. Create the SSL keys To create the SSL keys, perform the following steps: Run the following commands to create the Certificate Authority (CA) keys: mysql_ssl_rsa_setup --datadir=/home/user/mo_keys You'll see in this folder a list of .pem files. /mo_keys \u251c\u2500\u2500 ca-key.pem \u251c\u2500\u2500 ca.pem \u251c\u2500\u2500 client-cert.pem \u251c\u2500\u2500 client-key.pem \u251c\u2500\u2500 private_key.pem \u251c\u2500\u2500 public_key.pem \u251c\u2500\u2500 server-cert.pem \u2514\u2500\u2500 server-key.pem Insert the following lines in the [cn.frontend] section of the etc/launch-tae-logservice/cn1.toml file in MatrixOne folder: [cn.frontend] enableTls = true tlsCertFile = \"/home/user/mo_keys/server-cert.pem\" tlsKeyFile = \"/home/user/mo_keys/server-key.pem\" tlsCaFile = \"/home/user/mo_keys/ca.pem\" If [cn.frontend] section doesn't exist in the MatrixOne system setting file, you can just create one with the above settings. Test the SSL configuration To test the SSL configuration, perform the following steps: Launch MatrixOne service. Please refer to Installed and launched MatrixOne . Connect to MatrixOne service by MySQL client, please refer to Connect to MatrixOne . mysql -h IP_ADDRESS -P 6001 -udump -p111 After you connect, run the status command. The output will resemble the following example: mysql> status -------------- mysql Ver 8.0.28 for Linux on x86_64 (MySQL Community Server - GPL) Connection id: 1001 Current database: Current user: dump@0.0.0.0 SSL: Cipher in use is TLS_AES_128_GCM_SHA256 Current pager: stdout Using outfile: '' Using delimiter: ; Server version: 0.5.1 MatrixOne Protocol version: 10 Connection: 127.0.0.1 via TCP/IP Client characterset: utf8mb4 Server characterset: utf8mb4 TCP port: 6002 Binary data as: Hexadecimal --------------","title":"MatrixOne SSL connection"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#how-to-configure-matrixone-ssl-connection","text":"","title":"How to configure MatrixOne SSL connection"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#overview","text":"This document describes how to configure your MatrixOne server to use SSL for database connections. After you secure your MatrixOne connections, malicious users cannot intercept your traffic.","title":"Overview"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#configure-matrixone-ssl-connections","text":"","title":"Configure MatrixOne SSL connections"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#create-the-directory-to-store-the-ssl-keys","text":"To create the directory that will contain the SSL keys, perform the following steps: Log into your server via SSH. Check if you have the mysql_ssl_rsa_setup tool in place. If you see this following message, it means you have installed it. If not, please install MySQL first, and this mysql_ssl_rsa_setup will be installed along. [pcusername@VM-0-12-centos matrixone]$ mysql_ssl_rsa_setup 2022-10-19 10:57:30 [ERROR] Failed to access directory pointed by --datadir. Please make sure that directory exists and is accessible by mysql_ssl_rsa_setup. Supplied value : /var/lib/mysql Create an SSL key storage directory that MatrixOne can access. For example, run the mkdir /home/user/mo_keys command to create a mo_keys directory.","title":"Create the directory to store the SSL keys"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#create-the-ssl-keys","text":"To create the SSL keys, perform the following steps: Run the following commands to create the Certificate Authority (CA) keys: mysql_ssl_rsa_setup --datadir=/home/user/mo_keys You'll see in this folder a list of .pem files. /mo_keys \u251c\u2500\u2500 ca-key.pem \u251c\u2500\u2500 ca.pem \u251c\u2500\u2500 client-cert.pem \u251c\u2500\u2500 client-key.pem \u251c\u2500\u2500 private_key.pem \u251c\u2500\u2500 public_key.pem \u251c\u2500\u2500 server-cert.pem \u2514\u2500\u2500 server-key.pem Insert the following lines in the [cn.frontend] section of the etc/launch-tae-logservice/cn1.toml file in MatrixOne folder: [cn.frontend] enableTls = true tlsCertFile = \"/home/user/mo_keys/server-cert.pem\" tlsKeyFile = \"/home/user/mo_keys/server-key.pem\" tlsCaFile = \"/home/user/mo_keys/ca.pem\" If [cn.frontend] section doesn't exist in the MatrixOne system setting file, you can just create one with the above settings.","title":"Create the SSL keys"},{"location":"MatrixOne/Develop/connect-mo/configure-mo-ssl-connection/#test-the-ssl-configuration","text":"To test the SSL configuration, perform the following steps: Launch MatrixOne service. Please refer to Installed and launched MatrixOne . Connect to MatrixOne service by MySQL client, please refer to Connect to MatrixOne . mysql -h IP_ADDRESS -P 6001 -udump -p111 After you connect, run the status command. The output will resemble the following example: mysql> status -------------- mysql Ver 8.0.28 for Linux on x86_64 (MySQL Community Server - GPL) Connection id: 1001 Current database: Current user: dump@0.0.0.0 SSL: Cipher in use is TLS_AES_128_GCM_SHA256 Current pager: stdout Using outfile: '' Using delimiter: ; Server version: 0.5.1 MatrixOne Protocol version: 10 Connection: 127.0.0.1 via TCP/IP Client characterset: utf8mb4 Server characterset: utf8mb4 TCP port: 6002 Binary data as: Hexadecimal --------------","title":"Test the SSL configuration"},{"location":"MatrixOne/Develop/connect-mo/python-connect-to-matrixone/","text":"Connecting to MatrixOne with Python MatrixOne supports Python connection. Note MatrixOne only supports pymysql driver in 0.5 release, sqlalchemy and mysql-connector are not supported yet. Before you start Make sure you have already installed and launched MatrixOne . Using Python pymysql connect to MatrixOne Download and install pymysql tool: pip3 install pymysql Call import pymysql in your application, for more information on pymysql , see https://pypi.org/project/PyMySQL/ . Reference For the example about using pymysql conn to MatrixOne, see Build a simple stock analysis Python App with MatrixOne .","title":"Python connect to the MatrixOne"},{"location":"MatrixOne/Develop/connect-mo/python-connect-to-matrixone/#connecting-to-matrixone-with-python","text":"MatrixOne supports Python connection. Note MatrixOne only supports pymysql driver in 0.5 release, sqlalchemy and mysql-connector are not supported yet.","title":"Connecting to MatrixOne with Python"},{"location":"MatrixOne/Develop/connect-mo/python-connect-to-matrixone/#before-you-start","text":"Make sure you have already installed and launched MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Develop/connect-mo/python-connect-to-matrixone/#using-python-pymysql-connect-to-matrixone","text":"Download and install pymysql tool: pip3 install pymysql Call import pymysql in your application, for more information on pymysql , see https://pypi.org/project/PyMySQL/ .","title":"Using Python pymysql connect to MatrixOne"},{"location":"MatrixOne/Develop/connect-mo/python-connect-to-matrixone/#reference","text":"For the example about using pymysql conn to MatrixOne, see Build a simple stock analysis Python App with MatrixOne .","title":"Reference"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/","text":"How to connect MatrixOne with JDBC In Java, we can connect to MatrixOne with JDBC(Java Database Connectivity) through the Java code. JDBC is one of the standard APIs for database connectivity, using it we can easily run our query, statement, and also fetch data from the database. Before you start Prerequisite to understand Java Database Connectivity with MatrixOne, make sure you have installed these items as below: Make sure you have already installed and launched MatrixOne . Make sure you have already installed JDK 8+ version . To set up the connectivity user should have MySQL Download and install JDBC Connector to the Java (JAR file), the \u2018JAR\u2019 file must be in classpath while compiling and running the code of JDBC. Platform-independent Operating System is recommended. connector version mysql-connector-java-8.0.31.jar is recommended. Make sure you have already installed JAVA IDE, this document uses Apache NetBeans 15 as an example, you can also download other IDE. Steps Scenario 1: Use JDBC to connect to MatrixOne when creating a new project Create a new database named test or other names you want in MatrixOne and create a new table named t1 : create database test ; use test ; create table t1 ( code int primary key , title char ( 35 ) ); Add the downloaded connector into NetBeans. Select Services > Databases > Drivers , right click MySQL(Connector/J driver) and choose Customize in the Services sheet, click Add . add the mysql-connector-java-8.0.31.jar , enter com.mysql.cj.jdbc.Driver into Drive Class. Right click MySQL(Connector/J driver) and choose Connect Using to configure as following: Host: 127.0.0.1 Port: 6001 Database: test User Name: dump Password: 111 Remmember password: Yes Click Test Connection \uff0c when the test Connection Succeeded , it means you can connect your MatrixOne with JDBC. Scenario 2: Use JDBC to connect to MatrixOne when using a existing project If you want to use the connector in your existing project, you can follow these steps: Add this mysql-connector-java-8.0.31.jar into the lib directory of the mo-tester repository. Add dependency into pom.xml file of the mo-tester repository. <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.xx</version> </dependency> Add the following statements as example: import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; Connection conn = null; ... try { conn = DriverManager.getConnection(\"jdbc:mysql://localhost:6001/test\" + \"user=account_name:user_name&password=your_password\"); // Do something with the Connection ... } catch (SQLException ex) { // handle any errors System.out.println(\"SQLException: \" + ex.getMessage()); System.out.println(\"SQLState: \" + ex.getSQLState()); System.out.println(\"VendorError: \" + ex.getErrorCode()); } Reference For more information on MatrixOne support when developing applications using JDBC, see JDBC supported features list in MatrixOne .","title":"JDBC"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#how-to-connect-matrixone-with-jdbc","text":"In Java, we can connect to MatrixOne with JDBC(Java Database Connectivity) through the Java code. JDBC is one of the standard APIs for database connectivity, using it we can easily run our query, statement, and also fetch data from the database.","title":"How to connect MatrixOne with JDBC"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#before-you-start","text":"Prerequisite to understand Java Database Connectivity with MatrixOne, make sure you have installed these items as below: Make sure you have already installed and launched MatrixOne . Make sure you have already installed JDK 8+ version . To set up the connectivity user should have MySQL Download and install JDBC Connector to the Java (JAR file), the \u2018JAR\u2019 file must be in classpath while compiling and running the code of JDBC. Platform-independent Operating System is recommended. connector version mysql-connector-java-8.0.31.jar is recommended. Make sure you have already installed JAVA IDE, this document uses Apache NetBeans 15 as an example, you can also download other IDE.","title":"Before you start"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#steps","text":"","title":"Steps"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#scenario-1-use-jdbc-to-connect-to-matrixone-when-creating-a-new-project","text":"Create a new database named test or other names you want in MatrixOne and create a new table named t1 : create database test ; use test ; create table t1 ( code int primary key , title char ( 35 ) ); Add the downloaded connector into NetBeans. Select Services > Databases > Drivers , right click MySQL(Connector/J driver) and choose Customize in the Services sheet, click Add . add the mysql-connector-java-8.0.31.jar , enter com.mysql.cj.jdbc.Driver into Drive Class. Right click MySQL(Connector/J driver) and choose Connect Using to configure as following: Host: 127.0.0.1 Port: 6001 Database: test User Name: dump Password: 111 Remmember password: Yes Click Test Connection \uff0c when the test Connection Succeeded , it means you can connect your MatrixOne with JDBC.","title":"Scenario 1: Use JDBC to connect to MatrixOne when creating a new project"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#scenario-2-use-jdbc-to-connect-to-matrixone-when-using-a-existing-project","text":"If you want to use the connector in your existing project, you can follow these steps: Add this mysql-connector-java-8.0.31.jar into the lib directory of the mo-tester repository. Add dependency into pom.xml file of the mo-tester repository. <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <version>8.0.xx</version> </dependency> Add the following statements as example: import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; Connection conn = null; ... try { conn = DriverManager.getConnection(\"jdbc:mysql://localhost:6001/test\" + \"user=account_name:user_name&password=your_password\"); // Do something with the Connection ... } catch (SQLException ex) { // handle any errors System.out.println(\"SQLException: \" + ex.getMessage()); System.out.println(\"SQLState: \" + ex.getSQLState()); System.out.println(\"VendorError: \" + ex.getErrorCode()); }","title":"Scenario 2: Use JDBC to connect to MatrixOne when using a existing project"},{"location":"MatrixOne/Develop/connect-mo/0.6-java-connect-to-matrixone/connect-mo-with-jdbc/#reference","text":"For more information on MatrixOne support when developing applications using JDBC, see JDBC supported features list in MatrixOne .","title":"Reference"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/","text":"How to backup and restore MatrixOne databases using the modump command In this article, we'll explain how to generate the backup in the MatrixOne database server using the modump command. As we know, data is a valuable asset to the organization. As database administrators, it is our primary and crucial job to keep the data available and safe. If the system or data center fails, database corruption, and data loss, we must be able to recover it within the defined SLA. modump is a command-line utility that is used to generate the logical backup of the MatrixOne database. It produces the SQL Statements that can be used to recreate the database objects and data. modump syntax ./mo-dump -u ${user} -p ${password} -h ${host} -P ${port} -db ${database} [-tbl ${table}...] > {dumpfilename.sql} The parameters are as following: -u [user] : It is a username to connect to the MatrixOne server. Only the users with database and table read privileges can use modump utility. Default value: dump -p [password] : The valid password of the MatrixOne user. Default value: 111 -h [host] : The host ip address of MatrixOne server. Default value: 127.0.0.1 -P [port] : The port of MatrixOne server. Default value: 6001 -db [database name] : Required paratemer. Name of the database that you want to take backup. -tbl [table name] : Optional parameter. If the parameter is empty, the whole database will be exported. If you want to take the backup specific tables, then you can specify multiple -tbl and table names in the command. Build the modump binary modump utility is embedded in the MatrixOne source code. You can build the binary from the source code. git clone https://github.com/matrixorigin/matrixone.git cd matrixone make build modump You can find the modump executable file in the MatrixOne folder. Generate the backup of a single database For example, we have a database \u201c t \u201d which is created by the following SQL. DROP DATABASE IF EXISTS `t`; CREATE DATABASE `t`; USE `t`; create table t1 ( c1 int primary key auto_increment, c2 tinyint not null default 4, c3 smallint, c4 bigint, c5 tinyint unsigned, c6 smallint unsigned, c7 int unsigned, c8 bigint unsigned, c9 float, c10 double, c11 date, c12 datetime, c13 timestamp on update current_timestamp, c14 char, c15 varchar, c16 json, c17 decimal, c18 text, c19 blob, c20 uuid ); insert into t1 values (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '2019-01-01', '2019-01-01 00:00:00', '2019-01-01 00:00:00', 'a', 'a', '{\"a\":1}','1212.1212', 'a', 'aza', '00000000-0000-0000-0000-000000000000'); If you want to generate the backup of the single database, run the following command. The command will generate the backup of the \u201c t \u201d database with structure and data in the t.sql file. ./mo-dump -u dump -p 111 -h 127.0.0.1 -P 6001 -db t > t.sql If you want to generate the backup of a single table in a database, run the following command. The command will generate the backup of the t1 table of t database with structure and data in the t.sql file. ./mo-dump -u dump -p 111 -db t -tbl t1 > t1.sql Restore the backup to MatrixOne server Restoring a MatrixOne database using the exported .sql file is simple. To restore the database, you must create an empty database and use mysql client to restore. Connect to MatrixOne with MySQL client in the same server, and make sure the exported .sql file is also in the same machine as the MySQL client. mysql> create database t if not exists; mysql> source /YOUR_SQL_FILE_PATH/t.sql Once command executes successfully, execute the following command to verify that all objects have been created on the t database. mysql> use t; mysql> show tables; mysql> select count(*) from t1; Constraints modump only supports exporting the backup of a single database, if you have several databases to backup, you need to manually run modump for several times. modump doesn't support exporting only the structure or data of databases. If you want to generate the backup of the data without the database structure or vise versa, you need to manually split the .sql file.","title":"Using the `modump` backup and restore databases"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#how-to-backup-and-restore-matrixone-databases-using-the-modump-command","text":"In this article, we'll explain how to generate the backup in the MatrixOne database server using the modump command. As we know, data is a valuable asset to the organization. As database administrators, it is our primary and crucial job to keep the data available and safe. If the system or data center fails, database corruption, and data loss, we must be able to recover it within the defined SLA. modump is a command-line utility that is used to generate the logical backup of the MatrixOne database. It produces the SQL Statements that can be used to recreate the database objects and data.","title":"How to backup and restore MatrixOne databases using the modump command"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#modump-syntax","text":"./mo-dump -u ${user} -p ${password} -h ${host} -P ${port} -db ${database} [-tbl ${table}...] > {dumpfilename.sql} The parameters are as following: -u [user] : It is a username to connect to the MatrixOne server. Only the users with database and table read privileges can use modump utility. Default value: dump -p [password] : The valid password of the MatrixOne user. Default value: 111 -h [host] : The host ip address of MatrixOne server. Default value: 127.0.0.1 -P [port] : The port of MatrixOne server. Default value: 6001 -db [database name] : Required paratemer. Name of the database that you want to take backup. -tbl [table name] : Optional parameter. If the parameter is empty, the whole database will be exported. If you want to take the backup specific tables, then you can specify multiple -tbl and table names in the command.","title":"modump syntax"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#build-the-modump-binary","text":"modump utility is embedded in the MatrixOne source code. You can build the binary from the source code. git clone https://github.com/matrixorigin/matrixone.git cd matrixone make build modump You can find the modump executable file in the MatrixOne folder.","title":"Build the modump binary"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#generate-the-backup-of-a-single-database","text":"For example, we have a database \u201c t \u201d which is created by the following SQL. DROP DATABASE IF EXISTS `t`; CREATE DATABASE `t`; USE `t`; create table t1 ( c1 int primary key auto_increment, c2 tinyint not null default 4, c3 smallint, c4 bigint, c5 tinyint unsigned, c6 smallint unsigned, c7 int unsigned, c8 bigint unsigned, c9 float, c10 double, c11 date, c12 datetime, c13 timestamp on update current_timestamp, c14 char, c15 varchar, c16 json, c17 decimal, c18 text, c19 blob, c20 uuid ); insert into t1 values (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, '2019-01-01', '2019-01-01 00:00:00', '2019-01-01 00:00:00', 'a', 'a', '{\"a\":1}','1212.1212', 'a', 'aza', '00000000-0000-0000-0000-000000000000'); If you want to generate the backup of the single database, run the following command. The command will generate the backup of the \u201c t \u201d database with structure and data in the t.sql file. ./mo-dump -u dump -p 111 -h 127.0.0.1 -P 6001 -db t > t.sql If you want to generate the backup of a single table in a database, run the following command. The command will generate the backup of the t1 table of t database with structure and data in the t.sql file. ./mo-dump -u dump -p 111 -db t -tbl t1 > t1.sql","title":"Generate the backup of a single database"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#restore-the-backup-to-matrixone-server","text":"Restoring a MatrixOne database using the exported .sql file is simple. To restore the database, you must create an empty database and use mysql client to restore. Connect to MatrixOne with MySQL client in the same server, and make sure the exported .sql file is also in the same machine as the MySQL client. mysql> create database t if not exists; mysql> source /YOUR_SQL_FILE_PATH/t.sql Once command executes successfully, execute the following command to verify that all objects have been created on the t database. mysql> use t; mysql> show tables; mysql> select count(*) from t1;","title":"Restore the backup to MatrixOne server"},{"location":"MatrixOne/Develop/export-data/backup-restore-matrixone-with_modump/#constraints","text":"modump only supports exporting the backup of a single database, if you have several databases to backup, you need to manually run modump for several times. modump doesn't support exporting only the structure or data of databases. If you want to generate the backup of the data without the database structure or vise versa, you need to manually split the .sql file.","title":"Constraints"},{"location":"MatrixOne/Develop/export-data/export-data/","text":"Export data This document will guide you how to export data in MatrixOne. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_export_demo/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 Note MatrixOne does not support using mysqldump to export table structures and data, it only supports SELECT...INTO OUTFILE exporting to text files. Steps Create tables in MatrixOne: create database aaa ; use aaa ; CREATE TABLE ` user ` ( ` id ` int ( 11 ) , ` user_name ` varchar ( 255 ) , ` sex ` varchar ( 255 )); insert into user ( id , user_name , sex ) values ( '1' , 'weder' , 'man' ), ( '2' , 'tom' , 'man' ), ( '3' , 'wederTom' , 'man' ); select * from user ; + ------+-----------+------+ | id | user_name | sex | + ------+-----------+------+ | 1 | weder | man | | 2 | tom | man | | 3 | wederTom | man | + ------+-----------+------+ For installation with source code or binary file, export the table to your local directory, for example, ~/tmp/export_demo/export_datatable.txt select * from user into outfile '~/tmp/export_demo/export_datatable.txt' For installation with docker, export the your mounted directory path of container as the following example. The directory store refers to the local path of ~/tmp/docker_export_demo/store . select * from user into outfile 'store/export_datatable.txt'; Check the table in your directory export_datatable.txt , the result is as below: id,user_name,sex 1,\"weder\",\"man\" 2,\"tom\",\"man\" 3,\"wederTom\",\"man\"","title":"Export data"},{"location":"MatrixOne/Develop/export-data/export-data/#export-data","text":"This document will guide you how to export data in MatrixOne.","title":"Export data"},{"location":"MatrixOne/Develop/export-data/export-data/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_export_demo/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 Note MatrixOne does not support using mysqldump to export table structures and data, it only supports SELECT...INTO OUTFILE exporting to text files.","title":"Before you start"},{"location":"MatrixOne/Develop/export-data/export-data/#steps","text":"Create tables in MatrixOne: create database aaa ; use aaa ; CREATE TABLE ` user ` ( ` id ` int ( 11 ) , ` user_name ` varchar ( 255 ) , ` sex ` varchar ( 255 )); insert into user ( id , user_name , sex ) values ( '1' , 'weder' , 'man' ), ( '2' , 'tom' , 'man' ), ( '3' , 'wederTom' , 'man' ); select * from user ; + ------+-----------+------+ | id | user_name | sex | + ------+-----------+------+ | 1 | weder | man | | 2 | tom | man | | 3 | wederTom | man | + ------+-----------+------+ For installation with source code or binary file, export the table to your local directory, for example, ~/tmp/export_demo/export_datatable.txt select * from user into outfile '~/tmp/export_demo/export_datatable.txt' For installation with docker, export the your mounted directory path of container as the following example. The directory store refers to the local path of ~/tmp/docker_export_demo/store . select * from user into outfile 'store/export_datatable.txt'; Check the table in your directory export_datatable.txt , the result is as below: id,user_name,sex 1,\"weder\",\"man\" 2,\"tom\",\"man\" 3,\"wederTom\",\"man\"","title":"Steps"},{"location":"MatrixOne/Develop/import-data/import-data/","text":"Import data This document will guide you on how to import large amounts of data to MatrixOne. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path . Method 1: Using the Source command in MySQL Client You can execute an SQL script file using the source command or \\. command in MySQL client. mysql> source file_name mysql> \\. file_name Usually source is used to execute many SQL statements, you can write your database&table creation, insert data in one SQL file and execute this file with source in MySQL Client. Each statement is a separate line, the lines starting with -- or wrapped with /* are considered as comments and will be ignored. If your SQL is from mysqldump , please refer to this tutorial about how to modify the SQL file to adapt to MatrixOne format. Method 2: Using the Load data command in MySQL Client You can use Load Data to import data from big data files. Currently, MatrixOne only supports csv files. Before executing Load Data in MatrixOne, the table needs to be created in advance. For now, the data file is required to be at the same machine with MatrixOne server, a file transfer is necessary if they are in separate machines. Note If you are working with MatrixOne docker version, please put the data file in the directory mounted to the container, otherwise the container cann't perceive. Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Execute LOAD DATA with the corresponding file path in MySQL client. mysql> LOAD DATA INFILE '/tmp/xxx.csv' INTO TABLE xxxxxx FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY \"\\r\\n\"; Note For the docker version, the file path needs to be in the mounted directory. Example using Load data with docker version We will walk through the whole process of loading data with MatrixOne 0.5.1 docker version. Download the dataset file and store the data in ~/tmp/docker_loaddata_demo/ : cd ~/tmp/docker_loaddata_demo/ wget https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Unzip the dataset: tar -jxvf lineorder_flat.tar.bz2 Use Docker to launch MatrixOne, and mount the directory ~/tmp/docker_loaddata_demo/ that stores data files to a directory in the container. The container directory is /sb-dbgen-path as an example: docker run -d -p 6001:6001 -v ~/tmp/ docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 Connect to MatrixOne server: mysql -h 127.0.0.1 -P 6001 -udump -p111 Create lineorder_flat tables in MatrixOne, and import the dataset into MatriOne: mysql> create database if not exists ssb; mysql> use ssb; mysql> drop table if exists lineorder_flat; mysql> CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); mysql> load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the rows of imported data: select count(*) from lineorder_flat; /* expected results: */ +----------+ | count(*) | +----------+ | 10272594 | +----------+","title":"Import data"},{"location":"MatrixOne/Develop/import-data/import-data/#import-data","text":"This document will guide you on how to import large amounts of data to MatrixOne.","title":"Import data"},{"location":"MatrixOne/Develop/import-data/import-data/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path .","title":"Before you start"},{"location":"MatrixOne/Develop/import-data/import-data/#method-1-using-the-source-command-in-mysql-client","text":"You can execute an SQL script file using the source command or \\. command in MySQL client. mysql> source file_name mysql> \\. file_name Usually source is used to execute many SQL statements, you can write your database&table creation, insert data in one SQL file and execute this file with source in MySQL Client. Each statement is a separate line, the lines starting with -- or wrapped with /* are considered as comments and will be ignored. If your SQL is from mysqldump , please refer to this tutorial about how to modify the SQL file to adapt to MatrixOne format.","title":"Method 1: Using the Source command in MySQL Client"},{"location":"MatrixOne/Develop/import-data/import-data/#method-2-using-the-load-data-command-in-mysql-client","text":"You can use Load Data to import data from big data files. Currently, MatrixOne only supports csv files. Before executing Load Data in MatrixOne, the table needs to be created in advance. For now, the data file is required to be at the same machine with MatrixOne server, a file transfer is necessary if they are in separate machines. Note If you are working with MatrixOne docker version, please put the data file in the directory mounted to the container, otherwise the container cann't perceive. Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Execute LOAD DATA with the corresponding file path in MySQL client. mysql> LOAD DATA INFILE '/tmp/xxx.csv' INTO TABLE xxxxxx FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY \"\\r\\n\"; Note For the docker version, the file path needs to be in the mounted directory.","title":"Method 2: Using the Load data command in MySQL Client"},{"location":"MatrixOne/Develop/import-data/import-data/#example-using-load-data-with-docker-version","text":"We will walk through the whole process of loading data with MatrixOne 0.5.1 docker version. Download the dataset file and store the data in ~/tmp/docker_loaddata_demo/ : cd ~/tmp/docker_loaddata_demo/ wget https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Unzip the dataset: tar -jxvf lineorder_flat.tar.bz2 Use Docker to launch MatrixOne, and mount the directory ~/tmp/docker_loaddata_demo/ that stores data files to a directory in the container. The container directory is /sb-dbgen-path as an example: docker run -d -p 6001:6001 -v ~/tmp/ docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 Connect to MatrixOne server: mysql -h 127.0.0.1 -P 6001 -udump -p111 Create lineorder_flat tables in MatrixOne, and import the dataset into MatriOne: mysql> create database if not exists ssb; mysql> use ssb; mysql> drop table if exists lineorder_flat; mysql> CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); mysql> load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the rows of imported data: select count(*) from lineorder_flat; /* expected results: */ +----------+ | count(*) | +----------+ | 10272594 | +----------+","title":"Example using Load data with docker version"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-csv/","text":"Import the .csv data This document will guide you on how to import large amounts of .csv data to MatrixOne. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path . Using the Load data command in MySQL Client You can use Load Data to import data from big data files. Currently, MatrixOne only supports csv files. Before executing Load Data in MatrixOne, the table needs to be created in advance. For now, the data file is required to be at the same machine with MatrixOne server, a file transfer is necessary if they are in separate machines. Note If you are working with MatrixOne docker version, please put the data file in the directory mounted to the container, otherwise the container cann't perceive. Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Execute LOAD DATA with the corresponding file path in MySQL client. mysql> LOAD DATA INFILE '/tmp/xxx.csv' INTO TABLE xxxxxx FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY \"\\r\\n\"; Note For the docker version, the file path needs to be in the mounted directory. Example using Load data with docker version We will walk through the whole process of loading data with MatrixOne 0.5.1 docker version. Download the dataset file and store the data in ~/tmp/docker_loaddata_demo/ : cd ~/tmp/docker_loaddata_demo/ wget https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Unzip the dataset: tar -jxvf lineorder_flat.tar.bz2 Use Docker to launch MatrixOne, and mount the directory ~/tmp/docker_loaddata_demo/ that stores data files to a directory in the container. The container directory is /sb-dbgen-path as an example: docker run -d -p 6001:6001 -v ~/tmp/ docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 Connect to MatrixOne server: mysql -h 127.0.0.1 -P 6001 -udump -p111 Create lineorder_flat tables in MatrixOne, and import the dataset into MatriOne: mysql> create database if not exists ssb; mysql> use ssb; mysql> drop table if exists lineorder_flat; mysql> CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); mysql> load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the rows of imported data: select count(*) from lineorder_flat; /* expected results: */ +----------+ | count(*) | +----------+ | 10272594 | +----------+","title":"Import the csv"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-csv/#import-the-csv-data","text":"This document will guide you on how to import large amounts of .csv data to MatrixOne.","title":"Import the .csv data"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-csv/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path .","title":"Before you start"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-csv/#using-the-load-data-command-in-mysql-client","text":"You can use Load Data to import data from big data files. Currently, MatrixOne only supports csv files. Before executing Load Data in MatrixOne, the table needs to be created in advance. For now, the data file is required to be at the same machine with MatrixOne server, a file transfer is necessary if they are in separate machines. Note If you are working with MatrixOne docker version, please put the data file in the directory mounted to the container, otherwise the container cann't perceive. Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Execute LOAD DATA with the corresponding file path in MySQL client. mysql> LOAD DATA INFILE '/tmp/xxx.csv' INTO TABLE xxxxxx FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY \"\\r\\n\"; Note For the docker version, the file path needs to be in the mounted directory.","title":"Using the Load data command in MySQL Client"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-csv/#example-using-load-data-with-docker-version","text":"We will walk through the whole process of loading data with MatrixOne 0.5.1 docker version. Download the dataset file and store the data in ~/tmp/docker_loaddata_demo/ : cd ~/tmp/docker_loaddata_demo/ wget https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 Unzip the dataset: tar -jxvf lineorder_flat.tar.bz2 Use Docker to launch MatrixOne, and mount the directory ~/tmp/docker_loaddata_demo/ that stores data files to a directory in the container. The container directory is /sb-dbgen-path as an example: docker run -d -p 6001:6001 -v ~/tmp/ docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 Connect to MatrixOne server: mysql -h 127.0.0.1 -P 6001 -udump -p111 Create lineorder_flat tables in MatrixOne, and import the dataset into MatriOne: mysql> create database if not exists ssb; mysql> use ssb; mysql> drop table if exists lineorder_flat; mysql> CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); mysql> load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the rows of imported data: select count(*) from lineorder_flat; /* expected results: */ +----------+ | count(*) | +----------+ | 10272594 | +----------+","title":"Example using Load data with docker version"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-jsonline/","text":"Import the jsonlines data This document will guide you on how to import jsonlines (that is .jl file) data to MatrixOne. Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path . Basic command load data infile {'filepath'='data.txt', 'compression'='BZIP2','format'='jsonline','jsondata'='object'} into table db.a load data infile {'filepath'='data.txt', 'format'='jsonline','jsondata'='object'} into table db.a Parameter Description Parameter Description filepath The file path. compression Compression format, BZIP2, GZIP, LZO, SNAPPY, ZLIB are supported. format format, the file format .csv and .jsonline are supported. jsondata jsondata format. object and array are supported. If format is jsonline , must specify jsondata . Import Principles Read a line of jsonline using simdcsv Convert jsonline into a json object Converts a json object to a row of data The import method must be the same as importing data in .csv Example Prepare the data files. You can also download and use the .jl file we prepared. The following steps are illustrated with sample data. Example data file 1\uff1a jsonline_object.jl Example data file 2\uff1a jsonline_array.jl Open your terminal, enter into the directory where the .jl file resides, and run the following command line to display the contents of the file: > cd / $filepath > head jsonline_object.jl { \"col1\" :true, \"col2\" :1, \"col3\" : \"var\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" :121.11 } { \"col1\" : \"true\" , \"col2\" : \"1\" , \"col3\" : \"var\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" : \"121.11\" } { \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" : \"121.11\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col1\" : \"true\" , \"col2\" : \"1\" , \"col3\" : \"var\" } { \"col2\" :1, \"col3\" : \"var\" , \"col1\" :true, \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col8\" :121.11 } > head jsonline_array.jl [ true,1, \"var\" , \"2020-09-07\" , \"2020-09-07 00:00:00\" , \"2020-09-07 00:00:00\" , \"18\" ,121.11 ] [ \"true\" , \"1\" , \"var\" , \"2020-09-07\" , \"2020-09-07 00:00:00\" , \"2020-09-07 00:00:00\" , \"18\" , \"121.11\" ] Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Create tables in MatrixOne: create database db1 ; use db1 ; drop table if exists t1 ; create table t1 ( col1 bool , col2 int , col3 varchar , col4 date , col5 datetime , col6 timestamp , col7 decimal , col8 float ); drop table if exists t2 ; create table t2 ( col1 bool , col2 int , col3 varchar , col4 date , col5 datetime , col6 timestamp , col7 decimal , col8 float ); Execute LOAD DATA with the corresponding file path in MySQL client, import the jsonline_object.jl and the file jsonline_array.jl into MatrixOne: load data infile { 'filepath' = '$filepath/jsonline_object.jl' , 'format' = 'jsonline' , 'jsondata' = 'object' } into table t1 ; load data infile { 'filepath' = '$filepath/jsonline_array.jl' , 'format' = 'jsonline' , 'jsondata' = 'array' } into table t2 ; After the import is successful, you can run SQL statements to check the result of imported data: select * from t1 ; col1 col2 col3 col4 col5 col6 col7 col8 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 select * from t2 ; col1 col2 col3 col4 col5 col6 col7 col8 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 Note If you use Docker to launch MatrixOne, when you try to import the jsonline file, please make sure that you have a data directory mounted to the container. For more information on backing up the store directory, see Back up the store directory in the container to the host .","title":"Import the jsonlines"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-jsonline/#import-the-jsonlines-data","text":"This document will guide you on how to import jsonlines (that is .jl file) data to MatrixOne.","title":"Import the jsonlines data"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-jsonline/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path .","title":"Before you start"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-jsonline/#basic-command","text":"load data infile {'filepath'='data.txt', 'compression'='BZIP2','format'='jsonline','jsondata'='object'} into table db.a load data infile {'filepath'='data.txt', 'format'='jsonline','jsondata'='object'} into table db.a Parameter Description Parameter Description filepath The file path. compression Compression format, BZIP2, GZIP, LZO, SNAPPY, ZLIB are supported. format format, the file format .csv and .jsonline are supported. jsondata jsondata format. object and array are supported. If format is jsonline , must specify jsondata . Import Principles Read a line of jsonline using simdcsv Convert jsonline into a json object Converts a json object to a row of data The import method must be the same as importing data in .csv","title":"Basic command"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-jsonline/#example","text":"Prepare the data files. You can also download and use the .jl file we prepared. The following steps are illustrated with sample data. Example data file 1\uff1a jsonline_object.jl Example data file 2\uff1a jsonline_array.jl Open your terminal, enter into the directory where the .jl file resides, and run the following command line to display the contents of the file: > cd / $filepath > head jsonline_object.jl { \"col1\" :true, \"col2\" :1, \"col3\" : \"var\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" :121.11 } { \"col1\" : \"true\" , \"col2\" : \"1\" , \"col3\" : \"var\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" : \"121.11\" } { \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col8\" : \"121.11\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col1\" : \"true\" , \"col2\" : \"1\" , \"col3\" : \"var\" } { \"col2\" :1, \"col3\" : \"var\" , \"col1\" :true, \"col6\" : \"2020-09-07 00:00:00\" , \"col7\" : \"18\" , \"col4\" : \"2020-09-07\" , \"col5\" : \"2020-09-07 00:00:00\" , \"col8\" :121.11 } > head jsonline_array.jl [ true,1, \"var\" , \"2020-09-07\" , \"2020-09-07 00:00:00\" , \"2020-09-07 00:00:00\" , \"18\" ,121.11 ] [ \"true\" , \"1\" , \"var\" , \"2020-09-07\" , \"2020-09-07 00:00:00\" , \"2020-09-07 00:00:00\" , \"18\" , \"121.11\" ] Launch the MySQL Client in the MatrixOne local server for accessing the local file system. mysql -h 127.0.0.1 -P 6001 -udump -p111 Create tables in MatrixOne: create database db1 ; use db1 ; drop table if exists t1 ; create table t1 ( col1 bool , col2 int , col3 varchar , col4 date , col5 datetime , col6 timestamp , col7 decimal , col8 float ); drop table if exists t2 ; create table t2 ( col1 bool , col2 int , col3 varchar , col4 date , col5 datetime , col6 timestamp , col7 decimal , col8 float ); Execute LOAD DATA with the corresponding file path in MySQL client, import the jsonline_object.jl and the file jsonline_array.jl into MatrixOne: load data infile { 'filepath' = '$filepath/jsonline_object.jl' , 'format' = 'jsonline' , 'jsondata' = 'object' } into table t1 ; load data infile { 'filepath' = '$filepath/jsonline_array.jl' , 'format' = 'jsonline' , 'jsondata' = 'array' } into table t2 ; After the import is successful, you can run SQL statements to check the result of imported data: select * from t1 ; col1 col2 col3 col4 col5 col6 col7 col8 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 select * from t2 ; col1 col2 col3 col4 col5 col6 col7 col8 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 true 1 var 2020 - 09 - 07 2020 - 09 - 07 00 : 00 : 00 2020 - 09 - 07 00 : 00 : 00 18 121 . 11 Note If you use Docker to launch MatrixOne, when you try to import the jsonline file, please make sure that you have a data directory mounted to the container. For more information on backing up the store directory, see Back up the store directory in the container to the host .","title":"Example"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/","text":"Import the data from S3 Overview MatrixOne can read the Simple Storage Service (S3) files and import data to MatrixOne database. Currently, S3 supports AWS and mainstream cloud vendors in China. In addition, files on S3 support compressed formats and regular expression rules for file paths to read multiple files. For example, \"/Users/*.txt\" will read all files ending with .txt . Before you start Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path . Basic command LOAD DATA [ INFILE 'string' | INFILE { \"filepath\" = '<string>' , \"compression\" = '<string>' } | URL s3options { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } [ IGNORE ] INTO TABLE tbl_name [ CHARACTER SET charset_name ] [ { FIELDS | COLUMNS } [[ OPTIONALLY ] ENCLOSED BY 'char' ] ] ] [ IGNORE number { LINES | ROWS } ] Parameter Description Parameter Description endpoint A endpoint is a URL that can conncect to AWS Web service. For example: s3.us-west-2.amazonaws.com access_key_id S3 Access key ID secret_access_key S3 Secret access key bucket S3 Bucket to access filepath relative file path region AWS S3 Area compression Compressed format of S3 files. If empty, it indicates uncompressed files. Supported fields or Compressed format are \"auto\", \"none\", \"gzip\", \"bzip2\", \"flate\", \"zlib\", and \"lz4\". auto Compressed format: indicates that the file name extension automatically checks the compressed format of a file none Compressed format: indicates the uncompressed format, and the rest indicates the compressed format of the file For more information, see LOAD DATA . Code Example \uff1a ## Non - specified file Compressed format LOAD DATA INFILE URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' } INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; ## Specifies the file Compressed format LOAD DATA INFILE URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; Example For example purposes, we have prepared data from AWS S3. If you do not already have an account on AWS S3, please sign up first. Note This code example does not show account information such as access_id because of account privacy. You can read this document to understand the main steps; specific data and account information will not be shown. Method 1: Import S3 file to MatrixOne Prepare the data file. Enter into AWS S3 > buckets and find the file file-demo . Launch the MySQL Client, create tables in MatrixOne, for example: create database db1 ; use db1 ; drop table if exists t1 ; create table t1 ( num_col1 tinyint , num_col2 smallint , num_col3 int , num_col4 bigint , num_col5 tinyint unsigned , num_col6 smallint unsigned , num_col7 int unsigned , num_col8 bigint unsigned , num_col9 float ( 5 , 3 ), num_col10 double ( 6 , 5 ), num_col11 decimal ( 38 , 19 )); Import the file into MatrixOne: LOAD DATA INFILE URL s3option{\"endpoint\"='s3.us-west-2.amazonaws.com', \"access_key_id\"='<string>', \"secret_access_key\"='<string>', \"bucket\"='<string>', \"filepath\"='<string>', \"region\"='<string>', \"compression\"='<string>'} INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the result of imported data: select * from t1 ; Method 2: Specify S3 file to an external table Prepare the data file. Enter into AWS S3 > buckets and find the file file-demo . Launch the MySQL Client, specify S3 file to an external table: create external table ex_table_s3_1(num_col1 tinyint,num_col2 smallint,num_col3 int,num_col4 bigint,num_col5 tinyint unsigned,num_col6 smallint unsigned,num_col7 int unsigned,num_col8 bigint unsigned ,num_col9 float(5,3),num_col10 double(6,5),num_col11 decimal(38,19)) URL s3option{\"endpoint\"='s3.us-west-2.amazonaws.com',\"access_key_id\"='AKIAW2D4ZBGTXW2S2PVR', \"secret_access_key\"='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', \"bucket\"='heni-test', \"filepath\"='s3://heni-test/ex_table_number.csv', \"region\"='us-west-2'} fields terminated by ',' enclosed by '\\\"' lines terminated by '\\n'; After the import is successful, you can run SQL statements to check the result of imported data: select * from ex_table_s3_1 ; (Optional)If you need to import external table data into a data table in MatrixOne, you can use the following SQL statement: Create a new table t1 in MatrixOne: create table t1 ( num_col1 tinyint , num_col2 smallint , num_col3 int , num_col4 bigint , num_col5 tinyint unsigned , num_col6 smallint unsigned , num_col7 int unsigned , num_col8 bigint unsigned , num_col9 float ( 5 , 3 ), num_col10 double ( 6 , 5 ), num_col11 decimal ( 38 , 19 )); Import the external table ex_table_s3_1 to t1 : insert into t1 select * from ex_table_s3_1 ; About external table with Load data An example of the Load data syntax for an external table is: ## Create a external table for an S3 file ( specify the compression format ) create external table t (...) URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; ## Create a external table for an S3 file ( if no compression format is specified , the format is auto , and the file format is automatically checked ) create external table t (...) URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' } FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; Note MatrixOne only supports select on external tables. Delete , insert , and update are not supported. If the S3 file is specified to an external table, you can use the select to read the the external table file. To import data into a MatrixOne table, use the following SQL statements as an example: ## t1 is the MatrixOne 's table, t is the external table insert into t1 select * from t; ## You can also select a column from the external table file to import into the MatrixOne' s table insert into t1 select a from t ;","title":"Import the S3 files"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#import-the-data-from-s3","text":"","title":"Import the data from S3"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#overview","text":"MatrixOne can read the Simple Storage Service (S3) files and import data to MatrixOne database. Currently, S3 supports AWS and mainstream cloud vendors in China. In addition, files on S3 support compressed formats and regular expression rules for file paths to read multiple files. For example, \"/Users/*.txt\" will read all files ending with .txt .","title":"Overview"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#before-you-start","text":"Make sure you have already installed and launched MatrixOne . Use MySQL client to connect to MatrixOne . If you use the docker install, please make sure that you have a data directory mounted to the container. For example, docker run -d -p 6001:6001 -v ~/tmp/docker_loaddata_demo:/ssb-dbgen-path:rw --name matrixone matrixorigin/matrixone:0.5.1 This typical installation maps its local path ~/tmp/docker_loaddata_demo to a inner-container path /ssb-dbgen-path .","title":"Before you start"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#basic-command","text":"LOAD DATA [ INFILE 'string' | INFILE { \"filepath\" = '<string>' , \"compression\" = '<string>' } | URL s3options { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } [ IGNORE ] INTO TABLE tbl_name [ CHARACTER SET charset_name ] [ { FIELDS | COLUMNS } [[ OPTIONALLY ] ENCLOSED BY 'char' ] ] ] [ IGNORE number { LINES | ROWS } ] Parameter Description Parameter Description endpoint A endpoint is a URL that can conncect to AWS Web service. For example: s3.us-west-2.amazonaws.com access_key_id S3 Access key ID secret_access_key S3 Secret access key bucket S3 Bucket to access filepath relative file path region AWS S3 Area compression Compressed format of S3 files. If empty, it indicates uncompressed files. Supported fields or Compressed format are \"auto\", \"none\", \"gzip\", \"bzip2\", \"flate\", \"zlib\", and \"lz4\". auto Compressed format: indicates that the file name extension automatically checks the compressed format of a file none Compressed format: indicates the uncompressed format, and the rest indicates the compressed format of the file For more information, see LOAD DATA . Code Example \uff1a ## Non - specified file Compressed format LOAD DATA INFILE URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' } INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; ## Specifies the file Compressed format LOAD DATA INFILE URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ;","title":"Basic command"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#example","text":"For example purposes, we have prepared data from AWS S3. If you do not already have an account on AWS S3, please sign up first. Note This code example does not show account information such as access_id because of account privacy. You can read this document to understand the main steps; specific data and account information will not be shown.","title":"Example"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#method-1-import-s3-file-to-matrixone","text":"Prepare the data file. Enter into AWS S3 > buckets and find the file file-demo . Launch the MySQL Client, create tables in MatrixOne, for example: create database db1 ; use db1 ; drop table if exists t1 ; create table t1 ( num_col1 tinyint , num_col2 smallint , num_col3 int , num_col4 bigint , num_col5 tinyint unsigned , num_col6 smallint unsigned , num_col7 int unsigned , num_col8 bigint unsigned , num_col9 float ( 5 , 3 ), num_col10 double ( 6 , 5 ), num_col11 decimal ( 38 , 19 )); Import the file into MatrixOne: LOAD DATA INFILE URL s3option{\"endpoint\"='s3.us-west-2.amazonaws.com', \"access_key_id\"='<string>', \"secret_access_key\"='<string>', \"bucket\"='<string>', \"filepath\"='<string>', \"region\"='<string>', \"compression\"='<string>'} INTO TABLE t1 FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n'; After the import is successful, you can run SQL statements to check the result of imported data: select * from t1 ;","title":"Method 1: Import S3 file to MatrixOne"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#method-2-specify-s3-file-to-an-external-table","text":"Prepare the data file. Enter into AWS S3 > buckets and find the file file-demo . Launch the MySQL Client, specify S3 file to an external table: create external table ex_table_s3_1(num_col1 tinyint,num_col2 smallint,num_col3 int,num_col4 bigint,num_col5 tinyint unsigned,num_col6 smallint unsigned,num_col7 int unsigned,num_col8 bigint unsigned ,num_col9 float(5,3),num_col10 double(6,5),num_col11 decimal(38,19)) URL s3option{\"endpoint\"='s3.us-west-2.amazonaws.com',\"access_key_id\"='AKIAW2D4ZBGTXW2S2PVR', \"secret_access_key\"='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', \"bucket\"='heni-test', \"filepath\"='s3://heni-test/ex_table_number.csv', \"region\"='us-west-2'} fields terminated by ',' enclosed by '\\\"' lines terminated by '\\n'; After the import is successful, you can run SQL statements to check the result of imported data: select * from ex_table_s3_1 ; (Optional)If you need to import external table data into a data table in MatrixOne, you can use the following SQL statement: Create a new table t1 in MatrixOne: create table t1 ( num_col1 tinyint , num_col2 smallint , num_col3 int , num_col4 bigint , num_col5 tinyint unsigned , num_col6 smallint unsigned , num_col7 int unsigned , num_col8 bigint unsigned , num_col9 float ( 5 , 3 ), num_col10 double ( 6 , 5 ), num_col11 decimal ( 38 , 19 )); Import the external table ex_table_s3_1 to t1 : insert into t1 select * from ex_table_s3_1 ;","title":"Method 2: Specify S3 file to an external table"},{"location":"MatrixOne/Develop/import-data/0.6-bulk-load/load-s3/#about-external-table-with-load-data","text":"An example of the Load data syntax for an external table is: ## Create a external table for an S3 file ( specify the compression format ) create external table t (...) URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' , \"compression\" = '<string>' } FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; ## Create a external table for an S3 file ( if no compression format is specified , the format is auto , and the file format is automatically checked ) create external table t (...) URL s3option { \"endpoint\" = '<string>' , \"access_key_id\" = '<string>' , \"secret_access_key\" = '<string>' , \"bucket\" = '<string>' , \"filepath\" = '<string>' , \"region\" = '<string>' } FIELDS TERMINATED BY ',' ENCLOSED BY '\\\"' LINES TERMINATED BY '\\n' ; Note MatrixOne only supports select on external tables. Delete , insert , and update are not supported. If the S3 file is specified to an external table, you can use the select to read the the external table file. To import data into a MatrixOne table, use the following SQL statements as an example: ## t1 is the MatrixOne 's table, t is the external table insert into t1 select * from t; ## You can also select a column from the external table file to import into the MatrixOne' s table insert into t1 select a from t ;","title":"About external table with Load data"},{"location":"MatrixOne/FAQs/deployment-faqs/","text":"Deployment FAQs Operating system requirements What are the required operating system versions for deploying MatrixOne? For standalone installation, MatrixOne supports the following operating system: Linux OS Version Red Hat Enterprise Linux 7.3 or later 7.x releases CentOS 7.3 or later 7.x releases Oracle Enterprise Linux 7.3 or later 7.x releases Ubuntu LTS 22.04 or later MatrixOne also supports macOS operating system, but it's only recommended to run as a test and development environment. macOS Version macOS Monterey 12.3 or later Hardware requirements What are the required hardware for deploying MatrixOne? For standalone installation, MatrixOne can be running on the 64-bit generic hardware server platform in the Intel x86-64 architecture. The requirements and recommendations about server hardware configuration for development, testing and production environments are as follows: Development and testing environments CPU Memory Local Storage 4 core+ 16 GB+ SSD/HDD 200 GB+ The Macbook M1/M2 with ARM architecture is also a good fit for a development environment. Production environment CPU Memory Local Storage 16 core+ 64 GB+ SSD/HDD 500 GB+ Installation and deployment What settings do I need to change for installation? Normally you don't need to change anything for installation. A default setting of system_vars_config.toml is enough to run MatrixOne directly. But if you want to customize your listening port, ip address, stored data files path, you may modify the corresponding records of system_vars_config.toml . After the MySQL client is installed, I open the terminal and run mysql , I got an error of command not found: mysql . To solve the error, you need to set the environment variable. Run the following command: export PATH=${PATH}:/usr/local/mysql/bin When I install MatrixOne by building from source, I got an error of the following and the build failed, how can I proceed? Error: Get \"https://proxy.golang.org/........\": dial tcp 142.251.43.17:443: i/o timeout As MatrixOne needs many go libraries as dependency, it downloads them at the time of building it. This is an error of downloading timeout, it's mostly a networking issue. If you are using a Chinese mainland network, you need to set your go environment to a Chinese image site to accelerate the go library downloading. If you check your go environment by go env , you may see GOPROXY=\"https://proxy.golang.org,direct\" , you need to set it by go env -w GOPROXY=https://goproxy.cn,direct Then the make build should be fast enough to finish. When I was testing MatrixOne with MO-tester, I got an error of too many open files ? MO-tester will open and close many SQL files in a high speed to test MatrixOne, this kind of usage will easily reach the maximum open file limit of Linux and macOS, which is the reason for the too many open files error. For MacOS, you can just set the open file limit by a simple command: ulimit -n 65536 For Linux, please refer to this detailed guide to set the ulimit to 100000. After setting this value, there will be no more too many open files error. Ssb-dbgen cannot be compiled on a PC with M1 chip To complete the following configuration, then compiling 'SSB-DBgen' for a PC with M1 chip: Download and install GCC11 . To ensure the gcc-11 is successful installed, run the following command: gcc-11 -v The successful result is as below: Using built-in specs. COLLECT_GCC=gcc-11 COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@11/11.3.0/bin/../libexec/gcc/aarch64-apple-darwin21/11/lto-wrapper Target: aarch64-apple-darwin21 Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@11 --libdir=/opt/homebrew/opt/gcc@11/lib/gcc/11 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-11 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 11.3.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --build=aarch64-apple-darwin21 --with-system-zlib --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 11.3.0 (Homebrew GCC 11.3.0) Modify the bm_utils.c file in the ssb-dbgen directory: Change the #include <malloc.h> in line 41 to #include <sys/malloc.h> Change the open(fullpath, ((*mode == 'r')?O_RDONLY:O_WRONLY)|O_CREAT|O_LARGEFILE,0644); in line 398 to open(fullpath, ((*mode == 'r')?O_RDONLY:O_WRONLY)|O_CREAT,0644); Modify the varsub.c file in the ssb-dbgen directory: Change the #include <malloc.h> in line 5 to #include <sys/malloc.h> Modify the makefile file in the ssb-dbgen directory: Change the CC = gcc in line 5 to CC = gcc-11 Enter into ssb-dbgen directory again and compile: cd ssb-dbgen make Check the ssb-dbgen directory, when the the dbgen file is generated, indicating that the compilation is successful.","title":"Deployment FAQs"},{"location":"MatrixOne/FAQs/deployment-faqs/#deployment-faqs","text":"","title":"Deployment FAQs"},{"location":"MatrixOne/FAQs/deployment-faqs/#operating-system-requirements","text":"What are the required operating system versions for deploying MatrixOne? For standalone installation, MatrixOne supports the following operating system: Linux OS Version Red Hat Enterprise Linux 7.3 or later 7.x releases CentOS 7.3 or later 7.x releases Oracle Enterprise Linux 7.3 or later 7.x releases Ubuntu LTS 22.04 or later MatrixOne also supports macOS operating system, but it's only recommended to run as a test and development environment. macOS Version macOS Monterey 12.3 or later","title":"Operating system requirements"},{"location":"MatrixOne/FAQs/deployment-faqs/#hardware-requirements","text":"What are the required hardware for deploying MatrixOne? For standalone installation, MatrixOne can be running on the 64-bit generic hardware server platform in the Intel x86-64 architecture. The requirements and recommendations about server hardware configuration for development, testing and production environments are as follows: Development and testing environments CPU Memory Local Storage 4 core+ 16 GB+ SSD/HDD 200 GB+ The Macbook M1/M2 with ARM architecture is also a good fit for a development environment. Production environment CPU Memory Local Storage 16 core+ 64 GB+ SSD/HDD 500 GB+","title":"Hardware requirements"},{"location":"MatrixOne/FAQs/deployment-faqs/#installation-and-deployment","text":"What settings do I need to change for installation? Normally you don't need to change anything for installation. A default setting of system_vars_config.toml is enough to run MatrixOne directly. But if you want to customize your listening port, ip address, stored data files path, you may modify the corresponding records of system_vars_config.toml . After the MySQL client is installed, I open the terminal and run mysql , I got an error of command not found: mysql . To solve the error, you need to set the environment variable. Run the following command: export PATH=${PATH}:/usr/local/mysql/bin When I install MatrixOne by building from source, I got an error of the following and the build failed, how can I proceed? Error: Get \"https://proxy.golang.org/........\": dial tcp 142.251.43.17:443: i/o timeout As MatrixOne needs many go libraries as dependency, it downloads them at the time of building it. This is an error of downloading timeout, it's mostly a networking issue. If you are using a Chinese mainland network, you need to set your go environment to a Chinese image site to accelerate the go library downloading. If you check your go environment by go env , you may see GOPROXY=\"https://proxy.golang.org,direct\" , you need to set it by go env -w GOPROXY=https://goproxy.cn,direct Then the make build should be fast enough to finish. When I was testing MatrixOne with MO-tester, I got an error of too many open files ? MO-tester will open and close many SQL files in a high speed to test MatrixOne, this kind of usage will easily reach the maximum open file limit of Linux and macOS, which is the reason for the too many open files error. For MacOS, you can just set the open file limit by a simple command: ulimit -n 65536 For Linux, please refer to this detailed guide to set the ulimit to 100000. After setting this value, there will be no more too many open files error. Ssb-dbgen cannot be compiled on a PC with M1 chip To complete the following configuration, then compiling 'SSB-DBgen' for a PC with M1 chip: Download and install GCC11 . To ensure the gcc-11 is successful installed, run the following command: gcc-11 -v The successful result is as below: Using built-in specs. COLLECT_GCC=gcc-11 COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc@11/11.3.0/bin/../libexec/gcc/aarch64-apple-darwin21/11/lto-wrapper Target: aarch64-apple-darwin21 Configured with: ../configure --prefix=/opt/homebrew/opt/gcc@11 --libdir=/opt/homebrew/opt/gcc@11/lib/gcc/11 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-11 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion='Homebrew GCC 11.3.0' --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --build=aarch64-apple-darwin21 --with-system-zlib --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk Thread model: posix Supported LTO compression algorithms: zlib zstd gcc version 11.3.0 (Homebrew GCC 11.3.0) Modify the bm_utils.c file in the ssb-dbgen directory: Change the #include <malloc.h> in line 41 to #include <sys/malloc.h> Change the open(fullpath, ((*mode == 'r')?O_RDONLY:O_WRONLY)|O_CREAT|O_LARGEFILE,0644); in line 398 to open(fullpath, ((*mode == 'r')?O_RDONLY:O_WRONLY)|O_CREAT,0644); Modify the varsub.c file in the ssb-dbgen directory: Change the #include <malloc.h> in line 5 to #include <sys/malloc.h> Modify the makefile file in the ssb-dbgen directory: Change the CC = gcc in line 5 to CC = gcc-11 Enter into ssb-dbgen directory again and compile: cd ssb-dbgen make Check the ssb-dbgen directory, when the the dbgen file is generated, indicating that the compilation is successful.","title":"Installation and deployment"},{"location":"MatrixOne/FAQs/product-faqs/","text":"Product FAQs What is MatrixOne? MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple data centers, clouds, edges, and other heterogenous infrastructures. The all-in-one architecture of MatrixOne will significantly simplify database management and maintenance, creating a single database that can serve multiple data applications. For information about MatrixOne, you can see MatrixOne Introduction . Where can I apply MatrxOne? MatrixOne provides users with HTAP services to support hybrid workloads. It can be used to build data warehouse or data platforms. Is MatrixOne based on MySQL or some other database? MatrixOne is a completely redesigned database. It's compatible with part of MySQL syntax and semantics. We are currently working to support more database semantics such as PostgreSQL, Hive, Clickhouse, since we intend to develop MatrixOne as a hyperconverged database. To learn more about the compatibility with MySQL, you can visit MySQL-Compatibility . Which programming language is MatrixOne developed with? Currently, the primary programming language used for our programming in Golang . What operating system does MatrixOne support? MatrixOne supports Linux and macOS. Please refer to deployment FAQ for more details. Which MatrixOne data types are supported? You can see data types in MatrixOne to learn more about the data types we support. Where can I deploy MatrixOne? MatrixOne can be deployed on-premise, public cloud, private cloud, or Kubernetes. Can I contribute to MatrixOne? Yes, MatrixOne is an open-source project developed on GitHub. Contribution instructions are published in Contribution Guide . We welcome developers to contribute to the MatrixOne community. In addition to the MatrixOne documentation, are there any other ways to acquire MatrixOne knowledge? Currently, MatrixOne documentation is the most important and timely way to get MatrixOne related knowledge. In addition, we also have some technical communication groups in Slack and WeChat. If you have any needs, contact opensource@matrixorigin.io .","title":"Product FAQs"},{"location":"MatrixOne/FAQs/product-faqs/#product-faqs","text":"What is MatrixOne? MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine, across multiple data centers, clouds, edges, and other heterogenous infrastructures. The all-in-one architecture of MatrixOne will significantly simplify database management and maintenance, creating a single database that can serve multiple data applications. For information about MatrixOne, you can see MatrixOne Introduction . Where can I apply MatrxOne? MatrixOne provides users with HTAP services to support hybrid workloads. It can be used to build data warehouse or data platforms. Is MatrixOne based on MySQL or some other database? MatrixOne is a completely redesigned database. It's compatible with part of MySQL syntax and semantics. We are currently working to support more database semantics such as PostgreSQL, Hive, Clickhouse, since we intend to develop MatrixOne as a hyperconverged database. To learn more about the compatibility with MySQL, you can visit MySQL-Compatibility . Which programming language is MatrixOne developed with? Currently, the primary programming language used for our programming in Golang . What operating system does MatrixOne support? MatrixOne supports Linux and macOS. Please refer to deployment FAQ for more details. Which MatrixOne data types are supported? You can see data types in MatrixOne to learn more about the data types we support. Where can I deploy MatrixOne? MatrixOne can be deployed on-premise, public cloud, private cloud, or Kubernetes. Can I contribute to MatrixOne? Yes, MatrixOne is an open-source project developed on GitHub. Contribution instructions are published in Contribution Guide . We welcome developers to contribute to the MatrixOne community. In addition to the MatrixOne documentation, are there any other ways to acquire MatrixOne knowledge? Currently, MatrixOne documentation is the most important and timely way to get MatrixOne related knowledge. In addition, we also have some technical communication groups in Slack and WeChat. If you have any needs, contact opensource@matrixorigin.io .","title":"Product FAQs"},{"location":"MatrixOne/FAQs/sql-faqs/","text":"SQL FAQs Are functions and other keywords case sensitive\uff1f No, they are not case sensitive. Only in one case case is sensitive in MatrixOne, if user creates table and attributes with ``, the name in`` is case sensitive. To find this table name or attribute name in your query, it needs to be in `` as well. How do I export data from MatrixOne to a file? You can use SELECT INTO OUTFILE command to export data from MatrixOne to a csv file (only to the server host, not to the remote client). For this command, you can see SELECT Reference . What is the size limit of a transaction in MatrixOne? The transaction size is limited to the memory size you have for hardware environment. What kind of character set does MatrixOne support? MatrixOne supports the UTF-8 character set by default and currently only supports UTF-8. What is the sql_mode in MatrixOne? MatrixOne doesn't support modifying the sql_mode for now, the default sql_mode is as the only_full_group_by in MySQL. How do I bulk load data into MatrixOne? MatrixOne provides two methods of bulk load data: 1. Using source filename command from shell, user can load the SQL file with all DDL and insert data statements. 2. Using load data infile...into table... command from shell, user can load an existing .csv file to MatrixOne. How do I know how my query is executed? To see how MatrixOne executes for a given query, you can use the EXPLAIN statement, which will print out the query plan. EXPLAIN SELECT col1 FROM tbl1;","title":"SQL FAQs"},{"location":"MatrixOne/FAQs/sql-faqs/#sql-faqs","text":"Are functions and other keywords case sensitive\uff1f No, they are not case sensitive. Only in one case case is sensitive in MatrixOne, if user creates table and attributes with ``, the name in`` is case sensitive. To find this table name or attribute name in your query, it needs to be in `` as well. How do I export data from MatrixOne to a file? You can use SELECT INTO OUTFILE command to export data from MatrixOne to a csv file (only to the server host, not to the remote client). For this command, you can see SELECT Reference . What is the size limit of a transaction in MatrixOne? The transaction size is limited to the memory size you have for hardware environment. What kind of character set does MatrixOne support? MatrixOne supports the UTF-8 character set by default and currently only supports UTF-8. What is the sql_mode in MatrixOne? MatrixOne doesn't support modifying the sql_mode for now, the default sql_mode is as the only_full_group_by in MySQL. How do I bulk load data into MatrixOne? MatrixOne provides two methods of bulk load data: 1. Using source filename command from shell, user can load the SQL file with all DDL and insert data statements. 2. Using load data infile...into table... command from shell, user can load an existing .csv file to MatrixOne. How do I know how my query is executed? To see how MatrixOne executes for a given query, you can use the EXPLAIN statement, which will print out the query plan. EXPLAIN SELECT col1 FROM tbl1;","title":"SQL FAQs"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/","text":"Explore SQL with MatrixOne MatrixOne is compatible with MySQL, you can use MySQL statements directly in most of the cases. For unsupported features, see MySQL Compatibility , and for more information on connecting to MatriOne, see Using client connect to the MatrixOne server . What is SQL? The Structured Query Language (SQL) is used to manage a relational database management system (RDBMS). The scope of SQL includes data insertion, query, update, and delete, database schema creation and modification, and data access control. How many types SQL does MatrixOne have\uff1f SQL is divided into the following 4 types according to their functions in MatrixOne: DDL (Data Definition Language): It is used to define database objects, including databases, tables, and views. Such as CREATE , ALTER , and DROP . DML (Data Manipulation Language): It is used to manipulate application related records. Such as SELECT , DELETE , and INSERT . DQL (Data Query Language): It is used to query the records after conditional filtering. Such as SELECT...FROM...[WHERE] . DCL (Data Control Language): It is used to define access privileges and security levels. Such as COMMIT , ROLLBACK , and SET TRANSACTION . Basic SQL about SHOW, CREATE and DROP a database A database in MatrixOne can be considered as a collection of objects such as tables . To show the list of databases, use the SHOW DATABASES statement: SHOW DATABASES ; To create the database named dbdemo , use the CREATE DATABASE db_name [options]; statement, for example: CREATE DATABASE dbdemo ; or: CREATE DATABASE IF NOT EXISTS dbdemo ; Add IF NOT EXISTS to prevent an error if the database exists. To use the database named dbdemo , use the following statement: USE dbdemo ; To show all the tables in a database, use the SHOW TABLES statement: SHOW TABLES FROM dbdemo ; To delete a database, use the DROP DATABASE statement: DROP DATABASE dbdemo ; Basic SQL about CREATE, SHOW, and DROP a table To create a table, use the CREATE TABLE statement: CREATE TABLE table_name column_name data_type constraint ; For example, to create a table named person which includes fields such as number , name , and birthday , use the following statement: CREATE TABLE person ( id INT ( 11 ), name VARCHAR ( 255 ), birthday DATE ); To view the statement that creates the table (DDL), use the SHOW CREATE statement: SHOW CREATE table person ; Expected result: + --------+-----------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + --------+-----------------------------------------------------------------------------------------------------------------+ | person | CREATE TABLE ` person ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 255 ) DEFAULT NULL , ` birthday ` DATE DEFAULT NULL ) | + --------+-----------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) To delete a table, use the DROP TABLE statement: DROP TABLE person ; Basic SQL about INSERT, UPDATE, and DELETE data Common DML features are adding, modifying, and deleting table records. The corresponding commands are INSERT , UPDATE , and DELETE . To insert data into a table, use the INSERT statement: INSERT INTO person VALUES ( 1 , 'tom' , '20170912' ); To insert a record containing data of some fields into a table, use the INSERT statement: INSERT INTO person ( id , name ) VALUES ( '2' , 'bob' ); To update some fields of a record in a table, use the UPDATE statement: UPDATE person SET birthday = '20180808' WHERE id = 2 ; To delete the data in a table, use the DELETE statement: DELETE FROM person WHERE id = 2 ; Note The UPDATE and DELETE statements without the WHERE clause as a filter operate on the entire table. Basic SQL about Query data DQL is used to retrieve the desired data rows from a table or multiple tables. To view the data in a table, use the SELECT statement: SELECT * FROM person ; Expected result: + ------+------+------------+ | id | name | birthday | + ------+------+------------+ | 1 | tom | 2017 - 09 - 12 | + ------+------+------------+ 1 row in set ( 0 . 00 sec ) To query a specific column, add the column name after the SELECT keyword: SELECT name FROM person ; + ------+ | name | + ------+ | tom | + ------+ 1 rows in set ( 0 . 00 sec ) Use the WHERE clause to filter all records that match the conditions and then return the result: SELECT * FROM person where id < 5 ; Expected result: + ------+------+------------+ | id | name | birthday | + ------+------+------------+ | 1 | tom | 2017 - 09 - 12 | + ------+------+------------+ 1 row in set ( 0 . 00 sec ) Basic SQL about CREAT, GRANT, and DROP a user DCL are usually used to create or delete users, and manage user privileges. To create a user, use the CREATE USER statement. The following example creates a user named mouser with the password 111 : CREATE USER mouser IDENTIFIED BY '111' ; To create a rule for the user: CREATE ROLE role_r1 , role_r2 , role_r3 ; To grant mouser the role_r1: GRANT role_r1 to mouser ; To grant mouser the privilege to create table in the dbdemo database: GRANT create table on database * to role_r1 ; To check the privileges of root: SHOW GRANTS for root ; !!! note MatrixOne supports viewing the privileges of root currently but does not support viewing the privileges of current users. To delete mouser: DROP USER mouser ;","title":"Basic SQL"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#explore-sql-with-matrixone","text":"MatrixOne is compatible with MySQL, you can use MySQL statements directly in most of the cases. For unsupported features, see MySQL Compatibility , and for more information on connecting to MatriOne, see Using client connect to the MatrixOne server .","title":"Explore SQL with MatrixOne"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#what-is-sql","text":"The Structured Query Language (SQL) is used to manage a relational database management system (RDBMS). The scope of SQL includes data insertion, query, update, and delete, database schema creation and modification, and data access control.","title":"What is SQL?"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#how-many-types-sql-does-matrixone-have","text":"SQL is divided into the following 4 types according to their functions in MatrixOne: DDL (Data Definition Language): It is used to define database objects, including databases, tables, and views. Such as CREATE , ALTER , and DROP . DML (Data Manipulation Language): It is used to manipulate application related records. Such as SELECT , DELETE , and INSERT . DQL (Data Query Language): It is used to query the records after conditional filtering. Such as SELECT...FROM...[WHERE] . DCL (Data Control Language): It is used to define access privileges and security levels. Such as COMMIT , ROLLBACK , and SET TRANSACTION .","title":"How many types SQL does MatrixOne have\uff1f"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#basic-sql-about-show-create-and-drop-a-database","text":"A database in MatrixOne can be considered as a collection of objects such as tables . To show the list of databases, use the SHOW DATABASES statement: SHOW DATABASES ; To create the database named dbdemo , use the CREATE DATABASE db_name [options]; statement, for example: CREATE DATABASE dbdemo ; or: CREATE DATABASE IF NOT EXISTS dbdemo ; Add IF NOT EXISTS to prevent an error if the database exists. To use the database named dbdemo , use the following statement: USE dbdemo ; To show all the tables in a database, use the SHOW TABLES statement: SHOW TABLES FROM dbdemo ; To delete a database, use the DROP DATABASE statement: DROP DATABASE dbdemo ;","title":"Basic SQL about SHOW, CREATE and DROP a database"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#basic-sql-about-create-show-and-drop-a-table","text":"To create a table, use the CREATE TABLE statement: CREATE TABLE table_name column_name data_type constraint ; For example, to create a table named person which includes fields such as number , name , and birthday , use the following statement: CREATE TABLE person ( id INT ( 11 ), name VARCHAR ( 255 ), birthday DATE ); To view the statement that creates the table (DDL), use the SHOW CREATE statement: SHOW CREATE table person ; Expected result: + --------+-----------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + --------+-----------------------------------------------------------------------------------------------------------------+ | person | CREATE TABLE ` person ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 255 ) DEFAULT NULL , ` birthday ` DATE DEFAULT NULL ) | + --------+-----------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) To delete a table, use the DROP TABLE statement: DROP TABLE person ;","title":"Basic SQL about CREATE, SHOW, and DROP a table"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#basic-sql-about-insert-update-and-delete-data","text":"Common DML features are adding, modifying, and deleting table records. The corresponding commands are INSERT , UPDATE , and DELETE . To insert data into a table, use the INSERT statement: INSERT INTO person VALUES ( 1 , 'tom' , '20170912' ); To insert a record containing data of some fields into a table, use the INSERT statement: INSERT INTO person ( id , name ) VALUES ( '2' , 'bob' ); To update some fields of a record in a table, use the UPDATE statement: UPDATE person SET birthday = '20180808' WHERE id = 2 ; To delete the data in a table, use the DELETE statement: DELETE FROM person WHERE id = 2 ; Note The UPDATE and DELETE statements without the WHERE clause as a filter operate on the entire table.","title":"Basic SQL about INSERT, UPDATE, and DELETE data"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#basic-sql-about-query-data","text":"DQL is used to retrieve the desired data rows from a table or multiple tables. To view the data in a table, use the SELECT statement: SELECT * FROM person ; Expected result: + ------+------+------------+ | id | name | birthday | + ------+------+------------+ | 1 | tom | 2017 - 09 - 12 | + ------+------+------------+ 1 row in set ( 0 . 00 sec ) To query a specific column, add the column name after the SELECT keyword: SELECT name FROM person ; + ------+ | name | + ------+ | tom | + ------+ 1 rows in set ( 0 . 00 sec ) Use the WHERE clause to filter all records that match the conditions and then return the result: SELECT * FROM person where id < 5 ; Expected result: + ------+------+------------+ | id | name | birthday | + ------+------+------------+ | 1 | tom | 2017 - 09 - 12 | + ------+------+------------+ 1 row in set ( 0 . 00 sec )","title":"Basic SQL about Query data"},{"location":"MatrixOne/Get-Started/0.6-basic-sql/#basic-sql-about-creat-grant-and-drop-a-user","text":"DCL are usually used to create or delete users, and manage user privileges. To create a user, use the CREATE USER statement. The following example creates a user named mouser with the password 111 : CREATE USER mouser IDENTIFIED BY '111' ; To create a rule for the user: CREATE ROLE role_r1 , role_r2 , role_r3 ; To grant mouser the role_r1: GRANT role_r1 to mouser ; To grant mouser the privilege to create table in the dbdemo database: GRANT create table on database * to role_r1 ; To check the privileges of root: SHOW GRANTS for root ; !!! note MatrixOne supports viewing the privileges of root currently but does not support viewing the privileges of current users. To delete mouser: DROP USER mouser ;","title":"Basic SQL about CREAT, GRANT, and DROP a user"},{"location":"MatrixOne/Get-Started/Playground/","text":"Playground MatrixOne Playground allows you to try SQL statements and explore features of MatrixOne instantly from your web browser with interactive tutorials. For docs about our SQL commands, you can see SQL Reference . For tutorials about SSB or TPCH test, you can see Tutorial . Limitations You can only operate with the SQLs that are already in Tutorials in MatrixOrigin Playground. max_result_rows =2000 Examples In Playground, You can follow different interactive tutorials and pick one in the list box, and now the supported tutorials are shown below: SSB Test with MatrixOne We will use SSB Test as an example to show you the overall operation process of Playground. Test Preperations This tutorial walks you through the most popular Star Schema Benchmark\uff08SSB\uff09 Test SQL statements with MatrixOne. To better experience MatrixOne's features and performance, test queries in this tutorial will run without filters. Before you start, the test datasets have been pre-loaded in database ssb . To list available tables in the database you can query : SHOW TABLES; Tips You can click on the command to copy and Run it in the terminal on the right. The query results are displayed in the lower right. Then you can run the queries on SSB datasets, click Continue . Run Query Command Now, You can query the table with SQL commands we provide. For example: Run Q1.1 query select sum(lo_revenue) as revenue from lineorder join dates on lo_orderdate = d_datekey; And you can use join in queries: Run Q1.2 query select sum(lo_revenue) as revenue from lineorder join dates on lo_orderdate = d_datekey; Additionally, group by and order by can be used: Run Q2.1 query select sum(lo_revenue) as lo_revenue, d_year, p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey group by d_year, p_brand order by d_year, p_brand; More query commands are provided in Playground , you can test on your own. Learn More This page describes the features, limitations, and examples of Playground. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne What\u2018s New","title":"**Playground**"},{"location":"MatrixOne/Get-Started/Playground/#playground","text":"MatrixOne Playground allows you to try SQL statements and explore features of MatrixOne instantly from your web browser with interactive tutorials. For docs about our SQL commands, you can see SQL Reference . For tutorials about SSB or TPCH test, you can see Tutorial .","title":"Playground"},{"location":"MatrixOne/Get-Started/Playground/#limitations","text":"You can only operate with the SQLs that are already in Tutorials in MatrixOrigin Playground. max_result_rows =2000","title":"Limitations"},{"location":"MatrixOne/Get-Started/Playground/#examples","text":"In Playground, You can follow different interactive tutorials and pick one in the list box, and now the supported tutorials are shown below: SSB Test with MatrixOne We will use SSB Test as an example to show you the overall operation process of Playground.","title":"Examples"},{"location":"MatrixOne/Get-Started/Playground/#test-preperations","text":"This tutorial walks you through the most popular Star Schema Benchmark\uff08SSB\uff09 Test SQL statements with MatrixOne. To better experience MatrixOne's features and performance, test queries in this tutorial will run without filters. Before you start, the test datasets have been pre-loaded in database ssb . To list available tables in the database you can query : SHOW TABLES; Tips You can click on the command to copy and Run it in the terminal on the right. The query results are displayed in the lower right. Then you can run the queries on SSB datasets, click Continue .","title":"Test Preperations"},{"location":"MatrixOne/Get-Started/Playground/#run-query-command","text":"Now, You can query the table with SQL commands we provide. For example: Run Q1.1 query select sum(lo_revenue) as revenue from lineorder join dates on lo_orderdate = d_datekey; And you can use join in queries: Run Q1.2 query select sum(lo_revenue) as revenue from lineorder join dates on lo_orderdate = d_datekey; Additionally, group by and order by can be used: Run Q2.1 query select sum(lo_revenue) as lo_revenue, d_year, p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey group by d_year, p_brand order by d_year, p_brand; More query commands are provided in Playground , you can test on your own.","title":"Run Query Command"},{"location":"MatrixOne/Get-Started/Playground/#learn-more","text":"This page describes the features, limitations, and examples of Playground. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne What\u2018s New","title":"Learn More"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/","text":"Connect to MatrixOne Server Before you start Make sure you have already installed MatrixOne . 1. Install MySQL client MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. For more information on connecting to MatrixOne through a MySQL client, see Connect to the MatrixOne server through a client . Currently, MatrixOne is only compatible with the Oracle MySQL client. This means that some features might not work with the MariaDB client or Percona client. If you have installed MySQL client, see the following steps. 2. Connect to MatrixOne server You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Currently, MatrixOne only supports the TCP listener. For more information on connecting to MatriOne, see Using client connect to the MatrixOne server , Connecting to MatrixOne with JDBC , and Connecting to MatrixOne with Python .","title":"Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#connect-to-matrixone-server","text":"","title":"Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#before-you-start","text":"Make sure you have already installed MatrixOne .","title":"Before you start"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#1-install-mysql-client","text":"MatrixOne supports the MySQL wire protocol, so you can use MySQL client drivers to connect from various languages. For more information on connecting to MatrixOne through a MySQL client, see Connect to the MatrixOne server through a client . Currently, MatrixOne is only compatible with the Oracle MySQL client. This means that some features might not work with the MariaDB client or Percona client. If you have installed MySQL client, see the following steps.","title":"1. Install MySQL client"},{"location":"MatrixOne/Get-Started/connect-to-matrixone-server/#2-connect-to-matrixone-server","text":"You can use the MySQL command-line client to connect to MatrixOne server: mysql -h IP -P PORT -uUsername -p The connection string is the same format as MySQL accepts. You need to provide a user name and a password. Use the built-in test account for example: user: dump password: 111 mysql -h 127.0.0.1 -P 6001 -udump -p Enter password: Currently, MatrixOne only supports the TCP listener. For more information on connecting to MatriOne, see Using client connect to the MatrixOne server , Connecting to MatrixOne with JDBC , and Connecting to MatrixOne with Python .","title":"2. Connect to MatrixOne server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/","text":"Install standalone MatrixOne MatrixOne supports Linux and MacOS. You can install a standalone MatrixOne version by 3 methods: Method 1: Building from source code . Method 2: Using binary package . Method 3: Using Docker . Recommended hardware specification: x86 CPU with 4 cores and 32GB memory, with CentOS 7+ OS. For more information on the required operating system versions for deploying MatrixOne, see Hardware and Operating system requirements \u3002 Before you start 1. Install Go as necessary dependancy Go version 1.19 is required. 2. Install MySQL Client MySQL version 8.0.30 is recommended. To install MySQL client, enter into the MySQL Community Downloads download page: According to your System, Select Select Operating System . Click Select OS Version from the drop-down list. Version 8.0.30 or later is recommended. Method 1: Building from source code 1. Get the MatrixOne code to build MatrixOne Depending on your needs, choose whether you want to keep your code up to date, or if you want to get the latest stable version of the code. Option 1: Get the MatrixOne(Develop Version) code to build The main branch is the default branch, the code on the main branch is always up-to-date but not stable enough. Get the MatrixOne(Develop Version, also called Pre0.6 version) code: git clone https://github.com/matrixorigin/matrixone.git cd matrixone You can run make debug , make clean , or anything else our Makefile offers. make build Launch MatrixOne server\uff1a Note The startup-config file of MatrixOne(Develop Version) is different from the startup-config file of MatrixOne(Stable Version). The startup-config file code of MatrixOne(Develop Version) is as below: ./mo-service -cfg ./etc/cn-standalone-test.toml Option 2: Get the MatrixOne(Stable Version) code to build If you want to get the latest stable version code released by MatrixOne, please switch to the branch of version 0.5.1 first. git clone https://github.com/matrixorigin/matrixone.git git checkout 0.5.1 cd matrixone You can run make debug , make clean , or anything else our Makefile offers. make config make build Launch MatrixOne server\uff1a Note The startup-config file of MatrixOne(Stable Version) is different from the startup-config file of MatrixOne(Develop Version). The startup-config file code of MatrixOne(Stable Version) is as below: ./mo-server system_vars_config.toml 2. Connect to MatrixOne Server When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server . Method 2: Downloading binary packages For each release, you can download binary packages directly to run MatrixOne in the X86_64 Linux or Mac X86_64 environment. 1. Download binary packages and decompress Linux Environment Downloading method 1: wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip Downloading method 2: curl -OL https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip Downloading method 3: Go to the version 0.5.1 , pull down to find the Assets column, and click the installation package mo-server-v0. 5.1-linux-amd64.zip can be downloaded. MacOS Environment Downloading method 1: wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip MacOS does not contain the wget command by default. You need to install the wget command in advance. You can also download and install the binary packages by referring to Download Method 2 as below. Downloading method 2: curl -OL https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip Downloading method 3: Go to the version 0.5.1 , pull down to find the Assets column, and click the installation package mo-server-v0.5.1-darwin-x86_64.zip can be downloaded. Info MatrixOne only supports installation on ARM chipset with source code build; if you are using MacOS M1 and above, for more information on using source code build to install MatrixOne, see Method 1: Building from source code . Using release binary files from X86 chipset will lead to unknown problems. 2.Launch MatrixOne server ./mo-server system_vars_config.toml 3. Connect to MatrixOne Server When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server . Method 3: Using docker 1. Install Docker Please verify that Docker daemon is running in the background: docker --version 2. Create and run the container of MatrixOne It will pull the image from Docker Hub if not exists. You can choose to pull the stable version image or the develop version image. Stable Version Image(0.5.1 version) docker run -d -p 6001 :6001 --name matrixone matrixorigin/matrixone:0.5.1 If you want to pull the develop version image, see Docker Hub , get the image tag. An example as below: Develop Version Image(Pre0.6 version) docker run -d -p 6001 :6001 --name matrixone matrixorigin/matrixone:nightly-commitnumber Info The nightly version is updated once a day. For the information on the user name and password, see the next step - Connect to MatrixOne Server. 3. Mount the data directory(Optional) To customize the configuration file, you can mount the custom configuration file stored on the local disk. docker run -d -p 6001:6001 -v ${path_name}/system_vars_config.toml:/system_vars_config.toml:ro -v ${path_name}/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 Parameter Description ${path_name}/system_vars_config.toml The local disk directory to which the configuration file system_vars_config.toml is mounted /system_vars_config.toml /system_vars_config.toml in the container ${path_name}/store /store path of the backup local disk directory /store /store directory in the container For more information on the description of Docker run , run the commands docker run --help . 4. Connect to MatrixOne Server When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server . Reference For more information on update, see Upgrade Standalone MatrixOne . For more information on deployment\uff0csee Deployment FAQs .","title":"Install and Launch MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#install-standalone-matrixone","text":"MatrixOne supports Linux and MacOS. You can install a standalone MatrixOne version by 3 methods: Method 1: Building from source code . Method 2: Using binary package . Method 3: Using Docker . Recommended hardware specification: x86 CPU with 4 cores and 32GB memory, with CentOS 7+ OS. For more information on the required operating system versions for deploying MatrixOne, see Hardware and Operating system requirements \u3002","title":"Install standalone MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#before-you-start","text":"","title":"Before you start"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-install-go-as-necessary-dependancy","text":"Go version 1.19 is required.","title":"1. Install Go as necessary dependancy"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2-install-mysql-client","text":"MySQL version 8.0.30 is recommended. To install MySQL client, enter into the MySQL Community Downloads download page: According to your System, Select Select Operating System . Click Select OS Version from the drop-down list. Version 8.0.30 or later is recommended.","title":"2. Install MySQL Client"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#method-1-building-from-source-code","text":"","title":"Method 1: Building from source code"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-get-the-matrixone-code-to-build-matrixone","text":"Depending on your needs, choose whether you want to keep your code up to date, or if you want to get the latest stable version of the code.","title":"1. Get the MatrixOne code to build MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#option-1-get-the-matrixonedevelop-version-code-to-build","text":"The main branch is the default branch, the code on the main branch is always up-to-date but not stable enough. Get the MatrixOne(Develop Version, also called Pre0.6 version) code: git clone https://github.com/matrixorigin/matrixone.git cd matrixone You can run make debug , make clean , or anything else our Makefile offers. make build Launch MatrixOne server\uff1a Note The startup-config file of MatrixOne(Develop Version) is different from the startup-config file of MatrixOne(Stable Version). The startup-config file code of MatrixOne(Develop Version) is as below: ./mo-service -cfg ./etc/cn-standalone-test.toml","title":"Option 1: Get the MatrixOne(Develop Version) code to build"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#option-2-get-the-matrixonestable-version-code-to-build","text":"If you want to get the latest stable version code released by MatrixOne, please switch to the branch of version 0.5.1 first. git clone https://github.com/matrixorigin/matrixone.git git checkout 0.5.1 cd matrixone You can run make debug , make clean , or anything else our Makefile offers. make config make build Launch MatrixOne server\uff1a Note The startup-config file of MatrixOne(Stable Version) is different from the startup-config file of MatrixOne(Develop Version). The startup-config file code of MatrixOne(Stable Version) is as below: ./mo-server system_vars_config.toml","title":"Option 2: Get the MatrixOne(Stable Version) code to build"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2-connect-to-matrixone-server","text":"When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server .","title":"2. Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#method-2-downloading-binary-packages","text":"","title":"Method 2: Downloading binary packages"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-download-binary-packages-and-decompress","text":"Linux Environment Downloading method 1: wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip Downloading method 2: curl -OL https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip Downloading method 3: Go to the version 0.5.1 , pull down to find the Assets column, and click the installation package mo-server-v0. 5.1-linux-amd64.zip can be downloaded. MacOS Environment Downloading method 1: wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip MacOS does not contain the wget command by default. You need to install the wget command in advance. You can also download and install the binary packages by referring to Download Method 2 as below. Downloading method 2: curl -OL https://github.com/matrixorigin/matrixone/releases/download/v0.5.1/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip Downloading method 3: Go to the version 0.5.1 , pull down to find the Assets column, and click the installation package mo-server-v0.5.1-darwin-x86_64.zip can be downloaded. Info MatrixOne only supports installation on ARM chipset with source code build; if you are using MacOS M1 and above, for more information on using source code build to install MatrixOne, see Method 1: Building from source code . Using release binary files from X86 chipset will lead to unknown problems.","title":"1. Download binary packages and decompress"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2launch-matrixone-server","text":"./mo-server system_vars_config.toml","title":"2.Launch MatrixOne server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#3-connect-to-matrixone-server","text":"When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server .","title":"3. Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#method-3-using-docker","text":"","title":"Method 3: Using docker"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#1-install-docker","text":"Please verify that Docker daemon is running in the background: docker --version","title":"1. Install Docker"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#2-create-and-run-the-container-of-matrixone","text":"It will pull the image from Docker Hub if not exists. You can choose to pull the stable version image or the develop version image. Stable Version Image(0.5.1 version) docker run -d -p 6001 :6001 --name matrixone matrixorigin/matrixone:0.5.1 If you want to pull the develop version image, see Docker Hub , get the image tag. An example as below: Develop Version Image(Pre0.6 version) docker run -d -p 6001 :6001 --name matrixone matrixorigin/matrixone:nightly-commitnumber Info The nightly version is updated once a day. For the information on the user name and password, see the next step - Connect to MatrixOne Server.","title":"2. Create and run the container of MatrixOne"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#3-mount-the-data-directoryoptional","text":"To customize the configuration file, you can mount the custom configuration file stored on the local disk. docker run -d -p 6001:6001 -v ${path_name}/system_vars_config.toml:/system_vars_config.toml:ro -v ${path_name}/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 Parameter Description ${path_name}/system_vars_config.toml The local disk directory to which the configuration file system_vars_config.toml is mounted /system_vars_config.toml /system_vars_config.toml in the container ${path_name}/store /store path of the backup local disk directory /store /store directory in the container For more information on the description of Docker run , run the commands docker run --help .","title":"3. Mount the data directory(Optional)"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#4-connect-to-matrixone-server","text":"When you finish installing and starting MatrixOne, many logs are generated in startup mode. Then you can start a new terminal and connect to a matrixone, for more information on connecting to MatrixOne, see Connect to MatrixOne server .","title":"4. Connect to MatrixOne Server"},{"location":"MatrixOne/Get-Started/install-standalone-matrixone/#reference","text":"For more information on update, see Upgrade Standalone MatrixOne . For more information on deployment\uff0csee Deployment FAQs .","title":"Reference"},{"location":"MatrixOne/Glossary/glossary/","text":"MatrixOne Glossary **","title":"**MatrixOne Glossary**"},{"location":"MatrixOne/Glossary/glossary/#matrixone-glossary","text":"**","title":"MatrixOne Glossary"},{"location":"MatrixOne/Maintain/mo-directory-structure/","text":"MatrixOne Directory Structure After MatrixOne has been installed and connected, the MatrixOne automatically generates the following directories for storing data files or metadata information. Enter into the matrixone directory and execute ls to view the directory structure. The related directory structure and uses are as follows: matrixone //MatrixOne main directory \u251c\u2500\u2500 etc //configuration file directory \u2502 \u251c\u2500\u2500 launch-tae-CN-tae-DN //distributed configuration file directory \u2502 \u251c\u2500\u2500 launch-tae-logservice //standalone configuration file directory \u251c\u2500\u2500 mo-data //data file directory \u2502 \u251c\u2500\u2500 local //local fileservice directory \u2502 \u2502 \u251c\u2500\u2500 cn //local cn and storage directory \u2502 \u2502 \u2514\u2500\u2500 etl //statistics directory \u2502 \u2502 \u2514\u2500\u2500 sys //statistics belongs to the account \u2502 \u2502 \u2514\u2500\u2500 logs //the type of statistics \u2502 \u2502 \u2514\u2500\u2500 2022 // the year of statistics \u2502 \u2502 \u2514\u2500\u2500 10 //month of statistics \u2502 \u2502 \u2514\u2500\u2500 27 // the number of days of statistics \u2502 \u2502 \u251c\u2500\u2500 metric //system indicators storage directory \u2502 \u2502 \u251c\u2500\u2500 rawlog //log storage directory \u2502 \u2502 \u2514\u2500\u2500 statement_info //sql information storage directory \u2502 \u2514\u2500\u2500 logservice //logservice directory \u2502 \u251c\u2500\u2500hostname //MatrixOne server domain name \u2502 \u2502 \u2514\u2500\u2500 00000000000000000001 //snapshot directory \u2502 \u2502 \u2514\u2500\u2500 tandb //bootstrap directory \u2514\u2500\u2500 store //tae catalog directory \u2514\u2500\u2500 tae","title":"MatrixOne Directory Structure"},{"location":"MatrixOne/Maintain/mo-directory-structure/#matrixone-directory-structure","text":"After MatrixOne has been installed and connected, the MatrixOne automatically generates the following directories for storing data files or metadata information. Enter into the matrixone directory and execute ls to view the directory structure. The related directory structure and uses are as follows: matrixone //MatrixOne main directory \u251c\u2500\u2500 etc //configuration file directory \u2502 \u251c\u2500\u2500 launch-tae-CN-tae-DN //distributed configuration file directory \u2502 \u251c\u2500\u2500 launch-tae-logservice //standalone configuration file directory \u251c\u2500\u2500 mo-data //data file directory \u2502 \u251c\u2500\u2500 local //local fileservice directory \u2502 \u2502 \u251c\u2500\u2500 cn //local cn and storage directory \u2502 \u2502 \u2514\u2500\u2500 etl //statistics directory \u2502 \u2502 \u2514\u2500\u2500 sys //statistics belongs to the account \u2502 \u2502 \u2514\u2500\u2500 logs //the type of statistics \u2502 \u2502 \u2514\u2500\u2500 2022 // the year of statistics \u2502 \u2502 \u2514\u2500\u2500 10 //month of statistics \u2502 \u2502 \u2514\u2500\u2500 27 // the number of days of statistics \u2502 \u2502 \u251c\u2500\u2500 metric //system indicators storage directory \u2502 \u2502 \u251c\u2500\u2500 rawlog //log storage directory \u2502 \u2502 \u2514\u2500\u2500 statement_info //sql information storage directory \u2502 \u2514\u2500\u2500 logservice //logservice directory \u2502 \u251c\u2500\u2500hostname //MatrixOne server domain name \u2502 \u2502 \u2514\u2500\u2500 00000000000000000001 //snapshot directory \u2502 \u2502 \u2514\u2500\u2500 tandb //bootstrap directory \u2514\u2500\u2500 store //tae catalog directory \u2514\u2500\u2500 tae","title":"MatrixOne Directory Structure"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/","text":"Update Standalone MatrixOne You can update the standalone MatrixOne version by 3 methods: Method 1: Updating from source Method 2: Using binary package to update Method 3: Using Docker to update If MatrixOne is installed by using source code or by using a binary package, you can use source or binary to update MatrixOne's version. The two methods are the same. If MatrixOne is installed with Docker, you can use Docker to update MatrixOne's version. Note This document is only applicable to the v0.5.0 version updating. Not for v0.4.0/v0.3.0/v0.2.0/v0.1.0 update to v0.5.0 version. Before You Start MatrixOne v0.5.0 has been installed. Method 1: Updating from source Scenario Example : The local Matrixone directory needs to be upgraded from v0.5.0 to v0.5.1. The store directory needs to be backed up. 1. Backup store cd matrixone ls cp -r store ${path_name} ${path_name} indicates the backup path of store . Note If you've never started MatrixOne, you don't need to do this step. 2. Get the MatrixOne v0.5.1 code git pull https://github.com/matrixorigin/matrixone.git git checkout 0.5.1 3. Copy the backed up store directory back to the MatrixOne directory cp -r ${path_name} store 4. Run make You can run make debug, make clean, or anything else our Makefile offers. make config make build 5. Boot MatrixOne server ./mo-server system_vars_config.toml 6. Connect to MatrixOne Server When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server . Method 2: Using binary package to update Scenario Example : The local Matrixone directory needs to be upgraded from v0.5.0 to v0.5.1. The store directory needs to be backed up. 1. Backup store cd matrixone ls cp -r store ${path_name} ${path_name} indicates the backup path of store . Note If you've never started MatrixOne, you don't need to do this step. 2. Download binary packages and decompress Linux Environment wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.0/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip MacOS Environment wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.0/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip 3. Cover mo-server (Optional) If you are download the v0.5.1 binary package to a new path (for example, the new path is 0.5.1_path ), then you only need to use the mo-server in the v0.5.1 binary package to overwrite the mo-server in the v0.5.0 binary package. cp -rf 0.5.1_path/matrixone/mo-server matrixone/mo-server If you download the V0.5.1 binary package to the current Matxione path, then the mo-server will be automatically covered, and you don't need to do anything else. 4. Copy the backed up store directory back to the MatrixOne directory cp -r ${path_name} store 5. Launch MatrixOne server ./mo-server system_vars_config.toml 6. Connect to MatrixOne Server When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server . Method 3: Using Docker to update If you do not need to keep historical data, you can use the following command to download an image of MatrixOne V0.5.1 from Docker Hub. docker ps docker stop matrixone docker rm matrixone docker pull matrixorigin/matrixone:0.5.1 docker run -d -p 6001:6001 --name matrixone matrixorigin/matrixone:0.5.1 If you need to keep historical data, please refer to the following scenario example: Scenario Example : The v0.5.0 version of MatrixOne is runing by Docker. The container path is not attached to the local disk, and historical data needs to be preserved before the upgrade. 1.Back up the store directory in the container to the host \u2460 Check the containers of the currently running Matrixone, and check whether the Matrixone is running. If the Matrixone is running, stop the Matrixone. docker ps docker stop matrixone \u2461 Copy the store directory from the current Matrixone container to the local backup path. docker cp matrixone:/store ${path_name}/ ${path_name} indicates the backup path of store . 2. Remove v0.5.0 version of MatrixOne docker rm matrixone 3. Download the MatrixOne v0.5.1 image Use the following command to download the MatrixOne v0.5.1 image from Docker Hub. docker pull matrixorigin/matrixone:0.5.1 4. Run the container and mount the /store directory Run the container and mount the '/store' directory to the location of the backed-up store folder on your local disk: docker run -d -p 6001:6001 -v ~/tmp/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 To customize the configuration file, you can mount the custom configuration file stored on the local disk. docker run -d -p 6001:6001 -v ${path_name}/system_vars_config.toml:/system_vars_config.toml:ro -v ${path_name}/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 For the information on the user name and password, see the next step - Connect to MatrixOne Server. 5. Connect to MatrixOne Server When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server . Reference For more information on deployment\uff0csee Deployment FAQs .","title":"Upgrade Standalone MatrixOne"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#update-standalone-matrixone","text":"You can update the standalone MatrixOne version by 3 methods: Method 1: Updating from source Method 2: Using binary package to update Method 3: Using Docker to update If MatrixOne is installed by using source code or by using a binary package, you can use source or binary to update MatrixOne's version. The two methods are the same. If MatrixOne is installed with Docker, you can use Docker to update MatrixOne's version. Note This document is only applicable to the v0.5.0 version updating. Not for v0.4.0/v0.3.0/v0.2.0/v0.1.0 update to v0.5.0 version.","title":"Update Standalone MatrixOne"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#before-you-start","text":"MatrixOne v0.5.0 has been installed.","title":"Before You Start"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#method-1-updating-from-source","text":"","title":"Method 1: Updating from source"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#1-backup-store","text":"cd matrixone ls cp -r store ${path_name} ${path_name} indicates the backup path of store . Note If you've never started MatrixOne, you don't need to do this step.","title":"1. Backup store"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#2-get-the-matrixone-v051-code","text":"git pull https://github.com/matrixorigin/matrixone.git git checkout 0.5.1","title":"2. Get the MatrixOne v0.5.1 code"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#3-copy-the-backed-up-store-directory-back-to-the-matrixone-directory","text":"cp -r ${path_name} store","title":"3. Copy the backed up store directory back to the MatrixOne directory"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#4-run-make","text":"You can run make debug, make clean, or anything else our Makefile offers. make config make build","title":"4. Run make"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#5-boot-matrixone-server","text":"./mo-server system_vars_config.toml","title":"5. Boot MatrixOne server"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#6-connect-to-matrixone-server","text":"When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server .","title":"6. Connect to MatrixOne Server"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#method-2-using-binary-package-to-update","text":"","title":"Method 2: Using binary package to update"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#1-backup-store_1","text":"cd matrixone ls cp -r store ${path_name} ${path_name} indicates the backup path of store . Note If you've never started MatrixOne, you don't need to do this step.","title":"1. Backup store"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#2-download-binary-packages-and-decompress","text":"Linux Environment wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.0/mo-server-v0.5.1-linux-amd64.zip unzip mo-server-v0.5.1-linux-amd64.zip MacOS Environment wget https://github.com/matrixorigin/matrixone/releases/download/v0.5.0/mo-server-v0.5.1-darwin-x86_64.zip unzip mo-server-v0.5.1-darwin-x86_64.zip","title":"2. Download binary packages and decompress"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#3-cover-mo-server-optional","text":"If you are download the v0.5.1 binary package to a new path (for example, the new path is 0.5.1_path ), then you only need to use the mo-server in the v0.5.1 binary package to overwrite the mo-server in the v0.5.0 binary package. cp -rf 0.5.1_path/matrixone/mo-server matrixone/mo-server If you download the V0.5.1 binary package to the current Matxione path, then the mo-server will be automatically covered, and you don't need to do anything else.","title":"3. Cover mo-server (Optional)"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#4-copy-the-backed-up-store-directory-back-to-the-matrixone-directory","text":"cp -r ${path_name} store","title":"4. Copy the backed up store directory back to the MatrixOne directory"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#5-launch-matrixone-server","text":"./mo-server system_vars_config.toml","title":"5. Launch MatrixOne server"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#6-connect-to-matrixone-server_1","text":"When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server .","title":"6. Connect to MatrixOne Server"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#method-3-using-docker-to-update","text":"","title":"Method 3: Using Docker to update"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#1back-up-the-store-directory-in-the-container-to-the-host","text":"\u2460 Check the containers of the currently running Matrixone, and check whether the Matrixone is running. If the Matrixone is running, stop the Matrixone. docker ps docker stop matrixone \u2461 Copy the store directory from the current Matrixone container to the local backup path. docker cp matrixone:/store ${path_name}/ ${path_name} indicates the backup path of store .","title":"1.Back up the store directory in the container to the host"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#2-remove-v050-version-of-matrixone","text":"docker rm matrixone","title":"2. Remove v0.5.0 version of MatrixOne"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#3-download-the-matrixone-v051-image","text":"Use the following command to download the MatrixOne v0.5.1 image from Docker Hub. docker pull matrixorigin/matrixone:0.5.1","title":"3. Download the MatrixOne v0.5.1 image"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#4-run-the-container-and-mount-the-store-directory","text":"Run the container and mount the '/store' directory to the location of the backed-up store folder on your local disk: docker run -d -p 6001:6001 -v ~/tmp/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 To customize the configuration file, you can mount the custom configuration file stored on the local disk. docker run -d -p 6001:6001 -v ${path_name}/system_vars_config.toml:/system_vars_config.toml:ro -v ${path_name}/store:/store:rw --name matrixone matrixorigin/matrixone:0.5.1 For the information on the user name and password, see the next step - Connect to MatrixOne Server.","title":"4. Run the container and mount the /store directory"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#5-connect-to-matrixone-server","text":"When you finish installing MatrixOne, you can refer to the section below to connect to the MatrixOne server. See Connect to MatrixOne server .","title":"5. Connect to MatrixOne Server"},{"location":"MatrixOne/Maintain/upgrade-standalone-matrixone/#reference","text":"For more information on deployment\uff0csee Deployment FAQs .","title":"Reference"},{"location":"MatrixOne/Migrate/migrate-from-mysql-to-matrixone/","text":"Migrate data from MySQL to MatrixOne This document describes how to migrate data from MySQL to MatrixOne. Dump MySQL data We suppose you have full access to your MySQL instances. Firstly, we use mysqldump to dump MySQL table structures and data to a single file with the following command. mysqldump -h IP_ADDRESS -uUSERNAME -pPASSWORD -d DB_NAME1 DB_NAME2 ... OUTPUT_FILE_NAME.SQL For example, this following command dumps all table structures and data to a single file named a.sql . mysqldump -h 127.0.0.1 -uroot -proot -d test a.sql Modify SQL file The SQL file doesn't fully fit with MatrixOne yet. We'll need to remove and modify several element to adapt the SQL file to MatrixOne's format. Unsupported syntax or features need to be removed: AUTO_INCREMENT, UNIQUE KEY, KEY, CHARACTER SET/CHARSET, COLLATE, ROW_FORMAT, USING BTREE, LOCK TABLE, SET SYSTEM_VARIABLE, ENGINE. Unsupported data type: If you use TEXT or BLOB type, you can modify them to VARCHAR type, with a estimated size. Limited support: If you use composite primary key, you should modify them to a single primary key or completely remove it. We take a typical mysqldump table as an example: CREATE TABLE `roles` ( `role_id` int(11) NOT NULL AUTO_INCREMENT, `role_name` varchar(128) DEFAULT NULL, `state` int(11) DEFAULT NULL, `company_id` int(11) DEFAULT NULL, `remark` varchar(1024) DEFAULT NULL, `created_by` text DEFAULT NULL, `created_time` datetime DEFAULT NULL, `updated_by` varchar(64) DEFAULT NULL, `updated_time` datetime DEFAULT NULL, `is_deleted` int(11) DEFAULT '0', `deleted_by` varchar(64) DEFAULT NULL, `deleted_time` datetime DEFAULT NULL, PRIMARY KEY (`role_id`), UNIQUE KEY(`state`), KEY `idx_company_state` (`company_id`,`state`) ) ENGINE=InnoDB AUTO_INCREMENT=395 DEFAULT CHARSET=utf8; To be able to successfully create this table in MatrixOne, it will be modifed as: CREATE TABLE roles ( role_id int(11) NOT NULL, role_name varchar(128) DEFAULT NULL, state int(11) DEFAULT NULL, company_id int(11) DEFAULT NULL, remark varchar(1024) DEFAULT NULL, created_by varchar(64) DEFAULT NULL, created_time datetime DEFAULT NULL, updated_by varchar(64) DEFAULT NULL, updated_time datetime DEFAULT NULL, is_deleted int(11) DEFAULT '0', deleted_by varchar(64) DEFAULT NULL, deleted_time datetime DEFAULT NULL, PRIMARY KEY (role_id) ); Import into MatrixOne Once your dumped SQL file was ready, you can import the whole table structures and data into MatrixOne. Open a MySQL terminal and connect to MatrixOne. Import the SQL file into MatrixOne by the source command. mysql> source '/YOUR_PATH/a.sql' If your SQL file is big, you can use the following command to run the import task in the background. For example: nohup mysql -h 127.0.0.1 -P 6001 -udump -p111 -e 'source /YOUR_PATH/a.sql' &","title":"From MySQL to MatrixOne"},{"location":"MatrixOne/Migrate/migrate-from-mysql-to-matrixone/#migrate-data-from-mysql-to-matrixone","text":"This document describes how to migrate data from MySQL to MatrixOne.","title":"Migrate data from MySQL to MatrixOne"},{"location":"MatrixOne/Migrate/migrate-from-mysql-to-matrixone/#dump-mysql-data","text":"We suppose you have full access to your MySQL instances. Firstly, we use mysqldump to dump MySQL table structures and data to a single file with the following command. mysqldump -h IP_ADDRESS -uUSERNAME -pPASSWORD -d DB_NAME1 DB_NAME2 ... OUTPUT_FILE_NAME.SQL For example, this following command dumps all table structures and data to a single file named a.sql . mysqldump -h 127.0.0.1 -uroot -proot -d test a.sql","title":"Dump MySQL data"},{"location":"MatrixOne/Migrate/migrate-from-mysql-to-matrixone/#modify-sql-file","text":"The SQL file doesn't fully fit with MatrixOne yet. We'll need to remove and modify several element to adapt the SQL file to MatrixOne's format. Unsupported syntax or features need to be removed: AUTO_INCREMENT, UNIQUE KEY, KEY, CHARACTER SET/CHARSET, COLLATE, ROW_FORMAT, USING BTREE, LOCK TABLE, SET SYSTEM_VARIABLE, ENGINE. Unsupported data type: If you use TEXT or BLOB type, you can modify them to VARCHAR type, with a estimated size. Limited support: If you use composite primary key, you should modify them to a single primary key or completely remove it. We take a typical mysqldump table as an example: CREATE TABLE `roles` ( `role_id` int(11) NOT NULL AUTO_INCREMENT, `role_name` varchar(128) DEFAULT NULL, `state` int(11) DEFAULT NULL, `company_id` int(11) DEFAULT NULL, `remark` varchar(1024) DEFAULT NULL, `created_by` text DEFAULT NULL, `created_time` datetime DEFAULT NULL, `updated_by` varchar(64) DEFAULT NULL, `updated_time` datetime DEFAULT NULL, `is_deleted` int(11) DEFAULT '0', `deleted_by` varchar(64) DEFAULT NULL, `deleted_time` datetime DEFAULT NULL, PRIMARY KEY (`role_id`), UNIQUE KEY(`state`), KEY `idx_company_state` (`company_id`,`state`) ) ENGINE=InnoDB AUTO_INCREMENT=395 DEFAULT CHARSET=utf8; To be able to successfully create this table in MatrixOne, it will be modifed as: CREATE TABLE roles ( role_id int(11) NOT NULL, role_name varchar(128) DEFAULT NULL, state int(11) DEFAULT NULL, company_id int(11) DEFAULT NULL, remark varchar(1024) DEFAULT NULL, created_by varchar(64) DEFAULT NULL, created_time datetime DEFAULT NULL, updated_by varchar(64) DEFAULT NULL, updated_time datetime DEFAULT NULL, is_deleted int(11) DEFAULT '0', deleted_by varchar(64) DEFAULT NULL, deleted_time datetime DEFAULT NULL, PRIMARY KEY (role_id) );","title":"Modify SQL file"},{"location":"MatrixOne/Migrate/migrate-from-mysql-to-matrixone/#import-into-matrixone","text":"Once your dumped SQL file was ready, you can import the whole table structures and data into MatrixOne. Open a MySQL terminal and connect to MatrixOne. Import the SQL file into MatrixOne by the source command. mysql> source '/YOUR_PATH/a.sql' If your SQL file is big, you can use the following command to run the import task in the background. For example: nohup mysql -h 127.0.0.1 -P 6001 -udump -p111 -e 'source /YOUR_PATH/a.sql' &","title":"Import into MatrixOne"},{"location":"MatrixOne/Overview/matrixone-architecture/","text":"MatrixOne Architecture Architecture MatrixOne is the first open-source distributed HSTAP database that supports OLTP, OLAP, and Streaming with a single auto-tuning storage engine. As a redefinition of the HTAP database, HSTAP aims to meet all the needs of Transactional Processing (TP) and Analytical Processing (AP) within a single database. Compared with the traditional HTAP, HSTAP emphasizes its built-in streaming capability used for connecting TP and AP tables. This provides users with an experience that a database can be used just like a Big Data platform, with which many users are already familiar thanks to the Big Data boom. With minimal integration efforts, MatrixOne frees users from the limitations of Big Data and provides one-stop coverage for all TP and AP scenarios for enterprises. MatrixOne is redesigned from scratch and introduces many innovations as well as many best practices in the other DBMS. It adopts a disaggregated storage and computes architecture, where data are stored on S3 object storage in the cloud to achieve low cost, and the compute nodes are stateless and can be started at will to achieve the ultimate elasticity. In the case of on-premises deployment, MatrixOne can utilize the user's HDFS or other supported distributed file system to save data. MatrixOne also comes with an S3-compatible built-in alternative to ensure the elasticity, high reliability, and high performance of its storage without relying on any external components. The architecture is as follows: The architecture of MatrixOne is divided into several layers: Cluster Management Layer Being responsible for cluster management, it interacts with Kubernetes to obtain resources dynamically when in the cloud-native environment, while in the on-premises deployment, it gets hold of resources based on the configuration. Cluster status is continuously monitored with the role of each node allocated based on resource information. Maintenance works are carried out to ensure that all system components are up and running despite occasional node and network failures. It rebalances the loads on nodes when necessary as well. Major components in this layer are: Prophet Scheduler: take charge of load balancing and node keep-alive. Resource Manager: being responsible for physical resources provision. Serverless Layer Serverless Layer is a general term for a series of stateless nodes, which, as a whole, contains three categories: Background tasks: the most important one is called Offload Worker, which is responsible for offloading expensive compaction tasks and flushing data to S3 storage. SQL compute nodes: responsible for executing SQL requests, here divided into write nodes and read nodes. The former also provides the ability to read the freshest data. Stream task processing node: responsible for executing stream processing requests. Log(Reliability) Layer As MatrixOne's Single Source of Truth, data is considered as persistently stored in MatrixOne once it is written into the Log Layer. It is built upon our world-class expertise in the Replicated State Machine model to guarantee state-of-the-art high throughput, high availability, and strong consistency for our data. Following a fully modular and disaggregated design by itself, it is also the central component that helps to decouple the storage and compute layers. This in turn earns our architecture much higher elasticity when compared with traditional NewSQL architecture. Storage Layer The storage layer transforms the incoming data from the Log Layer into an efficient form for future processing and storage. This includes cache maintenance for fast accessing data that has already been written to S3. In MatrixOne, TAE (Transactional Analytic Engine) is the primary interface exposed by the Storage Layer, which can support both row and columnar storage together with transaction capabilities. Besides, the Storage Layer includes other internally used storage capabilities as well, e.g. the intermediate storage for streaming. Storage Provision Layer As an infrastructure agnostic DBMS, MatrixOne stores data in shared storage of S3 / HDFS, or local disks, on-premise servers, hybrid, and any cloud, or even smart devices. The Storage Provision Layer hides such complexity from upper layers by just presenting them with a unified interface for accessing such diversified storage resources. Learn More This page outlines the overall architecture design of MatrixOne. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne MySQL Compatibility What's New","title":"MatrixOne Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#matrixone-architecture","text":"","title":"MatrixOne Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#architecture","text":"MatrixOne is the first open-source distributed HSTAP database that supports OLTP, OLAP, and Streaming with a single auto-tuning storage engine. As a redefinition of the HTAP database, HSTAP aims to meet all the needs of Transactional Processing (TP) and Analytical Processing (AP) within a single database. Compared with the traditional HTAP, HSTAP emphasizes its built-in streaming capability used for connecting TP and AP tables. This provides users with an experience that a database can be used just like a Big Data platform, with which many users are already familiar thanks to the Big Data boom. With minimal integration efforts, MatrixOne frees users from the limitations of Big Data and provides one-stop coverage for all TP and AP scenarios for enterprises. MatrixOne is redesigned from scratch and introduces many innovations as well as many best practices in the other DBMS. It adopts a disaggregated storage and computes architecture, where data are stored on S3 object storage in the cloud to achieve low cost, and the compute nodes are stateless and can be started at will to achieve the ultimate elasticity. In the case of on-premises deployment, MatrixOne can utilize the user's HDFS or other supported distributed file system to save data. MatrixOne also comes with an S3-compatible built-in alternative to ensure the elasticity, high reliability, and high performance of its storage without relying on any external components. The architecture is as follows: The architecture of MatrixOne is divided into several layers:","title":"Architecture"},{"location":"MatrixOne/Overview/matrixone-architecture/#cluster-management-layer","text":"Being responsible for cluster management, it interacts with Kubernetes to obtain resources dynamically when in the cloud-native environment, while in the on-premises deployment, it gets hold of resources based on the configuration. Cluster status is continuously monitored with the role of each node allocated based on resource information. Maintenance works are carried out to ensure that all system components are up and running despite occasional node and network failures. It rebalances the loads on nodes when necessary as well. Major components in this layer are: Prophet Scheduler: take charge of load balancing and node keep-alive. Resource Manager: being responsible for physical resources provision.","title":"Cluster Management Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#serverless-layer","text":"Serverless Layer is a general term for a series of stateless nodes, which, as a whole, contains three categories: Background tasks: the most important one is called Offload Worker, which is responsible for offloading expensive compaction tasks and flushing data to S3 storage. SQL compute nodes: responsible for executing SQL requests, here divided into write nodes and read nodes. The former also provides the ability to read the freshest data. Stream task processing node: responsible for executing stream processing requests.","title":"Serverless Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#logreliability-layer","text":"As MatrixOne's Single Source of Truth, data is considered as persistently stored in MatrixOne once it is written into the Log Layer. It is built upon our world-class expertise in the Replicated State Machine model to guarantee state-of-the-art high throughput, high availability, and strong consistency for our data. Following a fully modular and disaggregated design by itself, it is also the central component that helps to decouple the storage and compute layers. This in turn earns our architecture much higher elasticity when compared with traditional NewSQL architecture.","title":"Log(Reliability) Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#storage-layer","text":"The storage layer transforms the incoming data from the Log Layer into an efficient form for future processing and storage. This includes cache maintenance for fast accessing data that has already been written to S3. In MatrixOne, TAE (Transactional Analytic Engine) is the primary interface exposed by the Storage Layer, which can support both row and columnar storage together with transaction capabilities. Besides, the Storage Layer includes other internally used storage capabilities as well, e.g. the intermediate storage for streaming.","title":"Storage Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#storage-provision-layer","text":"As an infrastructure agnostic DBMS, MatrixOne stores data in shared storage of S3 / HDFS, or local disks, on-premise servers, hybrid, and any cloud, or even smart devices. The Storage Provision Layer hides such complexity from upper layers by just presenting them with a unified interface for accessing such diversified storage resources.","title":"Storage Provision Layer"},{"location":"MatrixOne/Overview/matrixone-architecture/#learn-more","text":"This page outlines the overall architecture design of MatrixOne. For information on other options that are available when trying out MatrixOne, see the following: Install MatrixOne MySQL Compatibility What's New","title":"Learn More"},{"location":"MatrixOne/Overview/matrixone-feature-list/","text":"MatrixOne Features This document lists the features supported by MatrixOne for the latest version. Data definition language (DDL) Data definition Language(DDL) Supported\uff08Y\uff09/Not support\uff08N\uff09 CREATE DATABASE Y RENAME DATABASE N DROP DATABASE Y CREATE TABLE Y ALTER TABLE N MODIFY COLUMN N RENAME TABLE N PRIMARY KEY Y CREATE VIEW Y ALTER VIEW N CREATE OR REPLACE VIEW N DROP VIEW Y TRUNCATE N SEQUENCE N AUTO_INCREMENT Y Temporary tables Y SQL statements SQL Statement Supported\uff08Y\uff09/Not support\uff08N\uff09 SELECT Y INSERT Y UPDATE Y DELETE Y REPLACE N INSERT ON DUPLICATE KEY N LOAD DATA INFILE Y SELECT INTO OUTFILE Y INNER/LEFT/RIGHT/OUTER JOIN Y UNION, UNION ALL Y EXCEPT, INTERSECT Y GROUP BY, ORDER BY Y Common Table Expressions(CTE) Y START TRANSACTION, COMMIT, ROLLBACK Y EXPLAIN Y EXPLAIN ANALYZE Y Stored Procedure N Trigger N Event Scheduler N PARTITION BY Y LOCK TABLE Y Data types Data type categories Data types Supported\uff08Y\uff09/Not support\uff08N\uff09 Integer Numbers TINYINT Y SMALLINT Y INT Y BIGINT Y TINYINT UNSIGNED Y SMALLINT UNSIGNED Y INT UNSIGNED Y BIGINT UNSIGNED Y Real Numbers FLOAT Y DOUBLE Y String Types CHAR Y VARCHAR Y TINYTEXT Y TEXT Y MEDIUMTEXT Y LONGTEXT Y Binary Types TINYBLOB Y BLOB Y MEDIUMBLOB Y LONGBLOB Y Time and Date Types Date Y Time N DateTime Y Timestamp Y Boolean Type BOOL Y Decimal Type DECIMAL Y JSON Type JSON Y Indexing and constraints Indexing and constraints Supported\uff08Y\uff09/Not support\uff08N\uff09 PRIMARY KEY Y Composite PRIMARY KEY Y UNIQUE KEY Y Secondary KEY Y FOREIGN KEY N Enforced Constraints on Invalid Data Y ENUM and SET Constraints N NOT NULL Constraint Y Transactions Transactions Supported\uff08Y\uff09/Not support\uff08N\uff09 1PC Y Pessimistic transactions N Optimistic transactions Y Distributed Transaction Y Snapshot Isolation Y Functions and Operators Functions and Operators Categories Name Aggregate functions SUM() COUNT() MAX() MIN() AVG() STD() VARIANCE() BIT_OR() BIT_AND() BIT_XOR() Mathematical functions ABS() SIN() COS() TAN() COT() ACOS() ATAN() SINH() FLOOR() ROUND() CEIL() POWER() PI() LOG() LN() EXP() Datetime functions DATE_FORMAT() YEAR() MONTH() DATE() WEEKDAY() DAYOFYEAR() EXTRACT() DATE_ADD() DATE_SUB() TO_DATE() DAY() UNIX_TIMESTAMP() FROM_UNIXTIME() UTC_TIMESTAMP() NOW() CURRENT_TIMESTAMP() DATEDIFF() TIMEDIFF() String functions BIN() CONCAT() CONCAT_WS() FIND_IN_SET() OCT() EMPTY() LENGTH() CHAR_LENGTH() LEFT() LTRIM() RTRIM() LPAD() RPAD() STARTSWITH() ENDSWITH() SUBSTRING() SPACE() TRIM REVERSE() UUID() Other functions COALESCE() ANY_VALUE() CAST() Operators = <> > >= < <= LIKE + - * / Div % AND OR XOR NOT CASE...WHEN IF IS/IS NOT IS/IS NOT NULL","title":"MatrixOne Feature List"},{"location":"MatrixOne/Overview/matrixone-feature-list/#matrixone-features","text":"This document lists the features supported by MatrixOne for the latest version.","title":"MatrixOne Features"},{"location":"MatrixOne/Overview/matrixone-feature-list/#data-definition-language-ddl","text":"Data definition Language(DDL) Supported\uff08Y\uff09/Not support\uff08N\uff09 CREATE DATABASE Y RENAME DATABASE N DROP DATABASE Y CREATE TABLE Y ALTER TABLE N MODIFY COLUMN N RENAME TABLE N PRIMARY KEY Y CREATE VIEW Y ALTER VIEW N CREATE OR REPLACE VIEW N DROP VIEW Y TRUNCATE N SEQUENCE N AUTO_INCREMENT Y Temporary tables Y","title":"Data definition language (DDL)"},{"location":"MatrixOne/Overview/matrixone-feature-list/#sql-statements","text":"SQL Statement Supported\uff08Y\uff09/Not support\uff08N\uff09 SELECT Y INSERT Y UPDATE Y DELETE Y REPLACE N INSERT ON DUPLICATE KEY N LOAD DATA INFILE Y SELECT INTO OUTFILE Y INNER/LEFT/RIGHT/OUTER JOIN Y UNION, UNION ALL Y EXCEPT, INTERSECT Y GROUP BY, ORDER BY Y Common Table Expressions(CTE) Y START TRANSACTION, COMMIT, ROLLBACK Y EXPLAIN Y EXPLAIN ANALYZE Y Stored Procedure N Trigger N Event Scheduler N PARTITION BY Y LOCK TABLE Y","title":"SQL statements"},{"location":"MatrixOne/Overview/matrixone-feature-list/#data-types","text":"Data type categories Data types Supported\uff08Y\uff09/Not support\uff08N\uff09 Integer Numbers TINYINT Y SMALLINT Y INT Y BIGINT Y TINYINT UNSIGNED Y SMALLINT UNSIGNED Y INT UNSIGNED Y BIGINT UNSIGNED Y Real Numbers FLOAT Y DOUBLE Y String Types CHAR Y VARCHAR Y TINYTEXT Y TEXT Y MEDIUMTEXT Y LONGTEXT Y Binary Types TINYBLOB Y BLOB Y MEDIUMBLOB Y LONGBLOB Y Time and Date Types Date Y Time N DateTime Y Timestamp Y Boolean Type BOOL Y Decimal Type DECIMAL Y JSON Type JSON Y","title":"Data types"},{"location":"MatrixOne/Overview/matrixone-feature-list/#indexing-and-constraints","text":"Indexing and constraints Supported\uff08Y\uff09/Not support\uff08N\uff09 PRIMARY KEY Y Composite PRIMARY KEY Y UNIQUE KEY Y Secondary KEY Y FOREIGN KEY N Enforced Constraints on Invalid Data Y ENUM and SET Constraints N NOT NULL Constraint Y","title":"Indexing and constraints"},{"location":"MatrixOne/Overview/matrixone-feature-list/#transactions","text":"Transactions Supported\uff08Y\uff09/Not support\uff08N\uff09 1PC Y Pessimistic transactions N Optimistic transactions Y Distributed Transaction Y Snapshot Isolation Y","title":"Transactions"},{"location":"MatrixOne/Overview/matrixone-feature-list/#functions-and-operators","text":"Functions and Operators Categories Name Aggregate functions SUM() COUNT() MAX() MIN() AVG() STD() VARIANCE() BIT_OR() BIT_AND() BIT_XOR() Mathematical functions ABS() SIN() COS() TAN() COT() ACOS() ATAN() SINH() FLOOR() ROUND() CEIL() POWER() PI() LOG() LN() EXP() Datetime functions DATE_FORMAT() YEAR() MONTH() DATE() WEEKDAY() DAYOFYEAR() EXTRACT() DATE_ADD() DATE_SUB() TO_DATE() DAY() UNIX_TIMESTAMP() FROM_UNIXTIME() UTC_TIMESTAMP() NOW() CURRENT_TIMESTAMP() DATEDIFF() TIMEDIFF() String functions BIN() CONCAT() CONCAT_WS() FIND_IN_SET() OCT() EMPTY() LENGTH() CHAR_LENGTH() LEFT() LTRIM() RTRIM() LPAD() RPAD() STARTSWITH() ENDSWITH() SUBSTRING() SPACE() TRIM REVERSE() UUID() Other functions COALESCE() ANY_VALUE() CAST() Operators = <> > >= < <= LIKE + - * / Div % AND OR XOR NOT CASE...WHEN IF IS/IS NOT IS/IS NOT NULL","title":"Functions and Operators"},{"location":"MatrixOne/Overview/matrixone-introduction/","text":"MatrixOne Introduction MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine working across multiple datacenters, clouds, edges, and other heterogenous infrastructures. Key Features Hyperconverged Engine Monolithic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Built-in Streaming Engine With the built-in streaming engine, MatrixOne supports in-database streaming processing by groundbreaking incremental materialized view maintenance. Cloud & Edge Native Real Infrastructure Agnostic MatrixOne supports seamless workload migration and bursting among different locations and infrastructures. Multi-site Active/Active MatrixOne provides industry-leading latency control with optimized consistency protocol. Extreme Performance High Performance Accelerated queries supported by patented vectorized execution as well as optimal computation. Strong Consistency MatrixOne introduces a global, high-performance distributed transaction protocol across storage engines. High Scalability Seamless and non-disruptive scaling by disaggregated storage and compute. User Values Simplify Database Management and Maintenance To solve the problem of high and unpredictable costs of the database selection process, management & maintenance due to database overabundance, MatrixOne's all-in-one architecture will significantly simplify database management and maintenance. A single database can serve multiple data applications. Reduce Data Fragmentation and Inconsistency Data flow and copy between different databases make data sync and consistency increasingly difficult. The unified and incrementally materialized view of MatrixOne allows the downstream to support real-time upstream updates, and achieve end-to-end data processing without redundant ETL process. Decoupling Data Architecture From Infrastructure Currently the architecture design across different infrastructures is complicated, causing new data silos between cloud and edge, cloud and on-premise. MatrixOne is designed with a unified architecture to support simplified data management and operations across different types of infrastructures. Extremely Fast Complex Query Performance Poor business agility is a result of slow complex queries and redundant intermediate tables in current data warehousing solutions. MatrixOne supports blazing-fast experience even for star and snowflake schema queries, improving business agility by real-time analytics. An Solid OLTP-like OLAP Experience Current data warehousing solutions have the following problems such as high latency and absence of immediate visibility for data updates. MatrixOne brings OLTP (Online Transactional Processing) level consistency and high availability to CRUD operations in OLAP (Online Analytical Processing). Seamless and Non-disruptive Scaling It is difficult to balance performance and scalability to achieve an optimum price-performance ratio in current data warehousing solutions. MatrixOne's disaggregated storage and compute architecture makes it fully automated and efficient to scale in/out and up/down without disrupting applications. Learn More This page outlines the overall introduction of MatrixOne. For information on other options that are available when you what to know more about MatrixOne product design, see the following: MatrixOne Architecture","title":"MatrixOne Introduction"},{"location":"MatrixOne/Overview/matrixone-introduction/#matrixone-introduction","text":"MatrixOne is a future-oriented hyperconverged cloud & edge native DBMS that supports transactional, analytical, and streaming workload with a simplified and distributed database engine working across multiple datacenters, clouds, edges, and other heterogenous infrastructures.","title":"MatrixOne Introduction"},{"location":"MatrixOne/Overview/matrixone-introduction/#key-features","text":"","title":"Key Features"},{"location":"MatrixOne/Overview/matrixone-introduction/#hyperconverged-engine","text":"Monolithic Engine A monolithic database engine is designed to support hybrid workloads: transactional, analytical, streaming, time-series, machine learning, etc. Built-in Streaming Engine With the built-in streaming engine, MatrixOne supports in-database streaming processing by groundbreaking incremental materialized view maintenance.","title":"Hyperconverged Engine"},{"location":"MatrixOne/Overview/matrixone-introduction/#cloud-edge-native","text":"Real Infrastructure Agnostic MatrixOne supports seamless workload migration and bursting among different locations and infrastructures. Multi-site Active/Active MatrixOne provides industry-leading latency control with optimized consistency protocol.","title":"Cloud &amp; Edge Native"},{"location":"MatrixOne/Overview/matrixone-introduction/#extreme-performance","text":"High Performance Accelerated queries supported by patented vectorized execution as well as optimal computation. Strong Consistency MatrixOne introduces a global, high-performance distributed transaction protocol across storage engines. High Scalability Seamless and non-disruptive scaling by disaggregated storage and compute.","title":"Extreme Performance"},{"location":"MatrixOne/Overview/matrixone-introduction/#user-values","text":"Simplify Database Management and Maintenance To solve the problem of high and unpredictable costs of the database selection process, management & maintenance due to database overabundance, MatrixOne's all-in-one architecture will significantly simplify database management and maintenance. A single database can serve multiple data applications. Reduce Data Fragmentation and Inconsistency Data flow and copy between different databases make data sync and consistency increasingly difficult. The unified and incrementally materialized view of MatrixOne allows the downstream to support real-time upstream updates, and achieve end-to-end data processing without redundant ETL process. Decoupling Data Architecture From Infrastructure Currently the architecture design across different infrastructures is complicated, causing new data silos between cloud and edge, cloud and on-premise. MatrixOne is designed with a unified architecture to support simplified data management and operations across different types of infrastructures. Extremely Fast Complex Query Performance Poor business agility is a result of slow complex queries and redundant intermediate tables in current data warehousing solutions. MatrixOne supports blazing-fast experience even for star and snowflake schema queries, improving business agility by real-time analytics. An Solid OLTP-like OLAP Experience Current data warehousing solutions have the following problems such as high latency and absence of immediate visibility for data updates. MatrixOne brings OLTP (Online Transactional Processing) level consistency and high availability to CRUD operations in OLAP (Online Analytical Processing). Seamless and Non-disruptive Scaling It is difficult to balance performance and scalability to achieve an optimum price-performance ratio in current data warehousing solutions. MatrixOne's disaggregated storage and compute architecture makes it fully automated and efficient to scale in/out and up/down without disrupting applications.","title":"User Values"},{"location":"MatrixOne/Overview/matrixone-introduction/#learn-more","text":"This page outlines the overall introduction of MatrixOne. For information on other options that are available when you what to know more about MatrixOne product design, see the following: MatrixOne Architecture","title":"Learn More"},{"location":"MatrixOne/Overview/mysql-compatibility/","text":"MySQL Compatibility MatrixOne SQL syntax conforms with MySQL 8.0.23 version. SQL Type SQL Syntax Compability with MySQL8.0.23 DDL CREATE DATABASE A database with Chinese name is not supported. Names with Latins support limitedly. CHARSET , COLLATE , ENCRYPTION can be used but don't work. CREATE TABLE Temporary tables are not supported. Partition tables are not supported. Create table .. as clause is not supported now. All column level constraints are not supported now. Composite Primary Key is not supported yet. KEY(column) is not supported yet. AUTO_INCREMENT is not supported yet. CREATE other projects CREATE/DROP INDEX is not supported. ALTER Not supported now. DROP DATABASE Same as MySQL. DROP TABLE Same as MySQL. DML INSERT LOW_PRIORITY, DELAYED, HIGH_PRIORITY are not supported now. INSERT INTO VALUES with function or expression is not supported now. Batch Insert can be supported up to 160,000 rows. ON DUPLICATE KEY UPDATE is not supported now. DELAYED is not supported now. Names with Latins support limitedly. The current SQL mode is just like only_full_group_by mode in MySQL. SELECT Table alias is not supported in GROUP BY. Distinct is limitedly support. SELECT...FOR UPDATE clause is not supported now. INTO OUTFILE is limitedly support. LOAD DATA Only csv files can be loaded currently. The enclosed character should be \"\". FIELDS TERMINATED BY should be \",\" or \" LINES TERMINATED BY should be \"\\n\". SET is not supported now. Local key word is not supported now. Relative path is limited supported now. Only based on mo-server file can be supported. JOIN Same as MySQL. SUBQUERY Non-scalar subquery is not supported now. Database Administration Statements SHOW Only show tables and show databases are supported. Show CREATE TABLE and CREATE DATABASE are supported. Other statements Not supported now. Utility Statements USE Use database is the same as MySQL. Explain The result of explain a SQL is different with MySQL. Explain Analyze is not supported yet. Other statements Not supported now. Data Types Boolean Different from MySQL's boolean which is the same as int , MatrixOne's boolean is a new type, its value can only be true or false. Int/Bigint/Smallint/Tinyint Same as MySQL. char/varchar Same as MySQL. Float/double The precision is a bit different with MySQL. DECIMAL The max precision is 38 digits. Date Only 'YYYY-MM-DD' and 'YYYYMMDD' formats are supported. Datetime Only 'YYYY-MM-DD HH:MM:SS' and 'YYYYMMDD HH:MM:SS' formats are supported. Timestamp Same as MySQL, but MatrixOne doesn't support timezone yet, timestamp value doesn't shift by timezone change. Other types Not supported now. Operators \"+\",\"-\",\"*\",\"/\" Same as MySQL. DIV, %, MOD Same as MySQL. LIKE Same as MySQL IN Supported for constant lists NOT, AND, &&,OR, \"||\" Same as MySQL. XOR Not supported now. CAST Supported with different conversion rules. Functions MAX, MIN, COUNT, AVG, SUM Same as MySQL. Distinct is not supported yet. any_value Any_value is an aggregate function in MatrixOne. Cannot be used in group by or filter condition.","title":"MySQL Compatibility"},{"location":"MatrixOne/Overview/mysql-compatibility/#mysql-compatibility","text":"MatrixOne SQL syntax conforms with MySQL 8.0.23 version. SQL Type SQL Syntax Compability with MySQL8.0.23 DDL CREATE DATABASE A database with Chinese name is not supported. Names with Latins support limitedly. CHARSET , COLLATE , ENCRYPTION can be used but don't work. CREATE TABLE Temporary tables are not supported. Partition tables are not supported. Create table .. as clause is not supported now. All column level constraints are not supported now. Composite Primary Key is not supported yet. KEY(column) is not supported yet. AUTO_INCREMENT is not supported yet. CREATE other projects CREATE/DROP INDEX is not supported. ALTER Not supported now. DROP DATABASE Same as MySQL. DROP TABLE Same as MySQL. DML INSERT LOW_PRIORITY, DELAYED, HIGH_PRIORITY are not supported now. INSERT INTO VALUES with function or expression is not supported now. Batch Insert can be supported up to 160,000 rows. ON DUPLICATE KEY UPDATE is not supported now. DELAYED is not supported now. Names with Latins support limitedly. The current SQL mode is just like only_full_group_by mode in MySQL. SELECT Table alias is not supported in GROUP BY. Distinct is limitedly support. SELECT...FOR UPDATE clause is not supported now. INTO OUTFILE is limitedly support. LOAD DATA Only csv files can be loaded currently. The enclosed character should be \"\". FIELDS TERMINATED BY should be \",\" or \" LINES TERMINATED BY should be \"\\n\". SET is not supported now. Local key word is not supported now. Relative path is limited supported now. Only based on mo-server file can be supported. JOIN Same as MySQL. SUBQUERY Non-scalar subquery is not supported now. Database Administration Statements SHOW Only show tables and show databases are supported. Show CREATE TABLE and CREATE DATABASE are supported. Other statements Not supported now. Utility Statements USE Use database is the same as MySQL. Explain The result of explain a SQL is different with MySQL. Explain Analyze is not supported yet. Other statements Not supported now. Data Types Boolean Different from MySQL's boolean which is the same as int , MatrixOne's boolean is a new type, its value can only be true or false. Int/Bigint/Smallint/Tinyint Same as MySQL. char/varchar Same as MySQL. Float/double The precision is a bit different with MySQL. DECIMAL The max precision is 38 digits. Date Only 'YYYY-MM-DD' and 'YYYYMMDD' formats are supported. Datetime Only 'YYYY-MM-DD HH:MM:SS' and 'YYYYMMDD HH:MM:SS' formats are supported. Timestamp Same as MySQL, but MatrixOne doesn't support timezone yet, timestamp value doesn't shift by timezone change. Other types Not supported now. Operators \"+\",\"-\",\"*\",\"/\" Same as MySQL. DIV, %, MOD Same as MySQL. LIKE Same as MySQL IN Supported for constant lists NOT, AND, &&,OR, \"||\" Same as MySQL. XOR Not supported now. CAST Supported with different conversion rules. Functions MAX, MIN, COUNT, AVG, SUM Same as MySQL. Distinct is not supported yet. any_value Any_value is an aggregate function in MatrixOne. Cannot be used in group by or filter condition.","title":"MySQL Compatibility"},{"location":"MatrixOne/Overview/whats-new/","text":"What's New The lastest version of MatrixOne is 0.5.1, releases on 19th August, 2022. See the following: v0.5.1 Release Notes","title":"What's New"},{"location":"MatrixOne/Overview/whats-new/#whats-new","text":"The lastest version of MatrixOne is 0.5.1, releases on 19th August, 2022. See the following: v0.5.1 Release Notes","title":"What's New"},{"location":"MatrixOne/Reference/System-tables/","text":"MatrixOne Catalog MatrixOne catalog is a component where MatrixOne stores system information. We can access the system information by mo_catalog database. The mo_catalog database is created by MatrixOne at initialization. In 0.5.1, the mo_catalog is not fully implemented, users can check basic information about the their database and tables, but writing values into mo_catalog by users is not supported yet. There are three tables in the mo_catalog database: mo_database table This table contains the database information. table structure: Attributes Type Primary key Description datname varchar(256) Primary key database name dat_catalog_name varchar(256) catalog name dat_createsql varchar(4096) create sql table initial rows: At initialization, mo_database have some default rows in place. datname dat_catalog_name dat_createsql mo_catalog def hardcode information_schema def create database if not exists information_schema system_metrics def mo_tables table This table contains the information about the table, index, view etc. table structure: Attributes Type Primary key Description relname varchar(256) PK Name of the table, index, view, etc. reldatabase varchar(256) PK,FK The database that contains this relation. reference mo_database.datname relpersistence char(1) p = permanent table, t = temporary table relkind char(1) r = ordinary table, i = index, S = sequence, v = view, m = materialized view rel_comment varchar(1024) comment rel_createsql varchar(4096) create sql table initial rows: At initialization, mo_tables have some default rows in place. relname reldatabase repersistence relkind rel_createsql rel_comment mo_database mo_catalog 'p' 'r' tae hardcode databases mo_tables mo_catalog 'p' 'r' tae hardcode tables mo_columns mo_catalog 'p' 'r' tae hardcode columns mo_global_variables mo_catalog 'p' 'r' create sql system variables mo_user mo_catalog 'p' 'r' create sql user schemata information_schema 'p' 'v' create sql schemas tables information_schema 'p' 'v' create sql tables columns information_schema 'p' 'v' create sql columns key_column_usage information_schema 'p' 'v' create sql columns related to unique, primary key, or foreign key views information_schema 'p' 'v' create sql views mo_columns table This table contains the information about the table attributes. table structure: Attributes Type Primary key Description att_database varchar(256) PK database att_relname varchar(256) PK,UK The table this column belongs to.(references mo_tables.relname) attname varchar(256) PK The column name atttyp int The data type of this column (zero for a dropped column). attnum int UK The number of the column. Ordinary columns are numbered from 1 up. att_length int bytes count for the type. attnotnull tinyint(1) This represents a not-null constraint. atthasdef tinyint(1) This column has a default expression or generation expression. att_default varchar(1024) default expression attisdropped tinyint(1) This column has been dropped and is no longer valid. A dropped column is still physically present in the table, but is ignored by the parser and so cannot be accessed via SQL. att_constraint_type char(1) p = primary key constraint, n=no constraint att_is_unsigned tinyint(1) unsigned or not att_is_auto_increment tinyint auto increment or not att_comment varchar(1024) comment att_is_hidden tinyint(1) hidden or not table initial rows: att_database att_relname attname atttyp attnum attnotnull atthasdef att_default attisdropped att_constraint_type att_is_unsigned att_is_auto_increment att_comment att_is_hidden mo_catalog mo_database datname varchar 0 1 0 '' 0 'p' 0 0 'database name' 0 mo_catalog mo_database dat_catalog_name varchar 1 1 0 '' 0 'p' 0 0 'catalog' 0 mo_catalog mo_database dat_createsql varchar 2 1 mo_catalog mo_tables relname varchar 0 1 'p' mo_catalog mo_tables reldatabase varchar 1 1 'p' mo_catalog mo_tables relpersistence char 2 1 mo_catalog mo_tables relkind char 3 1 mo_catalog mo_tables rel_createsql varchar 4 0 mo_catalog mo_tables rel_comment varchar 5 0 mo_catalog mo_columns att_database varchar 0 1 mo_catalog mo_columns att_relname varchar 1 1 mo_catalog mo_columns attname varchar 2 1 mo_catalog mo_columns atttyp int 3 1 mo_catalog mo_columns attnum int 4 1 mo_catalog mo_columns attnotnull tinyint 5 1 mo_catalog mo_columns atthasdef tinyint 6 1 mo_catalog mo_columns att_default varchar 7 0 mo_catalog mo_columns attisdropped tinyint 8 1 mo_catalog mo_columns att_constraint_type char 9 1 mo_catalog mo_columns att_is_unsigned tinyint 10 1 mo_catalog mo_columns att_is_auto_increment tinyint 11 1 mo_catalog mo_columns att_comment varchar 12 0 mo_catalog mo_columns att_is_hidden tinyint 13 1 ... mo_global_variables table This table contains the information about the system variables. table structure: Attributes Type Primary key Description gv_variable_name varchar(256) PK variable name gv_variable_value varchar(1024) variable value table initial rows: gv_variable_name gv_variable_value gv_variable_name gv_variable_value max_allowed_packet 67108864 version_comment MatrixOne port 6001 host 0.0.0.0 storePath ./store batchSizeInLoadData 40000 ... mo_user table This table contains the information of user accounts. table structure: Attributes Type Primary key Description user_host varchar(256) PK user host user_name varchar(256) PK user name Select_priv char 'N','Y' Insert_priv char 'N','Y' Update_priv char 'N','Y' Delete_priv char 'N','Y' Create_priv char 'N','Y' Drop_priv char 'N','Y' Reload_priv char 'N','Y' Shutdown_priv char 'N','Y' Process_priv char 'N','Y' File_priv char 'N','Y' Grant_priv char 'N','Y' References_priv char 'N','Y' Index_priv char 'N','Y' Alter_priv char 'N','Y' Show_db_priv char 'N','Y' Super_priv char 'N','Y' Create_tmp_table_priv char 'N','Y' Lock_tables_priv char 'N','Y' Execute_priv char 'N','Y' Repl_slave_priv char 'N','Y' Repl_client_priv char 'N','Y' Create_view_priv char 'N','Y' Show_view_priv char 'N','Y' Create_routine_priv char 'N','Y' Alter_routine_priv char 'N','Y' Create_user_priv char 'N','Y' Event_priv char 'N','Y' Trigger_priv char 'N','Y' Create_tablespace_priv char 'N','Y' max_questions int unsigned max_updates int unsigned max_connections int unsigned max_user_connections int unsigned authentication_string varchar(4096) password account_locked char 'N','Y' Create_role_priv char 'N','Y' Drop_role_priv char 'N','Y' table initial rows: user_host user_name authentication_string localhost root '' localhost dump 111 ...","title":"MatrixOne Catalog"},{"location":"MatrixOne/Reference/System-tables/#matrixone-catalog","text":"MatrixOne catalog is a component where MatrixOne stores system information. We can access the system information by mo_catalog database. The mo_catalog database is created by MatrixOne at initialization. In 0.5.1, the mo_catalog is not fully implemented, users can check basic information about the their database and tables, but writing values into mo_catalog by users is not supported yet. There are three tables in the mo_catalog database:","title":"MatrixOne Catalog"},{"location":"MatrixOne/Reference/System-tables/#mo_database-table","text":"This table contains the database information. table structure: Attributes Type Primary key Description datname varchar(256) Primary key database name dat_catalog_name varchar(256) catalog name dat_createsql varchar(4096) create sql table initial rows: At initialization, mo_database have some default rows in place. datname dat_catalog_name dat_createsql mo_catalog def hardcode information_schema def create database if not exists information_schema system_metrics def","title":"mo_database table"},{"location":"MatrixOne/Reference/System-tables/#mo_tables-table","text":"This table contains the information about the table, index, view etc. table structure: Attributes Type Primary key Description relname varchar(256) PK Name of the table, index, view, etc. reldatabase varchar(256) PK,FK The database that contains this relation. reference mo_database.datname relpersistence char(1) p = permanent table, t = temporary table relkind char(1) r = ordinary table, i = index, S = sequence, v = view, m = materialized view rel_comment varchar(1024) comment rel_createsql varchar(4096) create sql table initial rows: At initialization, mo_tables have some default rows in place. relname reldatabase repersistence relkind rel_createsql rel_comment mo_database mo_catalog 'p' 'r' tae hardcode databases mo_tables mo_catalog 'p' 'r' tae hardcode tables mo_columns mo_catalog 'p' 'r' tae hardcode columns mo_global_variables mo_catalog 'p' 'r' create sql system variables mo_user mo_catalog 'p' 'r' create sql user schemata information_schema 'p' 'v' create sql schemas tables information_schema 'p' 'v' create sql tables columns information_schema 'p' 'v' create sql columns key_column_usage information_schema 'p' 'v' create sql columns related to unique, primary key, or foreign key views information_schema 'p' 'v' create sql views","title":"mo_tables table"},{"location":"MatrixOne/Reference/System-tables/#mo_columns-table","text":"This table contains the information about the table attributes. table structure: Attributes Type Primary key Description att_database varchar(256) PK database att_relname varchar(256) PK,UK The table this column belongs to.(references mo_tables.relname) attname varchar(256) PK The column name atttyp int The data type of this column (zero for a dropped column). attnum int UK The number of the column. Ordinary columns are numbered from 1 up. att_length int bytes count for the type. attnotnull tinyint(1) This represents a not-null constraint. atthasdef tinyint(1) This column has a default expression or generation expression. att_default varchar(1024) default expression attisdropped tinyint(1) This column has been dropped and is no longer valid. A dropped column is still physically present in the table, but is ignored by the parser and so cannot be accessed via SQL. att_constraint_type char(1) p = primary key constraint, n=no constraint att_is_unsigned tinyint(1) unsigned or not att_is_auto_increment tinyint auto increment or not att_comment varchar(1024) comment att_is_hidden tinyint(1) hidden or not table initial rows: att_database att_relname attname atttyp attnum attnotnull atthasdef att_default attisdropped att_constraint_type att_is_unsigned att_is_auto_increment att_comment att_is_hidden mo_catalog mo_database datname varchar 0 1 0 '' 0 'p' 0 0 'database name' 0 mo_catalog mo_database dat_catalog_name varchar 1 1 0 '' 0 'p' 0 0 'catalog' 0 mo_catalog mo_database dat_createsql varchar 2 1 mo_catalog mo_tables relname varchar 0 1 'p' mo_catalog mo_tables reldatabase varchar 1 1 'p' mo_catalog mo_tables relpersistence char 2 1 mo_catalog mo_tables relkind char 3 1 mo_catalog mo_tables rel_createsql varchar 4 0 mo_catalog mo_tables rel_comment varchar 5 0 mo_catalog mo_columns att_database varchar 0 1 mo_catalog mo_columns att_relname varchar 1 1 mo_catalog mo_columns attname varchar 2 1 mo_catalog mo_columns atttyp int 3 1 mo_catalog mo_columns attnum int 4 1 mo_catalog mo_columns attnotnull tinyint 5 1 mo_catalog mo_columns atthasdef tinyint 6 1 mo_catalog mo_columns att_default varchar 7 0 mo_catalog mo_columns attisdropped tinyint 8 1 mo_catalog mo_columns att_constraint_type char 9 1 mo_catalog mo_columns att_is_unsigned tinyint 10 1 mo_catalog mo_columns att_is_auto_increment tinyint 11 1 mo_catalog mo_columns att_comment varchar 12 0 mo_catalog mo_columns att_is_hidden tinyint 13 1 ...","title":"mo_columns table"},{"location":"MatrixOne/Reference/System-tables/#mo_global_variables-table","text":"This table contains the information about the system variables. table structure: Attributes Type Primary key Description gv_variable_name varchar(256) PK variable name gv_variable_value varchar(1024) variable value table initial rows: gv_variable_name gv_variable_value gv_variable_name gv_variable_value max_allowed_packet 67108864 version_comment MatrixOne port 6001 host 0.0.0.0 storePath ./store batchSizeInLoadData 40000 ...","title":"mo_global_variables table"},{"location":"MatrixOne/Reference/System-tables/#mo_user-table","text":"This table contains the information of user accounts. table structure: Attributes Type Primary key Description user_host varchar(256) PK user host user_name varchar(256) PK user name Select_priv char 'N','Y' Insert_priv char 'N','Y' Update_priv char 'N','Y' Delete_priv char 'N','Y' Create_priv char 'N','Y' Drop_priv char 'N','Y' Reload_priv char 'N','Y' Shutdown_priv char 'N','Y' Process_priv char 'N','Y' File_priv char 'N','Y' Grant_priv char 'N','Y' References_priv char 'N','Y' Index_priv char 'N','Y' Alter_priv char 'N','Y' Show_db_priv char 'N','Y' Super_priv char 'N','Y' Create_tmp_table_priv char 'N','Y' Lock_tables_priv char 'N','Y' Execute_priv char 'N','Y' Repl_slave_priv char 'N','Y' Repl_client_priv char 'N','Y' Create_view_priv char 'N','Y' Show_view_priv char 'N','Y' Create_routine_priv char 'N','Y' Alter_routine_priv char 'N','Y' Create_user_priv char 'N','Y' Event_priv char 'N','Y' Trigger_priv char 'N','Y' Create_tablespace_priv char 'N','Y' max_questions int unsigned max_updates int unsigned max_connections int unsigned max_user_connections int unsigned authentication_string varchar(4096) password account_locked char 'N','Y' Create_role_priv char 'N','Y' Drop_role_priv char 'N','Y' table initial rows: user_host user_name authentication_string localhost root '' localhost dump 111 ...","title":"mo_user table"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/","text":"CURRENT_TIMESTAMP() Description CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW() . Returns the current date and time as a value in YYYY-MM-DD hh:mm:ss or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone. Syntax > CURRENT_TIMESTAMP([fsp]) Arguments Arguments Description fsp Optional. If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. Examples > SELECT CURRENT_TIMESTAMP (); + ----------------------------+ | current_timestamp () | + ----------------------------+ | 2022 - 09 - 21 11 : 46 : 44 . 153777 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT NOW (); + ----------------------------+ | now () | + ----------------------------+ | 2022 - 09 - 21 12 : 56 : 36 . 915961 | + ----------------------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int primary key , b int , c int , d timestamp default current_timestamp ); > insert into t1 select 1 , 1 , 1 , now (); > insert into t1 select 2 , 0 , 0 , null ; > select a , b , c , year ( d ) from t1 ; + ------+------+------+---------+ | a | b | c | year ( d ) | + ------+------+------+---------+ | 1 | 1 | 1 | 2022 | | 2 | 0 | 0 | NULL | + ------+------+------+---------+ 2 rows in set ( 0 . 01 sec ) Constraints Operator + or - is not supported for using with CURRENT_TIMESTAMP now.","title":"CURRENT_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#current_timestamp","text":"","title":"CURRENT_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#description","text":"CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW() . Returns the current date and time as a value in YYYY-MM-DD hh:mm:ss or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context. The value is expressed in the session time zone.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#syntax","text":"> CURRENT_TIMESTAMP([fsp])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#arguments","text":"Arguments Description fsp Optional. If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#examples","text":"> SELECT CURRENT_TIMESTAMP (); + ----------------------------+ | current_timestamp () | + ----------------------------+ | 2022 - 09 - 21 11 : 46 : 44 . 153777 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT NOW (); + ----------------------------+ | now () | + ----------------------------+ | 2022 - 09 - 21 12 : 56 : 36 . 915961 | + ----------------------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int primary key , b int , c int , d timestamp default current_timestamp ); > insert into t1 select 1 , 1 , 1 , now (); > insert into t1 select 2 , 0 , 0 , null ; > select a , b , c , year ( d ) from t1 ; + ------+------+------+---------+ | a | b | c | year ( d ) | + ------+------+------+---------+ | 1 | 1 | 1 | 2022 | | 2 | 0 | 0 | NULL | + ------+------+------+---------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-current-timestamp/#constraints","text":"Operator + or - is not supported for using with CURRENT_TIMESTAMP now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/","text":"DATE_FORMAT() Description Formats the date value according to the format string. If either argument is NULL, the function returns NULL. DATE_FORMAT() returns a string with a character set and collation given by character_set_connection and collation_connection so that it can return month and weekday names containing non-ASCII characters. Syntax > DATE_FORMAT(date,format) Arguments Arguments Description date Required. The date to be formatted. format Required. The format to use. Can be one or a combination of the following values as the below table: Format Specifier Info The specifiers shown in the following table may be used in the format string. The % character is required before format specifier characters. The specifiers apply to other functions as well as UNIX_TIMESTAMP() . Specifier Description %a Abbreviated weekday name (Sun..Sat) %b Abbreviated month name (Jan..Dec) %c Month, numeric (0..12) %D Day of the month with English suffix (0th, 1st, 2nd, 3rd, \u2026) %d Day of the month, numeric (00..31) %e Day of the month, numeric (0..31) %f Microseconds (000000..999999) %H Hour (00..23) %h Hour (01..12) %I Hour (01..12) %i Minutes, numeric (00..59) %j Day of year (001..366) %k Hour (0..23) %l Hour (1..12) %M Month name (January..December) %m Month, numeric (00..12) %p AM or PM %r Time, 12-hour (hh:mm:ss followed by AM or PM) %S Seconds (00..59) %s Seconds (00..59) %T Time, 24-hour (hh:mm:ss) %U Week (00..53), where Sunday is the first day of the week; WEEK() mode 0 %u Week (00..53), where Monday is the first day of the week; WEEK() mode 1 %V Week (01..53), where Sunday is the first day of the week; WEEK() mode 2; used with %X %v Week (01..53), where Monday is the first day of the week; WEEK() mode 3; used with %x %W Weekday name (Sunday..Saturday) %w Day of the week (0=Sunday..6=Saturday) %X Year for the week where Sunday is the first day of the week, numeric, four digits; used with %V %x Year for the week, where Monday is the first day of the week, numeric, four digits; used with %v %Y Year, numeric, four digits %y Year, numeric (two digits) %% A literal % character %x x, for any \u201cx\u201d not listed above Examples > SELECT DATE_FORMAT ( '2009-10-04 22:23:00' , '%W %M %Y' ); + --------------------------------------------+ | date_format ( 2009 - 10 - 04 22 : 23 : 00 , % W % M % Y ) | + --------------------------------------------+ | Sunday October 2009 | + --------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '2007-10-04 22:23:00' , '%H:%i:%s' ); + --------------------------------------------+ | date_format ( 2007 - 10 - 04 22 : 23 : 00 , % H : % i : % s ) | + --------------------------------------------+ | 22 : 23 : 00 | + --------------------------------------------+ 1 row in set ( 0 . 02 sec ) > SELECT Date_format ( '1900-10-04 22:23:00' , '%D %y %a %d %m %b %j' ); + --------------------------------------------------------+ | date_format ( 1900 - 10 - 04 22 : 23 : 00 , % D % y % a % d % m % b % j ) | + --------------------------------------------------------+ | 4 th 00 Thu 04 10 Oct 277 | + --------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '1997-10-04 22:23:00' , '%H %k %I %r %T %S %w' ); + --------------------------------------------------------+ | date_format ( 1997 - 10 - 04 22 : 23 : 00 , % H % k % I % r % T % S % w ) | + --------------------------------------------------------+ | 22 22 10 10 : 23 : 00 PM 22 : 23 : 00 00 6 | + --------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '1999-01-01' , '%X %V' ); + --------------------------------+ | date_format ( 1999 - 01 - 01 , % X % V ) | + --------------------------------+ | 1998 52 | + --------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t2 ( f1 DATETIME ); > INSERT INTO t2 ( f1 ) VALUES ( '2005-01-01' ); > INSERT INTO t2 ( f1 ) VALUES ( '2005-02-01' ); > SELECT Date_format ( f1 , \"%m\" ) AS d1 , Date_format ( f1 , \"%m\" ) AS d2 FROM t2 ORDER BY Date_format ( f1 , \"%m\" ); + ------+----------+ | d1 | d2 | + ------+----------+ | 02 | February | | 01 | January | + ------+----------+ > CREATE TABLE t5 ( a int , b date ); > INSERT INTO t5 VALUES ( 1 , '2000-02-05' ), ( 2 , '2000-10-08' ), ( 3 , '2005-01-03' ), ( 4 , '2007-09-01' ), ( 5 , '2022-01-01' ); > SELECT * FROM t5 WHERE b = Date_format ( '20000205' , '%Y-%m-%d' ); + ------+------------+ | a | b | + ------+------------+ | 1 | 2000 - 02 - 05 | + ------+------------+ 1 row in set ( 0 . 01 sec ) > SELECT * FROM t5 WHERE b != Date_format ( '20000205' , '%Y-%m-%d' ); + ------+------------+ | a | b | + ------+------------+ | 2 | 2000 - 10 - 08 | | 3 | 2005 - 01 - 03 | | 4 | 2007 - 09 - 01 | | 5 | 2022 - 01 - 01 | + ------+------------+ 4 rows in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( \"2009-01-01\" , '%W %d %M %Y' ) as valid_date ; + --------------------------+ | valid_date | + --------------------------+ | Thursday 01 January 2009 | + --------------------------+ 1 row in set ( 0 . 00 sec ) Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"DATE_FORMAT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#date_format","text":"","title":"DATE_FORMAT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#description","text":"Formats the date value according to the format string. If either argument is NULL, the function returns NULL. DATE_FORMAT() returns a string with a character set and collation given by character_set_connection and collation_connection so that it can return month and weekday names containing non-ASCII characters.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#syntax","text":"> DATE_FORMAT(date,format)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#arguments","text":"Arguments Description date Required. The date to be formatted. format Required. The format to use. Can be one or a combination of the following values as the below table:","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#format-specifier","text":"Info The specifiers shown in the following table may be used in the format string. The % character is required before format specifier characters. The specifiers apply to other functions as well as UNIX_TIMESTAMP() . Specifier Description %a Abbreviated weekday name (Sun..Sat) %b Abbreviated month name (Jan..Dec) %c Month, numeric (0..12) %D Day of the month with English suffix (0th, 1st, 2nd, 3rd, \u2026) %d Day of the month, numeric (00..31) %e Day of the month, numeric (0..31) %f Microseconds (000000..999999) %H Hour (00..23) %h Hour (01..12) %I Hour (01..12) %i Minutes, numeric (00..59) %j Day of year (001..366) %k Hour (0..23) %l Hour (1..12) %M Month name (January..December) %m Month, numeric (00..12) %p AM or PM %r Time, 12-hour (hh:mm:ss followed by AM or PM) %S Seconds (00..59) %s Seconds (00..59) %T Time, 24-hour (hh:mm:ss) %U Week (00..53), where Sunday is the first day of the week; WEEK() mode 0 %u Week (00..53), where Monday is the first day of the week; WEEK() mode 1 %V Week (01..53), where Sunday is the first day of the week; WEEK() mode 2; used with %X %v Week (01..53), where Monday is the first day of the week; WEEK() mode 3; used with %x %W Weekday name (Sunday..Saturday) %w Day of the week (0=Sunday..6=Saturday) %X Year for the week where Sunday is the first day of the week, numeric, four digits; used with %V %x Year for the week, where Monday is the first day of the week, numeric, four digits; used with %v %Y Year, numeric, four digits %y Year, numeric (two digits) %% A literal % character %x x, for any \u201cx\u201d not listed above","title":"Format Specifier"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#examples","text":"> SELECT DATE_FORMAT ( '2009-10-04 22:23:00' , '%W %M %Y' ); + --------------------------------------------+ | date_format ( 2009 - 10 - 04 22 : 23 : 00 , % W % M % Y ) | + --------------------------------------------+ | Sunday October 2009 | + --------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '2007-10-04 22:23:00' , '%H:%i:%s' ); + --------------------------------------------+ | date_format ( 2007 - 10 - 04 22 : 23 : 00 , % H : % i : % s ) | + --------------------------------------------+ | 22 : 23 : 00 | + --------------------------------------------+ 1 row in set ( 0 . 02 sec ) > SELECT Date_format ( '1900-10-04 22:23:00' , '%D %y %a %d %m %b %j' ); + --------------------------------------------------------+ | date_format ( 1900 - 10 - 04 22 : 23 : 00 , % D % y % a % d % m % b % j ) | + --------------------------------------------------------+ | 4 th 00 Thu 04 10 Oct 277 | + --------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '1997-10-04 22:23:00' , '%H %k %I %r %T %S %w' ); + --------------------------------------------------------+ | date_format ( 1997 - 10 - 04 22 : 23 : 00 , % H % k % I % r % T % S % w ) | + --------------------------------------------------------+ | 22 22 10 10 : 23 : 00 PM 22 : 23 : 00 00 6 | + --------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( '1999-01-01' , '%X %V' ); + --------------------------------+ | date_format ( 1999 - 01 - 01 , % X % V ) | + --------------------------------+ | 1998 52 | + --------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t2 ( f1 DATETIME ); > INSERT INTO t2 ( f1 ) VALUES ( '2005-01-01' ); > INSERT INTO t2 ( f1 ) VALUES ( '2005-02-01' ); > SELECT Date_format ( f1 , \"%m\" ) AS d1 , Date_format ( f1 , \"%m\" ) AS d2 FROM t2 ORDER BY Date_format ( f1 , \"%m\" ); + ------+----------+ | d1 | d2 | + ------+----------+ | 02 | February | | 01 | January | + ------+----------+ > CREATE TABLE t5 ( a int , b date ); > INSERT INTO t5 VALUES ( 1 , '2000-02-05' ), ( 2 , '2000-10-08' ), ( 3 , '2005-01-03' ), ( 4 , '2007-09-01' ), ( 5 , '2022-01-01' ); > SELECT * FROM t5 WHERE b = Date_format ( '20000205' , '%Y-%m-%d' ); + ------+------------+ | a | b | + ------+------------+ | 1 | 2000 - 02 - 05 | + ------+------------+ 1 row in set ( 0 . 01 sec ) > SELECT * FROM t5 WHERE b != Date_format ( '20000205' , '%Y-%m-%d' ); + ------+------------+ | a | b | + ------+------------+ | 2 | 2000 - 10 - 08 | | 3 | 2005 - 01 - 03 | | 4 | 2007 - 09 - 01 | | 5 | 2022 - 01 - 01 | + ------+------------+ 4 rows in set ( 0 . 01 sec ) > SELECT DATE_FORMAT ( \"2009-01-01\" , '%W %d %M %Y' ) as valid_date ; + --------------------------+ | valid_date | + --------------------------+ | Thursday 01 January 2009 | + --------------------------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-date-format/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/","text":"DAY() Description Returns the day of the month for date, in the range 1 to 31, or 0 for dates such as 0000-00-00 or 2008-00-00 that have a zero day part. Returns NULL if date is NULL . Syntax > DAY(date) Arguments Arguments Description date Required. The date/datetime to extract the date from. Examples > select day ( '2007-02-03' ); + -----------------+ | day ( 2007 - 02 - 03 ) | + -----------------+ | 3 | + -----------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE t3 ( c1 TIMESTAMP NOT NULL ); > INSERT INTO t3 VALUES ( '2000-01-01' ); > INSERT INTO t3 VALUES ( '1999-12-31' ); > INSERT INTO t3 VALUES ( '2000-01-01' ); > INSERT INTO t3 VALUES ( '2006-12-25' ); > INSERT INTO t3 VALUES ( '2008-02-29' ); > select day ( c1 ) from t3 ; + ---------+ | day ( c1 ) | + ---------+ | 1 | | 31 | | 1 | | 25 | | 29 | + ---------+ 5 rows in set ( 0 . 01 sec )","title":"DAY()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/#day","text":"","title":"DAY()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/#description","text":"Returns the day of the month for date, in the range 1 to 31, or 0 for dates such as 0000-00-00 or 2008-00-00 that have a zero day part. Returns NULL if date is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/#syntax","text":"> DAY(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/#arguments","text":"Arguments Description date Required. The date/datetime to extract the date from.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-day/#examples","text":"> select day ( '2007-02-03' ); + -----------------+ | day ( 2007 - 02 - 03 ) | + -----------------+ | 3 | + -----------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE t3 ( c1 TIMESTAMP NOT NULL ); > INSERT INTO t3 VALUES ( '2000-01-01' ); > INSERT INTO t3 VALUES ( '1999-12-31' ); > INSERT INTO t3 VALUES ( '2000-01-01' ); > INSERT INTO t3 VALUES ( '2006-12-25' ); > INSERT INTO t3 VALUES ( '2008-02-29' ); > select day ( c1 ) from t3 ; + ---------+ | day ( c1 ) | + ---------+ | 1 | | 31 | | 1 | | 25 | | 29 | + ---------+ 5 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/","text":"FROM_UNIXTIME() Description The FROM_UNIXTIME() function returns a representation of unix_timestamp as a datetime or character string value. The value returned is expressed using the session time zone. For example, the return value is in \u2018YYYYY-MM-DD HH:MM:SS\u2019 format or YYYYMMDDHHMMSS. unix_timestamp is an internal timestamp value representing seconds since 1970-01-01 00:00:00 UTC, such as produced by the UNIX_TIMESTAMP() function. Syntax > FROM_UNIXTIME(unix_timestamp[,format]) Arguments Arguments Description format Optional. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . format is used to format the result in the same way as the format string used for the DATE_FORMAT() function. If format is supplied, the value returned is a VARCHAR . unix_timestamp Required. If the unix_timestamp is NULL , this function returns NULL . If the unix_timestamp is an integer , the fractional seconds precision of the DATETIME is zero. When unix_timestamp is a decimal value, the fractional seconds precision of the DATETIME is the same as the precision of the decimal value, up to a maximum of 6. When unix_timestamp is a floating point number, the fractional seconds precision of the datetime is 6. Examples > SELECT FROM_UNIXTIME ( 1447430881 ); + ---------------------------+ | from_unixtime ( 1447430881 ) | + ---------------------------+ | 2015 - 11 - 13 06 : 08 : 01 | + ---------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT FROM_UNIXTIME ( 1447430881 , '%Y %D %M %h:%i:%s %x' ); + -------------------------------------------------+ | from_unixtime ( 1447430881 , % Y % D % M % h : % i : % s % x ) | + -------------------------------------------------+ | 2015 13 th November 06 : 08 : 01 2015 | + -------------------------------------------------+ 1 row in set ( 0 . 01 sec ) Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"FROM_UNIXTIME"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#from_unixtime","text":"","title":"FROM_UNIXTIME()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#description","text":"The FROM_UNIXTIME() function returns a representation of unix_timestamp as a datetime or character string value. The value returned is expressed using the session time zone. For example, the return value is in \u2018YYYYY-MM-DD HH:MM:SS\u2019 format or YYYYMMDDHHMMSS. unix_timestamp is an internal timestamp value representing seconds since 1970-01-01 00:00:00 UTC, such as produced by the UNIX_TIMESTAMP() function.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#syntax","text":"> FROM_UNIXTIME(unix_timestamp[,format])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#arguments","text":"Arguments Description format Optional. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . format is used to format the result in the same way as the format string used for the DATE_FORMAT() function. If format is supplied, the value returned is a VARCHAR . unix_timestamp Required. If the unix_timestamp is NULL , this function returns NULL . If the unix_timestamp is an integer , the fractional seconds precision of the DATETIME is zero. When unix_timestamp is a decimal value, the fractional seconds precision of the DATETIME is the same as the precision of the decimal value, up to a maximum of 6. When unix_timestamp is a floating point number, the fractional seconds precision of the datetime is 6.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#examples","text":"> SELECT FROM_UNIXTIME ( 1447430881 ); + ---------------------------+ | from_unixtime ( 1447430881 ) | + ---------------------------+ | 2015 - 11 - 13 06 : 08 : 01 | + ---------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT FROM_UNIXTIME ( 1447430881 , '%Y %D %M %h:%i:%s %x' ); + -------------------------------------------------+ | from_unixtime ( 1447430881 , % Y % D % M % h : % i : % s % x ) | + -------------------------------------------------+ | 2015 13 th November 06 : 08 : 01 2015 | + -------------------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-from-unixtime/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/","text":"MONTH() Description Returns the month for date, in the range 1 to 12 for January to December, or 0 for dates such as '0000-00-00' or '2008-00-00' that have a zero month part. Returns NULL if date is NULL . Syntax > MONTH(date) Arguments Arguments Description date Required. The date to be formatted. Examples Example 1: > SELECT MONTH ( '2008-02-03' ); + -------------------+ | month ( 2008 - 02 - 03 ) | + -------------------+ | 2 | + -------------------+ 1 row in set ( 0 . 02 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , d date , dt datetime , c char ( 10 ), vc varchar ( 20 )); > insert into t1 values ( 1 , \"2021-01-13\" , \"2021-01-13 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 1 , \"2021-01-31\" , \"2021-01-31 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 2 , \"2022-02-15\" , \"2022-02-15 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 2 , \"2022-02-28\" , \"2022-02-28 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 3 , \"2000-02-29\" , \"2000-02-29 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 4 , \"2023-03-17\" , \"2021-02-17 23:54:59\" , \"2021-03-17\" , \"2021-03-17\" ); > insert into t1 values ( 5 , \"1985-04-18\" , \"1985-04-18 00:00:01\" , \"1985-04-18\" , \"1985-04-18\" ); > insert into t1 values ( 6 , \"1987-05-20\" , \"1987-05-20 22:59:59\" , \"1987-05-20\" , \"1987-05-20\" ); > insert into t1 values ( 7 , \"1989-06-22\" , \"1989-06-22 15:00:30\" , \"1989-06-22\" , \"1989-06-22\" ); > insert into t1 values ( 8 , \"1993-07-25\" , \"1987-07-25 03:04:59\" , \"1993-07-25\" , \"1993-07-25\" ); > insert into t1 values ( 9 , \"1995-08-27\" , \"1987-08-27 04:32:33\" , \"1995-08-27\" , \"1995-08-27\" ); > insert into t1 values ( 10 , \"1999-09-30\" , \"1999-09-30 10:11:12\" , \"1999-09-30\" , \"1999-09-30\" ); > insert into t1 values ( 11 , \"2005-10-30\" , \"2005-10-30 18:18:59\" , \"2005-10-30\" , \"2005-10-30\" ); > insert into t1 values ( 12 , \"2008-11-30\" , \"2008-11-30 22:59:59\" , \"2008-11-30\" , \"2008-11-30\" ); > insert into t1 values ( 13 , \"2013-12-01\" , \"2013-12-01 22:59:59\" , \"2013-12-01\" , \"2013-12-01\" ); > insert into t1 values ( 14 , null , null , null , null ); > select month ( d ), month ( dt ) from t1 ; + ----------+-----------+ | month ( d ) | month ( dt ) | + ----------+-----------+ | 1 | 1 | | 1 | 1 | | 2 | 2 | | 2 | 2 | | 2 | 2 | | 3 | 2 | | 4 | 4 | | 5 | 5 | | 6 | 6 | | 7 | 7 | | 8 | 8 | | 9 | 9 | | 10 | 10 | | 11 | 11 | | 12 | 12 | | NULL | NULL | + ----------+-----------+ 16 rows in set ( 0 . 01 sec ) > select month ( c ), month ( vc ) from t1 ; + ----------+-----------+ | month ( c ) | month ( vc ) | + ----------+-----------+ | 12 | 12 | | 12 | 12 | | 2 | 2 | | 2 | 2 | | 2 | 2 | | 3 | 3 | | 4 | 4 | | 5 | 5 | | 6 | 6 | | 7 | 7 | | 8 | 8 | | 9 | 9 | | 10 | 10 | | 11 | 11 | | 12 | 12 | | NULL | NULL | + ----------+-----------+ 16 rows in set ( 0 . 01 sec )","title":"MONTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/#month","text":"","title":"MONTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/#description","text":"Returns the month for date, in the range 1 to 12 for January to December, or 0 for dates such as '0000-00-00' or '2008-00-00' that have a zero month part. Returns NULL if date is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/#syntax","text":"> MONTH(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/#arguments","text":"Arguments Description date Required. The date to be formatted.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-month/#examples","text":"Example 1: > SELECT MONTH ( '2008-02-03' ); + -------------------+ | month ( 2008 - 02 - 03 ) | + -------------------+ | 2 | + -------------------+ 1 row in set ( 0 . 02 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , d date , dt datetime , c char ( 10 ), vc varchar ( 20 )); > insert into t1 values ( 1 , \"2021-01-13\" , \"2021-01-13 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 1 , \"2021-01-31\" , \"2021-01-31 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 2 , \"2022-02-15\" , \"2022-02-15 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 2 , \"2022-02-28\" , \"2022-02-28 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 3 , \"2000-02-29\" , \"2000-02-29 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 4 , \"2023-03-17\" , \"2021-02-17 23:54:59\" , \"2021-03-17\" , \"2021-03-17\" ); > insert into t1 values ( 5 , \"1985-04-18\" , \"1985-04-18 00:00:01\" , \"1985-04-18\" , \"1985-04-18\" ); > insert into t1 values ( 6 , \"1987-05-20\" , \"1987-05-20 22:59:59\" , \"1987-05-20\" , \"1987-05-20\" ); > insert into t1 values ( 7 , \"1989-06-22\" , \"1989-06-22 15:00:30\" , \"1989-06-22\" , \"1989-06-22\" ); > insert into t1 values ( 8 , \"1993-07-25\" , \"1987-07-25 03:04:59\" , \"1993-07-25\" , \"1993-07-25\" ); > insert into t1 values ( 9 , \"1995-08-27\" , \"1987-08-27 04:32:33\" , \"1995-08-27\" , \"1995-08-27\" ); > insert into t1 values ( 10 , \"1999-09-30\" , \"1999-09-30 10:11:12\" , \"1999-09-30\" , \"1999-09-30\" ); > insert into t1 values ( 11 , \"2005-10-30\" , \"2005-10-30 18:18:59\" , \"2005-10-30\" , \"2005-10-30\" ); > insert into t1 values ( 12 , \"2008-11-30\" , \"2008-11-30 22:59:59\" , \"2008-11-30\" , \"2008-11-30\" ); > insert into t1 values ( 13 , \"2013-12-01\" , \"2013-12-01 22:59:59\" , \"2013-12-01\" , \"2013-12-01\" ); > insert into t1 values ( 14 , null , null , null , null ); > select month ( d ), month ( dt ) from t1 ; + ----------+-----------+ | month ( d ) | month ( dt ) | + ----------+-----------+ | 1 | 1 | | 1 | 1 | | 2 | 2 | | 2 | 2 | | 2 | 2 | | 3 | 2 | | 4 | 4 | | 5 | 5 | | 6 | 6 | | 7 | 7 | | 8 | 8 | | 9 | 9 | | 10 | 10 | | 11 | 11 | | 12 | 12 | | NULL | NULL | + ----------+-----------+ 16 rows in set ( 0 . 01 sec ) > select month ( c ), month ( vc ) from t1 ; + ----------+-----------+ | month ( c ) | month ( vc ) | + ----------+-----------+ | 12 | 12 | | 12 | 12 | | 2 | 2 | | 2 | 2 | | 2 | 2 | | 3 | 3 | | 4 | 4 | | 5 | 5 | | 6 | 6 | | 7 | 7 | | 8 | 8 | | 9 | 9 | | 10 | 10 | | 11 | 11 | | 12 | 12 | | NULL | NULL | + ----------+-----------+ 16 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/","text":"TIMESTAMP() Description With a single argument, this function returns the date or datetime expression expr as a datetime value. With two arguments, it adds the time expression expr2 to the date or datetime expression expr1 and returns the result as a datetime value. Returns NULL if expr, expr1, or expr2 is NULL . Syntax > TIMESTAMP(expr), TIMESTAMP(expr1,expr2) Arguments Arguments Description expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals. Examples > SELECT TIMESTAMP ( '2003-12-31' ); + ----------------------------+ | timestamp ( 2003 - 12 - 31 ) | + ----------------------------+ | 2003 - 12 - 31 00 : 00 : 00 . 000000 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( c1 DATE NOT NULL ); > INSERT INTO t1 VALUES ( '2000-01-01' ); > INSERT INTO t1 VALUES ( '1999-12-31' ); > INSERT INTO t1 VALUES ( '2000-01-01' ); > INSERT INTO t1 VALUES ( '2006-12-25' ); > INSERT INTO t1 VALUES ( '2008-02-29' ); > SELECT TIMESTAMP ( c1 ) FROM t1 ; + ----------------------------+ | timestamp ( c1 ) | + ----------------------------+ | 2000 - 01 - 01 00 : 00 : 00 . 000000 | | 1999 - 12 - 31 00 : 00 : 00 . 000000 | | 2000 - 01 - 01 00 : 00 : 00 . 000000 | | 2006 - 12 - 25 00 : 00 : 00 . 000000 | | 2008 - 02 - 29 00 : 00 : 00 . 000000 | + ----------------------------+ 5 rows in set ( 0 . 00 sec ) Constraints TIMESTAMP() does not support double arguments for now, which means it doesn't support TIMESTAMP(expr1,expr2) .","title":"TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#timestamp","text":"","title":"TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#description","text":"With a single argument, this function returns the date or datetime expression expr as a datetime value. With two arguments, it adds the time expression expr2 to the date or datetime expression expr1 and returns the result as a datetime value. Returns NULL if expr, expr1, or expr2 is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#syntax","text":"> TIMESTAMP(expr), TIMESTAMP(expr1,expr2)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#arguments","text":"Arguments Description expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#examples","text":"> SELECT TIMESTAMP ( '2003-12-31' ); + ----------------------------+ | timestamp ( 2003 - 12 - 31 ) | + ----------------------------+ | 2003 - 12 - 31 00 : 00 : 00 . 000000 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( c1 DATE NOT NULL ); > INSERT INTO t1 VALUES ( '2000-01-01' ); > INSERT INTO t1 VALUES ( '1999-12-31' ); > INSERT INTO t1 VALUES ( '2000-01-01' ); > INSERT INTO t1 VALUES ( '2006-12-25' ); > INSERT INTO t1 VALUES ( '2008-02-29' ); > SELECT TIMESTAMP ( c1 ) FROM t1 ; + ----------------------------+ | timestamp ( c1 ) | + ----------------------------+ | 2000 - 01 - 01 00 : 00 : 00 . 000000 | | 1999 - 12 - 31 00 : 00 : 00 . 000000 | | 2000 - 01 - 01 00 : 00 : 00 . 000000 | | 2006 - 12 - 25 00 : 00 : 00 . 000000 | | 2008 - 02 - 29 00 : 00 : 00 . 000000 | + ----------------------------+ 5 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-timestamp/#constraints","text":"TIMESTAMP() does not support double arguments for now, which means it doesn't support TIMESTAMP(expr1,expr2) .","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/","text":"UNIX_TIMESTAMP() Description If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix timestamp representing seconds since '1970-01-01 00:00:00' UTC. If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since '1970-01-01 00:00:00' UTC. The server interprets date as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. If you pass an out-of-range date to UNIX_TIMESTAMP(), it returns 0. If date is NULL , it returns NULL . The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or DECIMAL if an argument is given that includes a fractional seconds part. Syntax > UNIX_TIMESTAMP([date]) Arguments Arguments Description date Optional. The date/datetime to extract the date from. The date argument may be a DATE, DATETIME, or TIMESTAMP string, or a number in YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the argument includes a time part, it may optionally include a fractional seconds part. When the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns the internal timestamp value directly, with no implicit string-to-Unix-timestamp conversion. Convert between non-UTC time zone and Unix timestamp values If you use UNIX_TIMESTAMP() and FROM_UNIXTIME() to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for UNIX_TIMESTAMP() to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. FROM_UNIXTIME() maps that value back to only one of the original values. Here is an example, using values that are distinct in the MET time zone: > SET time_zone = 'MET' ; > SELECT UNIX_TIMESTAMP ( '2005-03-27 03:00:00' ); + -------------------------------------+ | unix_timestamp ( 2005 - 03 - 27 03 : 00 : 00 ) | + -------------------------------------+ | 1111885200 | + -------------------------------------+ > SELECT UNIX_TIMESTAMP ( '2005-03-27 02:00:00' ); + -------------------------------------+ | unix_timestamp ( 2005 - 03 - 27 02 : 00 : 00 ) | + -------------------------------------+ | 1111885200 | + -------------------------------------+ > SELECT FROM_UNIXTIME ( 1111885200 ); + ---------------------------+ | from_unixtime ( 1111885200 ) | + ---------------------------+ | 2005 - 03 - 27 03 : 00 : 00 | + ---------------------------+ Examples > SELECT UNIX_TIMESTAMP ( \"2016-07-11\" ); + ----------------------------+ | unix_timestamp ( 2016 - 07 - 11 ) | + ----------------------------+ | 1468195200 | + ----------------------------+ > SELECT UNIX_TIMESTAMP ( '2015-11-13 10:20:19' ); + -------------------------------------+ | unix_timestamp ( 2015 - 11 - 13 10 : 20 : 19 ) | + -------------------------------------+ | 1447381219 | + -------------------------------------+ 1 row in set ( 0 . 03 sec ) > SELECT UNIX_TIMESTAMP ( '2015-11-13 10:20:19.012' ); + -----------------------------------------+ | unix_timestamp ( 2015 - 11 - 13 10 : 20 : 19 . 012 ) | + -----------------------------------------+ | 1447381219 | + -----------------------------------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"UNIX_TIMESTAMP"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#unix_timestamp","text":"","title":"UNIX_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#description","text":"If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix timestamp representing seconds since '1970-01-01 00:00:00' UTC. If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since '1970-01-01 00:00:00' UTC. The server interprets date as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. If you pass an out-of-range date to UNIX_TIMESTAMP(), it returns 0. If date is NULL , it returns NULL . The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or DECIMAL if an argument is given that includes a fractional seconds part.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#syntax","text":"> UNIX_TIMESTAMP([date])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#arguments","text":"Arguments Description date Optional. The date/datetime to extract the date from. The date argument may be a DATE, DATETIME, or TIMESTAMP string, or a number in YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the argument includes a time part, it may optionally include a fractional seconds part. When the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns the internal timestamp value directly, with no implicit string-to-Unix-timestamp conversion.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#convert-between-non-utc-time-zone-and-unix-timestamp-values","text":"If you use UNIX_TIMESTAMP() and FROM_UNIXTIME() to convert between values in a non-UTC time zone and Unix timestamp values, the conversion is lossy because the mapping is not one-to-one in both directions. For example, due to conventions for local time zone changes such as Daylight Saving Time (DST), it is possible for UNIX_TIMESTAMP() to map two values that are distinct in a non-UTC time zone to the same Unix timestamp value. FROM_UNIXTIME() maps that value back to only one of the original values. Here is an example, using values that are distinct in the MET time zone: > SET time_zone = 'MET' ; > SELECT UNIX_TIMESTAMP ( '2005-03-27 03:00:00' ); + -------------------------------------+ | unix_timestamp ( 2005 - 03 - 27 03 : 00 : 00 ) | + -------------------------------------+ | 1111885200 | + -------------------------------------+ > SELECT UNIX_TIMESTAMP ( '2005-03-27 02:00:00' ); + -------------------------------------+ | unix_timestamp ( 2005 - 03 - 27 02 : 00 : 00 ) | + -------------------------------------+ | 1111885200 | + -------------------------------------+ > SELECT FROM_UNIXTIME ( 1111885200 ); + ---------------------------+ | from_unixtime ( 1111885200 ) | + ---------------------------+ | 2005 - 03 - 27 03 : 00 : 00 | + ---------------------------+","title":"Convert between non-UTC time zone and Unix timestamp values"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#examples","text":"> SELECT UNIX_TIMESTAMP ( \"2016-07-11\" ); + ----------------------------+ | unix_timestamp ( 2016 - 07 - 11 ) | + ----------------------------+ | 1468195200 | + ----------------------------+ > SELECT UNIX_TIMESTAMP ( '2015-11-13 10:20:19' ); + -------------------------------------+ | unix_timestamp ( 2015 - 11 - 13 10 : 20 : 19 ) | + -------------------------------------+ | 1447381219 | + -------------------------------------+ 1 row in set ( 0 . 03 sec ) > SELECT UNIX_TIMESTAMP ( '2015-11-13 10:20:19.012' ); + -----------------------------------------+ | unix_timestamp ( 2015 - 11 - 13 10 : 20 : 19 . 012 ) | + -----------------------------------------+ | 1447381219 | + -----------------------------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-unix-timestamp/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/","text":"UTC_TIMESTAMP() Description Returns the current UTC date and time as a value in YYYY-MM-DD hh:mm:ss or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context. Syntax > UTC_TIMESTAMP, UTC_TIMESTAMP([fsp]) Arguments Arguments Description fsp Optional. If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits. Examples Example 1: > SELECT UTC_TIMESTAMP (); + ---------------------+ | utc_timestamp () | + ---------------------+ | 2022 - 09 - 16 03 : 37 : 40 | + ---------------------+ 1 row in set ( 0 . 01 sec ) > select unix_timestamp ( utc_timestamp ()); + ---------------------------------+ | unix_timestamp ( utc_timestamp ()) | + ---------------------------------+ | 1663282842 | + ---------------------------------+ 1 row in set ( 0 . 02 sec ) Example 2: > create table t1 ( ts timestamp ); > set time_zone = '+00:00' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()); + -------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()) | + -------------------------------------------------------------------+ | 0 | + -------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > set time_zone = '+10:30' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()); + -------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()) | + -------------------------------------------------------------------+ | 0 | + -------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > set time_zone = '-10:00' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( current_timestamp ()); + -----------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( current_timestamp ()) | + -----------------------------------------------------------------------+ | 36000 | + -----------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > select * from t1 ; + ---------------------+ | ts | + ---------------------+ | 2003 - 03 - 29 16 : 30 : 00 | | 2003 - 03 - 29 06 : 00 : 00 | | 2003 - 03 - 30 02 : 30 : 00 | + ---------------------+ 3 rows in set ( 0 . 00 sec ) Example 3: > CREATE TABLE t1 ( a TIMESTAMP ); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > SELECT year ( a ) FROM t1 WHERE a > '2008-01-01' ; + ---------+ | year ( a ) | + ---------+ | 2022 | | 2022 | | 2022 | + ---------+ 3 rows in set ( 0 . 04 sec ) > DROP TABLE if exists t1 ; > create table t1 ( a int primary key , b int , c int , d timestamp ); > insert into t1 select 1 , 1 , 1 , utc_timestamp (); > insert into t1 select 2 , 0 , 0 , null ; > select a , b , c , year ( d ) from t1 ; + ------+------+------+---------+ | a | b | c | year ( d ) | + ------+------+------+---------+ | 1 | 1 | 1 | 2022 | | 2 | 0 | 0 | NULL | + ------+------+------+---------+ 2 rows in set ( 0 . 01 sec ) > DROP TABLE t1 ; > CREATE TABLE t1 ( a TIMESTAMP ); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > SELECT 1 FROM t1 ORDER BY 1 ; + ------+ | 1 | + ------+ | 1 | | 1 | + ------+ 2 rows in set ( 0 . 01 sec ) Constraints Operator + or - with parameters DATETIME BIGINT is not supported now.","title":"UTC_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#utc_timestamp","text":"","title":"UTC_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#description","text":"Returns the current UTC date and time as a value in YYYY-MM-DD hh:mm:ss or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#syntax","text":"> UTC_TIMESTAMP, UTC_TIMESTAMP([fsp])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#arguments","text":"Arguments Description fsp Optional. If the fsp argument is given to specify a fractional seconds precision from 0 to 6, the return value includes a fractional seconds part of that many digits.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#examples","text":"Example 1: > SELECT UTC_TIMESTAMP (); + ---------------------+ | utc_timestamp () | + ---------------------+ | 2022 - 09 - 16 03 : 37 : 40 | + ---------------------+ 1 row in set ( 0 . 01 sec ) > select unix_timestamp ( utc_timestamp ()); + ---------------------------------+ | unix_timestamp ( utc_timestamp ()) | + ---------------------------------+ | 1663282842 | + ---------------------------------+ 1 row in set ( 0 . 02 sec ) Example 2: > create table t1 ( ts timestamp ); > set time_zone = '+00:00' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()); + -------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()) | + -------------------------------------------------------------------+ | 0 | + -------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > set time_zone = '+10:30' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()); + -------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( utc_timestamp ()) | + -------------------------------------------------------------------+ | 0 | + -------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > set time_zone = '-10:00' ; > select unix_timestamp ( utc_timestamp ()) - unix_timestamp ( current_timestamp ()); + -----------------------------------------------------------------------+ | unix_timestamp ( utc_timestamp ()) - unix_timestamp ( current_timestamp ()) | + -----------------------------------------------------------------------+ | 36000 | + -----------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( ts ) values ( '2003-03-30 02:30:00' ); > select * from t1 ; + ---------------------+ | ts | + ---------------------+ | 2003 - 03 - 29 16 : 30 : 00 | | 2003 - 03 - 29 06 : 00 : 00 | | 2003 - 03 - 30 02 : 30 : 00 | + ---------------------+ 3 rows in set ( 0 . 00 sec ) Example 3: > CREATE TABLE t1 ( a TIMESTAMP ); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > SELECT year ( a ) FROM t1 WHERE a > '2008-01-01' ; + ---------+ | year ( a ) | + ---------+ | 2022 | | 2022 | | 2022 | + ---------+ 3 rows in set ( 0 . 04 sec ) > DROP TABLE if exists t1 ; > create table t1 ( a int primary key , b int , c int , d timestamp ); > insert into t1 select 1 , 1 , 1 , utc_timestamp (); > insert into t1 select 2 , 0 , 0 , null ; > select a , b , c , year ( d ) from t1 ; + ------+------+------+---------+ | a | b | c | year ( d ) | + ------+------+------+---------+ | 1 | 1 | 1 | 2022 | | 2 | 0 | 0 | NULL | + ------+------+------+---------+ 2 rows in set ( 0 . 01 sec ) > DROP TABLE t1 ; > CREATE TABLE t1 ( a TIMESTAMP ); > INSERT INTO t1 select ( utc_timestamp ()); > INSERT INTO t1 select ( utc_timestamp ()); > SELECT 1 FROM t1 ORDER BY 1 ; + ------+ | 1 | + ------+ | 1 | | 1 | + ------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-utc-timestamp/#constraints","text":"Operator + or - with parameters DATETIME BIGINT is not supported now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/","text":"WEEKDAY() Description Returns the weekday index for date (0 = Monday, 1 = Tuesday, \u2026 6 = Sunday). Returns NULL if date is NULL . Syntax > WEEKDAY(date) Arguments Arguments Description date Required. The date to be formatted. Examples Example 1: > SELECT WEEKDAY ( '2008-02-03 22:23:00' ); + ------------------------------+ | weekday ( 2008 - 02 - 03 22 : 23 : 00 ) | + ------------------------------+ | 6 | + ------------------------------+ 1 row in set ( 0 . 03 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , d date , dt datetime , c char ( 10 ), vc varchar ( 20 )); > insert into t1 values ( 1 , \"2021-01-13\" , \"2021-01-13 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 1 , \"2021-01-31\" , \"2021-01-31 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 2 , \"2022-02-15\" , \"2022-02-15 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 2 , \"2022-02-28\" , \"2022-02-28 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 3 , \"2000-02-29\" , \"2000-02-29 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 4 , \"2023-03-17\" , \"2021-02-17 23:54:59\" , \"2021-03-17\" , \"2021-03-17\" ); > insert into t1 values ( 5 , \"1985-04-18\" , \"1985-04-18 00:00:01\" , \"1985-04-18\" , \"1985-04-18\" ); > insert into t1 values ( 6 , \"1987-05-20\" , \"1987-05-20 22:59:59\" , \"1987-05-20\" , \"1987-05-20\" ); > insert into t1 values ( 7 , \"1989-06-22\" , \"1989-06-22 15:00:30\" , \"1989-06-22\" , \"1989-06-22\" ); > insert into t1 values ( 8 , \"1993-07-25\" , \"1987-07-25 03:04:59\" , \"1993-07-25\" , \"1993-07-25\" ); > insert into t1 values ( 9 , \"1995-08-27\" , \"1987-08-27 04:32:33\" , \"1995-08-27\" , \"1995-08-27\" ); > insert into t1 values ( 10 , \"1999-09-30\" , \"1999-09-30 10:11:12\" , \"1999-09-30\" , \"1999-09-30\" ); > insert into t1 values ( 11 , \"2005-10-30\" , \"2005-10-30 18:18:59\" , \"2005-10-30\" , \"2005-10-30\" ); > insert into t1 values ( 12 , \"2008-11-30\" , \"2008-11-30 22:59:59\" , \"2008-11-30\" , \"2008-11-30\" ); > insert into t1 values ( 13 , \"2013-12-01\" , \"2013-12-01 22:59:59\" , \"2013-12-01\" , \"2013-12-01\" ); > insert into t1 values ( 14 , null , null , null , null ); > select weekday ( d ), weekday ( dt ) from t1 ; + ------------+-------------+ | weekday ( d ) | weekday ( dt ) | + ------------+-------------+ | 2 | 2 | | 6 | 6 | | 1 | 1 | | 0 | 0 | | 1 | 1 | | 4 | 2 | | 3 | 3 | | 2 | 2 | | 3 | 3 | | 6 | 5 | | 6 | 3 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 6 | 6 | | NULL | NULL | + ------------+-------------+ 16 rows in set ( 0 . 01 sec ) > select weekday ( c ), weekday ( vc ) from t1 ; + ------------+-------------+ | weekday ( c ) | weekday ( vc ) | + ------------+-------------+ | 2 | 3 | | 2 | 3 | | 0 | 0 | | 0 | 0 | | 0 | 0 | | 2 | 2 | | 3 | 3 | | 2 | 2 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 6 | 6 | | NULL | NULL | + ------------+-------------+ 16 rows in set ( 0 . 02 sec )","title":"WEEKDAY()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/#weekday","text":"","title":"WEEKDAY()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/#description","text":"Returns the weekday index for date (0 = Monday, 1 = Tuesday, \u2026 6 = Sunday). Returns NULL if date is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/#syntax","text":"> WEEKDAY(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/#arguments","text":"Arguments Description date Required. The date to be formatted.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/0.6-weekday/#examples","text":"Example 1: > SELECT WEEKDAY ( '2008-02-03 22:23:00' ); + ------------------------------+ | weekday ( 2008 - 02 - 03 22 : 23 : 00 ) | + ------------------------------+ | 6 | + ------------------------------+ 1 row in set ( 0 . 03 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , d date , dt datetime , c char ( 10 ), vc varchar ( 20 )); > insert into t1 values ( 1 , \"2021-01-13\" , \"2021-01-13 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 1 , \"2021-01-31\" , \"2021-01-31 13:00:00\" , \"2021-12-15\" , \"2021-12-16\" ); > insert into t1 values ( 2 , \"2022-02-15\" , \"2022-02-15 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 2 , \"2022-02-28\" , \"2022-02-28 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 3 , \"2000-02-29\" , \"2000-02-29 18:54:29\" , \"2021-02-15\" , \"2021-02-15\" ); > insert into t1 values ( 4 , \"2023-03-17\" , \"2021-02-17 23:54:59\" , \"2021-03-17\" , \"2021-03-17\" ); > insert into t1 values ( 5 , \"1985-04-18\" , \"1985-04-18 00:00:01\" , \"1985-04-18\" , \"1985-04-18\" ); > insert into t1 values ( 6 , \"1987-05-20\" , \"1987-05-20 22:59:59\" , \"1987-05-20\" , \"1987-05-20\" ); > insert into t1 values ( 7 , \"1989-06-22\" , \"1989-06-22 15:00:30\" , \"1989-06-22\" , \"1989-06-22\" ); > insert into t1 values ( 8 , \"1993-07-25\" , \"1987-07-25 03:04:59\" , \"1993-07-25\" , \"1993-07-25\" ); > insert into t1 values ( 9 , \"1995-08-27\" , \"1987-08-27 04:32:33\" , \"1995-08-27\" , \"1995-08-27\" ); > insert into t1 values ( 10 , \"1999-09-30\" , \"1999-09-30 10:11:12\" , \"1999-09-30\" , \"1999-09-30\" ); > insert into t1 values ( 11 , \"2005-10-30\" , \"2005-10-30 18:18:59\" , \"2005-10-30\" , \"2005-10-30\" ); > insert into t1 values ( 12 , \"2008-11-30\" , \"2008-11-30 22:59:59\" , \"2008-11-30\" , \"2008-11-30\" ); > insert into t1 values ( 13 , \"2013-12-01\" , \"2013-12-01 22:59:59\" , \"2013-12-01\" , \"2013-12-01\" ); > insert into t1 values ( 14 , null , null , null , null ); > select weekday ( d ), weekday ( dt ) from t1 ; + ------------+-------------+ | weekday ( d ) | weekday ( dt ) | + ------------+-------------+ | 2 | 2 | | 6 | 6 | | 1 | 1 | | 0 | 0 | | 1 | 1 | | 4 | 2 | | 3 | 3 | | 2 | 2 | | 3 | 3 | | 6 | 5 | | 6 | 3 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 6 | 6 | | NULL | NULL | + ------------+-------------+ 16 rows in set ( 0 . 01 sec ) > select weekday ( c ), weekday ( vc ) from t1 ; + ------------+-------------+ | weekday ( c ) | weekday ( vc ) | + ------------+-------------+ | 2 | 3 | | 2 | 3 | | 0 | 0 | | 0 | 0 | | 0 | 0 | | 2 | 2 | | 3 | 3 | | 2 | 2 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 3 | 3 | | 6 | 6 | | 6 | 6 | | 6 | 6 | | NULL | NULL | + ------------+-------------+ 16 rows in set ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/","text":"DATE_ADD() Description The DATE_ADD() function adds a time/date interval to a date and then returns the date. If date is NULL , the function returns NULL . Syntax > DATE_ADD(date,INTERVAL expr unit) Arguments Arguments Description date Required. The date/datetime to extract the date from. expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals. unit Required. The unit is a keyword indicating the units in which the expression should be interpreted. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH Examples > create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT OrderId , DATE_ADD ( OrderDate , INTERVAL 45 DAY ) AS OrderPayDate FROM t2 ; + ---------+---------------------+ | orderid | orderpaydate | + ---------+---------------------+ | 1 | 2008 - 12 - 26 13 : 23 : 44 | + ---------+---------------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"DATE_ADD()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#date_add","text":"","title":"DATE_ADD()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#description","text":"The DATE_ADD() function adds a time/date interval to a date and then returns the date. If date is NULL , the function returns NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#syntax","text":"> DATE_ADD(date,INTERVAL expr unit)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#arguments","text":"Arguments Description date Required. The date/datetime to extract the date from. expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals. unit Required. The unit is a keyword indicating the units in which the expression should be interpreted. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#examples","text":"> create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT OrderId , DATE_ADD ( OrderDate , INTERVAL 45 DAY ) AS OrderPayDate FROM t2 ; + ---------+---------------------+ | orderid | orderpaydate | + ---------+---------------------+ | 1 | 2008 - 12 - 26 13 : 23 : 44 | + ---------+---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-add/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/","text":"DATE_SUB() Description The DATE_SUB() function subtracts a time/date interval from a date and then returns the date. If date is NULL , the function returns NULL . Syntax DATE_SUB(date,INTERVAL expr unit) Arguments Arguments Description date Required. The date/datetime to extract the date from. expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals. unit Required. The unit is a keyword indicating the units in which the expression should be interpreted. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH Examples > create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT OrderId , DATE_SUB ( OrderDate , INTERVAL 5 DAY ) AS SubtractDate FROM t2 ; + ---------+---------------------+ | orderid | subtractdate | + ---------+---------------------+ | 1 | 2008 - 11 - 06 13 : 23 : 44 | + ---------+---------------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"DATE_SUB()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#date_sub","text":"","title":"DATE_SUB()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#description","text":"The DATE_SUB() function subtracts a time/date interval from a date and then returns the date. If date is NULL , the function returns NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#syntax","text":"DATE_SUB(date,INTERVAL expr unit)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#arguments","text":"Arguments Description date Required. The date/datetime to extract the date from. expr Required. The expr is an expression specifying the interval value to be added or subtracted from the starting date. The expr is evaluated as a string; it may start with a - for negative intervals. unit Required. The unit is a keyword indicating the units in which the expression should be interpreted. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#examples","text":"> create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT OrderId , DATE_SUB ( OrderDate , INTERVAL 5 DAY ) AS SubtractDate FROM t2 ; + ---------+---------------------+ | orderid | subtractdate | + ---------+---------------------+ | 1 | 2008 - 11 - 06 13 : 23 : 44 | + ---------+---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date-sub/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/","text":"DATE() Description Extracts the date part of the date or datetime expression expr. Syntax > DATE(expr) Arguments Arguments Description expr Required. The date/datetime to extract the date from. Examples > drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' ); > insert into t1 values ( 20220101 , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-02' , '2022-01-02 23:01:01' ); > insert into t1 values ( '2021-12-31' , '2021-12-30 23:59:59' ); > insert into t1 values ( '2022-06-30' , '2021-12-30 23:59:59' ); > select date ( a ), date ( b ) from t1 ; + ------------+------------+ | date ( a ) | date ( b ) | + ------------+------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 | | 2021 - 12 - 31 | 2021 - 12 - 30 | | 2022 - 06 - 30 | 2021 - 12 - 30 | + ------------+------------+ > select date ( a ), date ( date ( a )) as dda from t1 ; + ------------+------------+ | date ( a ) | dda | + ------------+------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 | | 2021 - 12 - 31 | 2021 - 12 - 31 | | 2022 - 06 - 30 | 2022 - 06 - 30 | + ------------+------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"DATE()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#date","text":"","title":"DATE()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#description","text":"Extracts the date part of the date or datetime expression expr.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#syntax","text":"> DATE(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#arguments","text":"Arguments Description expr Required. The date/datetime to extract the date from.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#examples","text":"> drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' ); > insert into t1 values ( 20220101 , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-02' , '2022-01-02 23:01:01' ); > insert into t1 values ( '2021-12-31' , '2021-12-30 23:59:59' ); > insert into t1 values ( '2022-06-30' , '2021-12-30 23:59:59' ); > select date ( a ), date ( b ) from t1 ; + ------------+------------+ | date ( a ) | date ( b ) | + ------------+------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 | | 2021 - 12 - 31 | 2021 - 12 - 30 | | 2022 - 06 - 30 | 2021 - 12 - 30 | + ------------+------------+ > select date ( a ), date ( date ( a )) as dda from t1 ; + ------------+------------+ | date ( a ) | dda | + ------------+------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 | | 2021 - 12 - 31 | 2021 - 12 - 31 | | 2022 - 06 - 30 | 2022 - 06 - 30 | + ------------+------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/date/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/","text":"DAYOFYEAR() Description Returns the day of the year for date, in the range 1 to 366. Syntax > DAYOFYEAR(expr) Arguments Arguments Description expr Required. The date to get the day from. Must be date type. Examples > drop table if exists t1 ; > create table t1 ( a date , b datetime , c varchar ( 30 )); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' , '2022-01-01 01:01:01' ); > insert into t1 values ( 20220101 , '2022-01-01 01:01:01' , '2022-13-13 01:01:01' ); > insert into t1 values ( '2022-01-02' , '2022-01-02 23:01:01' , '2022-01-01 23:01:01' ); > insert into t1 values ( '2021-12-31' , '2021-12-30 23:59:59' , '2021-12-30 23:59:59' ); > insert into t1 values ( '2022-06-30' , '2021-12-30 23:59:59' , '2021-12-30 23:59:59' ); > select distinct dayofyear ( a ) as dya from t1 ; + ------+ | dya | + ------+ | 1 | | 2 | | 365 | | 181 | + ------+ > select * from t1 where dayofyear ( a ) > 120 ; + ------------+---------------------+---------------------+ | a | b | c | + ------------+---------------------+---------------------+ | 2021 - 12 - 31 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | | 2022 - 06 - 30 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | + ------------+---------------------+---------------------+ > select * from t1 where dayofyear ( a ) between 1 and 184 ; + ------------+---------------------+---------------------+ | a | b | c | + ------------+---------------------+---------------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 01 - 01 01 : 01 : 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 01 - 01 01 : 01 : 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 13 - 13 01 : 01 : 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 23 : 01 : 01 | 2022 - 01 - 01 23 : 01 : 01 | | 2022 - 06 - 30 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | + ------------+---------------------+---------------------+ Constraints DAYOFYEAR() only supports date type for now. The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"DAYOFYEAR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#dayofyear","text":"","title":"DAYOFYEAR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#description","text":"Returns the day of the year for date, in the range 1 to 366.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#syntax","text":"> DAYOFYEAR(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#arguments","text":"Arguments Description expr Required. The date to get the day from. Must be date type.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#examples","text":"> drop table if exists t1 ; > create table t1 ( a date , b datetime , c varchar ( 30 )); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' , '2022-01-01 01:01:01' ); > insert into t1 values ( '2022-01-01' , '2022-01-01 01:01:01' , '2022-01-01 01:01:01' ); > insert into t1 values ( 20220101 , '2022-01-01 01:01:01' , '2022-13-13 01:01:01' ); > insert into t1 values ( '2022-01-02' , '2022-01-02 23:01:01' , '2022-01-01 23:01:01' ); > insert into t1 values ( '2021-12-31' , '2021-12-30 23:59:59' , '2021-12-30 23:59:59' ); > insert into t1 values ( '2022-06-30' , '2021-12-30 23:59:59' , '2021-12-30 23:59:59' ); > select distinct dayofyear ( a ) as dya from t1 ; + ------+ | dya | + ------+ | 1 | | 2 | | 365 | | 181 | + ------+ > select * from t1 where dayofyear ( a ) > 120 ; + ------------+---------------------+---------------------+ | a | b | c | + ------------+---------------------+---------------------+ | 2021 - 12 - 31 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | | 2022 - 06 - 30 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | + ------------+---------------------+---------------------+ > select * from t1 where dayofyear ( a ) between 1 and 184 ; + ------------+---------------------+---------------------+ | a | b | c | + ------------+---------------------+---------------------+ | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 01 - 01 01 : 01 : 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 01 - 01 01 : 01 : 01 | | 2022 - 01 - 01 | 2022 - 01 - 01 01 : 01 : 01 | 2022 - 13 - 13 01 : 01 : 01 | | 2022 - 01 - 02 | 2022 - 01 - 02 23 : 01 : 01 | 2022 - 01 - 01 23 : 01 : 01 | | 2022 - 06 - 30 | 2021 - 12 - 30 23 : 59 : 59 | 2021 - 12 - 30 23 : 59 : 59 | + ------------+---------------------+---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/dayofyear/#constraints","text":"DAYOFYEAR() only supports date type for now. The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/","text":"EXTRACT() Description The EXTRACT() function uses the same kinds of unit specifiers as DATE_ADD() or DATE_SUB() , but extracts parts from the date rather than performing date arithmetic. Returns NULL if date is NULL . Syntax > EXTRACT(unit FROM date) Arguments Arguments Description date Required. The date/datetime to extract the date from. unit Required. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH Examples > create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT EXTRACT ( YEAR FROM OrderDate ) AS OrderYear , EXTRACT ( MONTH FROM OrderDate ) AS OrderMonth FROM t2 WHERE OrderId = 1 ; + -----------+------------+ | orderyear | ordermonth | + -----------+------------+ | 2008 | 11 | + -----------+------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"EXTRACT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#extract","text":"","title":"EXTRACT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#description","text":"The EXTRACT() function uses the same kinds of unit specifiers as DATE_ADD() or DATE_SUB() , but extracts parts from the date rather than performing date arithmetic. Returns NULL if date is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#syntax","text":"> EXTRACT(unit FROM date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#arguments","text":"Arguments Description date Required. The date/datetime to extract the date from. unit Required. The unit argument can have the following values: MICROSECOND SECOND MINUTE HOUR DAY WEEK MONTH QUA TER YEAR SECOND_MICROSECOND MINUTE_MICROSECOND MINUTE_SECOND HOUR_MICROSECOND HOUR_SECOND HOUR_MINUTE DAY_MICROSECOND DAY_SECOND DAY_MINUTE DAY_HOUR YEAR_MONTH","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#examples","text":"> create table t2 ( orderid int , productname varchar ( 20 ), orderdate datetime ); > insert into t2 values ( '1' , 'Jarl' , '2008-11-11 13:23:44.657' ); > SELECT EXTRACT ( YEAR FROM OrderDate ) AS OrderYear , EXTRACT ( MONTH FROM OrderDate ) AS OrderMonth FROM t2 WHERE OrderId = 1 ; + -----------+------------+ | orderyear | ordermonth | + -----------+------------+ | 2008 | 11 | + -----------+------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/extract/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/","text":"FROM_UNIXTIME() Description The FROM_UNIXTIME() function returns a representation of unix_timestamp as a datetime or character string value. The value returned is expressed using the session time zone. For example, the return value is in \u2018YYYYY-MM-DD HH:MM:SS\u2019 format or YYYYMMDDHHMMSS. unix_timestamp is an internal timestamp value representing seconds since 1970-01-01 00:00:00 UTC, such as produced by the UNIX_TIMESTAMP() function. Syntax > FROM_UNIXTIME(unix_timestamp[,format]) Arguments Arguments Description format Optional. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . If the format is supplied, the value returned is a VARCHAR. unix_timestamp Required. If the unix_timestamp is NULL , this function returns NULL . If the unix_timestamp is an integer , the fractional seconds precision of the DATETIME is zero. When unix_timestamp is a decimal value, the fractional seconds precision of the DATETIME is the same as the precision of the decimal value, up to a maximum of 6. When unix_timestamp is a floating point number, the fractional seconds precision of the datetime is 6. Examples > select from_unixtime ( 1459338786 ); + ---------------------------+ | from_unixtime ( 1459338786 ) | + ---------------------------+ | 2016 - 03 - 30 11 : 53 : 06 | + ---------------------------+","title":"**FROM_UNIXTIME()**"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/#from_unixtime","text":"","title":"FROM_UNIXTIME()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/#description","text":"The FROM_UNIXTIME() function returns a representation of unix_timestamp as a datetime or character string value. The value returned is expressed using the session time zone. For example, the return value is in \u2018YYYYY-MM-DD HH:MM:SS\u2019 format or YYYYMMDDHHMMSS. unix_timestamp is an internal timestamp value representing seconds since 1970-01-01 00:00:00 UTC, such as produced by the UNIX_TIMESTAMP() function.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/#syntax","text":"> FROM_UNIXTIME(unix_timestamp[,format])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/#arguments","text":"Arguments Description format Optional. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . If the format is supplied, the value returned is a VARCHAR. unix_timestamp Required. If the unix_timestamp is NULL , this function returns NULL . If the unix_timestamp is an integer , the fractional seconds precision of the DATETIME is zero. When unix_timestamp is a decimal value, the fractional seconds precision of the DATETIME is the same as the precision of the decimal value, up to a maximum of 6. When unix_timestamp is a floating point number, the fractional seconds precision of the datetime is 6.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/from-unixtime/#examples","text":"> select from_unixtime ( 1459338786 ); + ---------------------------+ | from_unixtime ( 1459338786 ) | + ---------------------------+ | 2016 - 03 - 30 11 : 53 : 06 | + ---------------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/","text":"MONTH() Description The MONTH() function returns the month part for a given date (a number from 1 to 12). Syntax > MONTH(date) Arguments Arguments Description date Required. The date/datetime to extract the month from Examples > drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20211223' , '2021-10-22 09:23:23' ); > insert into t1 values ( '2021-12-23' , '2021-10-22 00:23:23' ); > select month ( a ) from t1 ; + ----------+----------+ | month ( a ) | month ( b ) | + ----------+----------+ | 12 | 10 | | 12 | 10 | + ----------+----------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"**MONTH()**"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#month","text":"","title":"MONTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#description","text":"The MONTH() function returns the month part for a given date (a number from 1 to 12).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#syntax","text":"> MONTH(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#arguments","text":"Arguments Description date Required. The date/datetime to extract the month from","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#examples","text":"> drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20211223' , '2021-10-22 09:23:23' ); > insert into t1 values ( '2021-12-23' , '2021-10-22 00:23:23' ); > select month ( a ) from t1 ; + ----------+----------+ | month ( a ) | month ( b ) | + ----------+----------+ | 12 | 10 | | 12 | 10 | + ----------+----------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/month/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/","text":"TO_DATE() Description TO_DATE() returns a DATETIME value if the format string contains both date and time parts, or a DATE or TIME value if the string contains only date or time parts. Syntax > TO_DATE(str,format) Arguments Arguments Description str Required. If the date, time, or datetime value extracted from str is illegal, STR_TO_DATE() returns NULL and produces a warning. If str is NULL , the function returns NULL . format Required. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . If the format is supplied, the value returned is a VARCHAR. note The format string can contain literal characters and format specifiers beginning with %. Literal characters in format must match literally in str. Format specifiers in format must match a date or time part in str . Examples > SELECT TO_DATE ( '2022-01-06 10:20:30' , '%Y-%m-%d %H:%i:%s' ) as result ; + ---------------------+ | result | + ---------------------+ | 2022 - 01 - 06 10 : 20 : 30 | + ---------------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"TO_DATE()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#to_date","text":"","title":"TO_DATE()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#description","text":"TO_DATE() returns a DATETIME value if the format string contains both date and time parts, or a DATE or TIME value if the string contains only date or time parts.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#syntax","text":"> TO_DATE(str,format)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#arguments","text":"Arguments Description str Required. If the date, time, or datetime value extracted from str is illegal, STR_TO_DATE() returns NULL and produces a warning. If str is NULL , the function returns NULL . format Required. A format string indicating the format of the return value. If the format is omitted, this function returns a DATETIME value. If the format is NULL , this function returns NULL . If the format is supplied, the value returned is a VARCHAR. note The format string can contain literal characters and format specifiers beginning with %. Literal characters in format must match literally in str. Format specifiers in format must match a date or time part in str .","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#examples","text":"> SELECT TO_DATE ( '2022-01-06 10:20:30' , '%Y-%m-%d %H:%i:%s' ) as result ; + ---------------------+ | result | + ---------------------+ | 2022 - 01 - 06 10 : 20 : 30 | + ---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/to-date/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/","text":"UNIX_TIMESTAMP() Description If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix timestamp representing seconds since '1970-01-01 00:00:00' UTC. If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since '1970-01-01 00:00:00' UTC. The server interprets date as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. If you pass an out-of-range date to UNIX_TIMESTAMP(), it returns 0. If date is NULL , it returns NULL . The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or DECIMAL if an argument is given that includes a fractional seconds part. Syntax > UNIX_TIMESTAMP([date]) Arguments Arguments Description date Optional. The date/datetime to extract the date from. The date argument may be a DATE, DATETIME, or TIMESTAMP string, or a number in YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the argument includes a time part, it may optionally include a fractional seconds part. When the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns the internal timestamp value directly, with no implicit string-to-Unix-timestamp conversion. Examples > SELECT UNIX_TIMESTAMP ( \"2016-07-11\" ); + ----------------------------+ | unix_timestamp ( 2016 - 07 - 11 ) | + ----------------------------+ | 1468195200 | + ----------------------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"**UNIX_TIMESTAMP()**"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#unix_timestamp","text":"","title":"UNIX_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#description","text":"If UNIX_TIMESTAMP() is called with no date argument, it returns a Unix timestamp representing seconds since '1970-01-01 00:00:00' UTC. If UNIX_TIMESTAMP() is called with a date argument, it returns the value of the argument as seconds since '1970-01-01 00:00:00' UTC. The server interprets date as a value in the session time zone and converts it to an internal Unix timestamp value in UTC. If you pass an out-of-range date to UNIX_TIMESTAMP(), it returns 0. If date is NULL , it returns NULL . The return value is an integer if no argument is given or the argument does not include a fractional seconds part, or DECIMAL if an argument is given that includes a fractional seconds part.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#syntax","text":"> UNIX_TIMESTAMP([date])","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#arguments","text":"Arguments Description date Optional. The date/datetime to extract the date from. The date argument may be a DATE, DATETIME, or TIMESTAMP string, or a number in YYMMDD, YYMMDDhhmmss, YYYYMMDD, or YYYYMMDDhhmmss format. If the argument includes a time part, it may optionally include a fractional seconds part. When the date argument is a TIMESTAMP column, UNIX_TIMESTAMP() returns the internal timestamp value directly, with no implicit string-to-Unix-timestamp conversion.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#examples","text":"> SELECT UNIX_TIMESTAMP ( \"2016-07-11\" ); + ----------------------------+ | unix_timestamp ( 2016 - 07 - 11 ) | + ----------------------------+ | 1468195200 | + ----------------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/unix-timestamp/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/utc-timestamp/","text":"UTC_TIMESTAMP() Description Returns the current UTC date and time as a value in 'YYYY-MM-DD hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context. Syntax > UTC_TIMESTAMP() Examples > SELECT UTC_TIMESTAMP (); + ---------------------+ | utc_timestamp () | + ---------------------+ | 2022 - 06 - 22 22 : 31 : 13 | + ---------------------+","title":"**UTC_TIMESTAMP()**"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/utc-timestamp/#utc_timestamp","text":"","title":"UTC_TIMESTAMP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/utc-timestamp/#description","text":"Returns the current UTC date and time as a value in 'YYYY-MM-DD hh:mm:ss' or YYYYMMDDhhmmss format, depending on whether the function is used in string or numeric context.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/utc-timestamp/#syntax","text":"> UTC_TIMESTAMP()","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/utc-timestamp/#examples","text":"> SELECT UTC_TIMESTAMP (); + ---------------------+ | utc_timestamp () | + ---------------------+ | 2022 - 06 - 22 22 : 31 : 13 | + ---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/","text":"WEEKDAY() Description This function returns the weekday index for date (0 = Monday, 1 = Tuesday, \u2026 6 = Sunday). Syntax > WEEKDAY(date) Arguments Arguments Description date Required. Examples > drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20220202' , '2021-12-24 09:23:23' ); > insert into t1 values ( '2022-02-02' , '2021-12-24' ); > select weekday ( a ), weekday ( b ) from t1 ; + ------------+------------+ | weekday ( a ) | weekday ( b ) | + ------------+------------+ | 2 | 4 | | 2 | 4 | + ------------+------------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"**WEEKDAY()**"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#weekday","text":"","title":"WEEKDAY()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#description","text":"This function returns the weekday index for date (0 = Monday, 1 = Tuesday, \u2026 6 = Sunday).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#syntax","text":"> WEEKDAY(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#arguments","text":"Arguments Description date Required.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#examples","text":"> drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20220202' , '2021-12-24 09:23:23' ); > insert into t1 values ( '2022-02-02' , '2021-12-24' ); > select weekday ( a ), weekday ( b ) from t1 ; + ------------+------------+ | weekday ( a ) | weekday ( b ) | + ------------+------------+ | 2 | 4 | | 2 | 4 | + ------------+------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/weekday/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/","text":"YEAR() Description The YEAR() or TOYEAR() function returns the year part for a given date (a number from 1000 to 9999). Syntax > YEAR(date) > TOYEAR(date) Arguments Arguments Description date Required. The date/datetime to extract the year from Examples > drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20211223' , '2021-10-22 09:23:23' ); > insert into t1 values ( '2021-12-23' , '2021-10-22 00:23:23' ); > select year ( a ), toyear ( b ) from t1 ; + ---------+-----------+ | year ( a ) | toyear ( b ) | + ---------+-----------+ | 2021 | 2021 | | 2021 | 2021 | + ---------+-----------+ Constraints The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"YEAR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#year","text":"","title":"YEAR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#description","text":"The YEAR() or TOYEAR() function returns the year part for a given date (a number from 1000 to 9999).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#syntax","text":"> YEAR(date) > TOYEAR(date)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#arguments","text":"Arguments Description date Required. The date/datetime to extract the year from","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#examples","text":"> drop table if exists t1 ; > create table t1 ( a date , b datetime ); > insert into t1 values ( '20211223' , '2021-10-22 09:23:23' ); > insert into t1 values ( '2021-12-23' , '2021-10-22 00:23:23' ); > select year ( a ), toyear ( b ) from t1 ; + ---------+-----------+ | year ( a ) | toyear ( b ) | + ---------+-----------+ | 2021 | 2021 | | 2021 | 2021 | + ---------+-----------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Datetime/year/#constraints","text":"The date type supports only yyyy-mm-dd and yyyymmdd for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/","text":"UUID() Description Returns a Universal Unique Identifier (UUID) generated according to RFC 4122 , \u201cA Universally Unique IDentifier (UUID) URN Namespace\u201d. A UUID is designed as a number that is globally unique in space and time. Two calls to UUID() are expected to generate two different values, even if these calls are performed on two separate devices not connected to each other. Info Although UUID() values are intended to be unique, they are not necessarily unguessable or unpredictable. If unpredictability is required, UUID values should be generated some other way. UUID() returns a value that conforms to UUID version 1 as described in RFC 4122 . The value is a 128-bit number represented as a utf8mb3 string of five hexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee format: The first three numbers are generated from the low, middle, and high parts of a timestamp. The high part also includes the UUID version number. The fourth number preserves temporal uniqueness in case the timestamp value loses monotonicity (for example, due to daylight saving time). The fifth number is an IEEE 802 node number that provides spatial uniqueness. A random number is substituted if the latter is not available (for example, because the host device has no Ethernet card, or it is unknown how to find the hardware address of an interface on the host operating system). In this case, spatial uniqueness cannot be guaranteed. Nevertheless, a collision should have very low probability. Syntax > UUID() Examples > create table t1 ( a INT , b float ); > insert into t1 values ( 12124 , - 4213 . 413 ), ( 12124 , - 42413 . 409 ); > SELECT length ( uuid ()) FROM t1 ; + ----------------+ | length ( uuid ()) | + ----------------+ | 36 | | 36 | + ----------------+ 2 rows in set ( 0 . 01 sec ) > SELECT UUID (); + --------------------------------------+ | uuid () | + --------------------------------------+ | 4 b64e482 - 47 a3 - 11 ed - 8 df5 - 5 ad2460dea4f | + --------------------------------------+ 1 row in set ( 0 . 00 sec ) Constraints UUID() does not support optional argument for now, which means it doesn't support UUID([number]) .","title":"UUID()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/#uuid","text":"","title":"UUID()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/#description","text":"Returns a Universal Unique Identifier (UUID) generated according to RFC 4122 , \u201cA Universally Unique IDentifier (UUID) URN Namespace\u201d. A UUID is designed as a number that is globally unique in space and time. Two calls to UUID() are expected to generate two different values, even if these calls are performed on two separate devices not connected to each other. Info Although UUID() values are intended to be unique, they are not necessarily unguessable or unpredictable. If unpredictability is required, UUID values should be generated some other way. UUID() returns a value that conforms to UUID version 1 as described in RFC 4122 . The value is a 128-bit number represented as a utf8mb3 string of five hexadecimal numbers in aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee format: The first three numbers are generated from the low, middle, and high parts of a timestamp. The high part also includes the UUID version number. The fourth number preserves temporal uniqueness in case the timestamp value loses monotonicity (for example, due to daylight saving time). The fifth number is an IEEE 802 node number that provides spatial uniqueness. A random number is substituted if the latter is not available (for example, because the host device has no Ethernet card, or it is unknown how to find the hardware address of an interface on the host operating system). In this case, spatial uniqueness cannot be guaranteed. Nevertheless, a collision should have very low probability.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/#syntax","text":"> UUID()","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/#examples","text":"> create table t1 ( a INT , b float ); > insert into t1 values ( 12124 , - 4213 . 413 ), ( 12124 , - 42413 . 409 ); > SELECT length ( uuid ()) FROM t1 ; + ----------------+ | length ( uuid ()) | + ----------------+ | 36 | | 36 | + ----------------+ 2 rows in set ( 0 . 01 sec ) > SELECT UUID (); + --------------------------------------+ | uuid () | + --------------------------------------+ | 4 b64e482 - 47 a3 - 11 ed - 8 df5 - 5 ad2460dea4f | + --------------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/0.6-uuid/#constraints","text":"UUID() does not support optional argument for now, which means it doesn't support UUID([number]) .","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/","text":"ABS() Description ABS(X) Returns the absolute value of X, or NULL if X is NULL. Syntax > ABS(number) Arguments Arguments Description number Required. Any numeric data type supported now. The result type is derived from the argument type. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , - 3 . 1416 ); > insert into t1 values ( - 1 , 1 . 57 ); > select abs ( a ), abs ( b ) from t1 ; + --------+--------+ | abs ( a ) | abs ( b ) | + --------+--------+ | 1 | 3 . 1416 | | 1 | 1 . 5700 | + --------+--------+","title":"ABS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/#abs","text":"","title":"ABS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/#description","text":"ABS(X) Returns the absolute value of X, or NULL if X is NULL.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/#syntax","text":"> ABS(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/#arguments","text":"Arguments Description number Required. Any numeric data type supported now. The result type is derived from the argument type.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/abs/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , - 3 . 1416 ); > insert into t1 values ( - 1 , 1 . 57 ); > select abs ( a ), abs ( b ) from t1 ; + --------+--------+ | abs ( a ) | abs ( b ) | + --------+--------+ | 1 | 3 . 1416 | | 1 | 1 . 5700 | + --------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/","text":"ACOS() Description The ACOS() function returns the arccosine(given in radians) of the input number. Syntax > ACOS(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a float , b int ); > insert into t1 values ( 0 . 5 , 1 ); > insert into t1 values ( - 0 . 5 , - 1 ); > select acos ( a ), acos ( b ) from t1 ; + ---------+---------+ | acos ( a ) | acos ( b ) | + ---------+---------+ | 1 . 0472 | 0 . 0000 | | 2 . 0944 | 3 . 1416 | + ---------+---------+","title":"ACOS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/#acos","text":"","title":"ACOS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/#description","text":"The ACOS() function returns the arccosine(given in radians) of the input number.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/#syntax","text":"> ACOS(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/acos/#examples","text":"> drop table if exists t1 ; > create table t1 ( a float , b int ); > insert into t1 values ( 0 . 5 , 1 ); > insert into t1 values ( - 0 . 5 , - 1 ); > select acos ( a ), acos ( b ) from t1 ; + ---------+---------+ | acos ( a ) | acos ( b ) | + ---------+---------+ | 1 . 0472 | 0 . 0000 | | 2 . 0944 | 3 . 1416 | + ---------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/","text":"ATAN() Description The ATAN() function returns the arctangent(given in radians) of the input number. Syntax > ATAN(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( 0 , 1 ); > select atan ( a ), atan ( tan ( b )) from t1 ; + ---------+--------------+ | atan ( a ) | atan ( tan ( b )) | + ---------+--------------+ | 0 . 7854 | - 0 . 0000 | | 0 . 0000 | 1 . 0000 | + ---------+--------------+","title":"ATAN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/#atan","text":"","title":"ATAN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/#description","text":"The ATAN() function returns the arctangent(given in radians) of the input number.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/#syntax","text":"> ATAN(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/atan/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( 0 , 1 ); > select atan ( a ), atan ( tan ( b )) from t1 ; + ---------+--------------+ | atan ( a ) | atan ( tan ( b )) | + ---------+--------------+ | 0 . 7854 | - 0 . 0000 | | 0 . 0000 | 1 . 0000 | + ---------+--------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/","text":"CEIL() Description The CEIL(X) function returns the smallest integer value not less than X. Syntax > CEIL(X) Arguments Arguments Description X Required. Any numeric data type supported now. For exact-value numeric arguments, the return value has an exact-value numeric type. For floating-point arguments, the return value has a floating-point type. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , ceil ( b ) from t1 ; + ------+----------+ | a | ceil ( b ) | + ------+----------+ | 1 | 1 . 0000 | | 2 | 1 . 0000 | | 3 | 1 . 0000 | | 4 | 21 . 0000 | | 5 | 21 . 0000 | | 6 | 14 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 0 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 13 . 0000 | + ------+----------+ > select sum ( ceil ( b )) from t1 ; + --------------+ | sum ( ceil ( b )) | + --------------+ | 6 . 0000 | + --------------+","title":"CEIL()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/#ceil","text":"","title":"CEIL()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/#description","text":"The CEIL(X) function returns the smallest integer value not less than X.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/#syntax","text":"> CEIL(X)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/#arguments","text":"Arguments Description X Required. Any numeric data type supported now. For exact-value numeric arguments, the return value has an exact-value numeric type. For floating-point arguments, the return value has a floating-point type.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ceil/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , ceil ( b ) from t1 ; + ------+----------+ | a | ceil ( b ) | + ------+----------+ | 1 | 1 . 0000 | | 2 | 1 . 0000 | | 3 | 1 . 0000 | | 4 | 21 . 0000 | | 5 | 21 . 0000 | | 6 | 14 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 0 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 13 . 0000 | + ------+----------+ > select sum ( ceil ( b )) from t1 ; + --------------+ | sum ( ceil ( b )) | + --------------+ | 6 . 0000 | + --------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/","text":"COS() Description The COS() function returns the cosine of input number(given in radians). Syntax > COS(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 1 . 57 ); > select cos ( a ), cos ( b ) from t1 ; + --------+---------+ | cos ( a ) | cos ( b ) | + --------+---------+ | 0 . 5403 | - 1 . 0000 | | 0 . 5403 | 0 . 0008 | + --------+---------+","title":"COS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/#cos","text":"","title":"COS()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/#description","text":"The COS() function returns the cosine of input number(given in radians).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/#syntax","text":"> COS(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cos/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 1 . 57 ); > select cos ( a ), cos ( b ) from t1 ; + --------+---------+ | cos ( a ) | cos ( b ) | + --------+---------+ | 0 . 5403 | - 1 . 0000 | | 0 . 5403 | 0 . 0008 | + --------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/","text":"COT() Description The COT() function returns the cotangent of input number(given in radians). Syntax > COT(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 0 ); > select cot ( a ), cot ( b ) from t1 ; + ---------+--------+ | cot ( a ) | cot ( b ) | + ---------+--------+ | - 0 . 5574 | 1 . 0000 | | 2 . 5574 | 1 . 0000 | + ---------+--------+","title":"COT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/#cot","text":"","title":"COT()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/#description","text":"The COT() function returns the cotangent of input number(given in radians).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/#syntax","text":"> COT(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/cot/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 0 ); > select cot ( a ), cot ( b ) from t1 ; + ---------+--------+ | cot ( a ) | cot ( b ) | + ---------+--------+ | - 0 . 5574 | 1 . 0000 | | 2 . 5574 | 1 . 0000 | + ---------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/","text":"EXP() Description The EXP() function returns the value of e (the base of natural logarithms) raised to the power of X. Syntax > EXP(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( - 4 , 2 . 45 ); > insert into t1 values ( 6 , - 3 . 62 ); > select exp ( a ), exp ( b ) from t1 ; + ----------+---------+ | exp ( a ) | exp ( b ) | + ----------+---------+ | 0 . 0183 | 11 . 5883 | | 403 . 4288 | 0 . 0268 | + ----------+---------+","title":"EXP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/#exp","text":"","title":"EXP()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/#description","text":"The EXP() function returns the value of e (the base of natural logarithms) raised to the power of X.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/#syntax","text":"> EXP(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/exp/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( - 4 , 2 . 45 ); > insert into t1 values ( 6 , - 3 . 62 ); > select exp ( a ), exp ( b ) from t1 ; + ----------+---------+ | exp ( a ) | exp ( b ) | + ----------+---------+ | 0 . 0183 | 11 . 5883 | | 403 . 4288 | 0 . 0268 | + ----------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/","text":"FLOOR() Description The FLOOR() function returns the largest round number that is less than or equal to the number. Syntax > FLOOR(number, decimals) > FLOOR(number) Arguments Arguments Description number Required. Any numeric data type supported now. decimals Optional. An integer that represents the number of decimal places. By default it is zero, which means to round to an integer. decimals may also be negative. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , floor ( b ) from t1 ; + ------+----------+ | a | floor ( b ) | + ------+----------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 13 . 0000 | | 7 | - 1 . 0000 | | 8 | - 1 . 0000 | | 9 | - 1 . 0000 | | 10 | - 21 . 0000 | | 11 | - 21 . 0000 | | 12 | - 14 . 0000 | + ------+----------+ > select sum ( floor ( b )) from t1 ; + ---------------+ | sum ( floor ( b )) | + ---------------+ | - 6 . 0000 | + ---------------+ > select a , sum ( floor ( b )) from t1 group by a order by a ; + ------+---------------+ | a | sum ( floor ( b )) | + ------+---------------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 13 . 0000 | | 7 | - 1 . 0000 | | 8 | - 1 . 0000 | | 9 | - 1 . 0000 | | 10 | - 21 . 0000 | | 11 | - 21 . 0000 | | 12 | - 14 . 0000 | + ------+---------------+","title":"FLOOR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/#floor","text":"","title":"FLOOR()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/#description","text":"The FLOOR() function returns the largest round number that is less than or equal to the number.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/#syntax","text":"> FLOOR(number, decimals) > FLOOR(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/#arguments","text":"Arguments Description number Required. Any numeric data type supported now. decimals Optional. An integer that represents the number of decimal places. By default it is zero, which means to round to an integer. decimals may also be negative.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/floor/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , floor ( b ) from t1 ; + ------+----------+ | a | floor ( b ) | + ------+----------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 13 . 0000 | | 7 | - 1 . 0000 | | 8 | - 1 . 0000 | | 9 | - 1 . 0000 | | 10 | - 21 . 0000 | | 11 | - 21 . 0000 | | 12 | - 14 . 0000 | + ------+----------+ > select sum ( floor ( b )) from t1 ; + ---------------+ | sum ( floor ( b )) | + ---------------+ | - 6 . 0000 | + ---------------+ > select a , sum ( floor ( b )) from t1 group by a order by a ; + ------+---------------+ | a | sum ( floor ( b )) | + ------+---------------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 13 . 0000 | | 7 | - 1 . 0000 | | 8 | - 1 . 0000 | | 9 | - 1 . 0000 | | 10 | - 21 . 0000 | | 11 | - 21 . 0000 | | 12 | - 14 . 0000 | + ------+---------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ln/","text":"LN() Description LN(X) returns the natural logarithm of X. This function is synonymous with LOG(X). Syntax > LN(X) Reference to LOG(X) .","title":"LN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ln/#ln","text":"","title":"LN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ln/#description","text":"LN(X) returns the natural logarithm of X. This function is synonymous with LOG(X).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/ln/#syntax","text":"> LN(X) Reference to LOG(X) .","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/","text":"LOG() Description LOG(X) returns the natural logarithm of X. Syntax > LOG(X) Arguments Arguments Description X Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a float , b float ); > insert into t1 values ( 2 , - 2 ); > select log ( a ), log ( b ) from t1 ; + --------+--------+ | log ( a ) | log ( b ) | + --------+--------+ | 0 . 6931 | NULL | + --------+--------+ Constraints LOG(X) only support one parameter input for now.","title":"LOG()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#log","text":"","title":"LOG()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#description","text":"LOG(X) returns the natural logarithm of X.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#syntax","text":"> LOG(X)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#arguments","text":"Arguments Description X Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#examples","text":"> drop table if exists t1 ; > create table t1 ( a float , b float ); > insert into t1 values ( 2 , - 2 ); > select log ( a ), log ( b ) from t1 ; + --------+--------+ | log ( a ) | log ( b ) | + --------+--------+ | 0 . 6931 | NULL | + --------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/log/#constraints","text":"LOG(X) only support one parameter input for now.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/pi/","text":"PI() Description PI() returns the value of \u03c0 (pi). Syntax > PI() Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 0 , 0 ),( - 15 , - 20 ),( - 22 , - 12 . 5 ); > insert into t1 values ( 0 , 360 ),( 30 , 390 ),( 90 , 450 ),( 180 , 270 ),( 180 , 180 ); > select acos ( a * pi () / 180 ) as acosa , acos ( b * pi () / 180 ) acosb from t1 ; + --------+--------+ | acosa | acosb | + --------+--------+ | 1 . 5708 | 1 . 5708 | | 1 . 8357 | 1 . 9274 | | 1 . 9649 | 1 . 7907 | | 1 . 5708 | NULL | | 1 . 0197 | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | + --------+--------+ > select acos ( a * pi () / 180 ) * acos ( b * pi () / 180 ) as acosab , acos ( acos ( a * pi () / 180 )) as c from t1 ; + --------+------+ | acosab | c | + --------+------+ | 2 . 4674 | NULL | | 3 . 5380 | NULL | | 3 . 5186 | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | + --------+------+","title":"PI()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/pi/#pi","text":"","title":"PI()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/pi/#description","text":"PI() returns the value of \u03c0 (pi).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/pi/#syntax","text":"> PI()","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/pi/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 0 , 0 ),( - 15 , - 20 ),( - 22 , - 12 . 5 ); > insert into t1 values ( 0 , 360 ),( 30 , 390 ),( 90 , 450 ),( 180 , 270 ),( 180 , 180 ); > select acos ( a * pi () / 180 ) as acosa , acos ( b * pi () / 180 ) acosb from t1 ; + --------+--------+ | acosa | acosb | + --------+--------+ | 1 . 5708 | 1 . 5708 | | 1 . 8357 | 1 . 9274 | | 1 . 9649 | 1 . 7907 | | 1 . 5708 | NULL | | 1 . 0197 | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | + --------+--------+ > select acos ( a * pi () / 180 ) * acos ( b * pi () / 180 ) as acosab , acos ( acos ( a * pi () / 180 )) as c from t1 ; + --------+------+ | acosab | c | + --------+------+ | 2 . 4674 | NULL | | 3 . 5380 | NULL | | 3 . 5186 | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | | NULL | NULL | + --------+------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/","text":"POWER() Description POWER(X, Y) returns the value of X raised to the power of Y. Syntax > POWER(X, Y) Arguments Arguments Description X Required. Any numeric data type supported now. Y Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b int ); > insert into t1 values ( 5 , - 2 ),( 10 , 3 ),( 100 , 0 ),( 4 , 3 ),( 6 , - 3 ); > select power ( a , b ) from t1 ; + -------------+ | power ( a , b ) | + -------------+ | 0 . 0400 | | 1000 . 0000 | | 1 . 0000 | | 64 . 0000 | | 0 . 0046 | + -------------+ > select power ( a , 2 ) as a1 , power ( b , 2 ) as b1 from t1 where power ( a , 2 ) > power ( b , 2 ) order by a1 asc ; + ------------+--------+ | a1 | b1 | + ------------+--------+ | 16 . 0000 | 9 . 0000 | | 25 . 0000 | 4 . 0000 | | 36 . 0000 | 9 . 0000 | | 100 . 0000 | 9 . 0000 | | 10000 . 0000 | 0 . 0000 | + ------------+--------+","title":"POWER()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/#power","text":"","title":"POWER()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/#description","text":"POWER(X, Y) returns the value of X raised to the power of Y.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/#syntax","text":"> POWER(X, Y)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/#arguments","text":"Arguments Description X Required. Any numeric data type supported now. Y Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/power/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b int ); > insert into t1 values ( 5 , - 2 ),( 10 , 3 ),( 100 , 0 ),( 4 , 3 ),( 6 , - 3 ); > select power ( a , b ) from t1 ; + -------------+ | power ( a , b ) | + -------------+ | 0 . 0400 | | 1000 . 0000 | | 1 . 0000 | | 64 . 0000 | | 0 . 0046 | + -------------+ > select power ( a , 2 ) as a1 , power ( b , 2 ) as b1 from t1 where power ( a , 2 ) > power ( b , 2 ) order by a1 asc ; + ------------+--------+ | a1 | b1 | + ------------+--------+ | 16 . 0000 | 9 . 0000 | | 25 . 0000 | 4 . 0000 | | 36 . 0000 | 9 . 0000 | | 100 . 0000 | 9 . 0000 | | 10000 . 0000 | 0 . 0000 | + ------------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/","text":"ROUND() Description The ROUND() function rounds a number to a specified number of decimal places. The function returns the nearest number of the specified order. In case when given number has equal distance to surrounding numbers, the function uses banker\u2019s rounding for float number types and rounds away from zero for the other number types (Decimal). Syntax > ROUND(number, decimals) > ROUND(number) Arguments Arguments Description number Required. The number to round, including any numeric data type supported now. decimals Optional. An integer that represents the number of decimal places you want to round to. Default value is 0. decimals>0 then the function rounds the value to the right of the decimal point. decimals<0 then the function rounds the value to the left of the decimal point. decimals=0 then the function rounds the value to integer. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , round ( b ) from t1 ; + ------+----------+ | a | round ( b ) | + ------+----------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 1 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 14 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 1 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 14 . 0000 | + ------+----------+ > select a , round ( b , - 1 ) from t1 ; + ------+--------------+ | a | round ( b , - 1 ) | + ------+--------------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 10 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 0 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 10 . 0000 | + ------+--------------+ > select round ( a * b ) from t1 ; + --------------+ | round ( a * b ) | + --------------+ | 0 . 0000 | | 1 . 0000 | | 2 . 0000 | | 82 . 0000 | | 102 . 0000 | | 81 . 0000 | | - 4 . 0000 | | - 4 . 0000 | | - 5 . 0000 | | - 205 . 0000 | | - 226 . 0000 | | - 162 . 0000 | + --------------+","title":"ROUND()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/#round","text":"","title":"ROUND()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/#description","text":"The ROUND() function rounds a number to a specified number of decimal places. The function returns the nearest number of the specified order. In case when given number has equal distance to surrounding numbers, the function uses banker\u2019s rounding for float number types and rounds away from zero for the other number types (Decimal).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/#syntax","text":"> ROUND(number, decimals) > ROUND(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/#arguments","text":"Arguments Description number Required. The number to round, including any numeric data type supported now. decimals Optional. An integer that represents the number of decimal places you want to round to. Default value is 0. decimals>0 then the function rounds the value to the right of the decimal point. decimals<0 then the function rounds the value to the left of the decimal point. decimals=0 then the function rounds the value to integer.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/round/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 0 . 5 ); > insert into t1 values ( 2 , 0 . 499 ); > insert into t1 values ( 3 , 0 . 501 ); > insert into t1 values ( 4 , 20 . 5 ); > insert into t1 values ( 5 , 20 . 499 ); > insert into t1 values ( 6 , 13 . 500 ); > insert into t1 values ( 7 , - 0 . 500 ); > insert into t1 values ( 8 , - 0 . 499 ); > insert into t1 values ( 9 , - 0 . 501 ); > insert into t1 values ( 10 , - 20 . 499 ); > insert into t1 values ( 11 , - 20 . 500 ); > insert into t1 values ( 12 , - 13 . 500 ); > select a , round ( b ) from t1 ; + ------+----------+ | a | round ( b ) | + ------+----------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 1 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 14 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 1 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 14 . 0000 | + ------+----------+ > select a , round ( b , - 1 ) from t1 ; + ------+--------------+ | a | round ( b , - 1 ) | + ------+--------------+ | 1 | 0 . 0000 | | 2 | 0 . 0000 | | 3 | 0 . 0000 | | 4 | 20 . 0000 | | 5 | 20 . 0000 | | 6 | 10 . 0000 | | 7 | - 0 . 0000 | | 8 | - 0 . 0000 | | 9 | - 0 . 0000 | | 10 | - 20 . 0000 | | 11 | - 20 . 0000 | | 12 | - 10 . 0000 | + ------+--------------+ > select round ( a * b ) from t1 ; + --------------+ | round ( a * b ) | + --------------+ | 0 . 0000 | | 1 . 0000 | | 2 . 0000 | | 82 . 0000 | | 102 . 0000 | | 81 . 0000 | | - 4 . 0000 | | - 4 . 0000 | | - 5 . 0000 | | - 205 . 0000 | | - 226 . 0000 | | - 162 . 0000 | + --------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/","text":"SIN() Description The SIN() function returns the sine of input number(given in radians). Syntax > SIN(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 1 . 57 ); > select sin ( a ), sin ( b ) from t1 ; + ---------+--------+ | sin ( a ) | sin ( b ) | + ---------+--------+ | 0 . 8415 | 0 . 0000 | | - 0 . 8415 | 1 . 0000 | + ---------+--------+","title":"SIN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/#sin","text":"","title":"SIN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/#description","text":"The SIN() function returns the sine of input number(given in radians).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/#syntax","text":"> SIN(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sin/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , 1 . 57 ); > select sin ( a ), sin ( b ) from t1 ; + ---------+--------+ | sin ( a ) | sin ( b ) | + ---------+--------+ | 0 . 8415 | 0 . 0000 | | - 0 . 8415 | 1 . 0000 | + ---------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/","text":"SINH() Description The SINH() function returns the hyperbolic sine of the input number(given in radians). Syntax > SINH(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ), ( - 1 , - 3 . 14159 ); > select sinh ( a ), sinh ( b ) from t1 ;","title":"SINH()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/#sinh","text":"","title":"SINH()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/#description","text":"The SINH() function returns the hyperbolic sine of the input number(given in radians).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/#syntax","text":"> SINH(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/sinh/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ), ( - 1 , - 3 . 14159 ); > select sinh ( a ), sinh ( b ) from t1 ;","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/","text":"TAN() Description The TAN() function returns the tangent of input number(given in radians). Syntax > TAN(number) Arguments Arguments Description number Required. Any numeric data type supported now. Examples > drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , - 3 . 14159 ); > select tan ( a ), tan ( b ) from t1 ; + ---------+---------+ | tan ( a ) | tan ( b ) | + ---------+---------+ | 1 . 5574 | - 0 . 0000 | | - 1 . 5574 | 0 . 0000 | + ---------+---------+","title":"TAN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/#tan","text":"","title":"TAN()"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/#description","text":"The TAN() function returns the tangent of input number(given in radians).","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/#syntax","text":"> TAN(number)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/#arguments","text":"Arguments Description number Required. Any numeric data type supported now.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/Mathematical/tan/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b float ); > insert into t1 values ( 1 , 3 . 14159 ); > insert into t1 values ( - 1 , - 3 . 14159 ); > select tan ( a ), tan ( b ) from t1 ; + ---------+---------+ | tan ( a ) | tan ( b ) | + ---------+---------+ | 1 . 5574 | - 0 . 0000 | | - 1 . 5574 | 0 . 0000 | + ---------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/","text":"BIN() Description This function BIN() returns a string representation of the binary value of N , where N is a longlong (BIGINT) number. Returns NULL if N is NULL . Syntax > BIN(N) Arguments Arguments Description N Required. UINT Type Examples > SELECT bin ( 1314 ); + -------------+ | bin ( 1314 ) | + -------------+ | 10100100010 | + -------------+ 1 row in set ( 0 . 01 sec ) > select bin ( 2 e5 ); + --------------------+ | bin ( 2 e5 ) | + --------------------+ | 110000110101000000 | + --------------------+ 1 row in set ( 0 . 00 sec )","title":"BIN()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/#bin","text":"","title":"BIN()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/#description","text":"This function BIN() returns a string representation of the binary value of N , where N is a longlong (BIGINT) number. Returns NULL if N is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/#syntax","text":"> BIN(N)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/#arguments","text":"Arguments Description N Required. UINT Type","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bin/#examples","text":"> SELECT bin ( 1314 ); + -------------+ | bin ( 1314 ) | + -------------+ | 10100100010 | + -------------+ 1 row in set ( 0 . 01 sec ) > select bin ( 2 e5 ); + --------------------+ | bin ( 2 e5 ) | + --------------------+ | 110000110101000000 | + --------------------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/","text":"BIT_LENGTH() Description Returns the length of the string str in bits. Returns NULL if str is NULL . Syntax > BIT_LENGTH(str) Arguments Arguments Description str Required. String you want to calculate. Examples > SELECT BIT_LENGTH ( 'text' ); + ------------------+ | bit_length ( text ) | + ------------------+ | 32 | + ------------------+ 1 row in set ( 0 . 00 sec )","title":"BIT_LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/#bit_length","text":"","title":"BIT_LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/#description","text":"Returns the length of the string str in bits. Returns NULL if str is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/#syntax","text":"> BIT_LENGTH(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/#arguments","text":"Arguments Description str Required. String you want to calculate.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-bit-length/#examples","text":"> SELECT BIT_LENGTH ( 'text' ); + ------------------+ | bit_length ( text ) | + ------------------+ | 32 | + ------------------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/","text":"HEX() Description For a string argument str, HEX() returns a hexadecimal string representation of str where each byte of each character in str is converted to two hexadecimal digits. (Multibyte characters therefore become more than two digits.) For a numeric argument N, HEX() returns a hexadecimal string representation of the value of N treated as an integer number. This is equivalent to CONV(N,10,16) . The inverse of this operation is performed by CONV(HEX(N),16,10) . For a NULL argument, this function returns NULL . Syntax > HEX(str), HEX(N) Arguments Arguments Description N Required. A number which is to be converted to hexadecimal. str Required. A string whose each character is to be converted to two hexadecimal digits. Examples > SELECT HEX ( 'abc' ); + ----------+ | hex ( abc ) | + ----------+ | 616263 | + ----------+ 1 row in set ( 0 . 00 sec ) > SELECT HEX ( 255 ); + ----------+ | hex ( 255 ) | + ----------+ | FF | + ----------+ 1 row in set ( 0 . 00 sec )","title":"HEX()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/#hex","text":"","title":"HEX()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/#description","text":"For a string argument str, HEX() returns a hexadecimal string representation of str where each byte of each character in str is converted to two hexadecimal digits. (Multibyte characters therefore become more than two digits.) For a numeric argument N, HEX() returns a hexadecimal string representation of the value of N treated as an integer number. This is equivalent to CONV(N,10,16) . The inverse of this operation is performed by CONV(HEX(N),16,10) . For a NULL argument, this function returns NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/#syntax","text":"> HEX(str), HEX(N)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/#arguments","text":"Arguments Description N Required. A number which is to be converted to hexadecimal. str Required. A string whose each character is to be converted to two hexadecimal digits.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/0.6-hex/#examples","text":"> SELECT HEX ( 'abc' ); + ----------+ | hex ( abc ) | + ----------+ | 616263 | + ----------+ 1 row in set ( 0 . 00 sec ) > SELECT HEX ( 255 ); + ----------+ | hex ( 255 ) | + ----------+ | FF | + ----------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/","text":"CHAR_LENGTH() Description The CHAR_LENGTH function returns the length of the string str, measured in code points. A multibyte character counts as a single code point. This means that, for a string containing two 3-byte characters, CHAR_LENGTH returns 6, whereas CHAR_LENGTH returns 2. Syntax > CHAR_LENGTH(str) note The alias for CHAR_LENGTH can also be lengthUTF8() Arguments Arguments Description str Required. String you want to calculate. Examples > drop table if exists t1 ; > create table t1 ( a varchar ( 255 ), b varchar ( 255 )); > insert into t1 values ( 'nihao' , '\u4f60\u597d' ); > select char_length ( a ), char_length ( b ) from t1 ; + ---------------+---------------+ | lengthutf8 ( a ) | lengthutf8 ( b ) | + ---------------+---------------+ | 5 | 2 | + ---------------+---------------+","title":"CHAR_LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/#char_length","text":"","title":"CHAR_LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/#description","text":"The CHAR_LENGTH function returns the length of the string str, measured in code points. A multibyte character counts as a single code point. This means that, for a string containing two 3-byte characters, CHAR_LENGTH returns 6, whereas CHAR_LENGTH returns 2.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/#syntax","text":"> CHAR_LENGTH(str) note The alias for CHAR_LENGTH can also be lengthUTF8()","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/#arguments","text":"Arguments Description str Required. String you want to calculate.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/char-length/#examples","text":"> drop table if exists t1 ; > create table t1 ( a varchar ( 255 ), b varchar ( 255 )); > insert into t1 values ( 'nihao' , '\u4f60\u597d' ); > select char_length ( a ), char_length ( b ) from t1 ; + ---------------+---------------+ | lengthutf8 ( a ) | lengthutf8 ( b ) | + ---------------+---------------+ | 5 | 2 | + ---------------+---------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/","text":"CONCAT_WS() Description This function CONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT() . The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments. If the separator is NULL , the result is NULL . Syntax Syntax 1 > CONCAT_WS(separator,str1,str2,...) Syntax 2 > CONCAT_WS(separator,str1,NULL,str1,...); Arguments Arguments Description str Required. both CHAR and VARCHAR are supported. Examples SELECT CONCAT_WS ( ',' , 'First name' , 'Second name' , 'Last Name' ); + --------------------------------------------------+ | concat_ws (,, First name , Second name , Last Name ) | + --------------------------------------------------+ | First name , Second name , Last Name | + --------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CONCAT_WS ( ',' , 'First name' , NULL , 'Last Name' ); + -------------------------------------------+ | concat_ws (,, First name , null , Last Name ) | + -------------------------------------------+ | First name , Last Name | + -------------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"CONCAT_WS()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/#concat_ws","text":"","title":"CONCAT_WS()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/#description","text":"This function CONCAT_WS() stands for Concatenate With Separator and is a special form of CONCAT() . The first argument is the separator for the rest of the arguments. The separator is added between the strings to be concatenated. The separator can be a string, as can the rest of the arguments. If the separator is NULL , the result is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/#syntax","text":"Syntax 1 > CONCAT_WS(separator,str1,str2,...) Syntax 2 > CONCAT_WS(separator,str1,NULL,str1,...);","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/#arguments","text":"Arguments Description str Required. both CHAR and VARCHAR are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/concat-ws/#examples","text":"SELECT CONCAT_WS ( ',' , 'First name' , 'Second name' , 'Last Name' ); + --------------------------------------------------+ | concat_ws (,, First name , Second name , Last Name ) | + --------------------------------------------------+ | First name , Second name , Last Name | + --------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CONCAT_WS ( ',' , 'First name' , NULL , 'Last Name' ); + -------------------------------------------+ | concat_ws (,, First name , null , Last Name ) | + -------------------------------------------+ | First name , Last Name | + -------------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/","text":"EMPTY() Description Checks whether the input string is empty. A string is considered non-empty if it contains at least one byte, even if this is a space or a null byte. Syntax > EMPTY(str) Arguments Arguments Description str Required. both CHAR and VARCHAR are supported. Returned Values Returns 1 for an empty string or 0 for a non-empty string. Examples > drop table if exists t1 ; > create table t1 ( a varchar ( 255 ), b varchar ( 255 )); > insert into t1 values ( '' , 'abcd' ); > insert into t1 values ( '1111' , '' ); > select empty ( a ), empty ( b ) from t1 ; + ----------+----------+ | empty ( a ) | empty ( b ) | + ----------+----------+ | 1 | 0 | | 0 | 1 | + ----------+----------+","title":"EMPTY()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#empty","text":"","title":"EMPTY()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#description","text":"Checks whether the input string is empty. A string is considered non-empty if it contains at least one byte, even if this is a space or a null byte.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#syntax","text":"> EMPTY(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#arguments","text":"Arguments Description str Required. both CHAR and VARCHAR are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#returned-values","text":"Returns 1 for an empty string or 0 for a non-empty string.","title":"Returned Values"},{"location":"MatrixOne/Reference/Builtin-Functions/String/empty/#examples","text":"> drop table if exists t1 ; > create table t1 ( a varchar ( 255 ), b varchar ( 255 )); > insert into t1 values ( '' , 'abcd' ); > insert into t1 values ( '1111' , '' ); > select empty ( a ), empty ( b ) from t1 ; + ----------+----------+ | empty ( a ) | empty ( b ) | + ----------+----------+ | 1 | 0 | | 0 | 1 | + ----------+----------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/","text":"ENDSWITH() Description Returns whether to end with the specified suffix. Returns 1 if the string ends with the specified suffix, otherwise it returns 0. This function is case sensitive. Syntax > ENDSWITH(str,suffix) Arguments Arguments Description str Required. CHAR and VARCHAR both are supported. suffix Required. CHAR and VARCHAR both are supported. Returned Values 1, if the string ends with the specified suffix. 0, if the string does not end with the specified suffix. Examples > drop table if exists t1 ; > create table t1 ( a int , b varchar ( 100 ), c char ( 20 )); > insert into t1 values ( 1 , 'Ananya Majumdar' , 'XI' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'XI' ); > select a , endsWith ( b , 'a' ) from t1 ; + ------+----------------+ | a | endswith ( b , a ) | + ------+----------------+ | 1 | 0 | | 2 | 1 | | 3 | 1 | | 4 | 0 | | 5 | 0 | | 6 | 1 | + ------+----------------+ > select a , b , c from t1 where endswith ( b , 'a' ) = 1 and endswith ( c , 'I' ) = 1 ; + ------+---------------+------+ | a | b | c | + ------+---------------+------+ | 3 | Aniket Sharma | XI | | 6 | Tapan Samanta | XI | + ------+---------------+------+","title":"ENDSWITH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#endswith","text":"","title":"ENDSWITH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#description","text":"Returns whether to end with the specified suffix. Returns 1 if the string ends with the specified suffix, otherwise it returns 0. This function is case sensitive.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#syntax","text":"> ENDSWITH(str,suffix)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#arguments","text":"Arguments Description str Required. CHAR and VARCHAR both are supported. suffix Required. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#returned-values","text":"1, if the string ends with the specified suffix. 0, if the string does not end with the specified suffix.","title":"Returned Values"},{"location":"MatrixOne/Reference/Builtin-Functions/String/endswith/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b varchar ( 100 ), c char ( 20 )); > insert into t1 values ( 1 , 'Ananya Majumdar' , 'XI' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'XI' ); > select a , endsWith ( b , 'a' ) from t1 ; + ------+----------------+ | a | endswith ( b , a ) | + ------+----------------+ | 1 | 0 | | 2 | 1 | | 3 | 1 | | 4 | 0 | | 5 | 0 | | 6 | 1 | + ------+----------------+ > select a , b , c from t1 where endswith ( b , 'a' ) = 1 and endswith ( c , 'I' ) = 1 ; + ------+---------------+------+ | a | b | c | + ------+---------------+------+ | 3 | Aniket Sharma | XI | | 6 | Tapan Samanta | XI | + ------+---------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/","text":"FIND_IN_SET() Description This function FIND_IN_SET() returns a value in the range of 1 to N if the string str is in the string list strlist consisting of N substrings. A string list is a string composed of substrings separated by , characters. If the first argument is a constant string and the second is a column of type SET , the FIND_IN_SET() function is optimized to use bit arithmetic. Returns 0 if str is not in strlist or if strlist is the empty string. Returns NULL if either argument is NULL . This function does not work properly if the first argument contains a comma (,) character. Syntax > FIND_IN_SET(str,strlist) Arguments Arguments Description str Required. both CHAR and VARCHAR are supported. strlist Required. Examples select find_in_set ( 'b' , 'a,b,c,d' ); + -------------------------+ | find_in_set ( b , a , b , c , d ) | + -------------------------+ | 2 | + -------------------------+","title":"FIND_IN_SET()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/#find_in_set","text":"","title":"FIND_IN_SET()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/#description","text":"This function FIND_IN_SET() returns a value in the range of 1 to N if the string str is in the string list strlist consisting of N substrings. A string list is a string composed of substrings separated by , characters. If the first argument is a constant string and the second is a column of type SET , the FIND_IN_SET() function is optimized to use bit arithmetic. Returns 0 if str is not in strlist or if strlist is the empty string. Returns NULL if either argument is NULL . This function does not work properly if the first argument contains a comma (,) character.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/#syntax","text":"> FIND_IN_SET(str,strlist)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/#arguments","text":"Arguments Description str Required. both CHAR and VARCHAR are supported. strlist Required.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/find-in-set/#examples","text":"select find_in_set ( 'b' , 'a,b,c,d' ); + -------------------------+ | find_in_set ( b , a , b , c , d ) | + -------------------------+ | 2 | + -------------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/","text":"LENGTH() Description The length() function returns the length of the string. Syntax > LENGTH(str) Arguments Arguments Description str Required. String you want to calculate. Examples > select a , length ( a ) from t1 ; a length ( a ) a 1 ab 2 abc 3","title":"LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/#length","text":"","title":"LENGTH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/#description","text":"The length() function returns the length of the string.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/#syntax","text":"> LENGTH(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/#arguments","text":"Arguments Description str Required. String you want to calculate.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/length/#examples","text":"> select a , length ( a ) from t1 ; a length ( a ) a 1 ab 2 abc 3","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/","text":"LPAD() Description This function LPAD(str,len,padstr) returns the string str , left-padded with the string padstr to a length of len characters. If str is longer than len , the return value is shortened to len characters. Syntax > LPAD(str,len,padstr) Arguments Arguments Description str Required. The string to be padded. CHAR and VARCHAR both are supported. len Required. padstr Required. The string used to pad on the left. CHAR and VARCHAR both are supported. Examples > drop table if exists t1 ; > CREATE TABLE t1 ( Student_id INT , Student_name VARCHAR ( 100 ), Student_Class CHAR ( 20 )); > INSERT INTO t1 VALUES ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > SELECT Student_id , Student_name , LPAD ( Student_Class , 10 , ' _' ) AS LeftPaddedString FROM t1 ; + ------------+-----------------+------------------+ | Student_id | Student_name | LeftPaddedString | + ------------+-----------------+------------------+ | 1 | Ananya Majumdar | _ _ _ _IX | | 2 | Anushka Samanta | _ _ _ _ X | | 3 | Aniket Sharma | _ _ _ _XI | | 4 | Anik Das | _ _ _ _ X | | 5 | Riya Jain | _ _ _ _IX | | 6 | Tapan Samanta | _ _ _ _ X | + ------------+-----------------+------------------+ > SELECT Student_id , lpad ( Student_name , 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | Anan | | 2 | Anus | | 3 | Anik | | 4 | Anik | | 5 | Riya | | 6 | Tapa | + ------------+------------------+ > SELECT Student_id , lpad ( Student_name , - 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | NULL | | 2 | NULL | | 3 | NULL | | 4 | NULL | | 5 | NULL | | 6 | NULL | + ------------+------------------+ > SELECT Student_id , lpad ( Student_name , 0 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | | | 2 | | | 3 | | | 4 | | | 5 | | | 6 | | + ------------+------------------+","title":"LPAD()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/#lpad","text":"","title":"LPAD()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/#description","text":"This function LPAD(str,len,padstr) returns the string str , left-padded with the string padstr to a length of len characters. If str is longer than len , the return value is shortened to len characters.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/#syntax","text":"> LPAD(str,len,padstr)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/#arguments","text":"Arguments Description str Required. The string to be padded. CHAR and VARCHAR both are supported. len Required. padstr Required. The string used to pad on the left. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/lpad/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( Student_id INT , Student_name VARCHAR ( 100 ), Student_Class CHAR ( 20 )); > INSERT INTO t1 VALUES ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > SELECT Student_id , Student_name , LPAD ( Student_Class , 10 , ' _' ) AS LeftPaddedString FROM t1 ; + ------------+-----------------+------------------+ | Student_id | Student_name | LeftPaddedString | + ------------+-----------------+------------------+ | 1 | Ananya Majumdar | _ _ _ _IX | | 2 | Anushka Samanta | _ _ _ _ X | | 3 | Aniket Sharma | _ _ _ _XI | | 4 | Anik Das | _ _ _ _ X | | 5 | Riya Jain | _ _ _ _IX | | 6 | Tapan Samanta | _ _ _ _ X | + ------------+-----------------+------------------+ > SELECT Student_id , lpad ( Student_name , 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | Anan | | 2 | Anus | | 3 | Anik | | 4 | Anik | | 5 | Riya | | 6 | Tapa | + ------------+------------------+ > SELECT Student_id , lpad ( Student_name , - 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | NULL | | 2 | NULL | | 3 | NULL | | 4 | NULL | | 5 | NULL | | 6 | NULL | + ------------+------------------+ > SELECT Student_id , lpad ( Student_name , 0 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | | | 2 | | | 3 | | | 4 | | | 5 | | | 6 | | + ------------+------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/","text":"LTRIM() Description This function LTRIM() returns the string with leading space characters removed. Syntax > LTRIM(str) Arguments Arguments Description str Required. CHAR and VARCHAR both are supported. Examples > drop table if exists t1 ; > create table t1 ( a char ( 8 ), b varchar ( 10 )); > insert into t1 values ( ' matrix' , ' matrixone' ); > select ltrim ( a ), ltrim ( b ) from t1 ; + ----------+-----------+ | ltrim ( a ) | ltrim ( b ) | + ----------+-----------+ | matrix | matrixone | + ----------+-----------+","title":"LTRIM()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/#ltrim","text":"","title":"LTRIM()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/#description","text":"This function LTRIM() returns the string with leading space characters removed.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/#syntax","text":"> LTRIM(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/#arguments","text":"Arguments Description str Required. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/ltrim/#examples","text":"> drop table if exists t1 ; > create table t1 ( a char ( 8 ), b varchar ( 10 )); > insert into t1 values ( ' matrix' , ' matrixone' ); > select ltrim ( a ), ltrim ( b ) from t1 ; + ----------+-----------+ | ltrim ( a ) | ltrim ( b ) | + ----------+-----------+ | matrix | matrixone | + ----------+-----------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/","text":"OCT(N) Description This function OCT(N) returns a string representation of the octal value of N , where N is a longlong (BIGINT) number. Returns NULL if N is NULL . Syntax > OCT(N) Arguments Arguments Description N Required. UINT Type Examples SELECT OCT ( 12 ); + ---------+ | oct ( 12 ) | + ---------+ | 14 . 0000 | + ---------+ 1 row in set ( 0 . 00 sec )","title":"OCT()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/#octn","text":"","title":"OCT(N)"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/#description","text":"This function OCT(N) returns a string representation of the octal value of N , where N is a longlong (BIGINT) number. Returns NULL if N is NULL .","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/#syntax","text":"> OCT(N)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/#arguments","text":"Arguments Description N Required. UINT Type","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/oct/#examples","text":"SELECT OCT ( 12 ); + ---------+ | oct ( 12 ) | + ---------+ | 14 . 0000 | + ---------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/","text":"REVERSE() Description Returns the string str with the order of the characters reversed. Syntax > REVERSE(str) Arguments Arguments Description Str Required. both CHAR and VARCHAR are supported. Examples > drop table if exists t1 ; > create table t1 ( a varchar ( 12 ), c char ( 30 )); > insert into t1 values ( 'sdfad ' , '2022-02-02 22:22:22' ); > insert into t1 values ( ' sdfad ' , '2022-02-02 22:22:22' ); > insert into t1 values ( 'adsf sdfad' , '2022-02-02 22:22:22' ); > insert into t1 values ( ' sdfad' , '2022-02-02 22:22:22' ); > select reverse ( a ), reverse ( c ) from t1 ; + -------------+---------------------+ | reverse ( a ) | reverse ( c ) | + -------------+---------------------+ | dafds | 22 : 22 : 22 20 - 20 - 2202 | | dafds | 22 : 22 : 22 20 - 20 - 2202 | | dafds fsda | 22 : 22 : 22 20 - 20 - 2202 | | dafds | 22 : 22 : 22 20 - 20 - 2202 | + -------------+---------------------+ > select a from t1 where reverse ( a ) like 'daf%' ; + -------------+ | a | + -------------+ | adsf sdfad | | sdfad | + -------------+ > select reverse ( a ) reversea , reverse ( reverse ( a )) normala from t1 ; + -------------+-------------+ | reversea | normala | + -------------+-------------+ | dafds | sdfad | | dafds | sdfad | | dafds fsda | adsf sdfad | | dafds | sdfad | + -------------+-------------+","title":"REVERSE()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/#reverse","text":"","title":"REVERSE()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/#description","text":"Returns the string str with the order of the characters reversed.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/#syntax","text":"> REVERSE(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/#arguments","text":"Arguments Description Str Required. both CHAR and VARCHAR are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/reverse/#examples","text":"> drop table if exists t1 ; > create table t1 ( a varchar ( 12 ), c char ( 30 )); > insert into t1 values ( 'sdfad ' , '2022-02-02 22:22:22' ); > insert into t1 values ( ' sdfad ' , '2022-02-02 22:22:22' ); > insert into t1 values ( 'adsf sdfad' , '2022-02-02 22:22:22' ); > insert into t1 values ( ' sdfad' , '2022-02-02 22:22:22' ); > select reverse ( a ), reverse ( c ) from t1 ; + -------------+---------------------+ | reverse ( a ) | reverse ( c ) | + -------------+---------------------+ | dafds | 22 : 22 : 22 20 - 20 - 2202 | | dafds | 22 : 22 : 22 20 - 20 - 2202 | | dafds fsda | 22 : 22 : 22 20 - 20 - 2202 | | dafds | 22 : 22 : 22 20 - 20 - 2202 | + -------------+---------------------+ > select a from t1 where reverse ( a ) like 'daf%' ; + -------------+ | a | + -------------+ | adsf sdfad | | sdfad | + -------------+ > select reverse ( a ) reversea , reverse ( reverse ( a )) normala from t1 ; + -------------+-------------+ | reversea | normala | + -------------+-------------+ | dafds | sdfad | | dafds | sdfad | | dafds fsda | adsf sdfad | | dafds | sdfad | + -------------+-------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/","text":"RPAD() Description This function RPAD(str,len,padstr) returns the string str , right-padded with the string padstr to a length of len characters. If str is longer than len , the return value is shortened to len characters. Syntax > RPAD(str,len,padstr) Arguments Arguments Description str Required. The string to be padded. CHAR and VARCHAR both are supported. len Required. padstr Required. The string used to pad on the right. CHAR and VARCHAR both are supported. Examples > drop table if exists t1 ; > CREATE TABLE t1 ( Student_id INT , Student_name VARCHAR ( 100 ), Student_Class CHAR ( 20 )); > INSERT INTO t1 VALUES ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > SELECT Student_id , Student_name , RPAD ( Student_Class , 10 , ' _' ) AS LeftPaddedString FROM t1 ; + ------------+-----------------+------------------+ | Student_id | Student_name | LeftPaddedString | + ------------+-----------------+------------------+ | 1 | Ananya Majumdar | IX _ _ _ _ | | 2 | Anushka Samanta | X _ _ _ _ | | 3 | Aniket Sharma | XI _ _ _ _ | | 4 | Anik Das | X _ _ _ _ | | 5 | Riya Jain | IX _ _ _ _ | | 6 | Tapan Samanta | X _ _ _ _ | + ------------+-----------------+------------------+ > SELECT Student_id , rpad ( Student_name , 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | Anan | | 2 | Anus | | 3 | Anik | | 4 | Anik | | 5 | Riya | | 6 | Tapa | + ------------+------------------+ > SELECT Student_id , rpad ( Student_name , - 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | NULL | | 2 | NULL | | 3 | NULL | | 4 | NULL | | 5 | NULL | | 6 | NULL | + ------------+------------------+ > SELECT Student_id , rpad ( Student_name , 0 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | | | 2 | | | 3 | | | 4 | | | 5 | | | 6 | | + ------------+------------------+","title":"RPAD()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/#rpad","text":"","title":"RPAD()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/#description","text":"This function RPAD(str,len,padstr) returns the string str , right-padded with the string padstr to a length of len characters. If str is longer than len , the return value is shortened to len characters.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/#syntax","text":"> RPAD(str,len,padstr)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/#arguments","text":"Arguments Description str Required. The string to be padded. CHAR and VARCHAR both are supported. len Required. padstr Required. The string used to pad on the right. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rpad/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( Student_id INT , Student_name VARCHAR ( 100 ), Student_Class CHAR ( 20 )); > INSERT INTO t1 VALUES ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > SELECT Student_id , Student_name , RPAD ( Student_Class , 10 , ' _' ) AS LeftPaddedString FROM t1 ; + ------------+-----------------+------------------+ | Student_id | Student_name | LeftPaddedString | + ------------+-----------------+------------------+ | 1 | Ananya Majumdar | IX _ _ _ _ | | 2 | Anushka Samanta | X _ _ _ _ | | 3 | Aniket Sharma | XI _ _ _ _ | | 4 | Anik Das | X _ _ _ _ | | 5 | Riya Jain | IX _ _ _ _ | | 6 | Tapan Samanta | X _ _ _ _ | + ------------+-----------------+------------------+ > SELECT Student_id , rpad ( Student_name , 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | Anan | | 2 | Anus | | 3 | Anik | | 4 | Anik | | 5 | Riya | | 6 | Tapa | + ------------+------------------+ > SELECT Student_id , rpad ( Student_name , - 4 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | NULL | | 2 | NULL | | 3 | NULL | | 4 | NULL | | 5 | NULL | | 6 | NULL | + ------------+------------------+ > SELECT Student_id , rpad ( Student_name , 0 , 'new' ) AS LeftPaddedString FROM t1 ; + ------------+------------------+ | Student_id | LeftPaddedString | + ------------+------------------+ | 1 | | | 2 | | | 3 | | | 4 | | | 5 | | | 6 | | + ------------+------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/","text":"RTRIM() Description This function RTRIM() returns the string with trailing space characters removed. Syntax > RTRIM(str) Arguments Arguments Description str Required. CHAR and VARCHAR both are supported. Examples > drop table if exists t1 ; > create table t1 ( a char ( 8 ), b varchar ( 10 )); > insert into t1 values ( 'matrix ' , 'matrixone ' ); > select rtrim ( a ), rtrim ( b ) from t1 ; + ----------+-----------+ | rtrim ( a ) | rtrim ( b ) | + ----------+-----------+ | matrix | matrixone | + ----------+-----------+","title":"RTRIM()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/#rtrim","text":"","title":"RTRIM()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/#description","text":"This function RTRIM() returns the string with trailing space characters removed.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/#syntax","text":"> RTRIM(str)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/#arguments","text":"Arguments Description str Required. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/rtrim/#examples","text":"> drop table if exists t1 ; > create table t1 ( a char ( 8 ), b varchar ( 10 )); > insert into t1 values ( 'matrix ' , 'matrixone ' ); > select rtrim ( a ), rtrim ( b ) from t1 ; + ----------+-----------+ | rtrim ( a ) | rtrim ( b ) | + ----------+-----------+ | matrix | matrixone | + ----------+-----------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/","text":"SPACE() Description SPACE(N) Returns a string consisting of N space characters. Syntax > SPACE(N) Arguments Arguments Description N Required. UINT Type Examples > drop table if exists t1 ; > CREATE TABLE t1 ( Employee_name VARCHAR ( 100 ) NOT NULL , Joining_Date DATE NOT NULL ); > INSERT INTO t1 ( Employee_name , Joining_Date ) VALUES ( ' Ananya Majumdar' , '2000-01-11' ), ( ' Anushka Samanta' , '2002-11-10' ), ( ' Aniket Sharma ' , '2005-06-11' ), ( ' Anik Das' , '2008-01-21' ), ( ' Riya Jain' , '2008-02-01' ), ( ' Tapan Samanta' , '2010-01-11' ), ( ' Deepak Sharma' , '2014-12-01' ), ( ' Ankana Jana' , '2018-08-17' ), ( ' Shreya Ghosh' , '2020-09-10' ) ; > INSERT INTO t1 ( Employee_name , Joining_Date ) values ( ' ' , '2014-12-01' ); > select * from t1 where Employee_name = space ( 5 ); + ---------------+--------------+ | Employee_name | Joining_Date | + ---------------+--------------+ | | 2014 - 12 - 01 | + ---------------+--------------+","title":"SPACE()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/#space","text":"","title":"SPACE()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/#description","text":"SPACE(N) Returns a string consisting of N space characters.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/#syntax","text":"> SPACE(N)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/#arguments","text":"Arguments Description N Required. UINT Type","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/space/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( Employee_name VARCHAR ( 100 ) NOT NULL , Joining_Date DATE NOT NULL ); > INSERT INTO t1 ( Employee_name , Joining_Date ) VALUES ( ' Ananya Majumdar' , '2000-01-11' ), ( ' Anushka Samanta' , '2002-11-10' ), ( ' Aniket Sharma ' , '2005-06-11' ), ( ' Anik Das' , '2008-01-21' ), ( ' Riya Jain' , '2008-02-01' ), ( ' Tapan Samanta' , '2010-01-11' ), ( ' Deepak Sharma' , '2014-12-01' ), ( ' Ankana Jana' , '2018-08-17' ), ( ' Shreya Ghosh' , '2020-09-10' ) ; > INSERT INTO t1 ( Employee_name , Joining_Date ) values ( ' ' , '2014-12-01' ); > select * from t1 where Employee_name = space ( 5 ); + ---------------+--------------+ | Employee_name | Joining_Date | + ---------------+--------------+ | | 2014 - 12 - 01 | + ---------------+--------------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/","text":"STARTSWITH() Description Returns 1 whether string starts with the specified prefix, otherwise it returns 0.This function is case sensitive. Syntax > STARTSWITH(str,prefix) Arguments Arguments Description str Required. CHAR and VARCHAR both are supported. prefix Required. CHAR and VARCHAR both are supported. Returned Values 1, if the string starts with the specified prefix. 0, if the string does not start with the specified prefix. Examples > drop table if exists t1 ; > create table t1 ( a int , b varchar ( 100 ), c char ( 20 )); > insert into t1 values ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > select a , startswith ( b , 'An' ) from t1 ; + ------+-------------------+ | a | startswith ( b , An ) | + ------+-------------------+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 1 | | 5 | 0 | | 6 | 0 | + ------+-------------------+ > select a , b , c from t1 where startswith ( b , 'An' ) = 1 and startswith ( c , 'I' ) = 1 ; + ------+-----------------+------+ | a | b | c | + ------+-----------------+------+ | 1 | Ananya Majumdar | IX | + ------+-----------------+------+","title":"STARTSWITH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#startswith","text":"","title":"STARTSWITH()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#description","text":"Returns 1 whether string starts with the specified prefix, otherwise it returns 0.This function is case sensitive.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#syntax","text":"> STARTSWITH(str,prefix)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#arguments","text":"Arguments Description str Required. CHAR and VARCHAR both are supported. prefix Required. CHAR and VARCHAR both are supported.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#returned-values","text":"1, if the string starts with the specified prefix. 0, if the string does not start with the specified prefix.","title":"Returned Values"},{"location":"MatrixOne/Reference/Builtin-Functions/String/startswith/#examples","text":"> drop table if exists t1 ; > create table t1 ( a int , b varchar ( 100 ), c char ( 20 )); > insert into t1 values ( 1 , 'Ananya Majumdar' , 'IX' ), ( 2 , 'Anushka Samanta' , 'X' ), ( 3 , 'Aniket Sharma' , 'XI' ), ( 4 , 'Anik Das' , 'X' ), ( 5 , 'Riya Jain' , 'IX' ), ( 6 , 'Tapan Samanta' , 'X' ); > select a , startswith ( b , 'An' ) from t1 ; + ------+-------------------+ | a | startswith ( b , An ) | + ------+-------------------+ | 1 | 1 | | 2 | 1 | | 3 | 1 | | 4 | 1 | | 5 | 0 | | 6 | 0 | + ------+-------------------+ > select a , b , c from t1 where startswith ( b , 'An' ) = 1 and startswith ( c , 'I' ) = 1 ; + ------+-----------------+------+ | a | b | c | + ------+-----------------+------+ | 1 | Ananya Majumdar | IX | + ------+-----------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/","text":"SUBSTRING() Description SUBSTR() is a synonym of SUBSTRING(). The forms without a len argument return a substring from string str starting at position pos. The forms with a len argument return a substring len characters long from string str, starting at position pos. Syntax > SUBSTRING(str,pos) > SUBSTR(str,pos,len) Arguments Arguments Description str Required. CHAR and VARCHAR are both supported pos Required. len Optional. Examples > CREATE TABLE IF NOT EXISTS t1 ( pub_id varchar ( 8 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , pub_name varchar ( 50 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , pub_city varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , country varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , country_office varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , no_of_branch int NOT NULL DEFAULT 0 , estd date NOT NULL DEFAULT '2000-01-01' ); > INSERT INTO t3 ( pub_id , pub_name , pub_city , country , country_office , no_of_branch , estd ) VALUES ( 'P001' , 'Jex Max Publication' , 'New York' , 'USA' , 'New York' , 15 , '1969-12-25' ), ( 'P002' , 'BPP Publication' , 'Mumbai' , 'India' , 'New Delhi' , 10 , '1985-10-01' ), ( 'P003' , 'New Harrold Publication' , 'Adelaide' , 'Australia' , 'Sydney' , 6 , '1975-09-05' ), ( 'P004' , 'Ultra Press Inc.' , 'London' , 'UK' , 'London' , 8 , '1948-07-10' ), ( 'P005' , 'Mountain Publication' , 'Houstan' , 'USA' , 'Sun Diego' , 25 , '1975-01-01' ), ( 'P006' , 'Summer Night Publication' , 'New York' , 'USA' , 'Atlanta' , 10 , '1990-12-10' ), ( 'P007' , 'Pieterson Grp. of Publishers' , 'Cambridge' , 'UK' , 'London' , 6 , '1950-07-15' ), ( 'P008' , 'Novel Publisher Ltd.' , 'New Delhi' , 'India' , 'Bangalore' , 10 , '2000-01-01' ); > SELECT pub_name , SUBSTR ( pub_name , 4 , 5 ) FROM t1 WHERE country = 'USA' ; + --------------------------+------------------------+ | pub_name | substr ( pub_name , 4 , 5 ) | + --------------------------+------------------------+ | Jex Max Publication | Max | | Mountain Publication | ntain | | Summer Night Publication | mer N | + --------------------------+------------------------+ 3 rows in set ( 0 . 04 sec ) > SELECT pub_name , SUBSTR ( pub_name , 5 ) FROM t1 WHERE country = 'USA' ; + --------------------------+----------------------+ | pub_name | substr ( pub_name , 5 ) | + --------------------------+----------------------+ | Jex Max Publication | Max Publication | | Mountain Publication | tain Publication | | Summer Night Publication | er Night Publication | + --------------------------+----------------------+ 3 rows in set ( 0 . 03 sec ) Constraints Currently, Substring() doesn't support FROM and FOR clauses.","title":"SUBSTRING()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#substring","text":"","title":"SUBSTRING()"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#description","text":"SUBSTR() is a synonym of SUBSTRING(). The forms without a len argument return a substring from string str starting at position pos. The forms with a len argument return a substring len characters long from string str, starting at position pos.","title":"Description"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#syntax","text":"> SUBSTRING(str,pos) > SUBSTR(str,pos,len)","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#arguments","text":"Arguments Description str Required. CHAR and VARCHAR are both supported pos Required. len Optional.","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#examples","text":"> CREATE TABLE IF NOT EXISTS t1 ( pub_id varchar ( 8 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , pub_name varchar ( 50 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , pub_city varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , country varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , country_office varchar ( 25 ) COLLATE latin1_general_ci NOT NULL DEFAULT '' , no_of_branch int NOT NULL DEFAULT 0 , estd date NOT NULL DEFAULT '2000-01-01' ); > INSERT INTO t3 ( pub_id , pub_name , pub_city , country , country_office , no_of_branch , estd ) VALUES ( 'P001' , 'Jex Max Publication' , 'New York' , 'USA' , 'New York' , 15 , '1969-12-25' ), ( 'P002' , 'BPP Publication' , 'Mumbai' , 'India' , 'New Delhi' , 10 , '1985-10-01' ), ( 'P003' , 'New Harrold Publication' , 'Adelaide' , 'Australia' , 'Sydney' , 6 , '1975-09-05' ), ( 'P004' , 'Ultra Press Inc.' , 'London' , 'UK' , 'London' , 8 , '1948-07-10' ), ( 'P005' , 'Mountain Publication' , 'Houstan' , 'USA' , 'Sun Diego' , 25 , '1975-01-01' ), ( 'P006' , 'Summer Night Publication' , 'New York' , 'USA' , 'Atlanta' , 10 , '1990-12-10' ), ( 'P007' , 'Pieterson Grp. of Publishers' , 'Cambridge' , 'UK' , 'London' , 6 , '1950-07-15' ), ( 'P008' , 'Novel Publisher Ltd.' , 'New Delhi' , 'India' , 'Bangalore' , 10 , '2000-01-01' ); > SELECT pub_name , SUBSTR ( pub_name , 4 , 5 ) FROM t1 WHERE country = 'USA' ; + --------------------------+------------------------+ | pub_name | substr ( pub_name , 4 , 5 ) | + --------------------------+------------------------+ | Jex Max Publication | Max | | Mountain Publication | ntain | | Summer Night Publication | mer N | + --------------------------+------------------------+ 3 rows in set ( 0 . 04 sec ) > SELECT pub_name , SUBSTR ( pub_name , 5 ) FROM t1 WHERE country = 'USA' ; + --------------------------+----------------------+ | pub_name | substr ( pub_name , 5 ) | + --------------------------+----------------------+ | Jex Max Publication | Max Publication | | Mountain Publication | tain Publication | | Summer Night Publication | er Night Publication | + --------------------------+----------------------+ 3 rows in set ( 0 . 03 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Builtin-Functions/String/substring/#constraints","text":"Currently, Substring() doesn't support FROM and FOR clauses.","title":"Constraints"},{"location":"MatrixOne/Reference/Builtin-Functions/table/0.6-unnest/","text":"UNNEST() The UNNEST function takes an ARRAY and returns a table with a row for each element in the ARRAY . Empty arrays and NULL as an input returns an empty table. An array containing NULL values will produce a row of NULL values. Syntax > UNNEST(ARRAY) [WITH OFFSET] Arguments Arguments Description ARRAY Required. ARRAY as an input but can return a table of any structure. WITH OFFSET Optional. WITH OFFSET clause provides an additional column containing the position of each element in the array (starting at zero) for each row produced by UNNEST . Examples Example 1: > select * from unnest ( '{\"a\":1}' ) u ; + ----------------+------+------+------+-------+-------+----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+----------+ | UNNEST_DEFAULT | 0 | a | $ . a | NULL | 1 | { \"a\" : 1 } | + ----------------+------+------+------+-------+-------+----------+ 1 row in set ( 0 . 00 sec ) > select * from unnest ( '[1,2,3]' ) u ; + ----------------+------+------+------+-------+-------+-----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+-----------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 1 ] | 1 | 2 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 2 ] | 2 | 3 | [ 1 , 2 , 3 ] | + ----------------+------+------+------+-------+-------+-----------+ 3 rows in set ( 0 . 00 sec ) > select * from unnest ( '[1,2,3]' , '$' ) u ; + ----------------+------+------+------+-------+-------+-----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+-----------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 1 ] | 1 | 2 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 2 ] | 2 | 3 | [ 1 , 2 , 3 ] | + ----------------+------+------+------+-------+-------+-----------+ 3 rows in set ( 0 . 01 sec ) > select * from unnest ( '[1,2,3]' , '$[0]' , true ) u ; + ----------------+------+------+------+-------+-------+------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | NULL | NULL | 1 | + ----------------+------+------+------+-------+-------+------+ 1 row in set ( 0 . 00 sec ) Example 2: > create table t1 ( a json , b int ); > insert into t1 values ( '{\"a\":1,\"b\":[{\"c\":2,\"d\":3},false,4],\"e\":{\"f\":true,\"g\":[null,true,1.1]}}' , 1 ); > insert into t1 values ( '[1,true,false,null,\"aaa\",1.1,{\"t\":false}]' , 2 ); > select * from t1 ; + ---------------------------------------------------------------------------------------+------+ | a | b | + ---------------------------------------------------------------------------------------+------+ | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | 1 | | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | 2 | + ---------------------------------------------------------------------------------------+------+ 2 rows in set ( 0 . 00 sec ) > select * from unnest ( t1 . a ) as f ; + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ | col | seq | key | path | index | value | this | + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ | a | 0 | a | $ . a | NULL | 1 | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 0 | b | $ . b | NULL | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 0 | e | $ . e | NULL | { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] } | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 1 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 1 ] | 1 | true | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 2 ] | 2 | false | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 3 ] | 3 | null | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 4 ] | 4 | \"aaa\" | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 5 ] | 5 | 1 . 1 | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 6 ] | 6 | { \"t\" : false } | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ 10 rows in set ( 0 . 01 sec ) > select * from unnest ( t1 . a , \"$.b\" ) as f ; + ------+------+------+--------+-------+------------------+------------------------------+ | col | seq | key | path | index | value | this | + ------+------+------+--------+-------+------------------+------------------------------+ | a | 0 | NULL | $ . b [ 0 ] | 0 | { \"c\" : 2 , \"d\" : 3 } | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | | a | 0 | NULL | $ . b [ 1 ] | 1 | false | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | | a | 0 | NULL | $ . b [ 2 ] | 2 | 4 | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | + ------+------+------+--------+-------+------------------+------------------------------+ 3 rows in set ( 0 . 00 sec ) > select * from unnest ( t1 . a , \"$.a\" , true ) as f ; + ------+------+------+------+-------+-------+------+ | col | seq | key | path | index | value | this | + ------+------+------+------+-------+-------+------+ | a | 0 | NULL | $ . a | NULL | NULL | 1 | + ------+------+------+------+-------+-------+------+ 1 row in set ( 0 . 00 sec )","title":"**UNNEST()**"},{"location":"MatrixOne/Reference/Builtin-Functions/table/0.6-unnest/#unnest","text":"The UNNEST function takes an ARRAY and returns a table with a row for each element in the ARRAY . Empty arrays and NULL as an input returns an empty table. An array containing NULL values will produce a row of NULL values.","title":"UNNEST()"},{"location":"MatrixOne/Reference/Builtin-Functions/table/0.6-unnest/#syntax","text":"> UNNEST(ARRAY) [WITH OFFSET]","title":"Syntax"},{"location":"MatrixOne/Reference/Builtin-Functions/table/0.6-unnest/#arguments","text":"Arguments Description ARRAY Required. ARRAY as an input but can return a table of any structure. WITH OFFSET Optional. WITH OFFSET clause provides an additional column containing the position of each element in the array (starting at zero) for each row produced by UNNEST .","title":"Arguments"},{"location":"MatrixOne/Reference/Builtin-Functions/table/0.6-unnest/#examples","text":"Example 1: > select * from unnest ( '{\"a\":1}' ) u ; + ----------------+------+------+------+-------+-------+----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+----------+ | UNNEST_DEFAULT | 0 | a | $ . a | NULL | 1 | { \"a\" : 1 } | + ----------------+------+------+------+-------+-------+----------+ 1 row in set ( 0 . 00 sec ) > select * from unnest ( '[1,2,3]' ) u ; + ----------------+------+------+------+-------+-------+-----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+-----------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 1 ] | 1 | 2 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 2 ] | 2 | 3 | [ 1 , 2 , 3 ] | + ----------------+------+------+------+-------+-------+-----------+ 3 rows in set ( 0 . 00 sec ) > select * from unnest ( '[1,2,3]' , '$' ) u ; + ----------------+------+------+------+-------+-------+-----------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+-----------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 1 ] | 1 | 2 | [ 1 , 2 , 3 ] | | UNNEST_DEFAULT | 0 | NULL | $ [ 2 ] | 2 | 3 | [ 1 , 2 , 3 ] | + ----------------+------+------+------+-------+-------+-----------+ 3 rows in set ( 0 . 01 sec ) > select * from unnest ( '[1,2,3]' , '$[0]' , true ) u ; + ----------------+------+------+------+-------+-------+------+ | col | seq | key | path | index | value | this | + ----------------+------+------+------+-------+-------+------+ | UNNEST_DEFAULT | 0 | NULL | $ [ 0 ] | NULL | NULL | 1 | + ----------------+------+------+------+-------+-------+------+ 1 row in set ( 0 . 00 sec ) Example 2: > create table t1 ( a json , b int ); > insert into t1 values ( '{\"a\":1,\"b\":[{\"c\":2,\"d\":3},false,4],\"e\":{\"f\":true,\"g\":[null,true,1.1]}}' , 1 ); > insert into t1 values ( '[1,true,false,null,\"aaa\",1.1,{\"t\":false}]' , 2 ); > select * from t1 ; + ---------------------------------------------------------------------------------------+------+ | a | b | + ---------------------------------------------------------------------------------------+------+ | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | 1 | | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | 2 | + ---------------------------------------------------------------------------------------+------+ 2 rows in set ( 0 . 00 sec ) > select * from unnest ( t1 . a ) as f ; + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ | col | seq | key | path | index | value | this | + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ | a | 0 | a | $ . a | NULL | 1 | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 0 | b | $ . b | NULL | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 0 | e | $ . e | NULL | { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] } | { \"a\" : 1 , \"b\" : [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ], \"e\" : { \"f\" : true , \"g\" : [ null , true , 1 . 1 ] }} | | a | 1 | NULL | $ [ 0 ] | 0 | 1 | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 1 ] | 1 | true | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 2 ] | 2 | false | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 3 ] | 3 | null | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 4 ] | 4 | \"aaa\" | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 5 ] | 5 | 1 . 1 | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | | a | 1 | NULL | $ [ 6 ] | 6 | { \"t\" : false } | [ 1 , true , false , null , \"aaa\" , 1 . 1 , { \"t\" : false } ] | + ------+------+------+------+-------+-------------------------------------+---------------------------------------------------------------------------------------+ 10 rows in set ( 0 . 01 sec ) > select * from unnest ( t1 . a , \"$.b\" ) as f ; + ------+------+------+--------+-------+------------------+------------------------------+ | col | seq | key | path | index | value | this | + ------+------+------+--------+-------+------------------+------------------------------+ | a | 0 | NULL | $ . b [ 0 ] | 0 | { \"c\" : 2 , \"d\" : 3 } | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | | a | 0 | NULL | $ . b [ 1 ] | 1 | false | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | | a | 0 | NULL | $ . b [ 2 ] | 2 | 4 | [ { \"c\" : 2 , \"d\" : 3 } , false , 4 ] | + ------+------+------+--------+-------+------------------+------------------------------+ 3 rows in set ( 0 . 00 sec ) > select * from unnest ( t1 . a , \"$.a\" , true ) as f ; + ------+------+------+------+-------+-------+------+ | col | seq | key | path | index | value | this | + ------+------+------+------+-------+-------+------+ | a | 0 | NULL | $ . a | NULL | NULL | 1 | + ------+------+------+------+-------+-------+------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/Data-Types/0.6-blob-type/","text":"The BLOB and TEXT Types BLOB A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB , BLOB , MEDIUMBLOB , and LONGBLOB . These differ only in the maximum length of the values they can hold. BLOB values are treated as binary strings (byte strings). They have the binary character set and collation, and comparison and sorting are based on the numeric values of the bytes in column values. TEXT The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. For more information, see Data Types Overview TEXT values are treated as nonbinary strings (character strings). They have a character set other than binary, and values are sorted and compared based on the collation of the character set. About BLOB and TEXT Truncation of excess trailing spaces from values to be inserted into TEXT columns always generates a warning. For TEXT and BLOB columns, there is no padding on insert and no bytes are stripped on select. If you use the BINARY attribute with a TEXT data type, the column is assigned the binary (_bin) collation of the column character set. LONG and LONG VARCHAR map to the MEDIUMTEXT data type. This is a compatibility feature. Each BLOB or TEXT value is represented internally by a separately allocated object. This is in contrast to all other data types, for which storage is allocated once per column when the table is opened. In some cases, it may be desirable to store binary data such as media files in BLOB or TEXT columns.","title":"BLOB Data Type"},{"location":"MatrixOne/Reference/Data-Types/0.6-blob-type/#the-blob-and-text-types","text":"BLOB A BLOB is a binary large object that can hold a variable amount of data. The four BLOB types are TINYBLOB , BLOB , MEDIUMBLOB , and LONGBLOB . These differ only in the maximum length of the values they can hold. BLOB values are treated as binary strings (byte strings). They have the binary character set and collation, and comparison and sorting are based on the numeric values of the bytes in column values. TEXT The four TEXT types are TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT. For more information, see Data Types Overview TEXT values are treated as nonbinary strings (character strings). They have a character set other than binary, and values are sorted and compared based on the collation of the character set. About BLOB and TEXT Truncation of excess trailing spaces from values to be inserted into TEXT columns always generates a warning. For TEXT and BLOB columns, there is no padding on insert and no bytes are stripped on select. If you use the BINARY attribute with a TEXT data type, the column is assigned the binary (_bin) collation of the column character set. LONG and LONG VARCHAR map to the MEDIUMTEXT data type. This is a compatibility feature. Each BLOB or TEXT value is represented internally by a separately allocated object. This is in contrast to all other data types, for which storage is allocated once per column when the table is opened. In some cases, it may be desirable to store binary data such as media files in BLOB or TEXT columns.","title":"The BLOB and TEXT Types"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/","text":"Data Types Overview MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html Integer Numbers Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615 Real Numbers Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE String Types Data Type Size Syntax Description char 24 byte CHAR Fixed length string varchar 24 byte VARCHAR Variable length string text 1073741824 bytes TEXT Long text data Binary Types Data Type Size Syntax Description tinyblob 255 bytes TINYBLOB A binary string of up to 255 characters blob 65535 bytes BLOB Long text data in binary form mediumblob 16777215 bytes MEDIUMBLOB Medium length text data in binary form longblob 4294967295 bytes LONGBLOB Large text data in binary form JSON \u6570\u636e\u7c7b\u578b JSON Data Type Syntax Value INT\u3001FLOAT String CHAR\u3001VARCHAR\u3001TINYTEXT\u3001TEXT\u3001MEDIUMTEXT\u3001LONGTEXT\u3001TINYBLOB\u3001BLOB\u3001MEDIUMBLOB\u3001LONGBLOB Bool TRUE\u3001FALSE Array An ordered sequence of zero or more values. Each value can be of any type. Arrays are enclosed in [] and elements are separated by commas. Time and date Date\u3001Datetime Object An unordered collection of zero or more key-value pairs. The key must be a string, and the value can be of any type. Objects are enclosed by {} , separated by commas between key-value pairs, and separated by colons : between keys and values. Null NULL Time and Date Types Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD/YYYYMMDD DateTime 8 byte second 0001-01-01 00:00:00.000000 9999-12-31 23:59:59.999999 YYYY-MM-DD hh:mi:ssssss TIMESTAMP 8 byte second 1970-01-01 00:00:01.000000 2038-01-19 03:14:07.999999 YYYYMMDD hh:mi:ss.ssssss Bool Data Type Size True 1 byte False 1 byte Decimal Types(Beta) Data Type Size Precision Syntax Decimal64 8 byte 19 digits Decimal(N,S), N range(1,18), S range(0,N) Decimal128 16 byte 38 digits Decimal(N,S), N range(18,38), S range(0,N) Examples // Create a table named \"numtable\" with 3 attributes of an \"int\" , a \"float\" and a \"double\" > create table numtable ( id int , fl float , dl double ); // Insert a dataset of int , float and double into table \"numtable\" > insert into numtable values ( 3 , 1 . 234567 , 1 . 2345678912345678912 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total , of which 3 digits may be after the decimal point . > create table numtable ( id int , fl float ( 5 , 3 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 3 , 99 . 123 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total . > create table numtable ( id int , fl float ( 23 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 1 , 1 . 2345678901234567890123456789 ); // Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\" , an \"unsigned smallint\" , an \"unsigned int\" and an \"unsigned bigint\" > create table numtable ( a tinyint unsigned , b smallint unsigned , c int unsigned , d bigint unsigned ); // Insert a dataset of unsigned ( tinyint , smallint , int and bigint ) into table \"numtable\" > insert into numtable values ( 255 , 65535 , 4294967295 , 18446744073709551615 ); // Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names ( name varchar ( 255 ), age char ( 255 )); // Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names ( name , age ) values ( 'Abby' , '24' ); // Create a table named \"calendar\" with 2 attributes of a \"date\" and a \"datetime\" > create table calendar ( a date , b datetime ); // Insert a data of \"date\" and \"datetime\" into table \"calendar\" > insert into calendar ( a , b ) values ( '20220202, ' 2022 - 02 - 02 00 : 10 : 30 '); > insert into calendar(a, b) values(' 2022 - 02 - 02 , '2022-02-02 00:10:30' ); // Create a table named \"decimalTest\" with 2 attribute of a \"decimal\" and b \"decimal\" > create table decimalTest ( a decimal ( 6 , 3 ), b decimal ( 24 , 18 )); > insert into decimalTest values ( 123 . 4567 , 123456 . 1234567891411241355 ); > select * from decimalTest ; + ---------+---------------------------+ | a | b | + ---------+---------------------------+ | 123 . 456 | 123456 . 123456789141124135 | + ---------+---------------------------+ // Create a table named \"booltest\" with 2 attribute of a \"boolean\" and b \"bool\" > create table booltest ( a boolean , b bool ); > insert into booltest values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from booltest ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ 5 rows in set ( 0 . 00 sec ) // Create a table named \"timestamptest\" with 1 attribute of a \"timestamp\" > create table timestamptest ( a timestamp ( 0 ) not null , primary key ( a )); > insert into timestamptest values ( '20200101000000' ), ( '2022-01-02' ), ( '2022-01-02 00:00:01' ), ( '2022-01-02 00:00:01.512345' ); > select * from timestamptest ; + ---------------------+ | a | + ---------------------+ | 2020 - 01 - 01 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 01 | | 2022 - 01 - 02 00 : 00 : 02 | + ---------------------+","title":"Date Types Overview"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#data-types-overview","text":"MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html","title":"Data Types Overview"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#integer-numbers","text":"Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615","title":"Integer Numbers"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#real-numbers","text":"Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE","title":"Real Numbers"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#string-types","text":"Data Type Size Syntax Description char 24 byte CHAR Fixed length string varchar 24 byte VARCHAR Variable length string text 1073741824 bytes TEXT Long text data","title":"String Types"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#binary-types","text":"Data Type Size Syntax Description tinyblob 255 bytes TINYBLOB A binary string of up to 255 characters blob 65535 bytes BLOB Long text data in binary form mediumblob 16777215 bytes MEDIUMBLOB Medium length text data in binary form longblob 4294967295 bytes LONGBLOB Large text data in binary form","title":"Binary Types"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#json","text":"JSON Data Type Syntax Value INT\u3001FLOAT String CHAR\u3001VARCHAR\u3001TINYTEXT\u3001TEXT\u3001MEDIUMTEXT\u3001LONGTEXT\u3001TINYBLOB\u3001BLOB\u3001MEDIUMBLOB\u3001LONGBLOB Bool TRUE\u3001FALSE Array An ordered sequence of zero or more values. Each value can be of any type. Arrays are enclosed in [] and elements are separated by commas. Time and date Date\u3001Datetime Object An unordered collection of zero or more key-value pairs. The key must be a string, and the value can be of any type. Objects are enclosed by {} , separated by commas between key-value pairs, and separated by colons : between keys and values. Null NULL","title":"JSON \u6570\u636e\u7c7b\u578b"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#time-and-date-types","text":"Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD/YYYYMMDD DateTime 8 byte second 0001-01-01 00:00:00.000000 9999-12-31 23:59:59.999999 YYYY-MM-DD hh:mi:ssssss TIMESTAMP 8 byte second 1970-01-01 00:00:01.000000 2038-01-19 03:14:07.999999 YYYYMMDD hh:mi:ss.ssssss","title":"Time and Date Types"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#bool","text":"Data Type Size True 1 byte False 1 byte","title":"Bool"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#decimal-typesbeta","text":"Data Type Size Precision Syntax Decimal64 8 byte 19 digits Decimal(N,S), N range(1,18), S range(0,N) Decimal128 16 byte 38 digits Decimal(N,S), N range(18,38), S range(0,N)","title":"Decimal Types(Beta)"},{"location":"MatrixOne/Reference/Data-Types/0.6-data-types/#examples","text":"// Create a table named \"numtable\" with 3 attributes of an \"int\" , a \"float\" and a \"double\" > create table numtable ( id int , fl float , dl double ); // Insert a dataset of int , float and double into table \"numtable\" > insert into numtable values ( 3 , 1 . 234567 , 1 . 2345678912345678912 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total , of which 3 digits may be after the decimal point . > create table numtable ( id int , fl float ( 5 , 3 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 3 , 99 . 123 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total . > create table numtable ( id int , fl float ( 23 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 1 , 1 . 2345678901234567890123456789 ); // Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\" , an \"unsigned smallint\" , an \"unsigned int\" and an \"unsigned bigint\" > create table numtable ( a tinyint unsigned , b smallint unsigned , c int unsigned , d bigint unsigned ); // Insert a dataset of unsigned ( tinyint , smallint , int and bigint ) into table \"numtable\" > insert into numtable values ( 255 , 65535 , 4294967295 , 18446744073709551615 ); // Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names ( name varchar ( 255 ), age char ( 255 )); // Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names ( name , age ) values ( 'Abby' , '24' ); // Create a table named \"calendar\" with 2 attributes of a \"date\" and a \"datetime\" > create table calendar ( a date , b datetime ); // Insert a data of \"date\" and \"datetime\" into table \"calendar\" > insert into calendar ( a , b ) values ( '20220202, ' 2022 - 02 - 02 00 : 10 : 30 '); > insert into calendar(a, b) values(' 2022 - 02 - 02 , '2022-02-02 00:10:30' ); // Create a table named \"decimalTest\" with 2 attribute of a \"decimal\" and b \"decimal\" > create table decimalTest ( a decimal ( 6 , 3 ), b decimal ( 24 , 18 )); > insert into decimalTest values ( 123 . 4567 , 123456 . 1234567891411241355 ); > select * from decimalTest ; + ---------+---------------------------+ | a | b | + ---------+---------------------------+ | 123 . 456 | 123456 . 123456789141124135 | + ---------+---------------------------+ // Create a table named \"booltest\" with 2 attribute of a \"boolean\" and b \"bool\" > create table booltest ( a boolean , b bool ); > insert into booltest values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from booltest ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ 5 rows in set ( 0 . 00 sec ) // Create a table named \"timestamptest\" with 1 attribute of a \"timestamp\" > create table timestamptest ( a timestamp ( 0 ) not null , primary key ( a )); > insert into timestamptest values ( '20200101000000' ), ( '2022-01-02' ), ( '2022-01-02 00:00:01' ), ( '2022-01-02 00:00:01.512345' ); > select * from timestamptest ; + ---------------------+ | a | + ---------------------+ | 2020 - 01 - 01 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 01 | | 2022 - 01 - 02 00 : 00 : 02 | + ---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Data-Types/0.6-json-type/","text":"The JSON Data Type MatrixOne supports a native JSON data type defined by RFC 7159 that enables efficient access to data in JSON (JavaScript Object Notation) documents. The JSON data type provides these advantages over storing JSON-format strings in a string column: Automatic validation of JSON documents stored in JSON columns. Invalid documents produce an error. Optimized storage format. JSON documents stored in JSON columns are converted to an internal format that permits quick read access to document elements. When the server later must read a JSON value stored in this binary format, the value need not be parsed from a text representation. The binary format is structured to enable the server to look up subobjects or nested values directly by key or array index without reading all values before or after them in the document. The space required to store a JSON document is roughly the same as for LONGBLOB or LONGTEXT . Creating JSON Values A JSON array contains a list of values separated by commas and enclosed within [ and ] characters: [\"abc\", 10, null, true, false] A JSON object contains a set of key-value pairs separated by commas and enclosed within { and } characters: {\"k1\": \"value\", \"k2\": 10} As the examples illustrate, JSON arrays and objects can contain scalar values that are strings or numbers, the JSON null literal, or the JSON boolean true or false literals. Keys in JSON objects must be strings. Temporal (date, datetime) scalar values are also permitted: [\"12:18:29.000000\", \"2015-07-29\", \"2015-07-29 12:18:29.000000\"] Nesting is permitted within JSON array elements and JSON object key values: [99, {\"id\": \"HK500\", \"cost\": 75.99}, [\"hot\", \"cold\"]] {\"k1\": \"value\", \"k2\": [10, 20]} Normalization of JSON Values When a string is parsed and found to be a valid JSON document, it is also normalized. This means that members with keys that duplicate a key found later in the document, reading from left to right, are discarded. Normalization is performed when values are inserted into JSON columns, as shown here: > CREATE TABLE t1 ( c1 JSON ); > INSERT INTO t1 VALUES ( '{\"x\": 17, \"x\": \"red\"}' ), ( '{\"x\": 17, \"x\": \"red\", \"x\": [3, 5, 7]}' ); > SELECT c1 FROM t1 ; + ------------------+ | c1 | + ------------------+ | { \"x\" : \"red\" } | | { \"x\" : [ 3 , 5 , 7 ] } | + ------------------+ Searching and Modifying JSON Values A JSON path expression selects a value within a JSON document. Path expressions are useful with functions that extract parts of or modify a JSON document, to specify where within that document to operate. For example, the following query extracts from a JSON document the value of the member with the name key: > SELECT JSON_EXTRACT ( '{\"id\": 14, \"name\": \"Aztalan\"}' , '$.name' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"id\": 14, \"name\": \"Aztalan\"}' , '$.name' ) | + ---------------------------------------------------------+ | \"Aztalan\" | + ---------------------------------------------------------+ Path syntax uses a leading $ character to represent the JSON document under consideration, optionally followed by selectors that indicate successively more specific parts of the document: A period followed by a key name names the member in an object with the given key. The key name must be specified within double quotation marks if the name without quotes is not legal within path expressions (for example, if it contains a space). [N] appended to a path that selects an array names the value at position N within the array. Array positions are integers beginning with zero. Paths can contain * or ** wildcards: .[*] evaluates to the values of all members in a JSON object. [*] evaluates to the values of all elements in a JSON array. prefix**suffix evaluates to all paths that begin with the named prefix and end with the named suffix. A path that does not exist in the document (evaluates to nonexistent data) evaluates to NULL. Example : [3, {\"a\": [5, 6], \"b\": 10}, [99, 100]] $[0] evaluates to 3. $[1] evaluates to {\"a\": [5, 6], \"b\": 10}. $[2] evaluates to [99, 100]. $[3] evaluates to NULL (it refers to the fourth array element, which does not exist). Because $[1] and $[2] evaluate to nonscalar values, they can be used as the basis for more-specific path expressions that select nested values. Examples: $[1].a evaluates to [5, 6]. $[1].a[1] evaluates to 6. $[1].b evaluates to 10. $[2][0] evaluates to 99. As mentioned previously, path components that name keys must be quoted if the unquoted key name is not legal in path expressions. Let $ refer to this value: {\"a fish\": \"shark\", \"a bird\": \"sparrow\"} The keys both contain a space and must be quoted: $.\"a fish\" evaluates to shark. $.\"a bird\" evaluates to sparrow. Paths that use wildcards evaluate to an array that can contain multiple values: > SELECT JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.*' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.*' ) | + ---------------------------------------------------------+ | [ 1 , 2 , [ 3 , 4 , 5 ]] | + ---------------------------------------------------------+ > SELECT JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.c[*]' ); + ------------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.c[*]' ) | + ------------------------------------------------------------+ | [ 3 , 4 , 5 ] | + ------------------------------------------------------------+ In the following example, the path $**.b evaluates to multiple paths ($.a.b and $.c.b) and produces an array of the matching path values: > SELECT JSON_EXTRACT ( '{\"a\": {\"b\": 1}, \"c\": {\"b\": 2}}' , '$**.b' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": {\"b\": 1}, \"c\": {\"b\": 2}}' , '$**.b' ) | + ---------------------------------------------------------+ | [ null , 1 , 2 ] | + ---------------------------------------------------------+ In the following example, showes the querying JSON values from columns: > create table t1 ( a json , b int ); > insert into t1 ( a , b ) values ( '{\"a\":1,\"b\":2,\"c\":3}' , 1 ); > select json_extract ( t1 . a , '$.a' ) from t1 where t1 . b = 1 ; + -------------------------+ | json_extract ( t1 . a , $ . a ) | + -------------------------+ | 1 | + -------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( a , b ) values ( '{\"a\":4,\"b\":5,\"c\":6}' , 2 ); > select json_extract ( t1 . a , '$.b' ) from t1 where t1 . b = 2 ; + -------------------------+ | json_extract ( t1 . a , $ . b ) | + -------------------------+ | 5 | + -------------------------+ 1 row in set ( 0 . 00 sec ) > select json_extract ( t1 . a , '$.a' ) from t1 ; + -------------------------+ | json_extract ( t1 . a , $ . a ) | + -------------------------+ | 1 | | 4 | + -------------------------+ 2 rows in set ( 0 . 00 sec ) > insert into t1 ( a , b ) values ( '{\"a\":{\"q\":[1,2,3]}}' , 3 ); > select json_extract ( t1 . a , '$.a.q[1]' ) from t1 where t1 . b = 3 ; + ------------------------------+ | json_extract ( t1 . a , $ . a . q [ 1 ]) | + ------------------------------+ | 2 | + ------------------------------+ 1 row in set ( 0 . 01 sec ) > insert into t1 ( a , b ) values ( '[{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6}]' , 4 ); > select json_extract ( t1 . a , '$[1].a' ) from t1 where t1 . b = 4 ; + ----------------------------+ | json_extract ( t1 . a , $ [ 1 ]. a ) | + ----------------------------+ | 4 | + ----------------------------+ 1 row in set ( 0 . 00 sec )","title":"JSON Data Type"},{"location":"MatrixOne/Reference/Data-Types/0.6-json-type/#the-json-data-type","text":"MatrixOne supports a native JSON data type defined by RFC 7159 that enables efficient access to data in JSON (JavaScript Object Notation) documents. The JSON data type provides these advantages over storing JSON-format strings in a string column: Automatic validation of JSON documents stored in JSON columns. Invalid documents produce an error. Optimized storage format. JSON documents stored in JSON columns are converted to an internal format that permits quick read access to document elements. When the server later must read a JSON value stored in this binary format, the value need not be parsed from a text representation. The binary format is structured to enable the server to look up subobjects or nested values directly by key or array index without reading all values before or after them in the document. The space required to store a JSON document is roughly the same as for LONGBLOB or LONGTEXT .","title":"The JSON Data Type"},{"location":"MatrixOne/Reference/Data-Types/0.6-json-type/#creating-json-values","text":"A JSON array contains a list of values separated by commas and enclosed within [ and ] characters: [\"abc\", 10, null, true, false] A JSON object contains a set of key-value pairs separated by commas and enclosed within { and } characters: {\"k1\": \"value\", \"k2\": 10} As the examples illustrate, JSON arrays and objects can contain scalar values that are strings or numbers, the JSON null literal, or the JSON boolean true or false literals. Keys in JSON objects must be strings. Temporal (date, datetime) scalar values are also permitted: [\"12:18:29.000000\", \"2015-07-29\", \"2015-07-29 12:18:29.000000\"] Nesting is permitted within JSON array elements and JSON object key values: [99, {\"id\": \"HK500\", \"cost\": 75.99}, [\"hot\", \"cold\"]] {\"k1\": \"value\", \"k2\": [10, 20]}","title":"Creating JSON Values"},{"location":"MatrixOne/Reference/Data-Types/0.6-json-type/#normalization-of-json-values","text":"When a string is parsed and found to be a valid JSON document, it is also normalized. This means that members with keys that duplicate a key found later in the document, reading from left to right, are discarded. Normalization is performed when values are inserted into JSON columns, as shown here: > CREATE TABLE t1 ( c1 JSON ); > INSERT INTO t1 VALUES ( '{\"x\": 17, \"x\": \"red\"}' ), ( '{\"x\": 17, \"x\": \"red\", \"x\": [3, 5, 7]}' ); > SELECT c1 FROM t1 ; + ------------------+ | c1 | + ------------------+ | { \"x\" : \"red\" } | | { \"x\" : [ 3 , 5 , 7 ] } | + ------------------+","title":"Normalization of JSON Values"},{"location":"MatrixOne/Reference/Data-Types/0.6-json-type/#searching-and-modifying-json-values","text":"A JSON path expression selects a value within a JSON document. Path expressions are useful with functions that extract parts of or modify a JSON document, to specify where within that document to operate. For example, the following query extracts from a JSON document the value of the member with the name key: > SELECT JSON_EXTRACT ( '{\"id\": 14, \"name\": \"Aztalan\"}' , '$.name' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"id\": 14, \"name\": \"Aztalan\"}' , '$.name' ) | + ---------------------------------------------------------+ | \"Aztalan\" | + ---------------------------------------------------------+ Path syntax uses a leading $ character to represent the JSON document under consideration, optionally followed by selectors that indicate successively more specific parts of the document: A period followed by a key name names the member in an object with the given key. The key name must be specified within double quotation marks if the name without quotes is not legal within path expressions (for example, if it contains a space). [N] appended to a path that selects an array names the value at position N within the array. Array positions are integers beginning with zero. Paths can contain * or ** wildcards: .[*] evaluates to the values of all members in a JSON object. [*] evaluates to the values of all elements in a JSON array. prefix**suffix evaluates to all paths that begin with the named prefix and end with the named suffix. A path that does not exist in the document (evaluates to nonexistent data) evaluates to NULL. Example : [3, {\"a\": [5, 6], \"b\": 10}, [99, 100]] $[0] evaluates to 3. $[1] evaluates to {\"a\": [5, 6], \"b\": 10}. $[2] evaluates to [99, 100]. $[3] evaluates to NULL (it refers to the fourth array element, which does not exist). Because $[1] and $[2] evaluate to nonscalar values, they can be used as the basis for more-specific path expressions that select nested values. Examples: $[1].a evaluates to [5, 6]. $[1].a[1] evaluates to 6. $[1].b evaluates to 10. $[2][0] evaluates to 99. As mentioned previously, path components that name keys must be quoted if the unquoted key name is not legal in path expressions. Let $ refer to this value: {\"a fish\": \"shark\", \"a bird\": \"sparrow\"} The keys both contain a space and must be quoted: $.\"a fish\" evaluates to shark. $.\"a bird\" evaluates to sparrow. Paths that use wildcards evaluate to an array that can contain multiple values: > SELECT JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.*' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.*' ) | + ---------------------------------------------------------+ | [ 1 , 2 , [ 3 , 4 , 5 ]] | + ---------------------------------------------------------+ > SELECT JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.c[*]' ); + ------------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": 1, \"b\": 2, \"c\": [3, 4, 5]}' , '$.c[*]' ) | + ------------------------------------------------------------+ | [ 3 , 4 , 5 ] | + ------------------------------------------------------------+ In the following example, the path $**.b evaluates to multiple paths ($.a.b and $.c.b) and produces an array of the matching path values: > SELECT JSON_EXTRACT ( '{\"a\": {\"b\": 1}, \"c\": {\"b\": 2}}' , '$**.b' ); + ---------------------------------------------------------+ | JSON_EXTRACT ( '{\"a\": {\"b\": 1}, \"c\": {\"b\": 2}}' , '$**.b' ) | + ---------------------------------------------------------+ | [ null , 1 , 2 ] | + ---------------------------------------------------------+ In the following example, showes the querying JSON values from columns: > create table t1 ( a json , b int ); > insert into t1 ( a , b ) values ( '{\"a\":1,\"b\":2,\"c\":3}' , 1 ); > select json_extract ( t1 . a , '$.a' ) from t1 where t1 . b = 1 ; + -------------------------+ | json_extract ( t1 . a , $ . a ) | + -------------------------+ | 1 | + -------------------------+ 1 row in set ( 0 . 00 sec ) > insert into t1 ( a , b ) values ( '{\"a\":4,\"b\":5,\"c\":6}' , 2 ); > select json_extract ( t1 . a , '$.b' ) from t1 where t1 . b = 2 ; + -------------------------+ | json_extract ( t1 . a , $ . b ) | + -------------------------+ | 5 | + -------------------------+ 1 row in set ( 0 . 00 sec ) > select json_extract ( t1 . a , '$.a' ) from t1 ; + -------------------------+ | json_extract ( t1 . a , $ . a ) | + -------------------------+ | 1 | | 4 | + -------------------------+ 2 rows in set ( 0 . 00 sec ) > insert into t1 ( a , b ) values ( '{\"a\":{\"q\":[1,2,3]}}' , 3 ); > select json_extract ( t1 . a , '$.a.q[1]' ) from t1 where t1 . b = 3 ; + ------------------------------+ | json_extract ( t1 . a , $ . a . q [ 1 ]) | + ------------------------------+ | 2 | + ------------------------------+ 1 row in set ( 0 . 01 sec ) > insert into t1 ( a , b ) values ( '[{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6}]' , 4 ); > select json_extract ( t1 . a , '$[1].a' ) from t1 where t1 . b = 4 ; + ----------------------------+ | json_extract ( t1 . a , $ [ 1 ]. a ) | + ----------------------------+ | 4 | + ----------------------------+ 1 row in set ( 0 . 00 sec )","title":"Searching and Modifying JSON Values"},{"location":"MatrixOne/Reference/Data-Types/0.6-timestamp-initialization/","text":"Automatic Initialization and Updating for TIMESTAMP and DATETIME TIMESTAMP and DATETIME columns can be automatically initialized and updated to the current date and time (that is, the current timestamp). For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both: An auto-initialized column is set to the current timestamp for inserted rows that specify no value for the column. An auto-updated column is automatically updated to the current timestamp when the value of any other column in the row is changed from its current value. An auto-updated column remains unchanged if all other columns are set to their current values. To prevent an auto-updated column from updating when other columns change, explicitly set it to its current value. To update an auto-updated column even when other columns do not change, explicitly set it to the value it should have (for example, set it to CURRENT_TIMESTAMP). To specify automatic properties, use the DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP clauses in column definitions. The order of the clauses does not matter. If both are present in a column definition, either can occur first. Any of the synonyms for CURRENT_TIMESTAMP have the same meaning as CURRENT_TIMESTAMP . These are CURRENT_TIMESTAMP() , NOW() . Use of DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP is specific to TIMESTAMP and DATETIME . The DEFAULT clause also can be used to specify a constant (nonautomatic) default value (for example, DEFAULT 0 or DEFAULT '2000-01-01 00:00:00'). TIMESTAMP or DATETIME column definitions can specify the current timestamp for both the default and auto-update values, for one but not the other, or for neither. Different columns can have different combinations of automatic properties. The following rules describe the possibilities: With both DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP , the column has the current timestamp for its default value and is automatically updated to the current timestamp. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ); With a DEFAULT clause but no ON UPDATE CURRENT_TIMESTAMP clause, the column has the given default value and is not automatically updated to the current timestamp. The default depends on whether the DEFAULT clause specifies CURRENT_TIMESTAMP or a constant value. With CURRENT_TIMESTAMP, the default is the current timestamp. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ); With a constant, the default is the given value. In this case, the column has no automatic properties at all. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 ); With an ON UPDATE CURRENT_TIMESTAMP clause and a constant DEFAULT clause, the column is automatically updated to the current timestamp and has the given constant default value. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP ); With an ON UPDATE CURRENT_TIMESTAMP clause but no DEFAULT clause, the column is automatically updated to the current timestamp but does not have the current timestamp for its default value. The default in this case is type dependent. TIMESTAMP has a default of 0 unless defined with the NULL attribute, in which case the default is NULL. CREATE TABLE t1 ( ts1 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- default 0 ts2 TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP -- default NULL ); DATETIME has a default of NULL unless defined with the NOT NULL attribute, in which case the default is 0. CREATE TABLE t1 ( dt1 DATETIME ON UPDATE CURRENT_TIMESTAMP, -- default NULL dt2 DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP -- default 0 );","title":"Timestamp Initialization"},{"location":"MatrixOne/Reference/Data-Types/0.6-timestamp-initialization/#automatic-initialization-and-updating-for-timestamp-and-datetime","text":"TIMESTAMP and DATETIME columns can be automatically initialized and updated to the current date and time (that is, the current timestamp). For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both: An auto-initialized column is set to the current timestamp for inserted rows that specify no value for the column. An auto-updated column is automatically updated to the current timestamp when the value of any other column in the row is changed from its current value. An auto-updated column remains unchanged if all other columns are set to their current values. To prevent an auto-updated column from updating when other columns change, explicitly set it to its current value. To update an auto-updated column even when other columns do not change, explicitly set it to the value it should have (for example, set it to CURRENT_TIMESTAMP). To specify automatic properties, use the DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP clauses in column definitions. The order of the clauses does not matter. If both are present in a column definition, either can occur first. Any of the synonyms for CURRENT_TIMESTAMP have the same meaning as CURRENT_TIMESTAMP . These are CURRENT_TIMESTAMP() , NOW() . Use of DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP is specific to TIMESTAMP and DATETIME . The DEFAULT clause also can be used to specify a constant (nonautomatic) default value (for example, DEFAULT 0 or DEFAULT '2000-01-01 00:00:00'). TIMESTAMP or DATETIME column definitions can specify the current timestamp for both the default and auto-update values, for one but not the other, or for neither. Different columns can have different combinations of automatic properties. The following rules describe the possibilities: With both DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP , the column has the current timestamp for its default value and is automatically updated to the current timestamp. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ); With a DEFAULT clause but no ON UPDATE CURRENT_TIMESTAMP clause, the column has the given default value and is not automatically updated to the current timestamp. The default depends on whether the DEFAULT clause specifies CURRENT_TIMESTAMP or a constant value. With CURRENT_TIMESTAMP, the default is the current timestamp. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ); With a constant, the default is the given value. In this case, the column has no automatic properties at all. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0, dt DATETIME DEFAULT 0 ); With an ON UPDATE CURRENT_TIMESTAMP clause and a constant DEFAULT clause, the column is automatically updated to the current timestamp and has the given constant default value. CREATE TABLE t1 ( ts TIMESTAMP DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT 0 ON UPDATE CURRENT_TIMESTAMP ); With an ON UPDATE CURRENT_TIMESTAMP clause but no DEFAULT clause, the column is automatically updated to the current timestamp but does not have the current timestamp for its default value. The default in this case is type dependent. TIMESTAMP has a default of 0 unless defined with the NULL attribute, in which case the default is NULL. CREATE TABLE t1 ( ts1 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- default 0 ts2 TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP -- default NULL ); DATETIME has a default of NULL unless defined with the NOT NULL attribute, in which case the default is 0. CREATE TABLE t1 ( dt1 DATETIME ON UPDATE CURRENT_TIMESTAMP, -- default NULL dt2 DATETIME NOT NULL ON UPDATE CURRENT_TIMESTAMP -- default 0 );","title":"Automatic Initialization and Updating for TIMESTAMP and DATETIME"},{"location":"MatrixOne/Reference/Data-Types/data-type-conversion/","text":"Data Type Conversion MatrixOne supports the conversion between different data types, the supported and unsupported conversions are listed in the following table. Castable : explicit conversion with cast function. Coercible : implicit conversion without cast function. Source Data Type Target Data Type Castable Coercible BOOLEAN INTEGER \u274c \u274c DECIMAL \u274c \u274c VARCHAR \u2714 \u2714 DATE TIMESTAMP \u2714 \u2714 DATETIME \u2714 \u2714 VARCHAR \u2714 \u2714 DATETIME TIMESTAMP \u2714 \u2714 DATE \u2714 \u2714 VARCHAR \u2714 \u2714 FLOAT(Floating-point number) INTEGER \u274c \u274c DECIMAL \u2714 \u2714 VARCHAR \u2714 \u2714 INTEGER BOOLEAN \u274c \u274c FLOAT \u2714 \u2714 TIMESTAMP \u2714 \u2714 VARCHAR \u2714 \u2714 DECIMAL \u2714 \u2714 TIMESTAMP DATE \u2714 \u2714 DATETIME \u2714 \u2714 VARCHAR \u2714 \u2714 VARCHAR BOOLEAN \u2714 \u2714 DATE \u2714 \u2714 FLOAT \u2714 \u2714 INTEGER \u2714 \u2714 DECIMAL \u2714 \u2714 TIMESTAMP \u2714 \u2714 DATETIME \u2714 \u2714","title":"Data Type Conversion"},{"location":"MatrixOne/Reference/Data-Types/data-type-conversion/#data-type-conversion","text":"MatrixOne supports the conversion between different data types, the supported and unsupported conversions are listed in the following table. Castable : explicit conversion with cast function. Coercible : implicit conversion without cast function. Source Data Type Target Data Type Castable Coercible BOOLEAN INTEGER \u274c \u274c DECIMAL \u274c \u274c VARCHAR \u2714 \u2714 DATE TIMESTAMP \u2714 \u2714 DATETIME \u2714 \u2714 VARCHAR \u2714 \u2714 DATETIME TIMESTAMP \u2714 \u2714 DATE \u2714 \u2714 VARCHAR \u2714 \u2714 FLOAT(Floating-point number) INTEGER \u274c \u274c DECIMAL \u2714 \u2714 VARCHAR \u2714 \u2714 INTEGER BOOLEAN \u274c \u274c FLOAT \u2714 \u2714 TIMESTAMP \u2714 \u2714 VARCHAR \u2714 \u2714 DECIMAL \u2714 \u2714 TIMESTAMP DATE \u2714 \u2714 DATETIME \u2714 \u2714 VARCHAR \u2714 \u2714 VARCHAR BOOLEAN \u2714 \u2714 DATE \u2714 \u2714 FLOAT \u2714 \u2714 INTEGER \u2714 \u2714 DECIMAL \u2714 \u2714 TIMESTAMP \u2714 \u2714 DATETIME \u2714 \u2714","title":"Data Type Conversion"},{"location":"MatrixOne/Reference/Data-Types/data-types/","text":"Data Types Overview MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html Integer Numbers Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615 Real Numbers Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE String Types Data Type Size Syntax String 24 byte CHAR, VARCHAR Time and Date Types Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD/YYYYMMDD DateTime 8 byte second 0001-01-01 00:00:00.000000 9999-12-31 23:59:59.999999 YYYY-MM-DD hh:mi:ssssss TIMESTAMP 8 byte second 1970-01-01 00:00:01.000000 2038-01-19 03:14:07.999999 YYYYMMDD hh:mi:ss.ssssss Bool Data Type Size True 1 byte False 1 byte Decimal Types(Beta) Data Type Size Precision Syntax Decimal64 8 byte 19 digits Decimal(N,S), N range(1,18), S range(0,N) Decimal128 16 byte 38 digits Decimal(N,S), N range(19,38), S range(0,N) Examples // Create a table named \"numtable\" with 3 attributes of an \"int\" , a \"float\" and a \"double\" > create table numtable ( id int , fl float , dl double ); // Insert a dataset of int , float and double into table \"numtable\" > insert into numtable values ( 3 , 1 . 234567 , 1 . 2345678912345678912 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total , of which 3 digits may be after the decimal point . > create table numtable ( id int , fl float ( 5 , 3 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 3 , 99 . 123 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total . > create table numtable ( id int , fl float ( 23 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 1 , 1 . 2345678901234567890123456789 ); // Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\" , an \"unsigned smallint\" , an \"unsigned int\" and an \"unsigned bigint\" > create table numtable ( a tinyint unsigned , b smallint unsigned , c int unsigned , d bigint unsigned ); // Insert a dataset of unsigned ( tinyint , smallint , int and bigint ) into table \"numtable\" > insert into numtable values ( 255 , 65535 , 4294967295 , 18446744073709551615 ); // Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names ( name varchar ( 255 ), age char ( 255 )); // Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names ( name , age ) values ( 'Abby' , '24' ); // Create a table named \"calendar\" with 2 attributes of a \"date\" and a \"datetime\" > create table calendar ( a date , b datetime ); // Insert a data of \"date\" and \"datetime\" into table \"calendar\" > insert into calendar ( a , b ) values ( '20220202, ' 2022 - 02 - 02 00 : 10 : 30 '); > insert into calendar(a, b) values(' 2022 - 02 - 02 , '2022-02-02 00:10:30' ); // Create a table named \"decimalTest\" with 2 attribute of a \"decimal\" and b \"decimal\" > create table decimalTest ( a decimal ( 6 , 3 ), b decimal ( 24 , 18 )); > insert into decimalTest values ( 123 . 4567 , 123456 . 1234567891411241355 ); > select * from decimalTest ; + ---------+---------------------------+ | a | b | + ---------+---------------------------+ | 123 . 456 | 123456 . 123456789141124135 | + ---------+---------------------------+ // Create a table named \"booltest\" with 2 attribute of a \"boolean\" and b \"bool\" > create table booltest ( a boolean , b bool ); > insert into booltest values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from booltest ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ 5 rows in set ( 0 . 00 sec ) // Create a table named \"timestamptest\" with 1 attribute of a \"timestamp\" > create table timestamptest ( a timestamp ( 0 ) not null , primary key ( a )); > insert into timestamptest values ( '20200101000000' ), ( '2022-01-02' ), ( '2022-01-02 00:00:01' ), ( '2022-01-02 00:00:01.512345' ); > select * from timestamptest ; + ---------------------+ | a | + ---------------------+ | 2020 - 01 - 01 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 01 | | 2022 - 01 - 02 00 : 00 : 02 | + ---------------------+","title":"**Data Types Overview**"},{"location":"MatrixOne/Reference/Data-Types/data-types/#data-types-overview","text":"MatrixOne Data types conforms with MySQL Data types definition. Reference: https://dev.mysql.com/doc/refman/8.0/en/data-types.html","title":"Data Types Overview"},{"location":"MatrixOne/Reference/Data-Types/data-types/#integer-numbers","text":"Data Type Size Min Value Max Value TINYINT 1 byte -128 127 SMALLINT 2 byte -32768 32767 INT 4 byte -2147483648 2147483647 BIGINT 8 byte -9223372036854775808 9223372036854775807 TINYINT UNSIGNED 1 byte 0 255 SMALLINT UNSIGNED 2 byte 0 65535 INT UNSIGNED 4 byte 0 4294967295 BIGINT UNSIGNED 8 byte 0 18446744073709551615","title":"Integer Numbers"},{"location":"MatrixOne/Reference/Data-Types/data-types/#real-numbers","text":"Data Type Size Precision Syntax FLOAT32 4 byte 23 bits FLOAT FLOAT64 8 byte 53 bits DOUBLE","title":"Real Numbers"},{"location":"MatrixOne/Reference/Data-Types/data-types/#string-types","text":"Data Type Size Syntax String 24 byte CHAR, VARCHAR","title":"String Types"},{"location":"MatrixOne/Reference/Data-Types/data-types/#time-and-date-types","text":"Data Type Size Resolution Min Value Max Value Precision Date 4 byte day 1000-01-01 9999-12-31 YYYY-MM-DD/YYYYMMDD DateTime 8 byte second 0001-01-01 00:00:00.000000 9999-12-31 23:59:59.999999 YYYY-MM-DD hh:mi:ssssss TIMESTAMP 8 byte second 1970-01-01 00:00:01.000000 2038-01-19 03:14:07.999999 YYYYMMDD hh:mi:ss.ssssss","title":"Time and Date Types"},{"location":"MatrixOne/Reference/Data-Types/data-types/#bool","text":"Data Type Size True 1 byte False 1 byte","title":"Bool"},{"location":"MatrixOne/Reference/Data-Types/data-types/#decimal-typesbeta","text":"Data Type Size Precision Syntax Decimal64 8 byte 19 digits Decimal(N,S), N range(1,18), S range(0,N) Decimal128 16 byte 38 digits Decimal(N,S), N range(19,38), S range(0,N)","title":"Decimal Types(Beta)"},{"location":"MatrixOne/Reference/Data-Types/data-types/#examples","text":"// Create a table named \"numtable\" with 3 attributes of an \"int\" , a \"float\" and a \"double\" > create table numtable ( id int , fl float , dl double ); // Insert a dataset of int , float and double into table \"numtable\" > insert into numtable values ( 3 , 1 . 234567 , 1 . 2345678912345678912 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 5 digits in total , of which 3 digits may be after the decimal point . > create table numtable ( id int , fl float ( 5 , 3 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 3 , 99 . 123 ); // Create a table named \"numtable\" with 2 attributes of an \"int\" and a \"float\" up to 23 digits in total . > create table numtable ( id int , fl float ( 23 )); // Insert a dataset of int , float into table \"numtable\" > insert into numtable values ( 1 , 1 . 2345678901234567890123456789 ); // Create a table named \"numtable\" with 4 attributes of an \"unsigned tinyint\" , an \"unsigned smallint\" , an \"unsigned int\" and an \"unsigned bigint\" > create table numtable ( a tinyint unsigned , b smallint unsigned , c int unsigned , d bigint unsigned ); // Insert a dataset of unsigned ( tinyint , smallint , int and bigint ) into table \"numtable\" > insert into numtable values ( 255 , 65535 , 4294967295 , 18446744073709551615 ); // Create a table named \"names\" with 2 attributes of a \"varchar\" and a \"char\" > create table names ( name varchar ( 255 ), age char ( 255 )); // Insert a data of \"varchar\" and \"char\" into table \"names\" > insert into names ( name , age ) values ( 'Abby' , '24' ); // Create a table named \"calendar\" with 2 attributes of a \"date\" and a \"datetime\" > create table calendar ( a date , b datetime ); // Insert a data of \"date\" and \"datetime\" into table \"calendar\" > insert into calendar ( a , b ) values ( '20220202, ' 2022 - 02 - 02 00 : 10 : 30 '); > insert into calendar(a, b) values(' 2022 - 02 - 02 , '2022-02-02 00:10:30' ); // Create a table named \"decimalTest\" with 2 attribute of a \"decimal\" and b \"decimal\" > create table decimalTest ( a decimal ( 6 , 3 ), b decimal ( 24 , 18 )); > insert into decimalTest values ( 123 . 4567 , 123456 . 1234567891411241355 ); > select * from decimalTest ; + ---------+---------------------------+ | a | b | + ---------+---------------------------+ | 123 . 456 | 123456 . 123456789141124135 | + ---------+---------------------------+ // Create a table named \"booltest\" with 2 attribute of a \"boolean\" and b \"bool\" > create table booltest ( a boolean , b bool ); > insert into booltest values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from booltest ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ 5 rows in set ( 0 . 00 sec ) // Create a table named \"timestamptest\" with 1 attribute of a \"timestamp\" > create table timestamptest ( a timestamp ( 0 ) not null , primary key ( a )); > insert into timestamptest values ( '20200101000000' ), ( '2022-01-02' ), ( '2022-01-02 00:00:01' ), ( '2022-01-02 00:00:01.512345' ); > select * from timestamptest ; + ---------------------+ | a | + ---------------------+ | 2020 - 01 - 01 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 00 | | 2022 - 01 - 02 00 : 00 : 01 | | 2022 - 01 - 02 00 : 00 : 02 | + ---------------------+","title":"Examples"},{"location":"MatrixOne/Reference/Data-Types/fixed-point-types/","text":"Fixed-Point Types (Exact Value) - DECIMAL The DECIMAL type store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data, or with scientific calculations. In a DECIMAL column declaration, the precision and scale can be (and usually is) specified. For example: salary DECIMAL ( 5 , 2 ) In this example, 5 is the precision and 2 is the scale. The precision represents the number of significant digits that are stored for values, and the scale represents the number of digits that can be stored following the decimal point. Standard SQL requires that DECIMAL(5,2) be able to store any value with five digits and two decimals, so values that can be stored in the salary column range from -999.99 to 999.99. In MatrixOne, the syntax DECIMAL(M) is equivalent to DECIMAL(M,0). Similarly, the syntax DECIMAL is equivalent to DECIMAL(M,0), where the implementation is permitted to decide the value of M. MatrixOne supports both of these variant forms of DECIMAL syntax. The default value of M is 10. If the scale is 0, DECIMAL values contain no decimal point or fractional part. In MatrixOne, the maximum number of digits for DECIMAL is 38, but the actual range for a given DECIMAL column can be constrained by the precision or scale for a given column. When such a column is assigned a value with more digits following the decimal point than are permitted by the specified scale, the value is converted to that scale. DECIMAL Data Type Characteristics This section discusses the characteristics of the DECIMAL data type (and its synonyms), with particular regard to the following topics: Maximum number of digits Storage format The declaration syntax for a DECIMAL column is DECIMAL(M,D). The ranges of values for the arguments are as follows: M is the maximum number of digits (the precision). It has a range of 1 to 38. D is the number of digits to the right of the decimal point (the scale). It has a range of 1 to 38 and must be no larger than M. If D is omitted, the default is 0. If M is omitted, the default is 10. The maximum value of 38 for M means that calculations on DECIMAL values are accurate up to 38 digits. Values for DECIMAL columns are stored using a binary format that packs decimal digits into 8 bytes or 16 bytes. The storage required for remaining digits is given by the following table. Digits Number of Bytes 0-18 8 bytes 19-38 16 bytes For a full explanation of the internal implementation of DECIMAL values, see the Feature Design .","title":"Fixed-Point Types (Exact Value) - DECIMAL"},{"location":"MatrixOne/Reference/Data-Types/fixed-point-types/#fixed-point-types-exact-value-decimal","text":"The DECIMAL type store exact numeric data values. These types are used when it is important to preserve exact precision, for example with monetary data, or with scientific calculations. In a DECIMAL column declaration, the precision and scale can be (and usually is) specified. For example: salary DECIMAL ( 5 , 2 ) In this example, 5 is the precision and 2 is the scale. The precision represents the number of significant digits that are stored for values, and the scale represents the number of digits that can be stored following the decimal point. Standard SQL requires that DECIMAL(5,2) be able to store any value with five digits and two decimals, so values that can be stored in the salary column range from -999.99 to 999.99. In MatrixOne, the syntax DECIMAL(M) is equivalent to DECIMAL(M,0). Similarly, the syntax DECIMAL is equivalent to DECIMAL(M,0), where the implementation is permitted to decide the value of M. MatrixOne supports both of these variant forms of DECIMAL syntax. The default value of M is 10. If the scale is 0, DECIMAL values contain no decimal point or fractional part. In MatrixOne, the maximum number of digits for DECIMAL is 38, but the actual range for a given DECIMAL column can be constrained by the precision or scale for a given column. When such a column is assigned a value with more digits following the decimal point than are permitted by the specified scale, the value is converted to that scale.","title":"Fixed-Point Types (Exact Value) - DECIMAL"},{"location":"MatrixOne/Reference/Data-Types/fixed-point-types/#decimal-data-type-characteristics","text":"This section discusses the characteristics of the DECIMAL data type (and its synonyms), with particular regard to the following topics: Maximum number of digits Storage format The declaration syntax for a DECIMAL column is DECIMAL(M,D). The ranges of values for the arguments are as follows: M is the maximum number of digits (the precision). It has a range of 1 to 38. D is the number of digits to the right of the decimal point (the scale). It has a range of 1 to 38 and must be no larger than M. If D is omitted, the default is 0. If M is omitted, the default is 10. The maximum value of 38 for M means that calculations on DECIMAL values are accurate up to 38 digits. Values for DECIMAL columns are stored using a binary format that packs decimal digits into 8 bytes or 16 bytes. The storage required for remaining digits is given by the following table. Digits Number of Bytes 0-18 8 bytes 19-38 16 bytes For a full explanation of the internal implementation of DECIMAL values, see the Feature Design .","title":"DECIMAL Data Type Characteristics"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/","text":"JDBC supported features list in MatrixOne Using JDBC to develop applications, MatrixOne supports the following classes and objects: 1. Connection (Class): Get the database connection object Method of the Class Obtain the executed Sql object Statement Statement createStatement(); Statement prepareStatement(String sql); Manage the transaction Enable the transaction: setAutoCommit(boolean autoCommit), call this method to set the parameter to false , which enable the transaction Commit the transaction: void commit() Rollback the transaction: void rollback() Methon of the connection interface Supported\uff08Y\uff09/Not support\uff08N\uff09 createStatement() Y prepareStatement(String sql) Y prepareCall(String sql) Y nativeSQL(String sql) Y setAutoCommit(boolean autoCommit) Y getAutoCommit() Y commit() Y rollback() Y close() Y isClosed() Y getMetaData() Y setReadOnly(boolean readOnly) Y isReadOnly() Y setCatalog() Y getCatalog() Y setTransactionIsolation(int level) N getTransactionIsolation() N getWarnings() N clearWarnings() N createStatement(int resultSetType, int resultSetConcurrency) Y prepareStatement(String sql, int resultSetType, int resultSetConcurrency) Y prepareCall(String sql, int resultSetType, int resultSetConcurrency) Y getTypeMap() N setTypeMap(java.util.Map<String,Class<?>> map) N setHoldability(int holdability) N getHoldability() N setSavepoint() N setSavepoint(String name) N rollback(Savepoint savepoint) N releaseSavepoint(Savepoint savepoint) N createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareStatement(String sql, int autoGeneratedKeys) Y prepareStatement(String sql, int columnIndexes[]) Y prepareStatement(String sql, String columnNames[]) Y createClob() N createBlob() N createNClob() N createSQLXML() N isValid() Y setClientInfo(String name, String value) N setClientInfo(Properties properties) N getClientInfo(String name) N getClientInfo() N createArrayOf(String typeName, Object[] elements) N createStruct(String typeName, Object[] attributes) N setSchema(String schema) N getSchema() N abort(Executor executor) N setNetworkTimeout(Executor executor, int milliseconds) Y getNetworkTimeout() Y 2. Method of the Statement class Method of the Statement class Supported\uff08Y\uff09/Not support\uff08N\uff09 executeQuery(String sql) Y executeUpdate(String sql) Y close() Y getMaxFieldSize() Y setMaxFieldSize() Y getMaxRows() Y setMaxRows() Y setEscapeProcessing() N getQueryTimeout() Y setQueryTimeout(int seconds) Y cancel() Y getWarnings() N clearWarnings() N setCursorName(String name) N execute(String sql) Y getResultSet() Y getUpdateCount() Y getMoreResults() Y setFetchDirection(int direction) Y getFetchDirection() N setFetchSize(int rows) Y getFetchSize() Y getResultSetConcurrency() Y getResultSetType() Y addBatch( String sql) Y clearBatch() Y executeBatch() Y getConnection() Y getMoreResults(int current) Y getGeneratedKeys() Y executeUpdate(String sql, int autoGeneratedKeys) Y executeUpdate(String sql, int columnIndexes[]) Y executeUpdate(String sql, String columnNames[]) Y execute(String sql, int autoGeneratedKeys) Y execute(String sql, int columnIndexes[]) Y execute(String sql, String columnNames[]) Y getResultSetHoldability() Y isClosed() Y setPoolable(boolean poolable) N isPoolable() N closeOnCompletion() Y isCloseOnCompletion() Y 3. Method of the ResultSet class Method of the ResultSet class Supported\uff08Y\uff09/Not support\uff08N\uff09 next() Y close() Y wasNull() Y getString(int columnIndex) Y getBoolean(int columnIndex) Y getByte(int columnIndex) Y getShort(int columnIndex) Y getInt(int columnIndex) Y getLong(int columnIndex) Y getFloat(int columnIndex) Y getDouble(int columnIndex) Y getBigDecimal(int columnIndex, int scale) Y getBytes(int columnIndex) Y getDate(int columnIndex) Y getTime(int columnIndex) Y getTimestamp(int columnIndex) Y getAsciiStream(int columnIndex) Y getUnicodeStream(int columnIndex) Y getBinaryStream(int columnIndex) Y getWarnings() N clearWarnings() N getCursorName() N getMetaData() Y getObject() N findColumn() Y getCharacterStream() Y isBeforeFirst() Y isAfterLast() Y isFirst() Y isLast() Y beforeFirst() Y afterLast() Y first() Y last() Y getRow() Y absolute() Y relative() Y previous() Y setFetchDirection() Y getFetchDirection() Y setFetchSize() Y getFetchSize() Y getType() Y getConcurrency() Y rowUpdated() Y rowInserted() Y rowDeleted() Y update()(String of data types) Y updateNull() Y 4. Method of the ResultSetMetaData Method of the ResultSetMetaData Supported\uff08Y\uff09/Not support\uff08N\uff09 getColumnCount() Y isAutoIncrement() Y isCaseSensitive() Y isSearchable() Y isCurrency() Y isNullable() Y isSigned() Y getColumnDisplaySize() Y getColumnLabel() Y getColumnName() Y getSchemaName() N getPrecision() Y getScale() Y getTableName() Y getCatalogName() Y getColumnType() Y getColumnTypeName() Y isReadOnly() N isWritable() N isDefinitelyWritable() N getColumnClassName() Y DisplaySize, Prec, and Scale statistics of Mysql data type Data types DisplaySize Prec Scale TINYINT 4 4 0 SMALLINT 6 6 0 INT 11 11 0 BIGINT 20 20 0 TINYINT UNSIGNED 3 3 0 SMALLINT UNSIGNED 5 5 0 INT UNSIGNED 10 10 0 BIGINT UNSIGNED 20 20 0 DECIMAL64(according to the actual) 17 15 2 DECIMAL128(according to the actual) 23 21 3 FLOAT 12 12 31 DOUBLE 22 22 31 VARCHAR(according to the actual) 100 100 0 CHAR(according to the actual) 100 100 0 DATE 10 10 0 DATETIME 19 19 0 TIMESTAMP 19 19 0 JSON 2147483647 2147483647 0","title":"JDBC supported features list"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#jdbc-supported-features-list-in-matrixone","text":"Using JDBC to develop applications, MatrixOne supports the following classes and objects:","title":"JDBC supported features list in MatrixOne"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#1-connection-class-get-the-database-connection-object","text":"","title":"1. Connection (Class): Get the database connection object"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#method-of-the-class","text":"Obtain the executed Sql object Statement Statement createStatement(); Statement prepareStatement(String sql); Manage the transaction Enable the transaction: setAutoCommit(boolean autoCommit), call this method to set the parameter to false , which enable the transaction Commit the transaction: void commit() Rollback the transaction: void rollback() Methon of the connection interface Supported\uff08Y\uff09/Not support\uff08N\uff09 createStatement() Y prepareStatement(String sql) Y prepareCall(String sql) Y nativeSQL(String sql) Y setAutoCommit(boolean autoCommit) Y getAutoCommit() Y commit() Y rollback() Y close() Y isClosed() Y getMetaData() Y setReadOnly(boolean readOnly) Y isReadOnly() Y setCatalog() Y getCatalog() Y setTransactionIsolation(int level) N getTransactionIsolation() N getWarnings() N clearWarnings() N createStatement(int resultSetType, int resultSetConcurrency) Y prepareStatement(String sql, int resultSetType, int resultSetConcurrency) Y prepareCall(String sql, int resultSetType, int resultSetConcurrency) Y getTypeMap() N setTypeMap(java.util.Map<String,Class<?>> map) N setHoldability(int holdability) N getHoldability() N setSavepoint() N setSavepoint(String name) N rollback(Savepoint savepoint) N releaseSavepoint(Savepoint savepoint) N createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) Y prepareStatement(String sql, int autoGeneratedKeys) Y prepareStatement(String sql, int columnIndexes[]) Y prepareStatement(String sql, String columnNames[]) Y createClob() N createBlob() N createNClob() N createSQLXML() N isValid() Y setClientInfo(String name, String value) N setClientInfo(Properties properties) N getClientInfo(String name) N getClientInfo() N createArrayOf(String typeName, Object[] elements) N createStruct(String typeName, Object[] attributes) N setSchema(String schema) N getSchema() N abort(Executor executor) N setNetworkTimeout(Executor executor, int milliseconds) Y getNetworkTimeout() Y","title":"Method of the Class"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#2-method-of-the-statement-class","text":"Method of the Statement class Supported\uff08Y\uff09/Not support\uff08N\uff09 executeQuery(String sql) Y executeUpdate(String sql) Y close() Y getMaxFieldSize() Y setMaxFieldSize() Y getMaxRows() Y setMaxRows() Y setEscapeProcessing() N getQueryTimeout() Y setQueryTimeout(int seconds) Y cancel() Y getWarnings() N clearWarnings() N setCursorName(String name) N execute(String sql) Y getResultSet() Y getUpdateCount() Y getMoreResults() Y setFetchDirection(int direction) Y getFetchDirection() N setFetchSize(int rows) Y getFetchSize() Y getResultSetConcurrency() Y getResultSetType() Y addBatch( String sql) Y clearBatch() Y executeBatch() Y getConnection() Y getMoreResults(int current) Y getGeneratedKeys() Y executeUpdate(String sql, int autoGeneratedKeys) Y executeUpdate(String sql, int columnIndexes[]) Y executeUpdate(String sql, String columnNames[]) Y execute(String sql, int autoGeneratedKeys) Y execute(String sql, int columnIndexes[]) Y execute(String sql, String columnNames[]) Y getResultSetHoldability() Y isClosed() Y setPoolable(boolean poolable) N isPoolable() N closeOnCompletion() Y isCloseOnCompletion() Y","title":"2. Method of the Statement class"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#3-method-of-the-resultset-class","text":"Method of the ResultSet class Supported\uff08Y\uff09/Not support\uff08N\uff09 next() Y close() Y wasNull() Y getString(int columnIndex) Y getBoolean(int columnIndex) Y getByte(int columnIndex) Y getShort(int columnIndex) Y getInt(int columnIndex) Y getLong(int columnIndex) Y getFloat(int columnIndex) Y getDouble(int columnIndex) Y getBigDecimal(int columnIndex, int scale) Y getBytes(int columnIndex) Y getDate(int columnIndex) Y getTime(int columnIndex) Y getTimestamp(int columnIndex) Y getAsciiStream(int columnIndex) Y getUnicodeStream(int columnIndex) Y getBinaryStream(int columnIndex) Y getWarnings() N clearWarnings() N getCursorName() N getMetaData() Y getObject() N findColumn() Y getCharacterStream() Y isBeforeFirst() Y isAfterLast() Y isFirst() Y isLast() Y beforeFirst() Y afterLast() Y first() Y last() Y getRow() Y absolute() Y relative() Y previous() Y setFetchDirection() Y getFetchDirection() Y setFetchSize() Y getFetchSize() Y getType() Y getConcurrency() Y rowUpdated() Y rowInserted() Y rowDeleted() Y update()(String of data types) Y updateNull() Y","title":"3. Method of the ResultSet class"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#4-method-of-the-resultsetmetadata","text":"Method of the ResultSetMetaData Supported\uff08Y\uff09/Not support\uff08N\uff09 getColumnCount() Y isAutoIncrement() Y isCaseSensitive() Y isSearchable() Y isCurrency() Y isNullable() Y isSigned() Y getColumnDisplaySize() Y getColumnLabel() Y getColumnName() Y getSchemaName() N getPrecision() Y getScale() Y getTableName() Y getCatalogName() Y getColumnType() Y getColumnTypeName() Y isReadOnly() N isWritable() N isDefinitelyWritable() N getColumnClassName() Y","title":"4. Method of the ResultSetMetaData"},{"location":"MatrixOne/Reference/Limitations/mo-jdbc-feature-list/#displaysize-prec-and-scale-statistics-of-mysql-data-type","text":"Data types DisplaySize Prec Scale TINYINT 4 4 0 SMALLINT 6 6 0 INT 11 11 0 BIGINT 20 20 0 TINYINT UNSIGNED 3 3 0 SMALLINT UNSIGNED 5 5 0 INT UNSIGNED 10 10 0 BIGINT UNSIGNED 20 20 0 DECIMAL64(according to the actual) 17 15 2 DECIMAL128(according to the actual) 23 21 3 FLOAT 12 12 31 DOUBLE 22 22 31 VARCHAR(according to the actual) 100 100 0 CHAR(according to the actual) 100 100 0 DATE 10 10 0 DATETIME 19 19 0 TIMESTAMP 19 19 0 JSON 2147483647 2147483647 0","title":"DisplaySize, Prec, and Scale statistics of Mysql data type"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/","text":"MatrixOne DDL statement partitioning supported 1. The partition type supported by MatrixOne MatrixOne DDL statements support six partition types, which are the same as the MySQL official website: KEY Partitioning HASH Partitioning RANGE Partitioning RANGE COLUMNS partitioning LIST Partitioning LIST COLUMNS partitioning Subpartitioning syntax is currently supported, but plan builds are not. 2. About Partition Keys Partition Keys, Primary Keys and Unique Keys The relationship rules of Partition Keys, Primary Keys, and Unique Keys can be summarized as follows: All columns used in a partitioning expression for a partitioned table must be part of every unique key that the table may have. !!! note The Unique KEY includes PrimaryKey and unique key. That is, each unique key on a table must use each column of the table's partitioning expression. A unique key also includes the primary key of a table because, by definition, a table's primary key is also a unique one. Examples For example, because the unique key on the table does not use every column in the table, each statement that creates the table below is invalid: > CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , UNIQUE KEY ( col1 , col2 ) ) PARTITION BY HASH ( col3 ) PARTITIONS 4 ; ERROR 1503 ( HY000 ): A PRIMARY KEY must include all columns in the table 's partitioning function > CREATE TABLE t2 ( col1 INT NOT NULL, col2 DATE NOT NULL, col3 INT NOT NULL, col4 INT NOT NULL, UNIQUE KEY (col1), UNIQUE KEY (col3) ) PARTITION BY HASH(col1 + col3) PARTITIONS 4; ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table' s partitioning function About the partition KEY is NULL KEY only accepts lists with Null or more column names. In cases where the table has a primary key, any column used as a partitioning key must contain some or all of the table's primary keys. If no column name is specified as the partitioning key, you can ues the table's primary key. For example, the following CREATE TABLE statement is valid in MySQL. If there is no primary KEY but a UNIQUE KEY, the UNIQUE KEY is used as the partitioning key. For example, in the following table construction sentence, the KEY partition key is NULL, no primary key is defined, but the unique key is used as the partitioning key when the partition expression is constructed: CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , UNIQUE KEY ( col1 , col2 ) ) PARTITION BY KEY () PARTITIONS 4 ; Note Other partition rules are the same as MySQL. 3. About MatrixOne Partition Expressions \u200bWhen a DDL statement constructs a partitioned table, a partition expression is generated for each partition definition. The partition expression can calculate the partition to which the data belongs. In the plan build phase, the partition information data structure in the DDL statement is plan.PartitionInfo: type PartitionInfo struct { Type PartitionType Expr * Expr PartitionExpression * Expr Columns [] * Expr PartitionColumns [] string PartitionNum uint64 Partitions [] * PartitionItem Algorithm int64 IsSubPartition bool PartitionMsg string } PartitionExpression is the partition expression. Partition expressions are MatrixOne's way of converting a partition clause into an expression. Each partition expression is constructed as follows: KEY Partitioning KEY partitioning will construct a partition expression based on the partition key and the number of partitions. The result of the partition expression is an integer greater than or equal to 0, representing the partition sequence number, which increases sequentially from zero. SQL example is as below: CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , PRIMARY KEY ( col1 , col2 ) ) PARTITION BY KEY ( col1 ) PARTITIONS 4 ; HASH Partitioning HASH partitioning will construct a partition expression based on the partition function and the number of partitions. The result of the partition expression is an integer greater than or equal to 0, representing the partition sequence number, which increases sequentially from zero. SQL example is as below: CREATE TABLE t1 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR HASH ( YEAR ( col3 )) PARTITIONS 6 ; RANGE Partitioning RANGE partition will construct a partition expression according to the partition function, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE employees ( id INT NOT NULL , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT NOT NULL , store_id INT NOT NULL ) PARTITION BY RANGE ( store_id ) ( PARTITION p0 VALUES LESS THAN ( 6 ), PARTITION p1 VALUES LESS THAN ( 11 ), PARTITION p2 VALUES LESS THAN ( 16 ), PARTITION p3 VALUES LESS THAN MAXVALUE ); RANGE COLUMNS partitioning RANGE partition will construct a partition expression according to the key columns, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE rc ( a INT NOT NULL , b INT NOT NULL ) PARTITION BY RANGE COLUMNS ( a , b ) ( PARTITION p0 VALUES LESS THAN ( 10 , 5 ) COMMENT = 'Data for LESS THAN (10,5)' , PARTITION p1 VALUES LESS THAN ( 20 , 10 ) COMMENT = 'Data for LESS THAN (20,10)' , PARTITION p2 VALUES LESS THAN ( 50 , MAXVALUE ) COMMENT = 'Data for LESS THAN (50,MAXVALUE)' , PARTITION p3 VALUES LESS THAN ( 65 , MAXVALUE ) COMMENT = 'Data for LESS THAN (65,MAXVALUE)' , PARTITION p4 VALUES LESS THAN ( MAXVALUE , MAXVALUE ) COMMENT = 'Data for LESS THAN (MAXVALUE,MAXVALUE)' ); LIST Partitioning LIST partition will construct a partition expression according to the partition key, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE client_firms ( id INT , name VARCHAR ( 35 ) ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 ) ); LIST COLUMNS partitioning LIST partition will construct a partition expression according to the list of partitioning keys, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE lc ( a INT NULL , b INT NULL ) PARTITION BY LIST COLUMNS ( a , b ) ( PARTITION p0 VALUES IN ( ( 0 , 0 ), ( NULL , NULL ) ), PARTITION p1 VALUES IN ( ( 0 , 1 ), ( 0 , 2 ) ), PARTITION p2 VALUES IN ( ( 1 , 0 ), ( 2 , 0 ) ) );","title":"Partitioning supported features list"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#matrixone-ddl-statement-partitioning-supported","text":"","title":"MatrixOne DDL statement partitioning supported"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#1-the-partition-type-supported-by-matrixone","text":"MatrixOne DDL statements support six partition types, which are the same as the MySQL official website: KEY Partitioning HASH Partitioning RANGE Partitioning RANGE COLUMNS partitioning LIST Partitioning LIST COLUMNS partitioning Subpartitioning syntax is currently supported, but plan builds are not.","title":"1. The partition type supported by MatrixOne"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#2-about-partition-keys","text":"","title":"2. About Partition Keys"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#partition-keys-primary-keys-and-unique-keys","text":"The relationship rules of Partition Keys, Primary Keys, and Unique Keys can be summarized as follows: All columns used in a partitioning expression for a partitioned table must be part of every unique key that the table may have. !!! note The Unique KEY includes PrimaryKey and unique key. That is, each unique key on a table must use each column of the table's partitioning expression. A unique key also includes the primary key of a table because, by definition, a table's primary key is also a unique one.","title":"Partition Keys, Primary Keys and Unique Keys"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#examples","text":"For example, because the unique key on the table does not use every column in the table, each statement that creates the table below is invalid: > CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , UNIQUE KEY ( col1 , col2 ) ) PARTITION BY HASH ( col3 ) PARTITIONS 4 ; ERROR 1503 ( HY000 ): A PRIMARY KEY must include all columns in the table 's partitioning function > CREATE TABLE t2 ( col1 INT NOT NULL, col2 DATE NOT NULL, col3 INT NOT NULL, col4 INT NOT NULL, UNIQUE KEY (col1), UNIQUE KEY (col3) ) PARTITION BY HASH(col1 + col3) PARTITIONS 4; ERROR 1503 (HY000): A PRIMARY KEY must include all columns in the table' s partitioning function","title":"Examples"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#about-the-partition-key-is-null","text":"KEY only accepts lists with Null or more column names. In cases where the table has a primary key, any column used as a partitioning key must contain some or all of the table's primary keys. If no column name is specified as the partitioning key, you can ues the table's primary key. For example, the following CREATE TABLE statement is valid in MySQL. If there is no primary KEY but a UNIQUE KEY, the UNIQUE KEY is used as the partitioning key. For example, in the following table construction sentence, the KEY partition key is NULL, no primary key is defined, but the unique key is used as the partitioning key when the partition expression is constructed: CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , UNIQUE KEY ( col1 , col2 ) ) PARTITION BY KEY () PARTITIONS 4 ; Note Other partition rules are the same as MySQL.","title":"About the partition KEY is NULL"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#3-about-matrixone-partition-expressions","text":"\u200bWhen a DDL statement constructs a partitioned table, a partition expression is generated for each partition definition. The partition expression can calculate the partition to which the data belongs. In the plan build phase, the partition information data structure in the DDL statement is plan.PartitionInfo: type PartitionInfo struct { Type PartitionType Expr * Expr PartitionExpression * Expr Columns [] * Expr PartitionColumns [] string PartitionNum uint64 Partitions [] * PartitionItem Algorithm int64 IsSubPartition bool PartitionMsg string } PartitionExpression is the partition expression. Partition expressions are MatrixOne's way of converting a partition clause into an expression. Each partition expression is constructed as follows:","title":"3. About MatrixOne Partition Expressions"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#key-partitioning","text":"KEY partitioning will construct a partition expression based on the partition key and the number of partitions. The result of the partition expression is an integer greater than or equal to 0, representing the partition sequence number, which increases sequentially from zero. SQL example is as below: CREATE TABLE t1 ( col1 INT NOT NULL , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL , PRIMARY KEY ( col1 , col2 ) ) PARTITION BY KEY ( col1 ) PARTITIONS 4 ;","title":"KEY Partitioning"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#hash-partitioning","text":"HASH partitioning will construct a partition expression based on the partition function and the number of partitions. The result of the partition expression is an integer greater than or equal to 0, representing the partition sequence number, which increases sequentially from zero. SQL example is as below: CREATE TABLE t1 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR HASH ( YEAR ( col3 )) PARTITIONS 6 ;","title":"HASH Partitioning"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#range-partitioning","text":"RANGE partition will construct a partition expression according to the partition function, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE employees ( id INT NOT NULL , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT NOT NULL , store_id INT NOT NULL ) PARTITION BY RANGE ( store_id ) ( PARTITION p0 VALUES LESS THAN ( 6 ), PARTITION p1 VALUES LESS THAN ( 11 ), PARTITION p2 VALUES LESS THAN ( 16 ), PARTITION p3 VALUES LESS THAN MAXVALUE );","title":"RANGE Partitioning"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#range-columns-partitioning","text":"RANGE partition will construct a partition expression according to the key columns, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE rc ( a INT NOT NULL , b INT NOT NULL ) PARTITION BY RANGE COLUMNS ( a , b ) ( PARTITION p0 VALUES LESS THAN ( 10 , 5 ) COMMENT = 'Data for LESS THAN (10,5)' , PARTITION p1 VALUES LESS THAN ( 20 , 10 ) COMMENT = 'Data for LESS THAN (20,10)' , PARTITION p2 VALUES LESS THAN ( 50 , MAXVALUE ) COMMENT = 'Data for LESS THAN (50,MAXVALUE)' , PARTITION p3 VALUES LESS THAN ( 65 , MAXVALUE ) COMMENT = 'Data for LESS THAN (65,MAXVALUE)' , PARTITION p4 VALUES LESS THAN ( MAXVALUE , MAXVALUE ) COMMENT = 'Data for LESS THAN (MAXVALUE,MAXVALUE)' );","title":"RANGE COLUMNS partitioning"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#list-partitioning","text":"LIST partition will construct a partition expression according to the partition key, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE client_firms ( id INT , name VARCHAR ( 35 ) ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 ) );","title":"LIST Partitioning"},{"location":"MatrixOne/Reference/Limitations/mo-partition-support/#list-columns-partitioning","text":"LIST partition will construct a partition expression according to the list of partitioning keys, the number of partitions, and the definition of the partitioning item. The result of the partition expression is an integer representing the partition number. The standard partition number starts from zero and increases sequentially. The calculation result is -1, indicating that the current data does not belong to any defined partition. According to MySQL syntax, the executor needs to report an error: Table has no partition for value xxx . SQL example is as below: CREATE TABLE lc ( a INT NULL , b INT NULL ) PARTITION BY LIST COLUMNS ( a , b ) ( PARTITION p0 VALUES IN ( ( 0 , 0 ), ( NULL , NULL ) ), PARTITION p1 VALUES IN ( ( 0 , 1 ), ( 0 , 2 ) ), PARTITION p2 VALUES IN ( ( 1 , 0 ), ( 2 , 0 ) ) );","title":"LIST COLUMNS partitioning"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/","text":"CREATE ACCOUNT Description Create a new account in your organization. Syntax > CREATE ACCOUNT [IF NOT EXISTS] account auth_option [COMMENT 'comment_string'] auth_option: { ADMIN_NAME [=] 'admin_name' IDENTIFIED BY 'auth_string' } Explanations auth_option Specifies the default account name and authorization mode of the tenant, auth_string specifies the password explicitly. status_option Specifies the initial state of a vstore after it is created. Examples > create account tenant_test admin_name = 'root' identified by '111' open comment 'tenant_test' ; Query OK , 0 rows affected ( 0 . 08 sec )","title":"CREATE ACCOUNT"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#create-account","text":"","title":"CREATE ACCOUNT"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#description","text":"Create a new account in your organization.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#syntax","text":"> CREATE ACCOUNT [IF NOT EXISTS] account auth_option [COMMENT 'comment_string'] auth_option: { ADMIN_NAME [=] 'admin_name' IDENTIFIED BY 'auth_string' }","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#explanations","text":"","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#auth_option","text":"Specifies the default account name and authorization mode of the tenant, auth_string specifies the password explicitly.","title":"auth_option"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#status_option","text":"Specifies the initial state of a vstore after it is created.","title":"status_option"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-account/#examples","text":"> create account tenant_test admin_name = 'root' identified by '111' open comment 'tenant_test' ; Query OK , 0 rows affected ( 0 . 08 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-role/","text":"CREATE ROLE Description Create a new role in the system. After creating roles, you can grant object privileges to the role and then grant the role to other roles or individual users to enable access control security for objects in the system. Syntax > CREATE ROLE [IF NOT EXISTS] role [, role ] ... Examples > create role rolex ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"CREATE ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-role/#create-role","text":"","title":"CREATE ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-role/#description","text":"Create a new role in the system. After creating roles, you can grant object privileges to the role and then grant the role to other roles or individual users to enable access control security for objects in the system.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-role/#syntax","text":"> CREATE ROLE [IF NOT EXISTS] role [, role ] ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-role/#examples","text":"> create role rolex ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/","text":"CREATE USER Description Creates a new user in the system. Syntax > CREATE USER [IF NOT EXISTS] user auth_option [, user auth_option] ... [DEFAULT ROLE role] [COMMENT 'comment_string' | ATTRIBUTE 'json_object'] auth_option: { IDENTIFIED BY 'auth_string' } password_option: { PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY] | PASSWORD HISTORY {DEFAULT | N} | PASSWORD REUSE INTERVAL {DEFAULT | N DAY} | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL] | FAILED_LOGIN_ATTEMPTS N | PASSWORD_LOCK_TIME {N | UNBOUNDED} } Explanations auth_option Specifies the default user name and authorization mode of the tenant. Results are returned for random passwords. password_option Change the password expiration time, reuse times, and lock duration. Examples > create user userx identified by '111' ; Query OK , 0 rows affected ( 0 . 04 sec )","title":"CREATE USER"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#create-user","text":"","title":"CREATE USER"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#description","text":"Creates a new user in the system.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#syntax","text":"> CREATE USER [IF NOT EXISTS] user auth_option [, user auth_option] ... [DEFAULT ROLE role] [COMMENT 'comment_string' | ATTRIBUTE 'json_object'] auth_option: { IDENTIFIED BY 'auth_string' } password_option: { PASSWORD EXPIRE [DEFAULT | NEVER | INTERVAL N DAY] | PASSWORD HISTORY {DEFAULT | N} | PASSWORD REUSE INTERVAL {DEFAULT | N DAY} | PASSWORD REQUIRE CURRENT [DEFAULT | OPTIONAL] | FAILED_LOGIN_ATTEMPTS N | PASSWORD_LOCK_TIME {N | UNBOUNDED} }","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#explanations","text":"","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#auth_option","text":"Specifies the default user name and authorization mode of the tenant. Results are returned for random passwords.","title":"auth_option"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#password_option","text":"Change the password expiration time, reuse times, and lock duration.","title":"password_option"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/create-user/#examples","text":"> create user userx identified by '111' ; Query OK , 0 rows affected ( 0 . 04 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-account/","text":"DROP ACCOUNT Description Delete the account in your organization. Syntax > DROP ACCOUNT [IF EXISTS] account Examples > drop account if exists tenant_test ; Query OK , 0 rows affected ( 0 . 12 sec )","title":"DROP ACCOUNT"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-account/#drop-account","text":"","title":"DROP ACCOUNT"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-account/#description","text":"Delete the account in your organization.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-account/#syntax","text":"> DROP ACCOUNT [IF EXISTS] account","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-account/#examples","text":"> drop account if exists tenant_test ; Query OK , 0 rows affected ( 0 . 12 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-role/","text":"DROP ROLE Description Removes the specified role from the system. Syntax > DROP ROLE [IF EXISTS] role [, role ] ... Examples > drop role if exists rolex ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"DROP ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-role/#drop-role","text":"","title":"DROP ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-role/#description","text":"Removes the specified role from the system.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-role/#syntax","text":"> DROP ROLE [IF EXISTS] role [, role ] ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-role/#examples","text":"> drop role if exists rolex ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-user/","text":"DROP USER Description Removes the specified user from the system. Syntax > DROP USER [IF EXISTS] user [, user] ... Examples > drop user if exists userx ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"DROP USER"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-user/#drop-user","text":"","title":"DROP USER"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-user/#description","text":"Removes the specified user from the system.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-user/#syntax","text":"> DROP USER [IF EXISTS] user [, user] ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/drop-user/#examples","text":"> drop user if exists userx ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-privileges/","text":"GRANT Description Grants one or more access privileges on a securable object to a role. The privileges that can be granted are object-specific. Syntax > GRANT priv_type [(column_list)] [, priv_type [(column_list)]] ... ON object_type priv_level TO role [, role] ... [WITH GRANT OPTION] object_type: { TABLE | DATABASE | FUNCTION | ACCOUNT } priv_level: { * | *.* | db_name | db_name.* | db_name.tbl_nam e | tbl_name | db_name.routine_name } Examples > drop role if exists rolex ; > create role rolex ; > drop user if exists userx ; > create user userx identified by '111' ; > grant public to userx ; Query OK , 0 rows affected ( 0 . 03 sec )","title":"GRANT <privileges>"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-privileges/#grant","text":"","title":"GRANT "},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-privileges/#description","text":"Grants one or more access privileges on a securable object to a role. The privileges that can be granted are object-specific.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-privileges/#syntax","text":"> GRANT priv_type [(column_list)] [, priv_type [(column_list)]] ... ON object_type priv_level TO role [, role] ... [WITH GRANT OPTION] object_type: { TABLE | DATABASE | FUNCTION | ACCOUNT } priv_level: { * | *.* | db_name | db_name.* | db_name.tbl_nam e | tbl_name | db_name.routine_name }","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-privileges/#examples","text":"> drop role if exists rolex ; > create role rolex ; > drop user if exists userx ; > create user userx identified by '111' ; > grant public to userx ; Query OK , 0 rows affected ( 0 . 03 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-role/","text":"GRANT ROLE Description Assigns a role to a user or another role: Granting a role to another role creates a \u201cparent-child\u201d relationship between the roles (also referred to as a role hierarchy). Granting a role to a user enables the user to perform all operations allowed by the role (through the access privileges granted to the role). Syntax > GRANT role [, role] ... TO user_or_role [, user_or_role] ... [WITH GRANT OPTION] Examples > create role role_r1 , role_r2 , role_r3 ; > create user role_u1 identified by '111' , role_u2 identified by '111' , role_u3 identified by '111' ; > grant role_r1 to role_u1 ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"GRANT ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-role/#grant-role","text":"","title":"GRANT ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-role/#description","text":"Assigns a role to a user or another role: Granting a role to another role creates a \u201cparent-child\u201d relationship between the roles (also referred to as a role hierarchy). Granting a role to a user enables the user to perform all operations allowed by the role (through the access privileges granted to the role).","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-role/#syntax","text":"> GRANT role [, role] ... TO user_or_role [, user_or_role] ... [WITH GRANT OPTION]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/grant-role/#examples","text":"> create role role_r1 , role_r2 , role_r3 ; > create user role_u1 identified by '111' , role_u2 identified by '111' , role_u3 identified by '111' ; > grant role_r1 to role_u1 ; Query OK , 0 rows affected ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/revoke/","text":"REVOKE Description Removes one or more privileges on a securable object from a role. The privileges that can be revoked are object-specific. Syntax > REVOKE [IF EXISTS] priv_type [(column_list)] [, priv_type [(column_list)]] ... ON object_type priv_level Examples > drop role if exists rolex ; > create role rolex ; > drop user if exists userx ; > create user userx identified by '111' ; > grant public to userx ; > revoke public from userx ;","title":"REVOKE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/revoke/#revoke","text":"","title":"REVOKE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/revoke/#description","text":"Removes one or more privileges on a securable object from a role. The privileges that can be revoked are object-specific.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/revoke/#syntax","text":"> REVOKE [IF EXISTS] priv_type [(column_list)] [, priv_type [(column_list)]] ... ON object_type priv_level","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/revoke/#examples","text":"> drop role if exists rolex ; > create role rolex ; > drop user if exists userx ; > create user userx identified by '111' ; > grant public to userx ; > revoke public from userx ;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/","text":"SET ROLE Description Specifies the active/current primary role for the session. The currently-active primary role sets the context that determines whether the current user has the necessary privileges to execute CREATE <object> statements or perform any other SQL action. Note that authorization to perform any SQL action other than creating objects can be provided by secondary roles. Syntax > SET SECONDARY ROLE { NONE | ALL } SET ROLE role Explanations SET SECONDARY ROLE ALL The union of all roles of the user. SET SECONDARY ROLE NONE Kicking all roles except the PRIMARY ROLE from the current session. SET ROLE role Switching the current ROLE to a new role. Examples ```sql","title":"SET ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#set-role","text":"","title":"SET ROLE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#description","text":"Specifies the active/current primary role for the session. The currently-active primary role sets the context that determines whether the current user has the necessary privileges to execute CREATE <object> statements or perform any other SQL action. Note that authorization to perform any SQL action other than creating objects can be provided by secondary roles.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#syntax","text":"> SET SECONDARY ROLE { NONE | ALL } SET ROLE role","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#explanations","text":"","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#set-secondary-role-all","text":"The union of all roles of the user.","title":"SET SECONDARY ROLE ALL"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#set-secondary-role-none","text":"Kicking all roles except the PRIMARY ROLE from the current session.","title":"SET SECONDARY ROLE NONE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#set-role-role","text":"Switching the current ROLE to a new role.","title":"SET ROLE role"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Database-Administration-Statements/set-role/#examples","text":"```sql","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/","text":"DEALLOCATE PREPARE Description To deallocate a prepared statement produced with PREPARE, use a DEALLOCATE PREPARE statement that refers to the prepared statement name. Attempting to execute a prepared statement after deallocating it results in an error. If too many prepared statements are created and not deallocated by either the DEALLOCATE PREPARE statement or the end of the session, you might encounter the upper limit enforced by the max_prepared_stmt_count system variable. Syntax {DEALLOCATE | DROP} PREPARE stmt_name Arguments Arguments Description stmt_name The name of the prepared statement. Examples > CREATE TABLE numbers ( pk INTEGER PRIMARY KEY , ui BIGINT UNSIGNED , si BIGINT ); > INSERT INTO numbers VALUES ( 0 , 0 , - 9223372036854775808 ), ( 1 , 18446744073709551615 , 9223372036854775807 ); > SET @ si_min = - 9223372036854775808 ; > SET @ si_max = 9223372036854775807 ; > PREPARE s2 FROM 'SELECT * FROM numbers WHERE si=?' ; Query OK , 0 rows affected ( 0 . 00 sec ) > EXECUTE s2 USING @ si_min ; + ------+------+----------------------+ | pk | ui | si | + ------+------+----------------------+ | 0 | 0 | - 9223372036854775808 | + ------+------+----------------------+ 1 row in set ( 0 . 01 sec ) > EXECUTE s2 USING @ si_max ; + ------+----------------------+---------------------+ | pk | ui | si | + ------+----------------------+---------------------+ | 1 | 18446744073709551615 | 9223372036854775807 | + ------+----------------------+---------------------+ 1 row in set ( 0 . 01 sec ) > DEALLOCATE PREPARE s2 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"DEALLOCATE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/#deallocate-prepare","text":"","title":"DEALLOCATE PREPARE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/#description","text":"To deallocate a prepared statement produced with PREPARE, use a DEALLOCATE PREPARE statement that refers to the prepared statement name. Attempting to execute a prepared statement after deallocating it results in an error. If too many prepared statements are created and not deallocated by either the DEALLOCATE PREPARE statement or the end of the session, you might encounter the upper limit enforced by the max_prepared_stmt_count system variable.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/#syntax","text":"{DEALLOCATE | DROP} PREPARE stmt_name","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/#arguments","text":"Arguments Description stmt_name The name of the prepared statement.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/deallocate/#examples","text":"> CREATE TABLE numbers ( pk INTEGER PRIMARY KEY , ui BIGINT UNSIGNED , si BIGINT ); > INSERT INTO numbers VALUES ( 0 , 0 , - 9223372036854775808 ), ( 1 , 18446744073709551615 , 9223372036854775807 ); > SET @ si_min = - 9223372036854775808 ; > SET @ si_max = 9223372036854775807 ; > PREPARE s2 FROM 'SELECT * FROM numbers WHERE si=?' ; Query OK , 0 rows affected ( 0 . 00 sec ) > EXECUTE s2 USING @ si_min ; + ------+------+----------------------+ | pk | ui | si | + ------+------+----------------------+ | 0 | 0 | - 9223372036854775808 | + ------+------+----------------------+ 1 row in set ( 0 . 01 sec ) > EXECUTE s2 USING @ si_max ; + ------+----------------------+---------------------+ | pk | ui | si | + ------+----------------------+---------------------+ | 1 | 18446744073709551615 | 9223372036854775807 | + ------+----------------------+---------------------+ 1 row in set ( 0 . 01 sec ) > DEALLOCATE PREPARE s2 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/","text":"EXECUTE Description After preparing a statement with PREPARE , you execute it with an EXECUTE statement that refers to the prepared statement name. If the prepared statement contains any parameter markers, you must supply a USING clause that lists user variables containing the values to be bound to the parameters. Parameter values can be supplied only by user variables, and the USING clause must name exactly as many variables as the number of parameter markers in the statement. You can execute a given prepared statement multiple times, passing different variables to it or setting the variables to different values before each execution. Syntax EXECUTE stmt_name [USING @var_name [, @var_name] ...] Arguments Arguments Description stmt_name The name of the prepared statement. Examples > CREATE TABLE numbers ( pk INTEGER PRIMARY KEY , ui BIGINT UNSIGNED , si BIGINT ); > INSERT INTO numbers VALUES ( 0 , 0 , - 9223372036854775808 ), ( 1 , 18446744073709551615 , 9223372036854775807 ); > SET @ si_min = - 9223372036854775808 ; > SET @ si_max = 9223372036854775807 ; > PREPARE s2 FROM 'SELECT * FROM numbers WHERE si=?' ; Query OK , 0 rows affected ( 0 . 00 sec ) > EXECUTE s2 USING @ si_min ; + ------+------+----------------------+ | pk | ui | si | + ------+------+----------------------+ | 0 | 0 | - 9223372036854775808 | + ------+------+----------------------+ 1 row in set ( 0 . 01 sec ) > EXECUTE s2 USING @ si_max ; + ------+----------------------+---------------------+ | pk | ui | si | + ------+----------------------+---------------------+ | 1 | 18446744073709551615 | 9223372036854775807 | + ------+----------------------+---------------------+ 1 row in set ( 0 . 01 sec ) > DEALLOCATE PREPARE s2 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"EXCUTE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/#execute","text":"","title":"EXECUTE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/#description","text":"After preparing a statement with PREPARE , you execute it with an EXECUTE statement that refers to the prepared statement name. If the prepared statement contains any parameter markers, you must supply a USING clause that lists user variables containing the values to be bound to the parameters. Parameter values can be supplied only by user variables, and the USING clause must name exactly as many variables as the number of parameter markers in the statement. You can execute a given prepared statement multiple times, passing different variables to it or setting the variables to different values before each execution.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/#syntax","text":"EXECUTE stmt_name [USING @var_name [, @var_name] ...]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/#arguments","text":"Arguments Description stmt_name The name of the prepared statement.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/execute/#examples","text":"> CREATE TABLE numbers ( pk INTEGER PRIMARY KEY , ui BIGINT UNSIGNED , si BIGINT ); > INSERT INTO numbers VALUES ( 0 , 0 , - 9223372036854775808 ), ( 1 , 18446744073709551615 , 9223372036854775807 ); > SET @ si_min = - 9223372036854775808 ; > SET @ si_max = 9223372036854775807 ; > PREPARE s2 FROM 'SELECT * FROM numbers WHERE si=?' ; Query OK , 0 rows affected ( 0 . 00 sec ) > EXECUTE s2 USING @ si_min ; + ------+------+----------------------+ | pk | ui | si | + ------+------+----------------------+ | 0 | 0 | - 9223372036854775808 | + ------+------+----------------------+ 1 row in set ( 0 . 01 sec ) > EXECUTE s2 USING @ si_max ; + ------+----------------------+---------------------+ | pk | ui | si | + ------+----------------------+---------------------+ | 1 | 18446744073709551615 | 9223372036854775807 | + ------+----------------------+---------------------+ 1 row in set ( 0 . 01 sec ) > DEALLOCATE PREPARE s2 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/","text":"PREPARE Description The PREPARE statement prepares a SQL statement and assigns it a name, The prepared statement is executed with EXECUTE and released with DEALLOCATE PREPARE . Statement names are not case-sensitive. Syntax PREPARE stmt_name FROM preparable_stmt Arguments Arguments Description stmt_name The name of the prepared statement. preparable_stmt a string literal or a user variable that contains the text of the SQL statement. The text must represent a single statement, not multiple statements. Within the statement, ? characters can be used as parameter markers to indicate where data values are to be bound to the query later when you execute it. The ? characters should not be enclosed within quotation marks, even if you intend to bind them to string values. Parameter markers can be used only where data values should appear, not for SQL keywords, identifiers, and so forth. If a prepared statement with the given name already exists, it is deallocated implicitly before the new statement is prepared. This means that if the new statement contains an error and cannot be prepared, an error is returned and no statement with the given name exists. The scope of a prepared statement is the session within which it is created, which as several implications: A prepared statement created in one session is not available to other sessions. When a session ends, whether normally or abnormally, its prepared statements no longer exist. If auto-reconnect is enabled, the client is not notified that the connection was lost. For this reason, clients may wish to disable auto-reconnect. A parameter used in a prepared statement has its type determined when the statement is first prepared, and retains this type whenever EXECUTE is invoked for this prepared statement. Rules for determining a parameter's type are listed here: A parameter which is an operand of a binary arithmetic operator has the same data type as the other operand. If both operands of a binary arithmetic operator are parameters, the type of the parameters is decided by the context of the operator. If a parameter is the operand of a unary arithmetic operator, the parameter's type is decided by the context of the operator. If an arithmetic operator has no type-determining context, the derived type for any parameters involved is DOUBLE PRECISION . This can happen, for example, when the parameter is a top-level node in a SELECT list, or when it is part of a comparison operator. A parameter which is an operand of a character string operator has the same derived type as the aggregated type of the other operands. If all operands of the operator are parameters, the derived type is VARCHAR; its collation is determined by the value of collation_connection . A parameter which is an operand of a temporal operator has type DATETIME if the operator returns a DATETIME , TIME if the operator returns a TIME , and DATE if the operator returns a DATE . A parameter which is an operand of a binary comparison operator has the same derived type as the other operand of the comparison. A parameter that is an operand of a ternary comparison operator such as BETWEEN has the same derived type as the aggregated type of the other operands. If all operands of a comparison operator are parameters, the derived type for each of them is VARCHAR , with collation determined by the value of collation_connection . A parameter that is an output operand of any of CASE, COALESCE, IF, IFNULL, or NULLIF has the same derived type as the aggregated type of the operator's other output operands. If all output operands of any of CASE, COALESCE, IF, IFNULL, or NULLIF are parameters, or they are all NULL, the type of the parameter is decided by the context of the operator. If the parameter is an operand of any of CASE, COALESCE(), IF, or IFNULL, and has no type-determining context, the derived type for each of the parameters involved is VARCHAR, and its collation is determined by the value of collation_connection. A parameter which is the operand of a CAST() has the same type as specified by the CAST(). If a parameter is an immediate member of a SELECT list that is not part of an INSERT statement, the derived type of the parameter is VARCHAR, and its collation is determined by the value of collation_connection. If a parameter is an immediate member of a SELECT list that is part of an INSERT statement, the derived type of the parameter is the type of the corresponding column into which the parameter is inserted. If a parameter is used as source for an assignment in a SET clause of an UPDATE statement or in the ON DUPLICATE KEY UPDATE clause of an INSERT statement, the derived type of the parameter is the type of the corresponding column which is updated by the SET or ON DUPLICATE KEY UPDATE clause. If a parameter is an argument of a function, the derived type depends on the function's return type. For some combinations of actual type and derived type, an automatic repreparation of the statement is triggered. Repreparation does not occur if any of the following conditions are true: NULL is used as the actual parameter value. A parameter is an operand of a CAST(). (Instead, a cast to the derived type is attempted, and an exception raised if the cast fails.) A parameter is a string. (In this case, an implicit CAST(? AS derived_type) is performed.) The derived type and actual type of the parameter are both INTEGER and have the same sign. The parameter's derived type is DECIMAL and its actual type is either DECIMAL or INTEGER. The derived type is DOUBLE and the actual type is any numeric type. Both the derived type and the actual type are string types. If the derived type is temporal and the actual type is temporal. Exceptions: The derived type is TIME and the actual type is not TIME; the derived type is DATE and the actual type is not DATE. The derived type is temporal and the actual type is numeric. For cases other than those just listed, the statement is reprepared and the actual parameter types are used instead of the derived parameter types. These rules also apply to a user variable referenced in a prepared statement. Using a different data type for a given parameter or user variable within a prepared statement for executions of the statement subsequent to the first execution causes the statement to be reprepared. This is less efficient; it may also lead to the parameter's (or variable's) actual type to vary, and thus for results to be inconsistent, with subsequent executions of the prepared statement. For these reasons, it is advisable to use the same data type for a given parameter when re-executing a prepared statement. Examples > create table t13 ( a int primary key ); > insert into t13 values ( 1 ); > select * from t13 where 3 in ( select ( 1 + 1 ) union select 1 ); Empty set ( 0 . 01 sec ) > select * from t13 where 3 in ( select ( 1 + 2 ) union select 1 ); + ------+ | a | + ------+ | 1 | + ------+ 1 row in set ( 0 . 01 sec ) > prepare st_18492 from 'select * from t13 where 3 in (select (1+1) union select 1)' ; Query OK , 0 rows affected ( 0 . 00 sec ) > execute st_18492 ; Empty set ( 0 . 01 sec ) > prepare st_18493 from 'select * from t13 where 3 in (select (2+1) union select 1)' ; Query OK , 0 rows affected ( 0 . 00 sec ) > execute st_18493 ; + ------+ | a | + ------+ | 1 | + ------+ 1 row in set ( 0 . 00 sec ) > deallocate prepare st_18492 ; Query OK , 0 rows affected ( 0 . 00 sec ) > deallocate prepare st_18493 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"PREPARE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/#prepare","text":"","title":"PREPARE"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/#description","text":"The PREPARE statement prepares a SQL statement and assigns it a name, The prepared statement is executed with EXECUTE and released with DEALLOCATE PREPARE . Statement names are not case-sensitive.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/#syntax","text":"PREPARE stmt_name FROM preparable_stmt","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/#arguments","text":"Arguments Description stmt_name The name of the prepared statement. preparable_stmt a string literal or a user variable that contains the text of the SQL statement. The text must represent a single statement, not multiple statements. Within the statement, ? characters can be used as parameter markers to indicate where data values are to be bound to the query later when you execute it. The ? characters should not be enclosed within quotation marks, even if you intend to bind them to string values. Parameter markers can be used only where data values should appear, not for SQL keywords, identifiers, and so forth. If a prepared statement with the given name already exists, it is deallocated implicitly before the new statement is prepared. This means that if the new statement contains an error and cannot be prepared, an error is returned and no statement with the given name exists. The scope of a prepared statement is the session within which it is created, which as several implications: A prepared statement created in one session is not available to other sessions. When a session ends, whether normally or abnormally, its prepared statements no longer exist. If auto-reconnect is enabled, the client is not notified that the connection was lost. For this reason, clients may wish to disable auto-reconnect. A parameter used in a prepared statement has its type determined when the statement is first prepared, and retains this type whenever EXECUTE is invoked for this prepared statement. Rules for determining a parameter's type are listed here: A parameter which is an operand of a binary arithmetic operator has the same data type as the other operand. If both operands of a binary arithmetic operator are parameters, the type of the parameters is decided by the context of the operator. If a parameter is the operand of a unary arithmetic operator, the parameter's type is decided by the context of the operator. If an arithmetic operator has no type-determining context, the derived type for any parameters involved is DOUBLE PRECISION . This can happen, for example, when the parameter is a top-level node in a SELECT list, or when it is part of a comparison operator. A parameter which is an operand of a character string operator has the same derived type as the aggregated type of the other operands. If all operands of the operator are parameters, the derived type is VARCHAR; its collation is determined by the value of collation_connection . A parameter which is an operand of a temporal operator has type DATETIME if the operator returns a DATETIME , TIME if the operator returns a TIME , and DATE if the operator returns a DATE . A parameter which is an operand of a binary comparison operator has the same derived type as the other operand of the comparison. A parameter that is an operand of a ternary comparison operator such as BETWEEN has the same derived type as the aggregated type of the other operands. If all operands of a comparison operator are parameters, the derived type for each of them is VARCHAR , with collation determined by the value of collation_connection . A parameter that is an output operand of any of CASE, COALESCE, IF, IFNULL, or NULLIF has the same derived type as the aggregated type of the operator's other output operands. If all output operands of any of CASE, COALESCE, IF, IFNULL, or NULLIF are parameters, or they are all NULL, the type of the parameter is decided by the context of the operator. If the parameter is an operand of any of CASE, COALESCE(), IF, or IFNULL, and has no type-determining context, the derived type for each of the parameters involved is VARCHAR, and its collation is determined by the value of collation_connection. A parameter which is the operand of a CAST() has the same type as specified by the CAST(). If a parameter is an immediate member of a SELECT list that is not part of an INSERT statement, the derived type of the parameter is VARCHAR, and its collation is determined by the value of collation_connection. If a parameter is an immediate member of a SELECT list that is part of an INSERT statement, the derived type of the parameter is the type of the corresponding column into which the parameter is inserted. If a parameter is used as source for an assignment in a SET clause of an UPDATE statement or in the ON DUPLICATE KEY UPDATE clause of an INSERT statement, the derived type of the parameter is the type of the corresponding column which is updated by the SET or ON DUPLICATE KEY UPDATE clause. If a parameter is an argument of a function, the derived type depends on the function's return type. For some combinations of actual type and derived type, an automatic repreparation of the statement is triggered. Repreparation does not occur if any of the following conditions are true: NULL is used as the actual parameter value. A parameter is an operand of a CAST(). (Instead, a cast to the derived type is attempted, and an exception raised if the cast fails.) A parameter is a string. (In this case, an implicit CAST(? AS derived_type) is performed.) The derived type and actual type of the parameter are both INTEGER and have the same sign. The parameter's derived type is DECIMAL and its actual type is either DECIMAL or INTEGER. The derived type is DOUBLE and the actual type is any numeric type. Both the derived type and the actual type are string types. If the derived type is temporal and the actual type is temporal. Exceptions: The derived type is TIME and the actual type is not TIME; the derived type is DATE and the actual type is not DATE. The derived type is temporal and the actual type is numeric. For cases other than those just listed, the statement is reprepared and the actual parameter types are used instead of the derived parameter types. These rules also apply to a user variable referenced in a prepared statement. Using a different data type for a given parameter or user variable within a prepared statement for executions of the statement subsequent to the first execution causes the statement to be reprepared. This is less efficient; it may also lead to the parameter's (or variable's) actual type to vary, and thus for results to be inconsistent, with subsequent executions of the prepared statement. For these reasons, it is advisable to use the same data type for a given parameter when re-executing a prepared statement.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepare/#examples","text":"> create table t13 ( a int primary key ); > insert into t13 values ( 1 ); > select * from t13 where 3 in ( select ( 1 + 1 ) union select 1 ); Empty set ( 0 . 01 sec ) > select * from t13 where 3 in ( select ( 1 + 2 ) union select 1 ); + ------+ | a | + ------+ | 1 | + ------+ 1 row in set ( 0 . 01 sec ) > prepare st_18492 from 'select * from t13 where 3 in (select (1+1) union select 1)' ; Query OK , 0 rows affected ( 0 . 00 sec ) > execute st_18492 ; Empty set ( 0 . 01 sec ) > prepare st_18493 from 'select * from t13 where 3 in (select (2+1) union select 1)' ; Query OK , 0 rows affected ( 0 . 00 sec ) > execute st_18493 ; + ------+ | a | + ------+ | 1 | + ------+ 1 row in set ( 0 . 00 sec ) > deallocate prepare st_18492 ; Query OK , 0 rows affected ( 0 . 00 sec ) > deallocate prepare st_18493 ; Query OK , 0 rows affected ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepared-statements-overview/","text":"Prepared Statements Overview MatrixOne provides support for server-side prepared statements. This support takes advantage of the efficient client/server binary protocol. Using prepared statements with placeholders for parameter values has the following benefits: Less overhead for parsing the statement each time it is executed. Typically, database applications process large volumes of almost-identical statements, with only changes to literal or variable values in clauses such as WHERE for queries and deletes, SET for updates, and VALUES for inserts. Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote and delimiter characters. PREPARE, EXECUTE, and DEALLOCATE PREPARE Statements SQL syntax for prepared statements is based on three SQL statements: PREPARE prepares a statement for execution. EXECUTE executes a prepared statement. DEALLOCATE PREPARE releases a prepared statement.","title":"Prepared Statements Overview"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepared-statements-overview/#prepared-statements-overview","text":"MatrixOne provides support for server-side prepared statements. This support takes advantage of the efficient client/server binary protocol. Using prepared statements with placeholders for parameter values has the following benefits: Less overhead for parsing the statement each time it is executed. Typically, database applications process large volumes of almost-identical statements, with only changes to literal or variable values in clauses such as WHERE for queries and deletes, SET for updates, and VALUES for inserts. Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote and delimiter characters.","title":"Prepared Statements Overview"},{"location":"MatrixOne/Reference/SQL-Reference/0.6-Prepared-Statements/prepared-statements-overview/#prepare-execute-and-deallocate-prepare-statements","text":"SQL syntax for prepared statements is based on three SQL statements: PREPARE prepares a statement for execution. EXECUTE executes a prepared statement. DEALLOCATE PREPARE releases a prepared statement.","title":"PREPARE, EXECUTE, and DEALLOCATE PREPARE Statements"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/","text":"AVG Description Aggregate function. The AVG() function calculates the average value of the argument. Syntax > AVG(expr) Arguments Arguments Description expr Any numerical expression Returned Value The arithmetic mean, always as Double. NaN if the input parameter is empty. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select avg ( col_1c ) from tbl1 ; + -------------+ | avg ( col_1c ) | + -------------+ | 3 . 5000 | + -------------+ > select sum ( col_1d ) as s1 , avg ( col_1d ) as a3 from tbl1 group by col_1e order by s1 desc ; + ------+---------+ | s1 | a3 | + ------+---------+ | 21 | 10 . 5000 | | 18 | 9 . 0000 | | 10 | 10 . 0000 | | 8 | 8 . 0000 | + ------+---------+ > select avg ( col_1d ) as a1 from tbl1 where col_1d < 13 group by col_1e order by a1 ; + ---------+ | a1 | + ---------+ | 8 . 0000 | | 9 . 0000 | | 10 . 0000 | | 10 . 5000 | + ---------+","title":"**AVG**"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#avg","text":"","title":"AVG"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#description","text":"Aggregate function. The AVG() function calculates the average value of the argument.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#syntax","text":"> AVG(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#arguments","text":"Arguments Description expr Any numerical expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#returned-value","text":"The arithmetic mean, always as Double. NaN if the input parameter is empty.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-avg/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select avg ( col_1c ) from tbl1 ; + -------------+ | avg ( col_1c ) | + -------------+ | 3 . 5000 | + -------------+ > select sum ( col_1d ) as s1 , avg ( col_1d ) as a3 from tbl1 group by col_1e order by s1 desc ; + ------+---------+ | s1 | a3 | + ------+---------+ | 21 | 10 . 5000 | | 18 | 9 . 0000 | | 10 | 10 . 0000 | | 8 | 8 . 0000 | + ------+---------+ > select avg ( col_1d ) as a1 from tbl1 where col_1d < 13 group by col_1e order by a1 ; + ---------+ | a1 | + ---------+ | 8 . 0000 | | 9 . 0000 | | 10 . 0000 | | 10 . 5000 | + ---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/","text":"SUM Description Aggregate function. The SUM() function calculates the sum of a set of values. note NULL values are not counted. Syntax > SUM(expr) Arguments Arguments Description expr Any expression Returned Value Returns the sum of expr. A double if the input type is double, otherwise integer. If there are no matching rows, SUM() returns NULL. Examples Example 1: > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select sum ( col_1c ) from tbl1 ; + -------------+ | sum ( col_1c ) | + -------------+ | 21 | + -------------+ > select sum ( col_1d ) as c1 from tbl1 where col_1d < 13 group by col_1e order by c1 ; + ------+ | c1 | + ------+ | 8 | | 10 | | 18 | | 21 | + ------+ Example 2: > CREATE TABLE t1 ( a varchar ( 255 ), b INT , c INT UNSIGNED , d DECIMAL ( 12 , 2 ), e REAL ); > INSERT INTO t1 VALUES ( 'iynfj' , 1 , 1 , 1 , 1 ); > INSERT INTO t1 VALUES ( 'innfj' , 2 , 2 , 2 , 2 ); > SELECT SUM ( DISTINCT b ) FROM t1 GROUP BY b ; + -----------------+ | sum ( distinct b ) | + -----------------+ | 1 | | 2 | + -----------------+","title":"**SUM**"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#sum","text":"","title":"SUM"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#description","text":"Aggregate function. The SUM() function calculates the sum of a set of values. note NULL values are not counted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#syntax","text":"> SUM(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#returned-value","text":"Returns the sum of expr. A double if the input type is double, otherwise integer. If there are no matching rows, SUM() returns NULL.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/0.6-sum/#examples","text":"Example 1: > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select sum ( col_1c ) from tbl1 ; + -------------+ | sum ( col_1c ) | + -------------+ | 21 | + -------------+ > select sum ( col_1d ) as c1 from tbl1 where col_1d < 13 group by col_1e order by c1 ; + ------+ | c1 | + ------+ | 8 | | 10 | | 18 | | 21 | + ------+ Example 2: > CREATE TABLE t1 ( a varchar ( 255 ), b INT , c INT UNSIGNED , d DECIMAL ( 12 , 2 ), e REAL ); > INSERT INTO t1 VALUES ( 'iynfj' , 1 , 1 , 1 , 1 ); > INSERT INTO t1 VALUES ( 'innfj' , 2 , 2 , 2 , 2 ); > SELECT SUM ( DISTINCT b ) FROM t1 GROUP BY b ; + -----------------+ | sum ( distinct b ) | + -----------------+ | 1 | | 2 | + -----------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/","text":"ANY_VALUE Description The ANY_VALUE function is useful for GROUP BY queries. Syntax > ANY_VALUE(arg) Arguments Arguments Description arg Any type. When arg is NULL, the line does not participate in the calculation. Returned Value The function return value and type are the same as the return value and type of its argument. note The execution result of ANY_VALUE is uncertain. The same input may produce different execution results. Examples > create table t1 ( -> a int , -> b int , -> c int -> ); > create table t2 ( -> a int , -> b int , -> c int -> ); > insert into t1 values ( 1 , 10 , 34 ),( 2 , 20 , 14 ); > insert into t2 values ( 1 , - 10 , - 45 ); > select ANY_VALUE ( t1 . b ) from t1 left join t2 on t1 . c = t1 . b and t1 . a = t1 . c group by t1 . a ; + -----------------+ | any_value ( t1 . b ) | + -----------------+ | 10 | | 20 | + -----------------+ 2 rows in set ( 0 . 01 sec ) > select 3 + ( 5 * ANY_VALUE ( t1 . b )) from t1 left join t2 on t1 . c = t1 . b and t1 . a = t1 . c group by t1 . a ; + ---------------------------+ | 3 + ( 5 * any_value ( t1 . b )) | + ---------------------------+ | 53 | | 103 | + ---------------------------+ 2 rows in set ( 0 . 00 sec )","title":"ANY_VALUE"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#any_value","text":"","title":"ANY_VALUE"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#description","text":"The ANY_VALUE function is useful for GROUP BY queries.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#syntax","text":"> ANY_VALUE(arg)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#arguments","text":"Arguments Description arg Any type. When arg is NULL, the line does not participate in the calculation.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#returned-value","text":"The function return value and type are the same as the return value and type of its argument. note The execution result of ANY_VALUE is uncertain. The same input may produce different execution results.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/any-value/#examples","text":"> create table t1 ( -> a int , -> b int , -> c int -> ); > create table t2 ( -> a int , -> b int , -> c int -> ); > insert into t1 values ( 1 , 10 , 34 ),( 2 , 20 , 14 ); > insert into t2 values ( 1 , - 10 , - 45 ); > select ANY_VALUE ( t1 . b ) from t1 left join t2 on t1 . c = t1 . b and t1 . a = t1 . c group by t1 . a ; + -----------------+ | any_value ( t1 . b ) | + -----------------+ | 10 | | 20 | + -----------------+ 2 rows in set ( 0 . 01 sec ) > select 3 + ( 5 * ANY_VALUE ( t1 . b )) from t1 left join t2 on t1 . c = t1 . b and t1 . a = t1 . c group by t1 . a ; + ---------------------------+ | 3 + ( 5 * any_value ( t1 . b )) | + ---------------------------+ | 53 | | 103 | + ---------------------------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/","text":"AVG Description Aggregate function. The AVG() function calculates the average value of the argument. Syntax > AVG(expr) Arguments Arguments Description expr Any numerical expression Returned Value The arithmetic mean, always as Double. NaN if the input parameter is empty. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select avg ( col_1c ) from tbl1 ; + -------------+ | avg ( col_1c ) | + -------------+ | 3 . 5000 | + -------------+ > select sum ( col_1d ) as s1 , avg ( col_1d ) as a3 from tbl1 group by col_1e order by s1 desc ; + ------+---------+ | s1 | a3 | + ------+---------+ | 21 | 10 . 5000 | | 18 | 9 . 0000 | | 10 | 10 . 0000 | | 8 | 8 . 0000 | + ------+---------+ > select avg ( col_1d ) as a1 from tbl1 where col_1d < 13 group by col_1e order by a1 ; + ---------+ | a1 | + ---------+ | 8 . 0000 | | 9 . 0000 | | 10 . 0000 | | 10 . 5000 | + ---------+ Constraints AVG(DISTINCT) is not supported for the 0.5.1 version.","title":"AVG"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#avg","text":"","title":"AVG"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#description","text":"Aggregate function. The AVG() function calculates the average value of the argument.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#syntax","text":"> AVG(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#arguments","text":"Arguments Description expr Any numerical expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#returned-value","text":"The arithmetic mean, always as Double. NaN if the input parameter is empty.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select avg ( col_1c ) from tbl1 ; + -------------+ | avg ( col_1c ) | + -------------+ | 3 . 5000 | + -------------+ > select sum ( col_1d ) as s1 , avg ( col_1d ) as a3 from tbl1 group by col_1e order by s1 desc ; + ------+---------+ | s1 | a3 | + ------+---------+ | 21 | 10 . 5000 | | 18 | 9 . 0000 | | 10 | 10 . 0000 | | 8 | 8 . 0000 | + ------+---------+ > select avg ( col_1d ) as a1 from tbl1 where col_1d < 13 group by col_1e order by a1 ; + ---------+ | a1 | + ---------+ | 8 . 0000 | | 9 . 0000 | | 10 . 0000 | | 10 . 5000 | + ---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/avg/#constraints","text":"AVG(DISTINCT) is not supported for the 0.5.1 version.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/","text":"BIT_AND Description Aggregate function. The BIT_AND(expr) function returns the bitwise AND of all bits in expr. Syntax > BIT_AND(expr) Arguments Arguments Description expr UINT data types Examples > drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_AND ( number ) FROM t1 GROUP BY id ; + ------+-----------------+ | id | bit_and ( number ) | + ------+-----------------+ | a | 0 | | b | 1 | + ------+-----------------+","title":"BIT_AND"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/#bit_and","text":"","title":"BIT_AND"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/#description","text":"Aggregate function. The BIT_AND(expr) function returns the bitwise AND of all bits in expr.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/#syntax","text":"> BIT_AND(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/#arguments","text":"Arguments Description expr UINT data types","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_and/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_AND ( number ) FROM t1 GROUP BY id ; + ------+-----------------+ | id | bit_and ( number ) | + ------+-----------------+ | a | 0 | | b | 1 | + ------+-----------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/","text":"BIT_OR Description Aggregate function. The BIT_OR(expr) function returns the bitwise OR of all bits in expr. Syntax > BIT_OR(expr) Arguments Arguments Description expr UINT data types Examples > drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_OR ( number ) FROM t1 GROUP BY id ; + ------+----------------+ | id | bit_or ( number ) | + ------+----------------+ | a | 111 | | b | 11 | + ------+----------------+","title":"BIT_OR"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/#bit_or","text":"","title":"BIT_OR"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/#description","text":"Aggregate function. The BIT_OR(expr) function returns the bitwise OR of all bits in expr.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/#syntax","text":"> BIT_OR(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/#arguments","text":"Arguments Description expr UINT data types","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_or/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_OR ( number ) FROM t1 GROUP BY id ; + ------+----------------+ | id | bit_or ( number ) | + ------+----------------+ | a | 111 | | b | 11 | + ------+----------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/","text":"BIT_XOR Description Aggregate function. The BIT_XOR(expr) function returns the bitwise XOR of all bits in expr. Syntax > BIT_XOR(expr) Arguments Arguments Description expr UINT data types Examples > drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_XOR ( number ) FROM t1 GROUP BY id ; + ------+-----------------+ | id | bit_xor ( number ) | + ------+-----------------+ | a | 101 | | b | 10 | + ------+-----------------+","title":"BIT_XOR"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/#bit_xor","text":"","title":"BIT_XOR"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/#description","text":"Aggregate function. The BIT_XOR(expr) function returns the bitwise XOR of all bits in expr.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/#syntax","text":"> BIT_XOR(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/#arguments","text":"Arguments Description expr UINT data types","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/bit_xor/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( id CHAR ( 1 ), number INT ); > INSERT INTO t1 VALUES ( 'a' , 111 ),( 'a' , 110 ),( 'a' , 100 ), ( 'a' , 000 ),( 'b' , 001 ),( 'b' , 011 ); > select id , BIT_XOR ( number ) FROM t1 GROUP BY id ; + ------+-----------------+ | id | bit_xor ( number ) | + ------+-----------------+ | a | 101 | | b | 10 | + ------+-----------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/","text":"COUNT Description Aggregate function. The COUNT() function calculates the number of records returned by a select query. note NULL values are not counted. Syntax > COUNT(expr) Arguments Arguments Description expr Any expression.This may be a column name, the result of another function, or a math operation. * is also allowed, to indicate pure row counting. Returned Value Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. If there are no matching rows, COUNT() returns 0. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select count ( col_1b ) from tbl1 ; + ---------------+ | count ( col_1b ) | + ---------------+ | 6 | + ---------------+ > select count ( * ) from tbl1 where col_1d < 10 ; + ----------+ | count ( * ) | + ----------+ | 3 | + ----------+","title":"COUNT"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#count","text":"","title":"COUNT"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#description","text":"Aggregate function. The COUNT() function calculates the number of records returned by a select query. note NULL values are not counted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#syntax","text":"> COUNT(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#arguments","text":"Arguments Description expr Any expression.This may be a column name, the result of another function, or a math operation. * is also allowed, to indicate pure row counting.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#returned-value","text":"Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value. If there are no matching rows, COUNT() returns 0.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/count/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select count ( col_1b ) from tbl1 ; + ---------------+ | count ( col_1b ) | + ---------------+ | 6 | + ---------------+ > select count ( * ) from tbl1 where col_1d < 10 ; + ----------+ | count ( * ) | + ----------+ | 3 | + ----------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/","text":"MAX Description Aggregate function. The MAX() function calculates the maximum value across a group of values. Syntax > MAX(expr) Arguments Arguments Description expr Any expression Returned Value Returns the maximum value of expr. MAX() may take a string argument, in such cases, it returns the maximum string value. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select max ( col_1d ) from tbl1 ; + -------------+ | max ( col_1d ) | + -------------+ | 12 | + -------------+ > select max ( col_1c ) as m1 from tbl1 where col_1d < 12 group by col_1e ; + ------+ | m1 | + ------+ | 5 | | 2 | | 3 | | 4 | + ------+","title":"MAX"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#max","text":"","title":"MAX"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#description","text":"Aggregate function. The MAX() function calculates the maximum value across a group of values.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#syntax","text":"> MAX(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#returned-value","text":"Returns the maximum value of expr. MAX() may take a string argument, in such cases, it returns the maximum string value.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/max/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select max ( col_1d ) from tbl1 ; + -------------+ | max ( col_1d ) | + -------------+ | 12 | + -------------+ > select max ( col_1c ) as m1 from tbl1 where col_1d < 12 group by col_1e ; + ------+ | m1 | + ------+ | 5 | | 2 | | 3 | | 4 | + ------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/","text":"MIN Description Aggregate function. The MAX() function calculates the maximum value across a group of values. Syntax > MIN(expr) Arguments Arguments Description expr Any expression Returned Value Returns the minimum value of expr. MIN() may take a string argument, in such cases, it returns the minimum string value. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select min ( col_1d ) from tbl1 ; + -------------+ | min ( col_1d ) | + -------------+ | 7 | + -------------+ > select min ( col_1c ) as m1 from tbl1 where col_1d < 12 group by col_1e ; + ------+ | m1 | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+","title":"MIN"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#min","text":"","title":"MIN"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#description","text":"Aggregate function. The MAX() function calculates the maximum value across a group of values.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#syntax","text":"> MIN(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#returned-value","text":"Returns the minimum value of expr. MIN() may take a string argument, in such cases, it returns the minimum string value.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/min/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select min ( col_1d ) from tbl1 ; + -------------+ | min ( col_1d ) | + -------------+ | 7 | + -------------+ > select min ( col_1c ) as m1 from tbl1 where col_1d < 12 group by col_1e ; + ------+ | m1 | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/","text":"STDDEV_POP Description Aggregate function. The STDDEV_POP(expr) function returns the population standard deviation of expr. Syntax > STDDEV_POP(expr) Arguments Arguments Description expr Any numerical expressions Examples > CREATE TABLE t1 ( PlayerName VARCHAR ( 100 ) NOT NULL , RunScored INT NOT NULL , WicketsTaken INT NOT NULL ); > INSERT INTO t1 VALUES ( 'KL Rahul' , 52 , 0 ),( 'Hardik Pandya' , 30 , 1 ),( 'Ravindra Jadeja' , 18 , 2 ),( 'Washington Sundar' , 10 , 1 ),( 'D Chahar' , 11 , 2 ), ( 'Mitchell Starc' , 0 , 3 ); > SELECT STDDEV_POP ( RunScored ) as Pop_Standard_Deviation FROM t1 ; > SELECT STDDEV_POP ( WicketsTaken ) as Pop_Std_Dev_Wickets FROM t1 ; > SELECT STDDEV_POP ( RunScored ) as Pop_Standard_Deviation FROM t1 ; + ------------------------+ | Pop_Standard_Deviation | + ------------------------+ | 16 . 8762 | + ------------------------+ 1 row in set ( 0 . 02 sec ) > SELECT STDDEV_POP ( WicketsTaken ) as Pop_Std_Dev_Wickets FROM t1 ; + ---------------------+ | Pop_Std_Dev_Wickets | + ---------------------+ | 0 . 9574 | + ---------------------+ 1 row in set ( 0 . 01 sec )","title":"STDDEV_POP"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/#stddev_pop","text":"","title":"STDDEV_POP"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/#description","text":"Aggregate function. The STDDEV_POP(expr) function returns the population standard deviation of expr.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/#syntax","text":"> STDDEV_POP(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/#arguments","text":"Arguments Description expr Any numerical expressions","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/stddev_pop/#examples","text":"> CREATE TABLE t1 ( PlayerName VARCHAR ( 100 ) NOT NULL , RunScored INT NOT NULL , WicketsTaken INT NOT NULL ); > INSERT INTO t1 VALUES ( 'KL Rahul' , 52 , 0 ),( 'Hardik Pandya' , 30 , 1 ),( 'Ravindra Jadeja' , 18 , 2 ),( 'Washington Sundar' , 10 , 1 ),( 'D Chahar' , 11 , 2 ), ( 'Mitchell Starc' , 0 , 3 ); > SELECT STDDEV_POP ( RunScored ) as Pop_Standard_Deviation FROM t1 ; > SELECT STDDEV_POP ( WicketsTaken ) as Pop_Std_Dev_Wickets FROM t1 ; > SELECT STDDEV_POP ( RunScored ) as Pop_Standard_Deviation FROM t1 ; + ------------------------+ | Pop_Standard_Deviation | + ------------------------+ | 16 . 8762 | + ------------------------+ 1 row in set ( 0 . 02 sec ) > SELECT STDDEV_POP ( WicketsTaken ) as Pop_Std_Dev_Wickets FROM t1 ; + ---------------------+ | Pop_Std_Dev_Wickets | + ---------------------+ | 0 . 9574 | + ---------------------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/","text":"SUM Description Aggregate function. The SUM() function calculates the sum of a set of values. note NULL values are not counted. Syntax > SUM(expr) Arguments Arguments Description expr Any expression Returned Value Returns the sum of expr. A double if the input type is double, otherwise integer. If there are no matching rows, SUM() returns NULL. Examples > drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select sum ( col_1c ) from tbl1 ; + -------------+ | sum ( col_1c ) | + -------------+ | 21 | + -------------+ > select sum ( col_1d ) as c1 from tbl1 where col_1d < 13 group by col_1e order by c1 ; + ------+ | c1 | + ------+ | 8 | | 10 | | 18 | | 21 | + ------+ Constraints SUM(DISTINCT) is not supported for the 0.5.1 version.","title":"SUM"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#sum","text":"","title":"SUM"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#description","text":"Aggregate function. The SUM() function calculates the sum of a set of values. note NULL values are not counted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#syntax","text":"> SUM(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#arguments","text":"Arguments Description expr Any expression","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#returned-value","text":"Returns the sum of expr. A double if the input type is double, otherwise integer. If there are no matching rows, SUM() returns NULL.","title":"Returned Value"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#examples","text":"> drop table if exists tbl1 , tbl2 ; > create table tbl1 ( col_1a tinyint , col_1b smallint , col_1c int , col_1d bigint , col_1e char ( 10 ) not null ); > insert into tbl1 values ( 0 , 1 , 1 , 7 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 2 , 8 , \"b\" ); > insert into tbl1 values ( 0 , 1 , 3 , 9 , \"c\" ); > insert into tbl1 values ( 0 , 1 , 4 , 10 , \"D\" ); > insert into tbl1 values ( 0 , 1 , 5 , 11 , \"a\" ); > insert into tbl1 values ( 0 , 1 , 6 , 12 , \"c\" ); > select sum ( col_1c ) from tbl1 ; + -------------+ | sum ( col_1c ) | + -------------+ | 21 | + -------------+ > select sum ( col_1d ) as c1 from tbl1 where col_1d < 13 group by col_1e order by c1 ; + ------+ | c1 | + ------+ | 8 | | 10 | | 18 | | 21 | + ------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/sum/#constraints","text":"SUM(DISTINCT) is not supported for the 0.5.1 version.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/","text":"VARIANCE Description Aggregate function. The VAR(expr) function returns the population standard variance of expr. Syntax > VAR(expr) Arguments Arguments Description expr Any numerical expressions Examples > CREATE TABLE t1 ( PlayerName VARCHAR ( 100 ) NOT NULL , RunScored INT NOT NULL , WicketsTaken INT NOT NULL ); > INSERT INTO t1 VALUES ( 'KL Rahul' , 52 , 0 ),( 'Hardik Pandya' , 30 , 1 ),( 'Ravindra Jadeja' , 18 , 2 ),( 'Washington Sundar' , 10 , 1 ),( 'D Chahar' , 11 , 2 ), ( 'Mitchell Starc' , 0 , 3 ); > SELECT VAR ( RunScored ) as Pop_Standard_Variance FROM t1 ; > SELECT VAR ( WicketsTaken ) as Pop_Std_Var_Wickets FROM t1 ; > SELECT VAR ( RunScored ) as Pop_Standard_Deviation FROM t1 ; + ------------------------+ | Pop_Standard_Deviation | + ------------------------+ | 284 . 8056 | + ------------------------+ 1 row in set ( 0 . 04 sec ) > SELECT VAR ( WicketsTaken ) as Pop_Std_Var_Wickets FROM t1 ; + ---------------------+ | Pop_Std_Var_Wickets | + ---------------------+ | 0 . 9167 | + ---------------------+ 1 row in set ( 0 . 04 sec )","title":"VAR"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/#variance","text":"","title":"VARIANCE"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/#description","text":"Aggregate function. The VAR(expr) function returns the population standard variance of expr.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/#syntax","text":"> VAR(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/#arguments","text":"Arguments Description expr Any numerical expressions","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Aggregate-Functions/var/#examples","text":"> CREATE TABLE t1 ( PlayerName VARCHAR ( 100 ) NOT NULL , RunScored INT NOT NULL , WicketsTaken INT NOT NULL ); > INSERT INTO t1 VALUES ( 'KL Rahul' , 52 , 0 ),( 'Hardik Pandya' , 30 , 1 ),( 'Ravindra Jadeja' , 18 , 2 ),( 'Washington Sundar' , 10 , 1 ),( 'D Chahar' , 11 , 2 ), ( 'Mitchell Starc' , 0 , 3 ); > SELECT VAR ( RunScored ) as Pop_Standard_Variance FROM t1 ; > SELECT VAR ( WicketsTaken ) as Pop_Std_Var_Wickets FROM t1 ; > SELECT VAR ( RunScored ) as Pop_Standard_Deviation FROM t1 ; + ------------------------+ | Pop_Standard_Deviation | + ------------------------+ | 284 . 8056 | + ------------------------+ 1 row in set ( 0 . 04 sec ) > SELECT VAR ( WicketsTaken ) as Pop_Std_Var_Wickets FROM t1 ; + ---------------------+ | Pop_Std_Var_Wickets | + ---------------------+ | 0 . 9167 | + ---------------------+ 1 row in set ( 0 . 04 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/","text":"CREATE TABLE Description Create a new table. Syntax > CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [db.]table_name [comment = \"comment of table\"]; ( name1 type1 [comment 'comment of column'] [AUTO_INCREMENT] [[PRIMARY] KEY], name2 type2 [comment 'comment of column'], ... ) [partition_options] Explanations Temporary Tables You can use the TEMPORARY keyword when creating a table. A TEMPORARY table is visible only within the current session, and is dropped automatically when the session is closed. For more information, see Temporary Tables . COMMENT A comment for a column or a table can be specified with the COMMENT option. Up to 1024 characters long. The comment is displayed by the SHOW CREATE TABLE and SHOW FULL COLUMNS statements. It is also shown in the COLUMN_COMMENT column of the INFORMATION_SCHEMA.COLUMNS table. AUTO_INCREMENT The initial AUTO_INCREMENT value for the table. An integer column can have the additional attribute AUTO_INCREMENT . When you insert a value of NULL (recommended) or 0 into an indexed AUTO_INCREMENT column, the column is set to the next sequence value. Typically this is value+1, where value is the largest value for the column currently in the table. AUTO_INCREMENT sequences begin with 1. There can be only one AUTO_INCREMENT column per table, it must be indexed, and it cannot have a DEFAULT value. An AUTO_INCREMENT column works properly only if it contains only positive values. Inserting a negative number is regarded as inserting a very large positive number. This is done to avoid precision problems when numbers \u201cwrap\u201d over from positive to negative and also to ensure that you do not accidentally get an AUTO_INCREMENT column that contains 0. Table PARTITION and PARTITIONS partition_options: PARTITION BY { [LINEAR] HASH(expr) | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) | RANGE{(expr) | COLUMNS(column_list)} | LIST{(expr) | COLUMNS(column_list)} } [PARTITIONS num] [SUBPARTITION BY { [LINEAR] HASH(expr) | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) } ] [(partition_definition [, partition_definition] ...)] partition_definition: PARTITION partition_name [VALUES {LESS THAN {(expr | value_list) | MAXVALUE} | IN (value_list)}] [[STORAGE] ENGINE [=] engine_name] [COMMENT [=] 'string' ] [DATA DIRECTORY [=] 'data_dir'] [INDEX DIRECTORY [=] 'index_dir'] [MAX_ROWS [=] max_number_of_rows] [MIN_ROWS [=] min_number_of_rows] [TABLESPACE [=] tablespace_name] Partitions can be modified, merged, added to tables, and dropped from tables. PARTITION BY If used, a partition_options clause begins with PARTITION BY. This clause contains the function that is used to determine the partition; the function returns an integer value ranging from 1 to num, where num is the number of partitions. HASH(expr) Hashes one or more columns to create a key for placing and locating rows. expr is an expression using one or more table columns. For example, these are both valid CREATE TABLE statements using PARTITION BY HASH: CREATE TABLE t1 (col1 INT, col2 CHAR(5)) PARTITION BY HASH(col1); CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATETIME) PARTITION BY HASH ( YEAR(col3) ); KEY(column_list) This is similar to HASH . The column_list argument is simply a list of 1 or more table columns (maximum: 16). This example shows a simple table partitioned by key, with 4 partitions: CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY KEY(col3) PARTITIONS 4; For tables that are partitioned by key, you can employ linear partitioning by using the LINEAR keyword. This has the same effect as with tables that are partitioned by HASH . This example uses linear partitioning by key to distribute data between 5 partitions: CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY LINEAR KEY(col3) PARTITIONS 5; RANGE(expr) In this case, expr shows a range of values using a set of VALUES LESS THAN operators. When using range partitioning, you must define at least one partition using VALUES LESS THAN . You cannot use VALUES IN with range partitioning. PARTITION ... VALUES LESS THAN ... statements work in a consecutive fashion. VALUES LESS THAN MAXVALUE works to specify \u201cleftover\u201d values that are greater than the maximum value otherwise specified. The clauses must be arranged in such a way that the upper limit specified in each successive VALUES LESS THAN is greater than that of the previous one, with the one referencing MAXVALUE coming last of all in the list. RANGE COLUMNS(column_list) This variant on RANGE facilitates partition pruning for queries using range conditions on multiple columns (that is, having conditions such as WHERE a = 1 AND b < 10 or WHERE a = 1 AND b = 10 AND c < 10) . It enables you to specify value ranges in multiple columns by using a list of columns in the COLUMNS clause and a set of column values in each PARTITION ... VALUES LESS THAN (value_list) partition definition clause. (In the simplest case, this set consists of a single column.) The maximum number of columns that can be referenced in the column_list and value_list is 16. The column_list used in the COLUMNS clause may contain only names of columns; each column in the list must be one of the following MySQL data types: the integer types; the string types; and time or date column types. Columns using BLOB, TEXT, SET, ENUM, BIT, or spatial data types are not permitted; columns that use floating-point number types are also not permitted. You also may not use functions or arithmetic expressions in the COLUMNS clause. The VALUES LESS THAN clause used in a partition definition must specify a literal value for each column that appears in the COLUMNS() clause; that is, the list of values used for each VALUES LESS THAN clause must contain the same number of values as there are columns listed in the COLUMNS clause. An attempt to use more or fewer values in a VALUES LESS THAN clause than there are in the COLUMNS clause causes the statement to fail with the error Inconsistency in usage of column lists for partitioning.... You cannot use NULL for any value appearing in VALUES LESS THAN . It is possible to use MAXVALUE more than once for a given column other than the first, as shown in this example: CREATE TABLE rc ( a INT NOT NULL, b INT NOT NULL ) PARTITION BY RANGE COLUMNS(a,b) ( PARTITION p0 VALUES LESS THAN (10,5), PARTITION p1 VALUES LESS THAN (20,10), PARTITION p2 VALUES LESS THAN (50,MAXVALUE), PARTITION p3 VALUES LESS THAN (65,MAXVALUE), PARTITION p4 VALUES LESS THAN (MAXVALUE,MAXVALUE) ); Each value used in a VALUES LESS THAN value list must match the type of the corresponding column exactly; no conversion is made. For example, you cannot use the string '1' for a value that matches a column that uses an integer type (you must use the numeral 1 instead), nor can you use the numeral 1 for a value that matches a column that uses a string type (in such a case, you must use a quoted string: '1'). LIST(expr) This is useful when assigning partitions based on a table column with a restricted set of possible values, such as a state or country code. In such a case, all rows pertaining to a certain state or country can be assigned to a single partition, or a partition can be reserved for a certain set of states or countries. It is similar to RANGE, except that only VALUES IN may be used to specify permissible values for each partition. VALUES IN is used with a list of values to be matched. For instance, you could create a partitioning scheme such as the following: CREATE TABLE client_firms ( id INT, name VARCHAR(35) ) PARTITION BY LIST (id) ( PARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21), PARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22), PARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23), PARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24) ); When using list partitioning, you must define at least one partition using VALUES IN. You cannot use VALUES LESS THAN with PARTITION BY LIST. Note For tables partitioned by LIST, the value list used with VALUES IN must consist of integer values only. In MySQL 8.0, you can overcome this limitation using partitioning by LIST COLUMNS, which is described later in this section. LIST COLUMNS(column_list) This variant on LIST facilitates partition pruning for queries using comparison conditions on multiple columns (that is, having conditions such as WHERE a = 5 AND b = 5 or WHERE a = 1 AND b = 10 AND c = 5 ). It enables you to specify values in multiple columns by using a list of columns in the COLUMNS clause and a set of column values in each PARTITION ... VALUES IN (value_list) partition definition clause. The rules governing regarding data types for the column list used in LIST COLUMNS(column_list) and the value list used in VALUES IN(value_list) are the same as those for the column list used in RANGE COLUMNS(column_list) and the value list used in VALUES LESS THAN(value_list) , respectively, except that in the VALUES IN clause, MAXVALUE is not permitted, and you may use NULL . There is one important difference between the list of values used for VALUES IN with PARTITION BY LIST COLUMNS as opposed to when it is used with PARTITION BY LIST . When used with PARTITION BY LIST COLUMNS , each element in the VALUES IN clause must be a set of column values; the number of values in each set must be the same as the number of columns used in the COLUMNS clause, and the data types of these values must match those of the columns (and occur in the same order). In the simplest case, the set consists of a single column. The maximum number of columns that can be used in the column_list and in the elements making up the value_list is 16. The table defined by the following CREATE TABLE statement provides an example of a table using LIST COLUMNS partitioning: CREATE TABLE lc ( a INT NULL, b INT NULL ) PARTITION BY LIST COLUMNS(a,b) ( PARTITION p0 VALUES IN( (0,0), (NULL,NULL) ), PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2) ), PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1) ), PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3) ) ); PARTITIONS num The number of partitions may optionally be specified with a PARTITIONS num clause, where num is the number of partitions. If both this clause and any PARTITION clauses are used, num must be equal to the total number of any partitions that are declared using PARTITION clauses. create_table_statement Examples Example 1 > CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+ Example 2 > create table t2 ( a int , b int ) comment = \"\u4e8b\u5b9e\u8868\" ; > show create table t2 ; + -------+---------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------+ | t2 | CREATE TABLE ` t2 ` ( ` a ` INT DEFAULT NULL , ` b ` INT DEFAULT NULL ) COMMENT = '\u4e8b\u5b9e\u8868' , | + -------+---------------------------------------------------------------------------------------+ Example 3 > create table t3 ( a int comment '\u5217\u7684\u6ce8\u91ca' , b int ) comment = \"table\" ; > show create table t3 ; + -------+----------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+----------------------------------------------------------------------------------------------------------+ | t3 | CREATE TABLE ` t3 ` ( ` a ` INT DEFAULT NULL COMMENT '\u5217\u7684\u6ce8\u91ca' , ` b ` INT DEFAULT NULL ) COMMENT = 'table' , | + -------+----------------------------------------------------------------------------------------------------------+ Example 4 > CREATE TABLE tp1 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col3 ) PARTITIONS 4 ; > show create table tp1 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp1 | CREATE TABLE ` tp1 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp2 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col3 ); > show create table tp2 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp2 | CREATE TABLE ` tp2 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp4 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ALGORITHM = 1 ( col3 ); > show create table tp4 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp4 | CREATE TABLE ` tp4 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp5 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR KEY ALGORITHM = 1 ( col3 ) PARTITIONS 5 ; > show create table tp5 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp5 | CREATE TABLE ` tp5 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp6 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col1 , col2 ) PARTITIONS 4 ; > show create table tp6 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp6 | CREATE TABLE ` tp6 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp7 ( col1 INT NOT NULL PRIMARY KEY , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL ) PARTITION BY KEY ( col1 ) PARTITIONS 4 ; > show create table tp7 ; + -------+----------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+----------------------------------------------------------------------------------------------------------------------------------+ | tp7 | CREATE TABLE ` tp7 ` ( ` col1 ` INT NOT NULL , ` col2 ` DATE NOT NULL , ` col3 ` INT NOT NULL , ` col4 ` INT NOT NULL , PRIMARY KEY ( ` col1 ` ) ) | + -------+----------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp8 ( col1 INT , col2 CHAR ( 5 )) PARTITION BY HASH ( col1 ); > show create table tp8 ; + -------+-----------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------+ | tp8 | CREATE TABLE ` tp8 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp9 ( col1 INT , col2 CHAR ( 5 )) PARTITION BY HASH ( col1 ) PARTITIONS 4 ; > show create table tp9 ; + -------+-----------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------+ | tp9 | CREATE TABLE ` tp9 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp10 ( col1 INT , col2 CHAR ( 5 ), col3 DATETIME ) PARTITION BY HASH ( YEAR ( col3 )); > show create table tp10 ; + -------+------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+------------------------------------------------------------------------------------------------------------+ | tp10 | CREATE TABLE ` tp10 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATETIME DEFAULT NULL ) | + -------+------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp11 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR HASH ( YEAR ( col3 )) PARTITIONS 6 ; > show create table tp11 ; + -------+--------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+--------------------------------------------------------------------------------------------------------+ | tp11 | CREATE TABLE ` tp11 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+--------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp12 ( col1 INT NOT NULL PRIMARY KEY , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL ) PARTITION BY HASH ( col1 ) PARTITIONS 4 ; > show create table tp12 ; + -------+-----------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------------------------------------------------------------+ | tp12 | CREATE TABLE ` tp12 ` ( ` col1 ` INT NOT NULL , ` col2 ` DATE NOT NULL , ` col3 ` INT NOT NULL , ` col4 ` INT NOT NULL , PRIMARY KEY ( ` col1 ` ) ) | + -------+-----------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp13 ( id INT NOT NULL PRIMARY KEY , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT NOT NULL , store_id INT NOT NULL ) PARTITION BY RANGE ( id ) ( PARTITION p0 VALUES LESS THAN ( 6 ), PARTITION p1 VALUES LESS THAN ( 11 ), PARTITION p2 VALUES LESS THAN ( 16 ), PARTITION p3 VALUES LESS THAN ( 21 )); > show create table tp13 ; + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | tp13 | CREATE TABLE ` tp13 ` ( ` id ` INT NOT NULL , ` fname ` VARCHAR ( 30 ) DEFAULT NULL , ` lname ` VARCHAR ( 30 ) DEFAULT NULL , ` hired ` DATE NOT NULL , ` separated ` DATE NOT NULL , ` job_code ` INT NOT NULL , ` store_id ` INT NOT NULL , PRIMARY KEY ( ` id ` ) ) | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp14 ( id INT NOT NULL , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT , store_id INT ) PARTITION BY RANGE ( YEAR ( separated ) ) ( PARTITION p0 VALUES LESS THAN ( 1991 ), PARTITION p1 VALUES LESS THAN ( 1996 ), PARTITION p2 VALUES LESS THAN ( 2001 ), PARTITION p3 VALUES LESS THAN MAXVALUE ); > show create table tp14 ; + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | tp14 | CREATE TABLE ` tp14 ` ( ` id ` INT NOT NULL , ` fname ` VARCHAR ( 30 ) DEFAULT NULL , ` lname ` VARCHAR ( 30 ) DEFAULT NULL , ` hired ` DATE NOT NULL , ` separated ` DATE NOT NULL , ` job_code ` INT DEFAULT NULL , ` store_id ` INT DEFAULT NULL ) | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp15 ( a INT NOT NULL , b INT NOT NULL ) PARTITION BY RANGE COLUMNS ( a , b ) PARTITIONS 4 ( PARTITION p0 VALUES LESS THAN ( 10 , 5 ), PARTITION p1 VALUES LESS THAN ( 20 , 10 ), PARTITION p2 VALUES LESS THAN ( 50 , 20 ), PARTITION p3 VALUES LESS THAN ( 65 , 30 )); > show create table tp15 ; + -------+------------------------------------------------------------+ | Table | Create Table | + -------+------------------------------------------------------------+ | tp15 | CREATE TABLE ` tp15 ` ( ` a ` INT NOT NULL , ` b ` INT NOT NULL ) | + -------+------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp16 ( id INT PRIMARY KEY , name VARCHAR ( 35 ), age INT unsigned ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 )); show create table tp16 ; > show create table tp16 ; + -------+-------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------------------------------------+ | tp16 | CREATE TABLE ` tp16 ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 35 ) DEFAULT NULL , ` age ` INT UNSIGNED DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) | + -------+-------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp17 ( id INT , name VARCHAR ( 35 ), age INT unsigned ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 )); > show create table tp17 ; + -------+-----------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------------------------------------------+ | tp17 | CREATE TABLE ` tp17 ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 35 ) DEFAULT NULL , ` age ` INT UNSIGNED DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp18 ( a INT NULL , b INT NULL ) PARTITION BY LIST COLUMNS ( a , b ) ( PARTITION p0 VALUES IN ( ( 0 , 0 ), ( NULL , NULL ) ), PARTITION p1 VALUES IN ( ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 1 ), ( 1 , 2 ) ), PARTITION p2 VALUES IN ( ( 1 , 0 ), ( 2 , 0 ), ( 2 , 1 ), ( 3 , 0 ), ( 3 , 1 ) ), PARTITION p3 VALUES IN ( ( 1 , 3 ), ( 2 , 2 ), ( 2 , 3 ), ( 3 , 2 ), ( 3 , 3 ) )); > show create table tp18 ; + -------+--------------------------------------------------------------------+ | Table | Create Table | + -------+--------------------------------------------------------------------+ | tp18 | CREATE TABLE ` tp18 ` ( ` a ` INT DEFAULT NULL , ` b ` INT DEFAULT NULL ) | + -------+--------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 5 > drop table if exists t1 ; > create table t1 ( a bigint primary key auto_increment , b varchar ( 10 )); > insert into t1 ( b ) values ( 'bbb' ); > insert into t1 values ( 3 , 'ccc' ); > insert into t1 ( b ) values ( 'bbb1111' ); > select * from t1 order by a ; + ------+---------+ | a | b | + ------+---------+ | 1 | bbb | | 3 | ccc | | 4 | bbb1111 | + ------+---------+ 3 rows in set ( 0 . 01 sec ) > insert into t1 values ( 2 , 'aaaa1111' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | + ------+----------+ 4 rows in set ( 0 . 00 sec ) > insert into t1 ( b ) values ( 'aaaa1111' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | | 5 | aaaa1111 | + ------+----------+ 5 rows in set ( 0 . 01 sec ) > insert into t1 values ( 100 , 'xxxx' ); > insert into t1 ( b ) values ( 'xxxx' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | | 5 | aaaa1111 | | 100 | xxxx | | 101 | xxxx | + ------+----------+ 7 rows in set ( 0 . 00 sec )","title":"CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#create-table","text":"","title":"CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#description","text":"Create a new table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#syntax","text":"> CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [db.]table_name [comment = \"comment of table\"]; ( name1 type1 [comment 'comment of column'] [AUTO_INCREMENT] [[PRIMARY] KEY], name2 type2 [comment 'comment of column'], ... ) [partition_options]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#explanations","text":"","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#temporary-tables","text":"You can use the TEMPORARY keyword when creating a table. A TEMPORARY table is visible only within the current session, and is dropped automatically when the session is closed. For more information, see Temporary Tables .","title":"Temporary Tables"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#comment","text":"A comment for a column or a table can be specified with the COMMENT option. Up to 1024 characters long. The comment is displayed by the SHOW CREATE TABLE and SHOW FULL COLUMNS statements. It is also shown in the COLUMN_COMMENT column of the INFORMATION_SCHEMA.COLUMNS table.","title":"COMMENT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#auto_increment","text":"The initial AUTO_INCREMENT value for the table. An integer column can have the additional attribute AUTO_INCREMENT . When you insert a value of NULL (recommended) or 0 into an indexed AUTO_INCREMENT column, the column is set to the next sequence value. Typically this is value+1, where value is the largest value for the column currently in the table. AUTO_INCREMENT sequences begin with 1. There can be only one AUTO_INCREMENT column per table, it must be indexed, and it cannot have a DEFAULT value. An AUTO_INCREMENT column works properly only if it contains only positive values. Inserting a negative number is regarded as inserting a very large positive number. This is done to avoid precision problems when numbers \u201cwrap\u201d over from positive to negative and also to ensure that you do not accidentally get an AUTO_INCREMENT column that contains 0.","title":"AUTO_INCREMENT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#table-partition-and-partitions","text":"partition_options: PARTITION BY { [LINEAR] HASH(expr) | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) | RANGE{(expr) | COLUMNS(column_list)} | LIST{(expr) | COLUMNS(column_list)} } [PARTITIONS num] [SUBPARTITION BY { [LINEAR] HASH(expr) | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list) } ] [(partition_definition [, partition_definition] ...)] partition_definition: PARTITION partition_name [VALUES {LESS THAN {(expr | value_list) | MAXVALUE} | IN (value_list)}] [[STORAGE] ENGINE [=] engine_name] [COMMENT [=] 'string' ] [DATA DIRECTORY [=] 'data_dir'] [INDEX DIRECTORY [=] 'index_dir'] [MAX_ROWS [=] max_number_of_rows] [MIN_ROWS [=] min_number_of_rows] [TABLESPACE [=] tablespace_name] Partitions can be modified, merged, added to tables, and dropped from tables. PARTITION BY If used, a partition_options clause begins with PARTITION BY. This clause contains the function that is used to determine the partition; the function returns an integer value ranging from 1 to num, where num is the number of partitions. HASH(expr) Hashes one or more columns to create a key for placing and locating rows. expr is an expression using one or more table columns. For example, these are both valid CREATE TABLE statements using PARTITION BY HASH: CREATE TABLE t1 (col1 INT, col2 CHAR(5)) PARTITION BY HASH(col1); CREATE TABLE t1 (col1 INT, col2 CHAR(5), col3 DATETIME) PARTITION BY HASH ( YEAR(col3) ); KEY(column_list) This is similar to HASH . The column_list argument is simply a list of 1 or more table columns (maximum: 16). This example shows a simple table partitioned by key, with 4 partitions: CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY KEY(col3) PARTITIONS 4; For tables that are partitioned by key, you can employ linear partitioning by using the LINEAR keyword. This has the same effect as with tables that are partitioned by HASH . This example uses linear partitioning by key to distribute data between 5 partitions: CREATE TABLE tk (col1 INT, col2 CHAR(5), col3 DATE) PARTITION BY LINEAR KEY(col3) PARTITIONS 5; RANGE(expr) In this case, expr shows a range of values using a set of VALUES LESS THAN operators. When using range partitioning, you must define at least one partition using VALUES LESS THAN . You cannot use VALUES IN with range partitioning. PARTITION ... VALUES LESS THAN ... statements work in a consecutive fashion. VALUES LESS THAN MAXVALUE works to specify \u201cleftover\u201d values that are greater than the maximum value otherwise specified. The clauses must be arranged in such a way that the upper limit specified in each successive VALUES LESS THAN is greater than that of the previous one, with the one referencing MAXVALUE coming last of all in the list. RANGE COLUMNS(column_list) This variant on RANGE facilitates partition pruning for queries using range conditions on multiple columns (that is, having conditions such as WHERE a = 1 AND b < 10 or WHERE a = 1 AND b = 10 AND c < 10) . It enables you to specify value ranges in multiple columns by using a list of columns in the COLUMNS clause and a set of column values in each PARTITION ... VALUES LESS THAN (value_list) partition definition clause. (In the simplest case, this set consists of a single column.) The maximum number of columns that can be referenced in the column_list and value_list is 16. The column_list used in the COLUMNS clause may contain only names of columns; each column in the list must be one of the following MySQL data types: the integer types; the string types; and time or date column types. Columns using BLOB, TEXT, SET, ENUM, BIT, or spatial data types are not permitted; columns that use floating-point number types are also not permitted. You also may not use functions or arithmetic expressions in the COLUMNS clause. The VALUES LESS THAN clause used in a partition definition must specify a literal value for each column that appears in the COLUMNS() clause; that is, the list of values used for each VALUES LESS THAN clause must contain the same number of values as there are columns listed in the COLUMNS clause. An attempt to use more or fewer values in a VALUES LESS THAN clause than there are in the COLUMNS clause causes the statement to fail with the error Inconsistency in usage of column lists for partitioning.... You cannot use NULL for any value appearing in VALUES LESS THAN . It is possible to use MAXVALUE more than once for a given column other than the first, as shown in this example: CREATE TABLE rc ( a INT NOT NULL, b INT NOT NULL ) PARTITION BY RANGE COLUMNS(a,b) ( PARTITION p0 VALUES LESS THAN (10,5), PARTITION p1 VALUES LESS THAN (20,10), PARTITION p2 VALUES LESS THAN (50,MAXVALUE), PARTITION p3 VALUES LESS THAN (65,MAXVALUE), PARTITION p4 VALUES LESS THAN (MAXVALUE,MAXVALUE) ); Each value used in a VALUES LESS THAN value list must match the type of the corresponding column exactly; no conversion is made. For example, you cannot use the string '1' for a value that matches a column that uses an integer type (you must use the numeral 1 instead), nor can you use the numeral 1 for a value that matches a column that uses a string type (in such a case, you must use a quoted string: '1'). LIST(expr) This is useful when assigning partitions based on a table column with a restricted set of possible values, such as a state or country code. In such a case, all rows pertaining to a certain state or country can be assigned to a single partition, or a partition can be reserved for a certain set of states or countries. It is similar to RANGE, except that only VALUES IN may be used to specify permissible values for each partition. VALUES IN is used with a list of values to be matched. For instance, you could create a partitioning scheme such as the following: CREATE TABLE client_firms ( id INT, name VARCHAR(35) ) PARTITION BY LIST (id) ( PARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21), PARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22), PARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23), PARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24) ); When using list partitioning, you must define at least one partition using VALUES IN. You cannot use VALUES LESS THAN with PARTITION BY LIST. Note For tables partitioned by LIST, the value list used with VALUES IN must consist of integer values only. In MySQL 8.0, you can overcome this limitation using partitioning by LIST COLUMNS, which is described later in this section. LIST COLUMNS(column_list) This variant on LIST facilitates partition pruning for queries using comparison conditions on multiple columns (that is, having conditions such as WHERE a = 5 AND b = 5 or WHERE a = 1 AND b = 10 AND c = 5 ). It enables you to specify values in multiple columns by using a list of columns in the COLUMNS clause and a set of column values in each PARTITION ... VALUES IN (value_list) partition definition clause. The rules governing regarding data types for the column list used in LIST COLUMNS(column_list) and the value list used in VALUES IN(value_list) are the same as those for the column list used in RANGE COLUMNS(column_list) and the value list used in VALUES LESS THAN(value_list) , respectively, except that in the VALUES IN clause, MAXVALUE is not permitted, and you may use NULL . There is one important difference between the list of values used for VALUES IN with PARTITION BY LIST COLUMNS as opposed to when it is used with PARTITION BY LIST . When used with PARTITION BY LIST COLUMNS , each element in the VALUES IN clause must be a set of column values; the number of values in each set must be the same as the number of columns used in the COLUMNS clause, and the data types of these values must match those of the columns (and occur in the same order). In the simplest case, the set consists of a single column. The maximum number of columns that can be used in the column_list and in the elements making up the value_list is 16. The table defined by the following CREATE TABLE statement provides an example of a table using LIST COLUMNS partitioning: CREATE TABLE lc ( a INT NULL, b INT NULL ) PARTITION BY LIST COLUMNS(a,b) ( PARTITION p0 VALUES IN( (0,0), (NULL,NULL) ), PARTITION p1 VALUES IN( (0,1), (0,2), (0,3), (1,1), (1,2) ), PARTITION p2 VALUES IN( (1,0), (2,0), (2,1), (3,0), (3,1) ), PARTITION p3 VALUES IN( (1,3), (2,2), (2,3), (3,2), (3,3) ) ); PARTITIONS num The number of partitions may optionally be specified with a PARTITIONS num clause, where num is the number of partitions. If both this clause and any PARTITION clauses are used, num must be equal to the total number of any partitions that are declared using PARTITION clauses.","title":"Table PARTITION and PARTITIONS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#create_table_statement","text":"","title":"create_table_statement"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-table/#examples","text":"Example 1 > CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+ Example 2 > create table t2 ( a int , b int ) comment = \"\u4e8b\u5b9e\u8868\" ; > show create table t2 ; + -------+---------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------+ | t2 | CREATE TABLE ` t2 ` ( ` a ` INT DEFAULT NULL , ` b ` INT DEFAULT NULL ) COMMENT = '\u4e8b\u5b9e\u8868' , | + -------+---------------------------------------------------------------------------------------+ Example 3 > create table t3 ( a int comment '\u5217\u7684\u6ce8\u91ca' , b int ) comment = \"table\" ; > show create table t3 ; + -------+----------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+----------------------------------------------------------------------------------------------------------+ | t3 | CREATE TABLE ` t3 ` ( ` a ` INT DEFAULT NULL COMMENT '\u5217\u7684\u6ce8\u91ca' , ` b ` INT DEFAULT NULL ) COMMENT = 'table' , | + -------+----------------------------------------------------------------------------------------------------------+ Example 4 > CREATE TABLE tp1 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col3 ) PARTITIONS 4 ; > show create table tp1 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp1 | CREATE TABLE ` tp1 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp2 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col3 ); > show create table tp2 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp2 | CREATE TABLE ` tp2 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp4 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ALGORITHM = 1 ( col3 ); > show create table tp4 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp4 | CREATE TABLE ` tp4 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp5 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR KEY ALGORITHM = 1 ( col3 ) PARTITIONS 5 ; > show create table tp5 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp5 | CREATE TABLE ` tp5 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp6 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY KEY ( col1 , col2 ) PARTITIONS 4 ; > show create table tp6 ; + -------+-------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------+ | tp6 | CREATE TABLE ` tp6 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+-------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp7 ( col1 INT NOT NULL PRIMARY KEY , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL ) PARTITION BY KEY ( col1 ) PARTITIONS 4 ; > show create table tp7 ; + -------+----------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+----------------------------------------------------------------------------------------------------------------------------------+ | tp7 | CREATE TABLE ` tp7 ` ( ` col1 ` INT NOT NULL , ` col2 ` DATE NOT NULL , ` col3 ` INT NOT NULL , ` col4 ` INT NOT NULL , PRIMARY KEY ( ` col1 ` ) ) | + -------+----------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp8 ( col1 INT , col2 CHAR ( 5 )) PARTITION BY HASH ( col1 ); > show create table tp8 ; + -------+-----------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------+ | tp8 | CREATE TABLE ` tp8 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp9 ( col1 INT , col2 CHAR ( 5 )) PARTITION BY HASH ( col1 ) PARTITIONS 4 ; > show create table tp9 ; + -------+-----------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------+ | tp9 | CREATE TABLE ` tp9 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp10 ( col1 INT , col2 CHAR ( 5 ), col3 DATETIME ) PARTITION BY HASH ( YEAR ( col3 )); > show create table tp10 ; + -------+------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+------------------------------------------------------------------------------------------------------------+ | tp10 | CREATE TABLE ` tp10 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATETIME DEFAULT NULL ) | + -------+------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp11 ( col1 INT , col2 CHAR ( 5 ), col3 DATE ) PARTITION BY LINEAR HASH ( YEAR ( col3 )) PARTITIONS 6 ; > show create table tp11 ; + -------+--------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+--------------------------------------------------------------------------------------------------------+ | tp11 | CREATE TABLE ` tp11 ` ( ` col1 ` INT DEFAULT NULL , ` col2 ` CHAR ( 5 ) DEFAULT NULL , ` col3 ` DATE DEFAULT NULL ) | + -------+--------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp12 ( col1 INT NOT NULL PRIMARY KEY , col2 DATE NOT NULL , col3 INT NOT NULL , col4 INT NOT NULL ) PARTITION BY HASH ( col1 ) PARTITIONS 4 ; > show create table tp12 ; + -------+-----------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------------------------------------------------------------+ | tp12 | CREATE TABLE ` tp12 ` ( ` col1 ` INT NOT NULL , ` col2 ` DATE NOT NULL , ` col3 ` INT NOT NULL , ` col4 ` INT NOT NULL , PRIMARY KEY ( ` col1 ` ) ) | + -------+-----------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp13 ( id INT NOT NULL PRIMARY KEY , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT NOT NULL , store_id INT NOT NULL ) PARTITION BY RANGE ( id ) ( PARTITION p0 VALUES LESS THAN ( 6 ), PARTITION p1 VALUES LESS THAN ( 11 ), PARTITION p2 VALUES LESS THAN ( 16 ), PARTITION p3 VALUES LESS THAN ( 21 )); > show create table tp13 ; + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | tp13 | CREATE TABLE ` tp13 ` ( ` id ` INT NOT NULL , ` fname ` VARCHAR ( 30 ) DEFAULT NULL , ` lname ` VARCHAR ( 30 ) DEFAULT NULL , ` hired ` DATE NOT NULL , ` separated ` DATE NOT NULL , ` job_code ` INT NOT NULL , ` store_id ` INT NOT NULL , PRIMARY KEY ( ` id ` ) ) | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp14 ( id INT NOT NULL , fname VARCHAR ( 30 ), lname VARCHAR ( 30 ), hired DATE NOT NULL DEFAULT '1970-01-01' , separated DATE NOT NULL DEFAULT '9999-12-31' , job_code INT , store_id INT ) PARTITION BY RANGE ( YEAR ( separated ) ) ( PARTITION p0 VALUES LESS THAN ( 1991 ), PARTITION p1 VALUES LESS THAN ( 1996 ), PARTITION p2 VALUES LESS THAN ( 2001 ), PARTITION p3 VALUES LESS THAN MAXVALUE ); > show create table tp14 ; + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | tp14 | CREATE TABLE ` tp14 ` ( ` id ` INT NOT NULL , ` fname ` VARCHAR ( 30 ) DEFAULT NULL , ` lname ` VARCHAR ( 30 ) DEFAULT NULL , ` hired ` DATE NOT NULL , ` separated ` DATE NOT NULL , ` job_code ` INT DEFAULT NULL , ` store_id ` INT DEFAULT NULL ) | + -------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE tp15 ( a INT NOT NULL , b INT NOT NULL ) PARTITION BY RANGE COLUMNS ( a , b ) PARTITIONS 4 ( PARTITION p0 VALUES LESS THAN ( 10 , 5 ), PARTITION p1 VALUES LESS THAN ( 20 , 10 ), PARTITION p2 VALUES LESS THAN ( 50 , 20 ), PARTITION p3 VALUES LESS THAN ( 65 , 30 )); > show create table tp15 ; + -------+------------------------------------------------------------+ | Table | Create Table | + -------+------------------------------------------------------------+ | tp15 | CREATE TABLE ` tp15 ` ( ` a ` INT NOT NULL , ` b ` INT NOT NULL ) | + -------+------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp16 ( id INT PRIMARY KEY , name VARCHAR ( 35 ), age INT unsigned ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 )); show create table tp16 ; > show create table tp16 ; + -------+-------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-------------------------------------------------------------------------------------------------------------------------------------+ | tp16 | CREATE TABLE ` tp16 ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 35 ) DEFAULT NULL , ` age ` INT UNSIGNED DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) | + -------+-------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp17 ( id INT , name VARCHAR ( 35 ), age INT unsigned ) PARTITION BY LIST ( id ) ( PARTITION r0 VALUES IN ( 1 , 5 , 9 , 13 , 17 , 21 ), PARTITION r1 VALUES IN ( 2 , 6 , 10 , 14 , 18 , 22 ), PARTITION r2 VALUES IN ( 3 , 7 , 11 , 15 , 19 , 23 ), PARTITION r3 VALUES IN ( 4 , 8 , 12 , 16 , 20 , 24 )); > show create table tp17 ; + -------+-----------------------------------------------------------------------------------------------------------------+ | Table | Create Table | + -------+-----------------------------------------------------------------------------------------------------------------+ | tp17 | CREATE TABLE ` tp17 ` ( ` id ` INT DEFAULT NULL , ` name ` VARCHAR ( 35 ) DEFAULT NULL , ` age ` INT UNSIGNED DEFAULT NULL ) | + -------+-----------------------------------------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE tp18 ( a INT NULL , b INT NULL ) PARTITION BY LIST COLUMNS ( a , b ) ( PARTITION p0 VALUES IN ( ( 0 , 0 ), ( NULL , NULL ) ), PARTITION p1 VALUES IN ( ( 0 , 1 ), ( 0 , 2 ), ( 0 , 3 ), ( 1 , 1 ), ( 1 , 2 ) ), PARTITION p2 VALUES IN ( ( 1 , 0 ), ( 2 , 0 ), ( 2 , 1 ), ( 3 , 0 ), ( 3 , 1 ) ), PARTITION p3 VALUES IN ( ( 1 , 3 ), ( 2 , 2 ), ( 2 , 3 ), ( 3 , 2 ), ( 3 , 3 ) )); > show create table tp18 ; + -------+--------------------------------------------------------------------+ | Table | Create Table | + -------+--------------------------------------------------------------------+ | tp18 | CREATE TABLE ` tp18 ` ( ` a ` INT DEFAULT NULL , ` b ` INT DEFAULT NULL ) | + -------+--------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 5 > drop table if exists t1 ; > create table t1 ( a bigint primary key auto_increment , b varchar ( 10 )); > insert into t1 ( b ) values ( 'bbb' ); > insert into t1 values ( 3 , 'ccc' ); > insert into t1 ( b ) values ( 'bbb1111' ); > select * from t1 order by a ; + ------+---------+ | a | b | + ------+---------+ | 1 | bbb | | 3 | ccc | | 4 | bbb1111 | + ------+---------+ 3 rows in set ( 0 . 01 sec ) > insert into t1 values ( 2 , 'aaaa1111' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | + ------+----------+ 4 rows in set ( 0 . 00 sec ) > insert into t1 ( b ) values ( 'aaaa1111' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | | 5 | aaaa1111 | + ------+----------+ 5 rows in set ( 0 . 01 sec ) > insert into t1 values ( 100 , 'xxxx' ); > insert into t1 ( b ) values ( 'xxxx' ); > select * from t1 order by a ; + ------+----------+ | a | b | + ------+----------+ | 1 | bbb | | 2 | aaaa1111 | | 3 | ccc | | 4 | bbb1111 | | 5 | aaaa1111 | | 100 | xxxx | | 101 | xxxx | + ------+----------+ 7 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-temporary-tables/","text":"CREATE TEMPORARY TABLE Description You can use the TEMPORARY keyword when creating a table. A TEMPORARY table is visible only within the current session, and is dropped automatically when the session is closed. This means that two different sessions can use the same temporary table name without conflicting with each other or with an existing non-TEMPORARY table of the same name. (The existing table is hidden until the temporary table is dropped.) Dropping a database does automatically drop any TEMPORARY tables created within that database. The creating session can perform any operation on the table, such as DROP TABLE , INSERT , UPDATE , or SELECT .","title":"CREATE TEMPORARY TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-temporary-tables/#create-temporary-table","text":"","title":"CREATE TEMPORARY TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-create-temporary-tables/#description","text":"You can use the TEMPORARY keyword when creating a table. A TEMPORARY table is visible only within the current session, and is dropped automatically when the session is closed. This means that two different sessions can use the same temporary table name without conflicting with each other or with an existing non-TEMPORARY table of the same name. (The existing table is hidden until the temporary table is dropped.) Dropping a database does automatically drop any TEMPORARY tables created within that database. The creating session can perform any operation on the table, such as DROP TABLE , INSERT , UPDATE , or SELECT .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-primary-key/","text":"PRIMARY KEY Description The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single column (field). SQL PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) ); Constraints DROP PRIMARY KEY with ALTER TABLE is not supported yet.","title":"PRIMARY KEY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-primary-key/#primary-key","text":"","title":"PRIMARY KEY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-primary-key/#description","text":"The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single column (field).","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-primary-key/#sql-primary-key-on-create-table","text":"The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) );","title":"SQL PRIMARY KEY on CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-primary-key/#constraints","text":"DROP PRIMARY KEY with ALTER TABLE is not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-show-databases/","text":"SHOW DATABASES Description SHOW DATABASES lists the databases on the MatrixOne. SHOW SCHEMAS is a synonym for SHOW DATABASES . The LIKE clause, if present, indicates which database names to match. The WHERE clause can be given to select rows using more general conditions. MatrixOne implements databases as directories in the data directory, so this statement simply lists directories in that location. Database information is also available from the INFORMATION_SCHEMA SCHEMATA table. Syntax > SHOW {DATABASES | SCHEMAS} [LIKE 'pattern' | WHERE expr] Examples ```sql create database demo_1; show databases; +--------------------+ | Database | +--------------------+ | mo_catalog | | system | | system_metrics | | information_schema | | demo_1 | +--------------------+ 7 rows in set (0.00 sec)","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-show-databases/#show-databases","text":"","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-show-databases/#description","text":"SHOW DATABASES lists the databases on the MatrixOne. SHOW SCHEMAS is a synonym for SHOW DATABASES . The LIKE clause, if present, indicates which database names to match. The WHERE clause can be given to select rows using more general conditions. MatrixOne implements databases as directories in the data directory, so this statement simply lists directories in that location. Database information is also available from the INFORMATION_SCHEMA SCHEMATA table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-show-databases/#syntax","text":"> SHOW {DATABASES | SCHEMAS} [LIKE 'pattern' | WHERE expr]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-show-databases/#examples","text":"```sql create database demo_1; show databases; +--------------------+ | Database | +--------------------+ | mo_catalog | | system | | system_metrics | | information_schema | | demo_1 | +--------------------+ 7 rows in set (0.00 sec)","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/","text":"CREATE DATABASE Description Create a database. Syntax > CREATE DATABASE [IF NOT EXISTS] <database_name> [create_option] ... > create_option: [DEFAULT] { CHARACTER SET [=] charset_name | COLLATE [=] collation_name | ENCRYPTION [=] {'Y' | 'N'} } create_database_statement Examples > CREATE DATABASE test01; > CREATE DATABASE IF NOT EXISTS test01; > CREATE DATABASE test03 DEFAULT CHARACTER SET utf8 collate utf8_general_ci ENCRYPTION 'Y'; > CREATE DATABASE test04 CHARACTER SET=utf8 collate=utf8_general_ci ENCRYPTION='N'; Constraints Only UTF-8 CHARACTER SET is supported for now. CHARACTER SET , COLLATE , ENCRYPTION can be used but don't work.","title":"CREATE DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#create-database","text":"","title":"CREATE DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#description","text":"Create a database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#syntax","text":"> CREATE DATABASE [IF NOT EXISTS] <database_name> [create_option] ... > create_option: [DEFAULT] { CHARACTER SET [=] charset_name | COLLATE [=] collation_name | ENCRYPTION [=] {'Y' | 'N'} }","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#create_database_statement","text":"","title":"create_database_statement"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#examples","text":"> CREATE DATABASE test01; > CREATE DATABASE IF NOT EXISTS test01; > CREATE DATABASE test03 DEFAULT CHARACTER SET utf8 collate utf8_general_ci ENCRYPTION 'Y'; > CREATE DATABASE test04 CHARACTER SET=utf8 collate=utf8_general_ci ENCRYPTION='N';","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-database/#constraints","text":"Only UTF-8 CHARACTER SET is supported for now. CHARACTER SET , COLLATE , ENCRYPTION can be used but don't work.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/","text":"CREATE TABLE Description Create a new table. Syntax > CREATE TABLE [IF NOT EXISTS] [db.]table_name ( name1 type1, name2 type2, ... ) create_table_statement Examples > CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"**CREATE TABLE**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#create-table","text":"","title":"CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#description","text":"Create a new table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#syntax","text":"> CREATE TABLE [IF NOT EXISTS] [db.]table_name ( name1 type1, name2 type2, ... )","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#create_table_statement","text":"","title":"create_table_statement"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/create-table/#examples","text":"> CREATE TABLE test(a int, b varchar(10)); > INSERT INTO test values(123, 'abc'); > SELECT * FROM test; +------+---------+ | a | b | +------+---------+ | 123 | abc | +------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/","text":"DROP DATABASE Description Drop a database. Syntax > DROP DATABASE [IF EXISTS] <database_name> drop_database_statement Examples > DROP DATABASE test01;","title":"DROP DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#drop-database","text":"","title":"DROP DATABASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#description","text":"Drop a database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#syntax","text":"> DROP DATABASE [IF EXISTS] <database_name>","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#drop_database_statement","text":"","title":"drop_database_statement"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-database/#examples","text":"> DROP DATABASE test01;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/","text":"DROP TABLE Description Deletes the table. Syntax > DROP TABLE [IF EXISTS] [db.]name drop_table_statement Examples > CREATE TABLE table01(a int); > DROP TABLE table01;","title":"DROP TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#drop-table","text":"","title":"DROP TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#description","text":"Deletes the table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#syntax","text":"> DROP TABLE [IF EXISTS] [db.]name","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#drop_table_statement","text":"","title":"drop_table_statement"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/drop-table/#examples","text":"> CREATE TABLE table01(a int); > DROP TABLE table01;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/","text":"PRIMARY KEY Description The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single column (field). SQL PRIMARY KEY on CREATE TABLE The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) ); Constraints DROP PRIMARY KEY with ALTER TABLE is not supported yet. Composite primary key(the primary key consists of multiple columns) is not supported yet.","title":"**PRIMARY KEY**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#primary-key","text":"","title":"PRIMARY KEY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#description","text":"The PRIMARY KEY constraint uniquely identifies each record in a table. Primary keys must contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key; and in the table, this primary key can consist of single column (field).","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#sql-primary-key-on-create-table","text":"The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created: > CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) );","title":"SQL PRIMARY KEY on CREATE TABLE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/primary-key/#constraints","text":"DROP PRIMARY KEY with ALTER TABLE is not supported yet. Composite primary key(the primary key consists of multiple columns) is not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/create-view/","text":"CREATE VIEW Description The view is a virtual table based on the result-set of an SQL statement. A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database. You can add SQL statements and functions to a view and present the data as if the data were coming from one single table. A view is created with the CREATE VIEW statement. Syntax > CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition; Note A view always shows up-to-date data! The database engine recreates the view, every time a user queries it. Examples Example 1: > CREATE TABLE t00 ( a INTEGER ); > INSERT INTO t00 VALUES ( 1 ),( 2 ); > CREATE TABLE t01 ( a INTEGER ); > INSERT INTO t01 VALUES ( 1 ); > CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); l > SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+ 2 rows in set ( 0 . 01 sec ) > SELECT * FROM v0 WHERE b >= 0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | + ------+------+ 1 row in set ( 0 . 01 sec ) > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > select * from ( select * from t1 ) sub where id > 4 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 01 sec ) > create view v1 as select * from ( select * from t1 ) sub where id > 4 ; > create view v2 as select ti as t , fl as f from ( select * from t1 ) sub where dl <> 4 ; > create view v3 as select * from ( select ti as t , fl as f from t1 where dl <> 4 ) sub ; > create view v4 as select id , min ( ti ) from ( select * from t1 ) sub group by id ; > create view v5 as select * from ( select id , min ( ti ) from ( select * from t1 ) t1 group by id ) sub ; > select * from v1 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 00 sec ) > select * from v2 ; + ------+----------+ | t | f | + ------+----------+ | 1 | 1113 . 32 | | 2 | 2252 . 05 | | 6 | 3663 . 21 | | 7 | 4715 . 22 | | 1 | 51 . 26 | | 3 | 632 . 1 | | 4 | 7443 . 11 | | 7 | 8758 | | 8 | 9849 . 312 | + ------+----------+ 9 rows in set ( 0 . 00 sec ) > select * from v3 ; + ------+----------+ | t | f | + ------+----------+ | 1 | 1113 . 32 | | 2 | 2252 . 05 | | 6 | 3663 . 21 | | 7 | 4715 . 22 | | 1 | 51 . 26 | | 3 | 632 . 1 | | 4 | 7443 . 11 | | 7 | 8758 | | 8 | 9849 . 312 | + ------+----------+ 9 rows in set ( 0 . 00 sec ) > select * from v4 ; + ------+---------+ | id | min ( ti ) | + ------+---------+ | 1 | 1 | | 2 | 2 | | 3 | 6 | | 4 | 7 | | 5 | 1 | | 6 | 3 | | 7 | 4 | | 8 | 7 | | 9 | 8 | + ------+---------+ 9 rows in set ( 0 . 00 sec ) > select * from v5 ; + ------+---------+ | id | min ( ti ) | + ------+---------+ | 1 | 1 | | 2 | 2 | | 3 | 6 | | 4 | 7 | | 5 | 1 | | 6 | 3 | | 7 | 4 | | 8 | 7 | | 9 | 8 | + ------+---------+ 9 rows in set ( 0 . 01 sec )","title":"CREATE VIEW"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/create-view/#create-view","text":"","title":"CREATE VIEW"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/create-view/#description","text":"The view is a virtual table based on the result-set of an SQL statement. A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database. You can add SQL statements and functions to a view and present the data as if the data were coming from one single table. A view is created with the CREATE VIEW statement.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/create-view/#syntax","text":"> CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition; Note A view always shows up-to-date data! The database engine recreates the view, every time a user queries it.","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/create-view/#examples","text":"Example 1: > CREATE TABLE t00 ( a INTEGER ); > INSERT INTO t00 VALUES ( 1 ),( 2 ); > CREATE TABLE t01 ( a INTEGER ); > INSERT INTO t01 VALUES ( 1 ); > CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); l > SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ); + ------+------+ | a | b | + ------+------+ | 1 | 1 | | 2 | NULL | + ------+------+ 2 rows in set ( 0 . 01 sec ) > SELECT * FROM v0 WHERE b >= 0 ; + ------+------+ | a | b | + ------+------+ | 1 | 1 | + ------+------+ 1 row in set ( 0 . 01 sec ) > SHOW CREATE VIEW v0 ; + ------+----------------------------------------------------------------------------+ | View | Create View | + ------+----------------------------------------------------------------------------+ | v0 | CREATE VIEW v0 AS SELECT t00 . a , t01 . a AS b FROM t00 LEFT JOIN t01 USING ( a ) | + ------+----------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 2: > drop table if exists t1 ; > create table t1 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t1 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t1 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > drop table if exists t2 ; > create table t2 ( id int , ti tinyint unsigned , si smallint , bi bigint unsigned , fl float , dl double , de decimal , ch char ( 20 ), vch varchar ( 20 ), dd date , dt datetime ); > insert into t2 values ( 1 , 1 , 4 , 3 , 1113 . 32 , 111332 , 1113 . 32 , 'hello' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 2 , 2 , 5 , 2 , 2252 . 05 , 225205 , 2252 . 05 , 'bye' , 'sub query' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 3 , 6 , 6 , 3 , 3663 . 21 , 366321 , 3663 . 21 , 'hi' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 4 , 7 , 1 , 5 , 4715 . 22 , 471522 , 4715 . 22 , 'good morning' , 'my subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 5 , 1 , 2 , 6 , 51 . 26 , 5126 , 51 . 26 , 'byebye' , ' is subquery?' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 6 , 3 , 2 , 1 , 632 . 1 , 6321 , 632 . 11 , 'good night' , 'maybe subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 7 , 4 , 4 , 3 , 7443 . 11 , 744311 , 7443 . 11 , 'yes' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 8 , 7 , 5 , 8 , 8758 . 00 , 875800 , 8758 . 11 , 'nice to meet' , 'just subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > insert into t2 values ( 9 , 8 , 4 , 9 , 9849 . 312 , 9849312 , 9849 . 312 , 'see you' , 'subquery' , '2022-04-28' , '2022-04-28 22:40:11' ); > select * from ( select * from t1 ) sub where id > 4 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 01 sec ) > create view v1 as select * from ( select * from t1 ) sub where id > 4 ; > create view v2 as select ti as t , fl as f from ( select * from t1 ) sub where dl <> 4 ; > create view v3 as select * from ( select ti as t , fl as f from t1 where dl <> 4 ) sub ; > create view v4 as select id , min ( ti ) from ( select * from t1 ) sub group by id ; > create view v5 as select * from ( select id , min ( ti ) from ( select * from t1 ) t1 group by id ) sub ; > select * from v1 ; + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | id | ti | si | bi | fl | dl | de | ch | vch | dd | dt | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ | 5 | 1 | 2 | 6 | 51 . 26 | 5126 | 51 | byebye | is subquery ? | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 6 | 3 | 2 | 1 | 632 . 1 | 6321 | 632 | good night | maybe subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 7 | 4 | 4 | 3 | 7443 . 11 | 744311 | 7443 | yes | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 8 | 7 | 5 | 8 | 8758 | 875800 | 8758 | nice to meet | just subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | | 9 | 8 | 4 | 9 | 9849 . 312 | 9849312 | 9849 | see you | subquery | 2022 - 04 - 28 | 2022 - 04 - 28 22 : 40 : 11 | + ------+------+------+------+----------+---------+------+--------------+----------------+------------+---------------------+ 5 rows in set ( 0 . 00 sec ) > select * from v2 ; + ------+----------+ | t | f | + ------+----------+ | 1 | 1113 . 32 | | 2 | 2252 . 05 | | 6 | 3663 . 21 | | 7 | 4715 . 22 | | 1 | 51 . 26 | | 3 | 632 . 1 | | 4 | 7443 . 11 | | 7 | 8758 | | 8 | 9849 . 312 | + ------+----------+ 9 rows in set ( 0 . 00 sec ) > select * from v3 ; + ------+----------+ | t | f | + ------+----------+ | 1 | 1113 . 32 | | 2 | 2252 . 05 | | 6 | 3663 . 21 | | 7 | 4715 . 22 | | 1 | 51 . 26 | | 3 | 632 . 1 | | 4 | 7443 . 11 | | 7 | 8758 | | 8 | 9849 . 312 | + ------+----------+ 9 rows in set ( 0 . 00 sec ) > select * from v4 ; + ------+---------+ | id | min ( ti ) | + ------+---------+ | 1 | 1 | | 2 | 2 | | 3 | 6 | | 4 | 7 | | 5 | 1 | | 6 | 3 | | 7 | 4 | | 8 | 7 | | 9 | 8 | + ------+---------+ 9 rows in set ( 0 . 00 sec ) > select * from v5 ; + ------+---------+ | id | min ( ti ) | + ------+---------+ | 1 | 1 | | 2 | 2 | | 3 | 6 | | 4 | 7 | | 5 | 1 | | 6 | 3 | | 7 | 4 | | 8 | 7 | | 9 | 8 | + ------+---------+ 9 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/drop-view/","text":"DROP VIEW Description DROP VIEW removes one or more views. If any views named in the argument list do not exist, the statement fails with an error indicating by name which nonexisting views it was unable to drop, and no changes are made. The IF EXISTS clause prevents an error from occurring for views that don't exist. When this clause is given, a NOTE is generated for each nonexistent view. Syntax > DROP VIEW [IF EXISTS] view_name [, view_name] ... Examples > CREATE TABLE t1 ( c1 INT PRIMARY KEY , c2 INT ); > CREATE VIEW v1 AS SELECT * FROM t1 ; > DROP VIEW v1 ;","title":"DROP VIEW"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/drop-view/#drop-view","text":"","title":"DROP VIEW"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/drop-view/#description","text":"DROP VIEW removes one or more views. If any views named in the argument list do not exist, the statement fails with an error indicating by name which nonexisting views it was unable to drop, and no changes are made. The IF EXISTS clause prevents an error from occurring for views that don't exist. When this clause is given, a NOTE is generated for each nonexistent view.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/drop-view/#syntax","text":"> DROP VIEW [IF EXISTS] view_name [, view_name] ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/drop-view/#examples","text":"> CREATE TABLE t1 ( c1 INT PRIMARY KEY , c2 INT ); > CREATE VIEW v1 AS SELECT * FROM t1 ; > DROP VIEW v1 ;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/view-overview/","text":"View Views are stored queries that when invoked produce a result set. A view acts as a virtual table. The following discussion describes the syntax for creating and dropping views, and shows some examples of how to use them. Reference CREATE VIEW DROP VIEW","title":"VIEW Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/view-overview/#view","text":"Views are stored queries that when invoked produce a result set. A view acts as a virtual table. The following discussion describes the syntax for creating and dropping views, and shows some examples of how to use them.","title":"View"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Definition-Statements/0.6-using-view/view-overview/#reference","text":"CREATE VIEW DROP VIEW","title":"Reference"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/","text":"DELETE Description DELETE statement removes rows from a single table or multiple tables. Syntax Single-Table Syntax DELETE FROM tbl_name [[AS] tbl_alias] [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] The DELETE statement deletes rows from tbl_name and returns the number of deleted rows. Explanations The conditions in the optional WHERE clause identify which rows to delete. With no WHERE clause, all rows are deleted. If the ORDER BY clause is specified, the rows are deleted in the order that is specified. -The LIMIT clause places a limit on the number of rows that can be deleted. Examples Single-Table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > delete from t1 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 1 | 2 | + ------+------+ Multiple-Table Examples Multiple-table join Syntax is also supported. > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a int ); > insert into t1 values ( 1 ), ( 2 ), ( 4 ); > create table t2 ( b int ); > insert into t2 values ( 1 ), ( 2 ), ( 5 ); > delete t1 from t1 join t2 where t1 . a = 2 ; > select * from t1 ; + ------+ | a | + ------+ | 1 | | 4 | + ------+ 2 rows in set ( 0 . 00 sec ) > drop database if exists db1 ; > drop database if exists db2 ; > create database db1 ; > create database db2 ; > use db2 ; > drop table if exists t1 ; > create table t1 ( a int ); > insert into t1 values ( 1 ),( 2 ),( 4 ); > use db1 ; > drop table if exists t2 ; > create table t2 ( b int ); > insert into t2 values ( 1 ),( 2 ),( 3 ); > delete from db1 . t2 , db2 . t1 using db1 . t2 join db2 . t1 on db1 . t2 . b = db2 . t1 . a where 2 > 1 ; > select * from db1 . t2 ; + ------+ | b | + ------+ | 3 | + ------+ > select * from db2 . t1 ; + ------+ | a | + ------+ | 4 | + ------+ 1 row in set ( 0 . 00 sec )","title":"DELETE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#delete","text":"","title":"DELETE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#description","text":"DELETE statement removes rows from a single table or multiple tables.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#syntax","text":"","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#single-table-syntax","text":"DELETE FROM tbl_name [[AS] tbl_alias] [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] The DELETE statement deletes rows from tbl_name and returns the number of deleted rows.","title":"Single-Table Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#explanations","text":"The conditions in the optional WHERE clause identify which rows to delete. With no WHERE clause, all rows are deleted. If the ORDER BY clause is specified, the rows are deleted in the order that is specified. -The LIMIT clause places a limit on the number of rows that can be deleted.","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-delete/#examples","text":"Single-Table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > delete from t1 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 1 | 2 | + ------+------+ Multiple-Table Examples Multiple-table join Syntax is also supported. > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a int ); > insert into t1 values ( 1 ), ( 2 ), ( 4 ); > create table t2 ( b int ); > insert into t2 values ( 1 ), ( 2 ), ( 5 ); > delete t1 from t1 join t2 where t1 . a = 2 ; > select * from t1 ; + ------+ | a | + ------+ | 1 | | 4 | + ------+ 2 rows in set ( 0 . 00 sec ) > drop database if exists db1 ; > drop database if exists db2 ; > create database db1 ; > create database db2 ; > use db2 ; > drop table if exists t1 ; > create table t1 ( a int ); > insert into t1 values ( 1 ),( 2 ),( 4 ); > use db1 ; > drop table if exists t2 ; > create table t2 ( b int ); > insert into t2 values ( 1 ),( 2 ),( 3 ); > delete from db1 . t2 , db2 . t1 using db1 . t2 join db2 . t1 on db1 . t2 . b = db2 . t1 . a where 2 > 1 ; > select * from db1 . t2 ; + ------+ | b | + ------+ | 3 | + ------+ > select * from db2 . t1 ; + ------+ | a | + ------+ | 4 | + ------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/","text":"INSERT Description Writing data. Syntax > INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ... Examples > CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+ > CREATE TABLE t ( i1 INT , d1 DOUBLE , e2 DECIMAL ( 5 , 2 )); > INSERT INTO t VALUES ( 6 , 6 . 0 , 10 . 0 / 3 ), ( null , 9 . 0 , 10 . 0 / 3 ),( 1 , null , 10 . 0 / 3 ), ( 2 , 2 . 0 , null ); > select * from t ; + ------+------+------+ | i1 | d1 | e2 | + ------+------+------+ | 6 | 6 | 3 . 33 | | NULL | 9 | 3 . 33 | | 1 | NULL | 3 . 33 | | 2 | 2 | NULL | + ------+------+------+ 4 rows in set ( 0 . 00 sec ) Constraints Built-in functions inside INSERT INTO...VALUES(function) syntax is not supported yet.","title":"INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/#insert","text":"","title":"INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/#description","text":"Writing data.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/#syntax","text":"> INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/#examples","text":"> CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+ > CREATE TABLE t ( i1 INT , d1 DOUBLE , e2 DECIMAL ( 5 , 2 )); > INSERT INTO t VALUES ( 6 , 6 . 0 , 10 . 0 / 3 ), ( null , 9 . 0 , 10 . 0 / 3 ),( 1 , null , 10 . 0 / 3 ), ( 2 , 2 . 0 , null ); > select * from t ; + ------+------+------+ | i1 | d1 | e2 | + ------+------+------+ | 6 | 6 | 3 . 33 | | NULL | 9 | 3 . 33 | | 1 | NULL | 3 . 33 | | 2 | 2 | NULL | + ------+------+------+ 4 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-insert/#constraints","text":"Built-in functions inside INSERT INTO...VALUES(function) syntax is not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-intersect/","text":"INTERSECT Description INTERSECT returns only the different rows of two or more queries. Syntax SELECT column_list FROM table_1 INTERSECT SELECT column_list FROM table_2; Examples > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a smallint , b bigint , c int ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 3 , 4 , 5 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 1 , 1 , 2 ); > create table t2 ( a smallint , b bigint , c int ); > insert into t2 values ( 1 , 2 , 3 ); > insert into t2 values ( 3 , 4 , 5 ); > insert into t2 values ( 1 , 2 , 1 ); > select * from t1 intersect select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 2 | 3 | | 3 | 4 | 5 | + ------+------+------+ 2 rows in set ( 0 . 01 sec ) mysql > select a , b from t1 intersect select b , c from t2 ; + ------+------+ | a | b | + ------+------+ | 4 | 5 | + ------+------+ 1 row in set ( 0 . 01 sec )","title":"INTERSECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-intersect/#intersect","text":"","title":"INTERSECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-intersect/#description","text":"INTERSECT returns only the different rows of two or more queries.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-intersect/#syntax","text":"SELECT column_list FROM table_1 INTERSECT SELECT column_list FROM table_2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-intersect/#examples","text":"> drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a smallint , b bigint , c int ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 3 , 4 , 5 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 1 , 1 , 2 ); > create table t2 ( a smallint , b bigint , c int ); > insert into t2 values ( 1 , 2 , 3 ); > insert into t2 values ( 3 , 4 , 5 ); > insert into t2 values ( 1 , 2 , 1 ); > select * from t1 intersect select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 2 | 3 | | 3 | 4 | 5 | + ------+------+------+ 2 rows in set ( 0 . 01 sec ) mysql > select a , b from t1 intersect select b , c from t2 ; + ------+------+ | a | b | + ------+------+ | 4 | 5 | + ------+------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-minus/","text":"MINUS Description MINUS compares the result of two queries and returns the different rows in the first query that are not output by the second query. Syntax SELECT column_list_1 FROM table_1 MINUS SELECT columns_list_2 FROM table_2; Examples Example 1 > CREATE TABLE t1 ( id INT PRIMARY KEY ); > CREATE TABLE t2 ( id INT PRIMARY KEY ); > INSERT INTO t1 VALUES ( 1 ),( 2 ),( 3 ); > INSERT INTO t2 VALUES ( 2 ),( 3 ),( 4 ); > SELECT id FROM t1 MINUS SELECT id FROM t2 ; + ------+ | id | + ------+ | 1 | + ------+ Example 2 > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a smallint , b bigint , c int ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 3 , 4 , 5 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 1 , 1 , 2 ); > create table t2 ( a smallint , b bigint , c int ); > insert into t2 values ( 1 , 2 , 3 ); > insert into t2 values ( 3 , 4 , 5 ); > insert into t2 values ( 1 , 2 , 1 ); > select * from t1 minus select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 1 | 2 | | 4 | 5 | 6 | + ------+------+------+ > select a , b from t1 minus select b , c from t2 ; + ------+------+ | a | b | + ------+------+ | 3 | 4 | | 1 | 1 | | 1 | 2 | + ------+------+","title":"MINUS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-minus/#minus","text":"","title":"MINUS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-minus/#description","text":"MINUS compares the result of two queries and returns the different rows in the first query that are not output by the second query.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-minus/#syntax","text":"SELECT column_list_1 FROM table_1 MINUS SELECT columns_list_2 FROM table_2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-minus/#examples","text":"Example 1 > CREATE TABLE t1 ( id INT PRIMARY KEY ); > CREATE TABLE t2 ( id INT PRIMARY KEY ); > INSERT INTO t1 VALUES ( 1 ),( 2 ),( 3 ); > INSERT INTO t2 VALUES ( 2 ),( 3 ),( 4 ); > SELECT id FROM t1 MINUS SELECT id FROM t2 ; + ------+ | id | + ------+ | 1 | + ------+ Example 2 > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a smallint , b bigint , c int ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 1 , 2 , 3 ); > insert into t1 values ( 3 , 4 , 5 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 4 , 5 , 6 ); > insert into t1 values ( 1 , 1 , 2 ); > create table t2 ( a smallint , b bigint , c int ); > insert into t2 values ( 1 , 2 , 3 ); > insert into t2 values ( 3 , 4 , 5 ); > insert into t2 values ( 1 , 2 , 1 ); > select * from t1 minus select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 1 | 2 | | 4 | 5 | 6 | + ------+------+------+ > select a , b from t1 minus select b , c from t2 ; + ------+------+ | a | b | + ------+------+ | 3 | 4 | | 1 | 1 | | 1 | 2 | + ------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/","text":"UNION Description UNION combines the result from multiple SELECT statements into a single result set. Syntax SELECT ... UNION [ALL | DISTINCT] SELECT ... [UNION [ALL | DISTINCT] SELECT ...] Arguments UNION [DISTINCT] and UNION ALL By default, duplicate rows are removed from the UNION results. UNION is used as the same as UNION [DISTINCT] . Combining the result sets of two or more queries using the UNION operator requires the following conditions: All SELECT statements must have the same number and order of columns. Data types must be same or convertible. With UNION ALL , repeated lines (if available) are retained in the result. ORDER BY and LIMIT In UNION To apply an ORDER BY or LIMIT clause to an individual SELECT , parenthesize the SELECT and place the clause inside the parentheses: Use of ORDER BY for individual SELECT statements implies nothing about the order in which the rows appear in the final result because UNION by default produces an unordered set of rows. Therefore, ORDER BY in this context typically is used in conjunction with LIMIT, to determine the subset of the selected rows to retrieve for the SELECT , even though it does not necessarily affect the order of those rows in the final UNION result. For example: (SELECT a FROM t1 WHERE a=10 AND B=1 ORDER BY a LIMIT 10) UNION (SELECT a FROM t2 WHERE a=11 AND B=2 ORDER BY a LIMIT 10); Or: (SELECT a FROM t1 WHERE a=10 AND B=1) UNION (SELECT a FROM t2 WHERE a=11 AND B=2) ORDER BY a LIMIT 10; Examples > CREATE TABLE t1 ( id INT PRIMARY KEY ); > CREATE TABLE t2 ( id INT PRIMARY KEY ); > INSERT INTO t1 VALUES ( 1 ),( 2 ),( 3 ); > INSERT INTO t2 VALUES ( 2 ),( 3 ),( 4 ); > SELECT id FROM t1 UNION SELECT id FROM t2 ; + ------+ | id | + ------+ | 4 | | 1 | | 2 | | 3 | + ------+ > SELECT id FROM t1 UNION ALL SELECT id FROM t2 ; + ------+ | id | + ------+ | 1 | | 2 | | 3 | | 2 | | 3 | | 4 | + ------+ > drop table t1 ; > CREATE TABLE t1 ( a INT , b INT ); > INSERT INTO t1 VALUES ROW ( 4 , - 2 ), ROW ( 5 , 9 ), ROW ( 10 , 1 ), ROW ( 11 , 2 ), ROW ( 13 , 5 ); > drop table t2 ; > CREATE TABLE t2 ( a INT , b INT ); > INSERT INTO t2 VALUES ROW ( 1 , 2 ), ROW ( 3 , 4 ), ROW ( 11 , 2 ), ROW ( 10 , 3 ), ROW ( 15 , 8 ); > ( SELECT a FROM t1 WHERE a = 10 AND B = 1 ORDER BY a LIMIT 10 ) UNION ( SELECT a FROM t2 WHERE a = 11 AND B = 2 ORDER BY a LIMIT 10 ); + ------+ | a | + ------+ | 10 | | 11 | + ------+","title":"UNION"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#union","text":"","title":"UNION"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#description","text":"UNION combines the result from multiple SELECT statements into a single result set.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#syntax","text":"SELECT ... UNION [ALL | DISTINCT] SELECT ... [UNION [ALL | DISTINCT] SELECT ...]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#arguments","text":"","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#union-distinct-and-union-all","text":"By default, duplicate rows are removed from the UNION results. UNION is used as the same as UNION [DISTINCT] . Combining the result sets of two or more queries using the UNION operator requires the following conditions: All SELECT statements must have the same number and order of columns. Data types must be same or convertible. With UNION ALL , repeated lines (if available) are retained in the result.","title":"UNION [DISTINCT] and UNION ALL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#order-by-and-limit-in-union","text":"To apply an ORDER BY or LIMIT clause to an individual SELECT , parenthesize the SELECT and place the clause inside the parentheses: Use of ORDER BY for individual SELECT statements implies nothing about the order in which the rows appear in the final result because UNION by default produces an unordered set of rows. Therefore, ORDER BY in this context typically is used in conjunction with LIMIT, to determine the subset of the selected rows to retrieve for the SELECT , even though it does not necessarily affect the order of those rows in the final UNION result. For example: (SELECT a FROM t1 WHERE a=10 AND B=1 ORDER BY a LIMIT 10) UNION (SELECT a FROM t2 WHERE a=11 AND B=2 ORDER BY a LIMIT 10); Or: (SELECT a FROM t1 WHERE a=10 AND B=1) UNION (SELECT a FROM t2 WHERE a=11 AND B=2) ORDER BY a LIMIT 10;","title":"ORDER BY and LIMIT In UNION"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-union/#examples","text":"> CREATE TABLE t1 ( id INT PRIMARY KEY ); > CREATE TABLE t2 ( id INT PRIMARY KEY ); > INSERT INTO t1 VALUES ( 1 ),( 2 ),( 3 ); > INSERT INTO t2 VALUES ( 2 ),( 3 ),( 4 ); > SELECT id FROM t1 UNION SELECT id FROM t2 ; + ------+ | id | + ------+ | 4 | | 1 | | 2 | | 3 | + ------+ > SELECT id FROM t1 UNION ALL SELECT id FROM t2 ; + ------+ | id | + ------+ | 1 | | 2 | | 3 | | 2 | | 3 | | 4 | + ------+ > drop table t1 ; > CREATE TABLE t1 ( a INT , b INT ); > INSERT INTO t1 VALUES ROW ( 4 , - 2 ), ROW ( 5 , 9 ), ROW ( 10 , 1 ), ROW ( 11 , 2 ), ROW ( 13 , 5 ); > drop table t2 ; > CREATE TABLE t2 ( a INT , b INT ); > INSERT INTO t2 VALUES ROW ( 1 , 2 ), ROW ( 3 , 4 ), ROW ( 11 , 2 ), ROW ( 10 , 3 ), ROW ( 15 , 8 ); > ( SELECT a FROM t1 WHERE a = 10 AND B = 1 ORDER BY a LIMIT 10 ) UNION ( SELECT a FROM t2 WHERE a = 11 AND B = 2 ORDER BY a LIMIT 10 ); + ------+ | a | + ------+ | 10 | | 11 | + ------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/","text":"UPDATE Description The UPDATE statement is used to modify the existing records in a table. Syntax Single-table Syntax UPDATE table_reference SET assignment_list [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] Explanations The UPDATE statement updates columns of existing rows in the named table with new values. The SET clause indicates which columns to modify and the values they should be given. Each value can be given as an expression, or the keyword DEFAULT to set a column explicitly to its default value. The WHERE clause, if given, specifies the conditions that identify which rows to update. With no WHERE clause, all rows are updated. If the ORDER BY clause is specified, the rows are updated in the order that is specified. The LIMIT clause places a limit on the number of rows that can be updated. Examples Single-table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+ Multiple-table Examples > drop table if exists t1 ; > create table t1 ( a int ); > insert into t1 values ( 1 ), ( 2 ), ( 4 ); > drop table if exists t2 ; > create table t2 ( b int ); > insert into t2 values ( 1 ), ( 2 ), ( 3 ); > update t1 , t2 set a = 1 , b = 2 ; > select * from t1 ; + ------+ | a | + ------+ | 1 | | 1 | | 1 | + ------+ > update t1 , t2 set a = null , b = null ; > select * from t2 ; + ------+ | b | + ------+ | NULL | | NULL | | NULL | + ------+ > select * from t1 ; + ------+ | a | + ------+ | NULL | | NULL | | NULL | + ------+ Multiple-table join Syntax is also supported. > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a int , b int , c int ); > insert into t1 values ( 1 , 2 , 3 ), ( 4 , 5 , 6 ), ( 7 , 8 , 9 ); > create table t2 ( a int , b int , c int ); > insert into t2 values ( 1 , 2 , 3 ), ( 4 , 5 , 6 ), ( 7 , 8 , 9 ); > update t1 join t2 on t1 . a = t2 . a set t1 . b = 222 , t1 . c = 333 , t2 . b = 222 , t2 . c = 333 ; > select * from t1 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 222 | 333 | | 4 | 222 | 333 | | 7 | 222 | 333 | + ------+------+------+ > with t11 as ( select * from ( select * from t1 ) as t22 ) update t11 join t2 on t11 . a = t2 . a set t2 . b = 666 ; > select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 666 | 333 | | 4 | 666 | 333 | | 7 | 666 | 333 | + ------+------+------+ 3 rows in set ( 0 . 00 sec )","title":"UPDATE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#update","text":"","title":"UPDATE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#description","text":"The UPDATE statement is used to modify the existing records in a table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#syntax","text":"","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#single-table-syntax","text":"UPDATE table_reference SET assignment_list [WHERE where_condition] [ORDER BY ...] [LIMIT row_count]","title":"Single-table Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#explanations","text":"The UPDATE statement updates columns of existing rows in the named table with new values. The SET clause indicates which columns to modify and the values they should be given. Each value can be given as an expression, or the keyword DEFAULT to set a column explicitly to its default value. The WHERE clause, if given, specifies the conditions that identify which rows to update. With no WHERE clause, all rows are updated. If the ORDER BY clause is specified, the rows are updated in the order that is specified. The LIMIT clause places a limit on the number of rows that can be updated.","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/0.6-update/#examples","text":"Single-table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+ Multiple-table Examples > drop table if exists t1 ; > create table t1 ( a int ); > insert into t1 values ( 1 ), ( 2 ), ( 4 ); > drop table if exists t2 ; > create table t2 ( b int ); > insert into t2 values ( 1 ), ( 2 ), ( 3 ); > update t1 , t2 set a = 1 , b = 2 ; > select * from t1 ; + ------+ | a | + ------+ | 1 | | 1 | | 1 | + ------+ > update t1 , t2 set a = null , b = null ; > select * from t2 ; + ------+ | b | + ------+ | NULL | | NULL | | NULL | + ------+ > select * from t1 ; + ------+ | a | + ------+ | NULL | | NULL | | NULL | + ------+ Multiple-table join Syntax is also supported. > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a int , b int , c int ); > insert into t1 values ( 1 , 2 , 3 ), ( 4 , 5 , 6 ), ( 7 , 8 , 9 ); > create table t2 ( a int , b int , c int ); > insert into t2 values ( 1 , 2 , 3 ), ( 4 , 5 , 6 ), ( 7 , 8 , 9 ); > update t1 join t2 on t1 . a = t2 . a set t1 . b = 222 , t1 . c = 333 , t2 . b = 222 , t2 . c = 333 ; > select * from t1 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 222 | 333 | | 4 | 222 | 333 | | 7 | 222 | 333 | + ------+------+------+ > with t11 as ( select * from ( select * from t1 ) as t22 ) update t11 join t2 on t11 . a = t2 . a set t2 . b = 666 ; > select * from t2 ; + ------+------+------+ | a | b | c | + ------+------+------+ | 1 | 666 | 333 | | 4 | 666 | 333 | | 7 | 666 | 333 | + ------+------+------+ 3 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/","text":"CASE Description The CASE statement for stored programs implements a complex conditional construct. Note: There is also a CASE operator, which differs from the CASE statement described here. See Flow Control Functions . The CASE statement cannot have an ELSE NULL clause, and it is terminated with END CASE instead of END . If no when_value or search_condition matches the value tested and the CASE statement contains no ELSE clause, a Case not found for CASE statement error results. Each statement_list consists of one or more SQL statements; an empty statement_list is not permitted. Syntax Syntax 1 CASE case_value WHEN when_value THEN statement_list [WHEN when_value THEN statement_list] ... [ELSE statement_list] END CASE For the first syntax, case_value is an expression. This value is compared to the when_value expression in each WHEN clause until one of them is equal. When an equal when_value is found, the corresponding THEN clause statement_list executes. If no when_value is equal, the ELSE clause statement_list executes, if there is one. This syntax cannot be used to test for equality with NULL because NULL = NULL is false. Syntax 2 CASE WHEN search_condition THEN statement_list [WHEN search_condition THEN statement_list] ... [ELSE statement_list] END CASE For the second syntax, each WHEN clause search_condition expression is evaluated until one is true, at which point its corresponding THEN clause statement_list executes. If no search_condition is equal, the ELSE clause statement_list executes, if there is one. Examples > CREATE TABLE t1 ( c0 INTEGER , c1 INTEGER , c2 INTEGER ); > INSERT INTO t1 VALUES ( 1 , 1 , 1 ), ( 1 , 1 , 1 ); > SELECT CASE AVG ( c0 ) WHEN any_value ( c1 ) * any_value ( c2 ) THEN 1 END FROM t1 ; + ------------------------------------------------------------+ | case avg ( c0 ) when any_value ( c1 ) * any_value ( c2 ) then 1 end | + ------------------------------------------------------------+ | 1 | + ------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CASE any_value ( c1 ) * any_value ( c2 ) WHEN SUM ( c0 ) THEN 1 WHEN AVG ( c0 ) THEN 2 END FROM t1 ; + --------------------------------------------------------------------------------+ | case any_value ( c1 ) * any_value ( c2 ) when sum ( c0 ) then 1 when avg ( c0 ) then 2 end | + --------------------------------------------------------------------------------+ | 2 | + --------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CASE any_value ( c1 ) WHEN any_value ( c1 ) + 1 THEN 1 END , ABS ( AVG ( c0 )) FROM t1 ; + ------------------------------------------------------+--------------+ | case any_value ( c1 ) when any_value ( c1 ) + 1 then 1 end | abs ( avg ( c0 )) | + ------------------------------------------------------+--------------+ | NULL | 1 | + ------------------------------------------------------+--------------+ 1 row in set ( 0 . 00 sec )","title":"**CASE**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#case","text":"","title":"CASE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#description","text":"The CASE statement for stored programs implements a complex conditional construct. Note: There is also a CASE operator, which differs from the CASE statement described here. See Flow Control Functions . The CASE statement cannot have an ELSE NULL clause, and it is terminated with END CASE instead of END . If no when_value or search_condition matches the value tested and the CASE statement contains no ELSE clause, a Case not found for CASE statement error results. Each statement_list consists of one or more SQL statements; an empty statement_list is not permitted.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#syntax","text":"","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#syntax-1","text":"CASE case_value WHEN when_value THEN statement_list [WHEN when_value THEN statement_list] ... [ELSE statement_list] END CASE For the first syntax, case_value is an expression. This value is compared to the when_value expression in each WHEN clause until one of them is equal. When an equal when_value is found, the corresponding THEN clause statement_list executes. If no when_value is equal, the ELSE clause statement_list executes, if there is one. This syntax cannot be used to test for equality with NULL because NULL = NULL is false.","title":"Syntax 1"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#syntax-2","text":"CASE WHEN search_condition THEN statement_list [WHEN search_condition THEN statement_list] ... [ELSE statement_list] END CASE For the second syntax, each WHEN clause search_condition expression is evaluated until one is true, at which point its corresponding THEN clause statement_list executes. If no search_condition is equal, the ELSE clause statement_list executes, if there is one.","title":"Syntax 2"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/case/#examples","text":"> CREATE TABLE t1 ( c0 INTEGER , c1 INTEGER , c2 INTEGER ); > INSERT INTO t1 VALUES ( 1 , 1 , 1 ), ( 1 , 1 , 1 ); > SELECT CASE AVG ( c0 ) WHEN any_value ( c1 ) * any_value ( c2 ) THEN 1 END FROM t1 ; + ------------------------------------------------------------+ | case avg ( c0 ) when any_value ( c1 ) * any_value ( c2 ) then 1 end | + ------------------------------------------------------------+ | 1 | + ------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CASE any_value ( c1 ) * any_value ( c2 ) WHEN SUM ( c0 ) THEN 1 WHEN AVG ( c0 ) THEN 2 END FROM t1 ; + --------------------------------------------------------------------------------+ | case any_value ( c1 ) * any_value ( c2 ) when sum ( c0 ) then 1 when avg ( c0 ) then 2 end | + --------------------------------------------------------------------------------+ | 2 | + --------------------------------------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT CASE any_value ( c1 ) WHEN any_value ( c1 ) + 1 THEN 1 END , ABS ( AVG ( c0 )) FROM t1 ; + ------------------------------------------------------+--------------+ | case any_value ( c1 ) when any_value ( c1 ) + 1 then 1 end | abs ( avg ( c0 )) | + ------------------------------------------------------+--------------+ | NULL | 1 | + ------------------------------------------------------+--------------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/","text":"DELETE Description DELETE statement removes rows from a table. Syntax Single-Table Syntax DELETE FROM tbl_name [[AS] tbl_alias] [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] The DELETE statement deletes rows from tbl_name and returns the number of deleted rows. Explanations The conditions in the optional WHERE clause identify which rows to delete. With no WHERE clause, all rows are deleted. If the ORDER BY clause is specified, the rows are deleted in the order that is specified. -The LIMIT clause places a limit on the number of rows that can be deleted. Examples Single-Table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > delete from t1 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 1 | 2 | + ------+------+ Constraints MatrixOne doesn't support deleting multiple-table.","title":"**DELETE**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#delete","text":"","title":"DELETE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#description","text":"DELETE statement removes rows from a table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#syntax","text":"","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#single-table-syntax","text":"DELETE FROM tbl_name [[AS] tbl_alias] [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] The DELETE statement deletes rows from tbl_name and returns the number of deleted rows.","title":"Single-Table Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#explanations","text":"The conditions in the optional WHERE clause identify which rows to delete. With no WHERE clause, all rows are deleted. If the ORDER BY clause is specified, the rows are deleted in the order that is specified. -The LIMIT clause places a limit on the number of rows that can be deleted.","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#examples","text":"Single-Table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > delete from t1 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 1 | 2 | + ------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/delete/#constraints","text":"MatrixOne doesn't support deleting multiple-table.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert-into-select/","text":"INSERT INTO SELECT Description The INSERT INTO SELECT statement copies data from one table and inserts it into another table. The existing records in the target table are unaffected. Syntax INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition; Examples > create table t1 ( id int , name varchar ( 10 )); > insert into t1 values ( 1 , 'a' ); > insert into t1 values ( 2 , 'b' ); > insert into t1 values ( 3 , 'c' ); > create table t2 ( id int , appname varchar ( 10 ), country varchar ( 10 )); > insert into t2 values ( 1 , 'appone' , 'CN' ); > insert into t2 values ( 2 , 'apptwo' , 'CN' ); > INSERT INTO t1 ( name ) SELECT appname FROM t2 ; > Query OK , 2 rows affected ( 0 . 01 sec ) > select * from t1 ; + ------+--------+ | id | name | + ------+--------+ | 1 | a | | 2 | b | | 3 | c | | NULL | appone | | NULL | apptwo | + ------+--------+","title":"INSERT INTO SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert-into-select/#insert-into-select","text":"","title":"INSERT INTO SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert-into-select/#description","text":"The INSERT INTO SELECT statement copies data from one table and inserts it into another table. The existing records in the target table are unaffected.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert-into-select/#syntax","text":"INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert-into-select/#examples","text":"> create table t1 ( id int , name varchar ( 10 )); > insert into t1 values ( 1 , 'a' ); > insert into t1 values ( 2 , 'b' ); > insert into t1 values ( 3 , 'c' ); > create table t2 ( id int , appname varchar ( 10 ), country varchar ( 10 )); > insert into t2 values ( 1 , 'appone' , 'CN' ); > insert into t2 values ( 2 , 'apptwo' , 'CN' ); > INSERT INTO t1 ( name ) SELECT appname FROM t2 ; > Query OK , 2 rows affected ( 0 . 01 sec ) > select * from t1 ; + ------+--------+ | id | name | + ------+--------+ | 1 | a | | 2 | b | | 3 | c | | NULL | appone | | NULL | apptwo | + ------+--------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/","text":"INSERT Description Writing data. Syntax > INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ... Examples > CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+ Constraints Built-in functions inside INSERT INTO...VALUES(function) syntax is not supported yet.","title":"**INSERT**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#insert","text":"","title":"INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#description","text":"Writing data.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#syntax","text":"> INSERT INTO [db.]table [(c1, c2, c3)] VALUES (v11, v12, v13), (v21, v22, v23), ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#examples","text":"> CREATE TABLE test ( a int , b varchar ( 10 )); > INSERT INTO test values ( 123 , 'abc' ); > SELECT * FROM test ; + ------+---------+ | a | b | + ------+---------+ | 123 | abc | + ------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/insert/#constraints","text":"Built-in functions inside INSERT INTO...VALUES(function) syntax is not supported yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/","text":"INTERVAL Description The INTERVAL values are used mainly for date and time calculations. The INTERVAL in expressions represents a temporal interval. Temporal intervals are used for certain functions, such as DATE_ADD() and DATE_SUB() . Temporal arithmetic also can be performed in expressions using INTERVAL together with the + or - operator: date + INTERVAL expr unit date - INTERVAL expr unit INTERVAL expr unit is permitted on either side of the + operator if the expression on the other side is a date or datetime value. For the - operator, INTERVAL expr unit is permitted only on the right side, because it makes no sense to subtract a date or datetime value from an interval. Syntax > INTERVAL (expr,unit) Arguments Arguments Description expr represents a quantity. unit the unit for interpreting the quantity; it is a specifier such as HOUR, DAY, or WEEK. Note: The INTERVAL keyword and the unit specifier are not case-sensitive. Temporal Interval Expression and Unit Arguments unit Value Expected expr Format MICROSECOND MICROSECONDS SECOND SECONDS MINUTE MINUTES HOUR HOURS DAY DAYS WEEK WEEKS MONTH MONTHS QUARTER QUARTERS YEAR YEARS SECOND_MICROSECOND 'SECONDS.MICROSECONDS' MINUTE_MICROSECOND 'MINUTES:SECONDS.MICROSECONDS' MINUTE_SECOND 'MINUTES:SECONDS' HOUR_MICROSECOND 'HOURS:MINUTES:SECONDS.MICROSECONDS' HOUR_SECOND 'HOURS:MINUTES:SECONDS' HOUR_MINUTE 'HOURS:MINUTES' DAY_MICROSECOND 'DAYS HOURS:MINUTES:SECONDS.MICROSECONDS' DAY_SECOND 'DAYS HOURS:MINUTES:SECONDS' DAY_MINUTE 'DAYS HOURS:MINUTES' DAY_HOUR 'DAYS HOURS' YEAR_MONTH 'YEARS-MONTHS' We permits any punctuation delimiter in the expr format. Those shown in the table are the suggested delimiters. Examples Example 1 Temporal intervals are used for DATE_ADD() and DATE_SUB() : > SELECT DATE_SUB ( '2018-05-01' , INTERVAL 1 YEAR ); + -----------------------------------------+ | date_sub ( 2018 - 05 - 01 , interval ( 1 , year )) | + -----------------------------------------+ | 2017 - 05 - 01 | + -----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2020-12-31 23:59:59' , INTERVAL 1 SECOND ); + ----------------------------------------------------+ | date_add ( 2020 - 12 - 31 23 : 59 : 59 , interval ( 1 , second )) | + ----------------------------------------------------+ | 2021 - 01 - 01 00 : 00 : 00 | + ----------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_ADD ( '2018-12-31 23:59:59' , INTERVAL 1 DAY ); + -------------------------------------------------+ | date_add ( 2018 - 12 - 31 23 : 59 : 59 , interval ( 1 , day )) | + -------------------------------------------------+ | 2019 - 01 - 01 23 : 59 : 59 | + -------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2100-12-31 23:59:59' , INTERVAL '1:1' MINUTE_SECOND ); + -------------------------------------------------------------+ | date_add ( 2100 - 12 - 31 23 : 59 : 59 , interval ( 1 : 1 , minute_second )) | + -------------------------------------------------------------+ | 2101 - 01 - 01 00 : 01 : 00 | + -------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_SUB ( '2025-01-01 00:00:00' , INTERVAL '1 1:1:1' DAY_SECOND ); + --------------------------------------------------------------+ | date_sub ( 2025 - 01 - 01 00 : 00 : 00 , interval ( 1 1 : 1 : 1 , day_second )) | + --------------------------------------------------------------+ | 2024 - 12 - 30 22 : 58 : 59 | + --------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '1900-01-01 00:00:00' , INTERVAL '-1 10' DAY_HOUR ); + ----------------------------------------------------------+ | date_add ( 1900 - 01 - 01 00 : 00 : 00 , interval ( - 1 10 , day_hour )) | + ----------------------------------------------------------+ | 1899 - 12 - 30 14 : 00 : 00 . 000000 | + ----------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_SUB ( '1998-01-02' , INTERVAL 31 DAY ); + -----------------------------------------+ | date_sub ( 1998 - 01 - 02 , interval ( 31 , day )) | + -----------------------------------------+ | 1997 - 12 - 02 | + -----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '1992-12-31 23:59:59.000002' , INTERVAL '1.999999' SECOND_MICROSECOND ); + ------------------------------------------------------------------------------+ | date_add ( 1992 - 12 - 31 23 : 59 : 59 . 000002 , interval ( 1 . 999999 , second_microsecond )) | + ------------------------------------------------------------------------------+ | 1993 - 01 - 01 00 : 00 : 01 . 000001 | + ------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 2 Using INTERVAL together with the + or - operator > SELECT '2018-12-31 23:59:59' + INTERVAL 1 SECOND ; + -------------------------------------------+ | 2018 - 12 - 31 23 : 59 : 59 + interval ( 1 , second ) | + -------------------------------------------+ | 2019 - 01 - 01 00 : 00 : 00 | + -------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT INTERVAL 1 DAY + '2018-12-31' ; + -------------------------------+ | interval ( 1 , day ) + 2018 - 12 - 31 | + -------------------------------+ | 2019 - 01 - 01 | + -------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT '2025-01-01' - INTERVAL 1 SECOND ; + ----------------------------------+ | 2025 - 01 - 01 - interval ( 1 , second ) | + ----------------------------------+ | 2024 - 12 - 31 23 : 59 : 59 | + ----------------------------------+ 1 row in set ( 0 . 00 sec ) Example 3 If you add to or subtract from a date value something that contains a time part, the result is automatically converted to a datetime value: > SELECT DATE_ADD ( '2023-01-01' , INTERVAL 1 DAY ); + ----------------------------------------+ | date_add ( 2023 - 01 - 01 , interval ( 1 , day )) | + ----------------------------------------+ | 2023 - 01 - 02 | + ----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2023-01-01' , INTERVAL 1 HOUR ); + -----------------------------------------+ | date_add ( 2023 - 01 - 01 , interval ( 1 , hour )) | + -----------------------------------------+ | 2023 - 01 - 01 01 : 00 : 00 | + -----------------------------------------+ 1 row in set ( 0 . 01 sec ) Example 4 If you add MONTH, YEAR_MONTH, or YEAR and the resulting date has a day that is larger than the maximum day for the new month, the day is adjusted to the maximum days in the new month: > SELECT DATE_ADD ( '2019-01-30' , INTERVAL 1 MONTH ); + ------------------------------------------+ | date_add ( 2019 - 01 - 30 , interval ( 1 , month )) | + ------------------------------------------+ | 2019 - 02 - 28 | + ------------------------------------------+ 1 row in set ( 0 . 00 sec ) Example 5 Date arithmetic operations require complete dates and do not work with incomplete dates such as '2016-07-00' or badly malformed dates: > SELECT DATE_ADD ( '2016-07-00' , INTERVAL 1 DAY ); + ----------------------------------------+ | date_add ( 2016 - 07 - 00 , interval ( 1 , day )) | + ----------------------------------------+ | NULL | + ----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT '2005-03-32' + INTERVAL 1 MONTH ; + ---------------------------------+ | 2005 - 03 - 32 + interval ( 1 , month ) | + ---------------------------------+ | NULL | + ---------------------------------+ 1 row in set ( 0 . 00 sec )","title":"INTERVAL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#interval","text":"","title":"INTERVAL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#description","text":"The INTERVAL values are used mainly for date and time calculations. The INTERVAL in expressions represents a temporal interval. Temporal intervals are used for certain functions, such as DATE_ADD() and DATE_SUB() . Temporal arithmetic also can be performed in expressions using INTERVAL together with the + or - operator: date + INTERVAL expr unit date - INTERVAL expr unit INTERVAL expr unit is permitted on either side of the + operator if the expression on the other side is a date or datetime value. For the - operator, INTERVAL expr unit is permitted only on the right side, because it makes no sense to subtract a date or datetime value from an interval.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#syntax","text":"> INTERVAL (expr,unit)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#arguments","text":"Arguments Description expr represents a quantity. unit the unit for interpreting the quantity; it is a specifier such as HOUR, DAY, or WEEK. Note: The INTERVAL keyword and the unit specifier are not case-sensitive. Temporal Interval Expression and Unit Arguments unit Value Expected expr Format MICROSECOND MICROSECONDS SECOND SECONDS MINUTE MINUTES HOUR HOURS DAY DAYS WEEK WEEKS MONTH MONTHS QUARTER QUARTERS YEAR YEARS SECOND_MICROSECOND 'SECONDS.MICROSECONDS' MINUTE_MICROSECOND 'MINUTES:SECONDS.MICROSECONDS' MINUTE_SECOND 'MINUTES:SECONDS' HOUR_MICROSECOND 'HOURS:MINUTES:SECONDS.MICROSECONDS' HOUR_SECOND 'HOURS:MINUTES:SECONDS' HOUR_MINUTE 'HOURS:MINUTES' DAY_MICROSECOND 'DAYS HOURS:MINUTES:SECONDS.MICROSECONDS' DAY_SECOND 'DAYS HOURS:MINUTES:SECONDS' DAY_MINUTE 'DAYS HOURS:MINUTES' DAY_HOUR 'DAYS HOURS' YEAR_MONTH 'YEARS-MONTHS' We permits any punctuation delimiter in the expr format. Those shown in the table are the suggested delimiters.","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#examples","text":"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#example-1","text":"Temporal intervals are used for DATE_ADD() and DATE_SUB() : > SELECT DATE_SUB ( '2018-05-01' , INTERVAL 1 YEAR ); + -----------------------------------------+ | date_sub ( 2018 - 05 - 01 , interval ( 1 , year )) | + -----------------------------------------+ | 2017 - 05 - 01 | + -----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2020-12-31 23:59:59' , INTERVAL 1 SECOND ); + ----------------------------------------------------+ | date_add ( 2020 - 12 - 31 23 : 59 : 59 , interval ( 1 , second )) | + ----------------------------------------------------+ | 2021 - 01 - 01 00 : 00 : 00 | + ----------------------------------------------------+ 1 row in set ( 0 . 01 sec ) > SELECT DATE_ADD ( '2018-12-31 23:59:59' , INTERVAL 1 DAY ); + -------------------------------------------------+ | date_add ( 2018 - 12 - 31 23 : 59 : 59 , interval ( 1 , day )) | + -------------------------------------------------+ | 2019 - 01 - 01 23 : 59 : 59 | + -------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2100-12-31 23:59:59' , INTERVAL '1:1' MINUTE_SECOND ); + -------------------------------------------------------------+ | date_add ( 2100 - 12 - 31 23 : 59 : 59 , interval ( 1 : 1 , minute_second )) | + -------------------------------------------------------------+ | 2101 - 01 - 01 00 : 01 : 00 | + -------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_SUB ( '2025-01-01 00:00:00' , INTERVAL '1 1:1:1' DAY_SECOND ); + --------------------------------------------------------------+ | date_sub ( 2025 - 01 - 01 00 : 00 : 00 , interval ( 1 1 : 1 : 1 , day_second )) | + --------------------------------------------------------------+ | 2024 - 12 - 30 22 : 58 : 59 | + --------------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '1900-01-01 00:00:00' , INTERVAL '-1 10' DAY_HOUR ); + ----------------------------------------------------------+ | date_add ( 1900 - 01 - 01 00 : 00 : 00 , interval ( - 1 10 , day_hour )) | + ----------------------------------------------------------+ | 1899 - 12 - 30 14 : 00 : 00 . 000000 | + ----------------------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_SUB ( '1998-01-02' , INTERVAL 31 DAY ); + -----------------------------------------+ | date_sub ( 1998 - 01 - 02 , interval ( 31 , day )) | + -----------------------------------------+ | 1997 - 12 - 02 | + -----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '1992-12-31 23:59:59.000002' , INTERVAL '1.999999' SECOND_MICROSECOND ); + ------------------------------------------------------------------------------+ | date_add ( 1992 - 12 - 31 23 : 59 : 59 . 000002 , interval ( 1 . 999999 , second_microsecond )) | + ------------------------------------------------------------------------------+ | 1993 - 01 - 01 00 : 00 : 01 . 000001 | + ------------------------------------------------------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Example 1"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#example-2","text":"Using INTERVAL together with the + or - operator > SELECT '2018-12-31 23:59:59' + INTERVAL 1 SECOND ; + -------------------------------------------+ | 2018 - 12 - 31 23 : 59 : 59 + interval ( 1 , second ) | + -------------------------------------------+ | 2019 - 01 - 01 00 : 00 : 00 | + -------------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT INTERVAL 1 DAY + '2018-12-31' ; + -------------------------------+ | interval ( 1 , day ) + 2018 - 12 - 31 | + -------------------------------+ | 2019 - 01 - 01 | + -------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT '2025-01-01' - INTERVAL 1 SECOND ; + ----------------------------------+ | 2025 - 01 - 01 - interval ( 1 , second ) | + ----------------------------------+ | 2024 - 12 - 31 23 : 59 : 59 | + ----------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Example 2"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#example-3","text":"If you add to or subtract from a date value something that contains a time part, the result is automatically converted to a datetime value: > SELECT DATE_ADD ( '2023-01-01' , INTERVAL 1 DAY ); + ----------------------------------------+ | date_add ( 2023 - 01 - 01 , interval ( 1 , day )) | + ----------------------------------------+ | 2023 - 01 - 02 | + ----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT DATE_ADD ( '2023-01-01' , INTERVAL 1 HOUR ); + -----------------------------------------+ | date_add ( 2023 - 01 - 01 , interval ( 1 , hour )) | + -----------------------------------------+ | 2023 - 01 - 01 01 : 00 : 00 | + -----------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"Example 3"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#example-4","text":"If you add MONTH, YEAR_MONTH, or YEAR and the resulting date has a day that is larger than the maximum day for the new month, the day is adjusted to the maximum days in the new month: > SELECT DATE_ADD ( '2019-01-30' , INTERVAL 1 MONTH ); + ------------------------------------------+ | date_add ( 2019 - 01 - 30 , interval ( 1 , month )) | + ------------------------------------------+ | 2019 - 02 - 28 | + ------------------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Example 4"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/interval/#example-5","text":"Date arithmetic operations require complete dates and do not work with incomplete dates such as '2016-07-00' or badly malformed dates: > SELECT DATE_ADD ( '2016-07-00' , INTERVAL 1 DAY ); + ----------------------------------------+ | date_add ( 2016 - 07 - 00 , interval ( 1 , day )) | + ----------------------------------------+ | NULL | + ----------------------------------------+ 1 row in set ( 0 . 00 sec ) > SELECT '2005-03-32' + INTERVAL 1 MONTH ; + ---------------------------------+ | 2005 - 03 - 32 + interval ( 1 , month ) | + ---------------------------------+ | NULL | + ---------------------------------+ 1 row in set ( 0 . 00 sec )","title":"Example 5"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/","text":"JOIN Description The JOIN statement is used to combine rows from two or more tables. The following figure shows seven usages of LEFT JOIN , RIGHT JOIN , INNER JOIN , and OUTER JOIN . LEFT JOIN SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL RIGHT JOIN SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL INNER JOIN SELECT / FROM TableA A INNER JOIN TableB B ON A.Key=B.Key FULL JOIN SELECT / FROM TableA A FULL OUTER JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A FULL OUTER JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL OR B.Key IS NULL For more information, see the reference below: LEFT JOIN RIGHT JOIN INNER JOIN FULL JOIN OUTER JOIN NATURAL JOIN","title":"JOIN Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/#join","text":"","title":"JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/#description","text":"The JOIN statement is used to combine rows from two or more tables. The following figure shows seven usages of LEFT JOIN , RIGHT JOIN , INNER JOIN , and OUTER JOIN . LEFT JOIN SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A LEFT JOIN TableB B ON A.Key=B.Key WHERE B.Key IS NULL RIGHT JOIN SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A RIGHT JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL INNER JOIN SELECT / FROM TableA A INNER JOIN TableB B ON A.Key=B.Key FULL JOIN SELECT / FROM TableA A FULL OUTER JOIN TableB B ON A.Key=B.Key SELECT / FROM TableA A FULL OUTER JOIN TableB B ON A.Key=B.Key WHERE A.Key IS NULL OR B.Key IS NULL For more information, see the reference below: LEFT JOIN RIGHT JOIN INNER JOIN FULL JOIN OUTER JOIN NATURAL JOIN","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/","text":"LOAD DATA Description The LOAD DATA statement reads rows from a csv file into a table at a very high speed. Syntax > LOAD DATA INFILE 'file_name' INTO TABLE tbl_name [{FIELDS | COLUMNS} [TERMINATED BY 'string'] [[OPTIONALLY] ENCLOSED BY 'char'] [ESCAPED BY 'char'] ] [LINES [STARTING BY 'string'] [TERMINATED BY 'string'] ] [IGNORE number {LINES | ROWS}] TERMINATED BY , ENCLOSED BY , and other separators in meanings are the same as SELECT INTO . The IGNORE number LINES clause can be used to ignore lines at the start of the file. For example, you can use IGNORE 1 LINES to skip an initial header line containing column names: LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES; Examples The SSB Test is an example of LOAD DATA syntax. Complete a SSB Test with MatrixOne > LOAD DATA INFILE '/ssb-dbgen-path/lineorder_flat.tbl ' INTO TABLE lineorder_flat; Constraints Only CSV format file is supported for now.","title":"LOAD DATA"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#load-data","text":"","title":"LOAD DATA"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#description","text":"The LOAD DATA statement reads rows from a csv file into a table at a very high speed.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#syntax","text":"> LOAD DATA INFILE 'file_name' INTO TABLE tbl_name [{FIELDS | COLUMNS} [TERMINATED BY 'string'] [[OPTIONALLY] ENCLOSED BY 'char'] [ESCAPED BY 'char'] ] [LINES [STARTING BY 'string'] [TERMINATED BY 'string'] ] [IGNORE number {LINES | ROWS}] TERMINATED BY , ENCLOSED BY , and other separators in meanings are the same as SELECT INTO . The IGNORE number LINES clause can be used to ignore lines at the start of the file. For example, you can use IGNORE 1 LINES to skip an initial header line containing column names: LOAD DATA INFILE '/tmp/test.txt' INTO TABLE test IGNORE 1 LINES;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#examples","text":"The SSB Test is an example of LOAD DATA syntax. Complete a SSB Test with MatrixOne > LOAD DATA INFILE '/ssb-dbgen-path/lineorder_flat.tbl ' INTO TABLE lineorder_flat;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/load-data/#constraints","text":"Only CSV format file is supported for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/","text":"Operators Overview Arithmetic Operators Name Description %,MOD Modulo operator * Multiplication operator + Addition operator - Minus operator - Change the sign of the argument / Division operator DIV Integer division Assignment Operators Name Description = Equal operator Cast Functions and Operators Name Description CAST() Cast a value as a certain type CONVERT() Cast a value as a certain type Comparison Functions and Operators Name Description > Greater than operator >= Greater than or equal operator < Less than operator <>,!= Not equal operator <= Less than or equal operator = Equal operator BETWEEN ... AND ... Whether a value is within a range of values IN() Whether a value is within a set of values IS Test a value against a boolean IS NOT Test a value against a boolean IS NOT NULL NOT NULL value test IS NULL NULL value test LIKE Simple pattern matching NOT BETWEEN ... AND ... Whether a value is not within a range of values NOT LIKE Negation of simple pattern matching Flow Control Functions Name Description CASE Case operator IF() If/else construct Logical Operators Name Description AND,&& Logical AND NOT,! Negates value OR Logical OR XOR Logical XOR","title":"OPERATORS Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#operators-overview","text":"","title":"Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#arithmetic-operators","text":"Name Description %,MOD Modulo operator * Multiplication operator + Addition operator - Minus operator - Change the sign of the argument / Division operator DIV Integer division","title":"Arithmetic Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#assignment-operators","text":"Name Description = Equal operator","title":"Assignment Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#cast-functions-and-operators","text":"Name Description CAST() Cast a value as a certain type CONVERT() Cast a value as a certain type","title":"Cast Functions and Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#comparison-functions-and-operators","text":"Name Description > Greater than operator >= Greater than or equal operator < Less than operator <>,!= Not equal operator <= Less than or equal operator = Equal operator BETWEEN ... AND ... Whether a value is within a range of values IN() Whether a value is within a set of values IS Test a value against a boolean IS NOT Test a value against a boolean IS NOT NULL NOT NULL value test IS NULL NULL value test LIKE Simple pattern matching NOT BETWEEN ... AND ... Whether a value is not within a range of values NOT LIKE Negation of simple pattern matching","title":"Comparison Functions and Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#flow-control-functions","text":"Name Description CASE Case operator IF() If/else construct","title":"Flow Control Functions"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/#logical-operators","text":"Name Description AND,&& Logical AND NOT,! Negates value OR Logical OR XOR Logical XOR","title":"Logical Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/","text":"SELECT Description Retrieves data from a table. Syntax SELECT [ ALL | DISTINCT ] select_expr [, select_expr ] [[ AS ] alias ] ... [ INTO variable [, ...]] [ FROM table_references [ WHERE where_condition ] [ GROUP BY { col_name | expr | position } [ ASC | DESC ]] [ HAVING where_condition ] [ ORDER BY { col_name | expr | position } [ ASC | DESC ]] [ LIMIT { [ offset ,] row_count | row_count OFFSET offset } ] Examples > SELECT number FROM numbers ( 3 ); + --------+ | number | + --------+ | 0 | | 1 | | 2 | + --------+ > SELECT * FROM t1 WHERE spID > 2 AND userID < 2 || userID >= 2 OR userID < 2 LIMIT 3 ; > SELECT userID , MAX ( score ) max_score FROM t1 WHERE userID < 2 || userID > 3 GROUP BY userID ORDER BY max_score ; > create table t1 ( spID int , userID int , score smallint ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , count ( score ) from t1 group by userID having count ( score ) > 1 order by userID ; + --------+--------------+ | userid | count ( score ) | + --------+--------------+ | 1 | 3 | + --------+--------------+ > select userID , count ( score ) from t1 where userID > 2 group by userID having count ( score ) > 1 order by userID ; Empty set ( 0 . 01 sec ) s Constraints Table alias is not supported in GROUP BY. SELECT...FOR UPDATE clause is not supported now. INTO OUTFILE is limitedly support.","title":"SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#select","text":"","title":"SELECT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#description","text":"Retrieves data from a table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#syntax","text":"SELECT [ ALL | DISTINCT ] select_expr [, select_expr ] [[ AS ] alias ] ... [ INTO variable [, ...]] [ FROM table_references [ WHERE where_condition ] [ GROUP BY { col_name | expr | position } [ ASC | DESC ]] [ HAVING where_condition ] [ ORDER BY { col_name | expr | position } [ ASC | DESC ]] [ LIMIT { [ offset ,] row_count | row_count OFFSET offset } ]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#examples","text":"> SELECT number FROM numbers ( 3 ); + --------+ | number | + --------+ | 0 | | 1 | | 2 | + --------+ > SELECT * FROM t1 WHERE spID > 2 AND userID < 2 || userID >= 2 OR userID < 2 LIMIT 3 ; > SELECT userID , MAX ( score ) max_score FROM t1 WHERE userID < 2 || userID > 3 GROUP BY userID ORDER BY max_score ; > create table t1 ( spID int , userID int , score smallint ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , count ( score ) from t1 group by userID having count ( score ) > 1 order by userID ; + --------+--------------+ | userid | count ( score ) | + --------+--------------+ | 1 | 3 | + --------+--------------+ > select userID , count ( score ) from t1 where userID > 2 group by userID having count ( score ) > 1 order by userID ; Empty set ( 0 . 01 sec ) s","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/select/#constraints","text":"Table alias is not supported in GROUP BY. SELECT...FOR UPDATE clause is not supported now. INTO OUTFILE is limitedly support.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/","text":"SHOW DATABASES Description Shows the list of databases that exist on the instance. Syntax > SHOW DATABASES [LIKE expr | WHERE expr] Examples > SHOW DATABASES ; + ----------+ | Database | + ----------+ | default | | for_test | | local | | ss | | ss1 | | ss2 | | ss3 | | system | | test | + ----------+ 9 rows in set ( 0 . 00 sec )","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#show-databases","text":"","title":"SHOW DATABASES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#description","text":"Shows the list of databases that exist on the instance.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#syntax","text":"> SHOW DATABASES [LIKE expr | WHERE expr]","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-databases/#examples","text":"> SHOW DATABASES ; + ----------+ | Database | + ----------+ | default | | for_test | | local | | ss | | ss1 | | ss2 | | ss3 | | system | | test | + ----------+ 9 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/","text":"SHOW TABLES Description Shows the list of tables in the currently selected database. Syntax > SHOW TABLES [LIKE 'pattern' | WHERE expr | FROM 'pattern' | IN 'pattern'] Examples > SHOW TABLES ; + ---------------+ | name | + ---------------+ | clusters | | contributors | | databases | | functions | | numbers | | numbers_local | | numbers_mt | | one | | processes | | settings | | tables | | tracing | + ---------------+ Constraints MatrixOne does not support SHOW TABLE STATUS for now.","title":"SHOW TABLES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#show-tables","text":"","title":"SHOW TABLES"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#description","text":"Shows the list of tables in the currently selected database.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#syntax","text":"> SHOW TABLES [LIKE 'pattern' | WHERE expr | FROM 'pattern' | IN 'pattern']","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#examples","text":"> SHOW TABLES ; + ---------------+ | name | + ---------------+ | clusters | | contributors | | databases | | functions | | numbers | | numbers_local | | numbers_mt | | one | | processes | | settings | | tables | | tracing | + ---------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/show-tables/#constraints","text":"MatrixOne does not support SHOW TABLE STATUS for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subquery/","text":"SUBQUERY A subquery is a SELECT statement within another statement. is a SQL query nested inside a larger query. Here is an example of a subquery: SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2); In this example, SELECT * FROM t1 ... is the outer query (or outer statement), and (SELECT column1 FROM t2) is the subquery. We say that the subquery is nested within the outer query, and in fact it is possible to nest subqueries within other subqueries, to a considerable depth. A subquery must always appear within parentheses. The main advantages of subqueries are: They allow queries that are structured so that it is possible to isolate each part of a statement. They provide alternative ways to perform operations that would otherwise require complex joins and unions. Many people find subqueries more readable than complex joins or unions. A subquery may occur in: A SELECT clause A FROM clause A WHERE clause For more information, see the reference below: Derived Tables Comparisons Using Subqueries SUBQUERY WITH ANY or SOME SUBQUERY WITH ALL SUBQUERY WITH EXISTS SUBQUERY WITH IN Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"SUBQUERY Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subquery/#subquery","text":"A subquery is a SELECT statement within another statement. is a SQL query nested inside a larger query. Here is an example of a subquery: SELECT * FROM t1 WHERE column1 = (SELECT column1 FROM t2); In this example, SELECT * FROM t1 ... is the outer query (or outer statement), and (SELECT column1 FROM t2) is the subquery. We say that the subquery is nested within the outer query, and in fact it is possible to nest subqueries within other subqueries, to a considerable depth. A subquery must always appear within parentheses. The main advantages of subqueries are: They allow queries that are structured so that it is possible to isolate each part of a statement. They provide alternative ways to perform operations that would otherwise require complex joins and unions. Many people find subqueries more readable than complex joins or unions. A subquery may occur in: A SELECT clause A FROM clause A WHERE clause For more information, see the reference below: Derived Tables Comparisons Using Subqueries SUBQUERY WITH ANY or SOME SUBQUERY WITH ALL SUBQUERY WITH EXISTS SUBQUERY WITH IN","title":"SUBQUERY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subquery/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/","text":"UPDATE Description The UPDATE statement is used to modify the existing records in a table. Syntax Single-table Syntax UPDATE table_reference SET assignment_list [WHERE where_condition] [ORDER BY ...] [LIMIT row_count] Explanations The UPDATE statement updates columns of existing rows in the named table with new values. The SET clause indicates which columns to modify and the values they should be given. Each value can be given as an expression, or the keyword DEFAULT to set a column explicitly to its default value. The WHERE clause, if given, specifies the conditions that identify which rows to update. With no WHERE clause, all rows are updated. If the ORDER BY clause is specified, the rows are updated in the order that is specified. The LIMIT clause places a limit on the number of rows that can be updated. Examples Single-table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+ Constraints Multiple-table Syntax is not supported for now.","title":"**UPDATE**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#update","text":"","title":"UPDATE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#description","text":"The UPDATE statement is used to modify the existing records in a table.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#syntax","text":"","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#single-table-syntax","text":"UPDATE table_reference SET assignment_list [WHERE where_condition] [ORDER BY ...] [LIMIT row_count]","title":"Single-table Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#explanations","text":"The UPDATE statement updates columns of existing rows in the named table with new values. The SET clause indicates which columns to modify and the values they should be given. Each value can be given as an expression, or the keyword DEFAULT to set a column explicitly to its default value. The WHERE clause, if given, specifies the conditions that identify which rows to update. With no WHERE clause, all rows are updated. If the ORDER BY clause is specified, the rows are updated in the order that is specified. The LIMIT clause places a limit on the number of rows that can be updated.","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#examples","text":"Single-table Examples > CREATE TABLE t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/update/#constraints","text":"Multiple-table Syntax is not supported for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/","text":"USE Description The USE statement tells MatrixOne to use the named database as the default (current) database for subsequent statements. Syntax > USE db_name Examples > USE db1 ; > SELECT COUNT ( * ) FROM mytable ;","title":"USE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#use","text":"","title":"USE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#description","text":"The USE statement tells MatrixOne to use the named database as the default (current) database for subsequent statements.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#syntax","text":"> USE db_name","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/use/#examples","text":"> USE db1 ; > SELECT COUNT ( * ) FROM mytable ;","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/","text":"WITH (Common Table Expressions) Description A common table expression (CTE) is a named temporary result set that exists within the scope of a single statement and that can be referred to later within that statement, possibly multiple times. To specify common table expressions, use a WITH clause that has one or more comma-separated subclauses. Each sub-clause provides a subquery that produces a result set, and associates a name with the subquery. Syntax WITH cte_name ( column_name [,...n] ) AS ( CTE_query_definition \u2013- Anchor member is defined. ) Explanations In the statement containing the WITH clause, each CTE name can be referenced to access the corresponding CTE result set. Examples > CREATE TABLE t1 ( a INTEGER , b INTEGER , c INTEGER ); > INSERT INTO t1 VALUES ( 1 , 1 , 10 ), ( 1 , 2 , 20 ), ( 1 , 3 , 30 ), ( 2 , 1 , 40 ), ( 2 , 2 , 50 ), ( 2 , 3 , 60 ); > CREATE TABLE t2 ( a INTEGER , d INTEGER , e INTEGER ); > INSERT INTO t2 VALUES ( 1 , 6 , 60 ), ( 2 , 6 , 60 ), ( 3 , 6 , 60 ); > WITH cte AS ( SELECT SUM ( c ) AS c , SUM ( b ) AS b , a FROM t1 GROUP BY a ) SELECT t2 . a , ( SELECT MIN ( c ) FROM cte AS cte2 WHERE t2 . d = cte2 . b ) FROM t2 LEFT JOIN cte AS cte1 ON t2 . a = cte1 . a LEFT JOIN t2 AS tx ON tx . e = cte1 . c ; + ------+------------------------------------------------------+ | a | ( select min ( c ) from cte as cte2 where t2 . d = cte2 . b ) | + ------+------------------------------------------------------+ | 1 | 60 | | 1 | 60 | | 1 | 60 | | 2 | 60 | | 3 | 60 | + ------+------------------------------------------------------+ 5 rows in set ( 0 . 01 sec ) Constraints MatrixOne doesn't support recursive CTE yet.","title":"With CTE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#with-common-table-expressions","text":"","title":"WITH (Common Table Expressions)"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#description","text":"A common table expression (CTE) is a named temporary result set that exists within the scope of a single statement and that can be referred to later within that statement, possibly multiple times. To specify common table expressions, use a WITH clause that has one or more comma-separated subclauses. Each sub-clause provides a subquery that produces a result set, and associates a name with the subquery.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#syntax","text":"WITH cte_name ( column_name [,...n] ) AS ( CTE_query_definition \u2013- Anchor member is defined. )","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#explanations","text":"In the statement containing the WITH clause, each CTE name can be referenced to access the corresponding CTE result set.","title":"Explanations"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#examples","text":"> CREATE TABLE t1 ( a INTEGER , b INTEGER , c INTEGER ); > INSERT INTO t1 VALUES ( 1 , 1 , 10 ), ( 1 , 2 , 20 ), ( 1 , 3 , 30 ), ( 2 , 1 , 40 ), ( 2 , 2 , 50 ), ( 2 , 3 , 60 ); > CREATE TABLE t2 ( a INTEGER , d INTEGER , e INTEGER ); > INSERT INTO t2 VALUES ( 1 , 6 , 60 ), ( 2 , 6 , 60 ), ( 3 , 6 , 60 ); > WITH cte AS ( SELECT SUM ( c ) AS c , SUM ( b ) AS b , a FROM t1 GROUP BY a ) SELECT t2 . a , ( SELECT MIN ( c ) FROM cte AS cte2 WHERE t2 . d = cte2 . b ) FROM t2 LEFT JOIN cte AS cte1 ON t2 . a = cte1 . a LEFT JOIN t2 AS tx ON tx . e = cte1 . c ; + ------+------------------------------------------------------+ | a | ( select min ( c ) from cte as cte2 where t2 . d = cte2 . b ) | + ------+------------------------------------------------------+ | 1 | 60 | | 1 | 60 | | 1 | 60 | | 2 | 60 | | 3 | 60 | + ------+------------------------------------------------------+ 5 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/with-cte/#constraints","text":"MatrixOne doesn't support recursive CTE yet.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/full-join/","text":"FULL JOIN Description The FULL JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records. note FULL OUTER JOIN and FULL JOIN are the same. Syntax > SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name=table2.column_name; Examples > drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 full join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"FULL JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/full-join/#full-join","text":"","title":"FULL JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/full-join/#description","text":"The FULL JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records. note FULL OUTER JOIN and FULL JOIN are the same.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/full-join/#syntax","text":"> SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name=table2.column_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/full-join/#examples","text":"> drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 full join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/inner-join/","text":"INNER JOIN Description The INNER JOIN keyword selects records that have matching values in both tables.(Same as JOIN ) Syntax > SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; Examples > drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"INNER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/inner-join/#inner-join","text":"","title":"INNER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/inner-join/#description","text":"The INNER JOIN keyword selects records that have matching values in both tables.(Same as JOIN )","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/inner-join/#syntax","text":"> SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/inner-join/#examples","text":"> drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/left-join/","text":"LEFT JOIN Description The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match. note In some databases LEFT JOIN is called LEFT OUTER JOIN . Syntax > SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name=table2.column_name; Examples > drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NULL | NULL | 0 | + ----------+--------------------+------+","title":"LEFT JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/left-join/#left-join","text":"","title":"LEFT JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/left-join/#description","text":"The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match. note In some databases LEFT JOIN is called LEFT OUTER JOIN .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/left-join/#syntax","text":"> SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name=table2.column_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/left-join/#examples","text":"> drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 left join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | | NULL | NULL | 0 | + ----------+--------------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/natural-join/","text":"NATURAL JOIN Description The NATURAL JOIN of two tables is defined to be semantically equivalent to an INNER JOIN or a LEFT JOIN with a USING clause that names all columns that exist in both tables. Syntax > SELECT table_column1, table_column2... FROM table_name1 NATURAL JOIN table_name2; Examples > create table t1 ( id int , desc1 varchar ( 50 ), desc2 varchar ( 50 )); > create table t2 ( id int , desc3 varchar ( 50 ), desc4 varchar ( 50 )); > INSERT INTO t1 ( id , desc1 , desc2 ) VALUES ( 100 , 'desc11' , 'desc12' ),( 101 , 'desc21' , 'desc22' ),( 102 , 'desc31' , 'desc32' ); > INSERT INTO t2 ( id , desc3 , desc4 ) VALUES ( 101 , 'desc41' , 'desc42' ),( 103 , 'desc51' , 'desc52' ),( 105 , 'desc61' , 'desc62' ); > SELECT t1 . id , t2 . id , desc1 , desc2 , desc3 , desc4 FROM t1 NATURAL JOIN t2 ; + ------+------+--------+--------+--------+--------+ | id | id | desc1 | desc2 | desc3 | desc4 | + ------+------+--------+--------+--------+--------+ | 101 | 101 | desc21 | desc22 | desc41 | desc42 | + ------+------+--------+--------+--------+--------+ 1 row in set ( 0 . 00 sec )","title":"NATURAL JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/natural-join/#natural-join","text":"","title":"NATURAL JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/natural-join/#description","text":"The NATURAL JOIN of two tables is defined to be semantically equivalent to an INNER JOIN or a LEFT JOIN with a USING clause that names all columns that exist in both tables.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/natural-join/#syntax","text":"> SELECT table_column1, table_column2... FROM table_name1 NATURAL JOIN table_name2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/natural-join/#examples","text":"> create table t1 ( id int , desc1 varchar ( 50 ), desc2 varchar ( 50 )); > create table t2 ( id int , desc3 varchar ( 50 ), desc4 varchar ( 50 )); > INSERT INTO t1 ( id , desc1 , desc2 ) VALUES ( 100 , 'desc11' , 'desc12' ),( 101 , 'desc21' , 'desc22' ),( 102 , 'desc31' , 'desc32' ); > INSERT INTO t2 ( id , desc3 , desc4 ) VALUES ( 101 , 'desc41' , 'desc42' ),( 103 , 'desc51' , 'desc52' ),( 105 , 'desc61' , 'desc62' ); > SELECT t1 . id , t2 . id , desc1 , desc2 , desc3 , desc4 FROM t1 NATURAL JOIN t2 ; + ------+------+--------+--------+--------+--------+ | id | id | desc1 | desc2 | desc3 | desc4 | + ------+------+--------+--------+--------+--------+ | 101 | 101 | desc21 | desc22 | desc41 | desc42 | + ------+------+--------+--------+--------+--------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/outer-join/","text":"OUTER JOIN Description When performing an INNER JOIN , rows from either table that are unmatched in the other table are not returned. In an OUTER JOIN , unmatched rows in one or both tables can be returned. There are a few types of outer joins: LEFT JOIN returns only unmatched rows from the left table. For more information, see LEFT JOIN . RIGHT JOIN returns only unmatched rows from the right table.For more information, see RIGHT JOIN . FULL OUTER JOIN returns unmatched rows from both tables.For more information, see FULL JOIN . Examples create table t1 ( a1 int , a2 char ( 3 )); insert into t1 values ( 10 , 'aaa' ), ( 10 , null ), ( 10 , 'bbb' ), ( 20 , 'zzz' ); create table t2 ( a1 char ( 3 ), a2 int , a3 real ); insert into t2 values ( 'AAA' , 10 , 0 . 5 ); insert into t2 values ( 'BBB' , 20 , 1 . 0 ); select t1 . a1 , t1 . a2 , t2 . a1 , t2 . a2 from t1 left outer join t2 on t1 . a1 = 10 ; + ------+------+------+------+ | a1 | a2 | a1 | a2 | + ------+------+------+------+ | 10 | aaa | AAA | 10 | | 10 | aaa | BBB | 20 | | 10 | NULL | AAA | 10 | | 10 | NULL | BBB | 20 | | 10 | bbb | AAA | 10 | | 10 | bbb | BBB | 20 | | 20 | zzz | NULL | NULL | + ------+------+------+------+","title":"OUTER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/outer-join/#outer-join","text":"","title":"OUTER JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/outer-join/#description","text":"When performing an INNER JOIN , rows from either table that are unmatched in the other table are not returned. In an OUTER JOIN , unmatched rows in one or both tables can be returned. There are a few types of outer joins: LEFT JOIN returns only unmatched rows from the left table. For more information, see LEFT JOIN . RIGHT JOIN returns only unmatched rows from the right table.For more information, see RIGHT JOIN . FULL OUTER JOIN returns unmatched rows from both tables.For more information, see FULL JOIN .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/outer-join/#examples","text":"create table t1 ( a1 int , a2 char ( 3 )); insert into t1 values ( 10 , 'aaa' ), ( 10 , null ), ( 10 , 'bbb' ), ( 20 , 'zzz' ); create table t2 ( a1 char ( 3 ), a2 int , a3 real ); insert into t2 values ( 'AAA' , 10 , 0 . 5 ); insert into t2 values ( 'BBB' , 20 , 1 . 0 ); select t1 . a1 , t1 . a2 , t2 . a1 , t2 . a2 from t1 left outer join t2 on t1 . a1 = 10 ; + ------+------+------+------+ | a1 | a2 | a1 | a2 | + ------+------+------+------+ | 10 | aaa | AAA | 10 | | 10 | aaa | BBB | 20 | | 10 | NULL | AAA | 10 | | 10 | NULL | BBB | 20 | | 10 | bbb | AAA | 10 | | 10 | bbb | BBB | 20 | | 20 | zzz | NULL | NULL | + ------+------+------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/right-join/","text":"RIGHT JOIN Description The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is NULL records from the left side, if there is no match. note In some databases RIGHT JOIN is called RIGHT OUTER JOIN . Syntax > SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name=table2.column_name; Examples > drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 right join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"RIGHT JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/right-join/#right-join","text":"","title":"RIGHT JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/right-join/#description","text":"The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). The result is NULL records from the left side, if there is no match. note In some databases RIGHT JOIN is called RIGHT OUTER JOIN .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/right-join/#syntax","text":"> SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name=table2.column_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/join/right-join/#examples","text":"> drop table if exists t1 , t2 , t3 ; > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select city , libname1 , count ( libname1 ) as a from t3 right join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/operator-precedence/","text":"Operator Precedence Operator precedences are shown in the following list, from highest precedence to the lowest. Operators that are shown together on a line have the same precedence. From highest precedence to the lowest Operators 1 INTERVAL 2 BINARY, COLLATE 3 ! 4 - (unary minus), ~ (unary bit inversion) 5 ^ 6 *, /, DIV, %, MOD 7 -, + 8 <<, >> 9 & 10 | 11 = (comparison), <=>, >=, >, <=, <, <>, !=, IS, LIKE, , IN, MEMBER OF 12 BETWEEN, CASE, WHEN, THEN, ELSE 13 NOT 14 AND, && 15 XOR 16 OR, || 17 = (assignment) The precedence of = depends on whether it is used as a comparison operator (=) or as an assignment operator (=). When used as a comparison operator, it has the same precedence as , >=, >, <=, <, <>, !=, IS, LIKE, and IN(). For operators that occur at the same precedence level within an expression, evaluation proceeds left to right, with the exception that assignments evaluate right to left.","title":"OPERATORS Precedence"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/operator-precedence/#operator-precedence","text":"Operator precedences are shown in the following list, from highest precedence to the lowest. Operators that are shown together on a line have the same precedence. From highest precedence to the lowest Operators 1 INTERVAL 2 BINARY, COLLATE 3 ! 4 - (unary minus), ~ (unary bit inversion) 5 ^ 6 *, /, DIV, %, MOD 7 -, + 8 <<, >> 9 & 10 | 11 = (comparison), <=>, >=, >, <=, <, <>, !=, IS, LIKE, , IN, MEMBER OF 12 BETWEEN, CASE, WHEN, THEN, ELSE 13 NOT 14 AND, && 15 XOR 16 OR, || 17 = (assignment) The precedence of = depends on whether it is used as a comparison operator (=) or as an assignment operator (=). When used as a comparison operator, it has the same precedence as , >=, >, <=, <, <>, !=, IS, LIKE, and IN(). For operators that occur at the same precedence level within an expression, evaluation proceeds left to right, with the exception that assignments evaluate right to left.","title":"Operator Precedence"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bit-functions-and-operators-overview/","text":"Bit Functions and Operators Name Description & Bitwise AND >> Right shift << Left shift ^ Bitwise XOR [ ](bitwise-or.md) ~ Bitwise inversion Bit functions and operators required BIGINT (64-bit integer) arguments and returned BIGINT values, so they had a maximum range of 64 bits. Non-BIGINT arguments were converted to BIGINT prior to performing the operation and truncation could occur. Bit functions and operators permit binary string type arguments (BINARY, VARBINARY, and the BLOB types) and return a value of like type, which enables them to take arguments and produce return values larger than 64 bits. Nonbinary string arguments are converted to BIGINT and processed as such, as before.","title":"Bit Functions and Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bit-functions-and-operators-overview/#bit-functions-and-operators","text":"Name Description & Bitwise AND >> Right shift << Left shift ^ Bitwise XOR [ ](bitwise-or.md) ~ Bitwise inversion Bit functions and operators required BIGINT (64-bit integer) arguments and returned BIGINT values, so they had a maximum range of 64 bits. Non-BIGINT arguments were converted to BIGINT prior to performing the operation and truncation could occur. Bit functions and operators permit binary string type arguments (BINARY, VARBINARY, and the BLOB types) and return a value of like type, which enables them to take arguments and produce return values larger than 64 bits. Nonbinary string arguments are converted to BIGINT and processed as such, as before.","title":"Bit Functions and Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-and/","text":"& Description Bitwise AND operator returns an unsigned 64-bit integer. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer. Syntax > SELECT value1 & value2; Examples > SELECT 29 & 15 ; + ---------+ | 29 & 15 | + ---------+ | 13 | + ---------+ 1 row in set ( 0 . 06 sec ) > CREATE TABLE bitwise ( a_int_value INT NOT NULL , b_int_value INT NOT NULL ); > INSERT bitwise VALUES ( 170 , 75 ); > SELECT a_int_value & b_int_value FROM bitwise ; + ---------------------------+ | a_int_value & b_int_value | + ---------------------------+ | 10 | + ---------------------------+ 1 row in set ( 0 . 02 sec )","title":"&"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-and/#_1","text":"","title":"&amp;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-and/#description","text":"Bitwise AND operator returns an unsigned 64-bit integer. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-and/#syntax","text":"> SELECT value1 & value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-and/#examples","text":"> SELECT 29 & 15 ; + ---------+ | 29 & 15 | + ---------+ | 13 | + ---------+ 1 row in set ( 0 . 06 sec ) > CREATE TABLE bitwise ( a_int_value INT NOT NULL , b_int_value INT NOT NULL ); > INSERT bitwise VALUES ( 170 , 75 ); > SELECT a_int_value & b_int_value FROM bitwise ; + ---------------------------+ | a_int_value & b_int_value | + ---------------------------+ | 10 | + ---------------------------+ 1 row in set ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-inversion/","text":"~ Description Invert all bits. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer. Syntax > SELECT value1 ~ value2; Examples > select ~- 5 ; + --------+ | ~ ( - 5 ) | + --------+ | 4 | + --------+ 1 row in set ( 0 . 00 sec ) > select ~ null ; + -------+ | ~ null | + -------+ | NULL | + -------+ 1 row in set ( 0 . 00 sec ) > select ~ a , ~ b from t1 ; + ------+----------------------+ | ~ a | ~ b | + ------+----------------------+ | 0 | 18446744073709551614 | | 4 | 18446744073709551610 | + ------+----------------------+ 2 rows in set ( 0 . 00 sec )","title":"~"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-inversion/#_1","text":"","title":"~"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-inversion/#description","text":"Invert all bits. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-inversion/#syntax","text":"> SELECT value1 ~ value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-inversion/#examples","text":"> select ~- 5 ; + --------+ | ~ ( - 5 ) | + --------+ | 4 | + --------+ 1 row in set ( 0 . 00 sec ) > select ~ null ; + -------+ | ~ null | + -------+ | NULL | + -------+ 1 row in set ( 0 . 00 sec ) > select ~ a , ~ b from t1 ; + ------+----------------------+ | ~ a | ~ b | + ------+----------------------+ | 0 | 18446744073709551614 | | 4 | 18446744073709551610 | + ------+----------------------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-or/","text":"| Description Bitwise OR. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer. Syntax > SELECT value1 | value2; Examples > SELECT 29 | 15 ; + ---------+ | 29 | 15 | + ---------+ | 31 | + ---------+ 1 row in set ( 0 . 01 sec ) > > select null | 2 ; + ----------+ | null | 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > select null | 2 ; + ----------+ | null | 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a | 2 , b | 2 from t1 ; + -------+-------+ | a | 2 | b | 2 | + -------+-------+ | - 1 | 3 | | - 5 | 7 | + -------+-------+","title":"|"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-or/#_1","text":"","title":"|"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-or/#description","text":"Bitwise OR. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-or/#syntax","text":"> SELECT value1 | value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-or/#examples","text":"> SELECT 29 | 15 ; + ---------+ | 29 | 15 | + ---------+ | 31 | + ---------+ 1 row in set ( 0 . 01 sec ) > > select null | 2 ; + ----------+ | null | 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > select null | 2 ; + ----------+ | null | 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a | 2 , b | 2 from t1 ; + -------+-------+ | a | 2 | b | 2 | + -------+-------+ | - 1 | 3 | | - 5 | 7 | + -------+-------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-xor/","text":"^ Description Bitwise XOR. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer. Syntax > SELECT value1 ^ value2; Examples > SELECT 1 ^ 1 ; + -------+ | 1 ^ 1 | + -------+ | 0 | + -------+ 1 row in set ( 0 . 00 sec ) > SELECT 1 ^ 0 ; + -------+ | 1 ^ 0 | + -------+ | 1 | + -------+ 1 row in set ( 0 . 01 sec ) > SELECT 11 ^ 3 ; + --------+ | 11 ^ 3 | + --------+ | 8 | + --------+ 1 row in set ( 0 . 01 sec ) > select null ^ 2 ; + ----------+ | null ^ 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a ^ 2 , b ^ 2 from t1 ; + -------+-------+ | a ^ 2 | b ^ 2 | + -------+-------+ | - 3 | 3 | | - 7 | 7 | + -------+-------+ 2 rows in set ( 0 . 01 sec )","title":"^"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-xor/#_1","text":"","title":"^"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-xor/#description","text":"Bitwise XOR. The result type depends on whether the arguments are evaluated as binary strings or numbers: Binary-string evaluation occurs when the arguments have a binary string type, and at least one of them is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to unsigned 64-bit integers as necessary. Binary-string evaluation produces a binary string of the same length as the arguments. If the arguments have unequal lengths, an ER_INVALID_BITWISE_OPERANDS_SIZE error occurs. Numeric evaluation produces an unsigned 64-bit integer.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-xor/#syntax","text":"> SELECT value1 ^ value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/bitwise-xor/#examples","text":"> SELECT 1 ^ 1 ; + -------+ | 1 ^ 1 | + -------+ | 0 | + -------+ 1 row in set ( 0 . 00 sec ) > SELECT 1 ^ 0 ; + -------+ | 1 ^ 0 | + -------+ | 1 | + -------+ 1 row in set ( 0 . 01 sec ) > SELECT 11 ^ 3 ; + --------+ | 11 ^ 3 | + --------+ | 8 | + --------+ 1 row in set ( 0 . 01 sec ) > select null ^ 2 ; + ----------+ | null ^ 2 | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a ^ 2 , b ^ 2 from t1 ; + -------+-------+ | a ^ 2 | b ^ 2 | + -------+-------+ | - 3 | 3 | | - 7 | 7 | + -------+-------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/left-shift/","text":"<< Description Shifts a longlong (BIGINT) number or binary string to the left. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer. Bits shifted off the end of the value are lost without warning, regardless of the argument type. In particular, if the shift count is greater or equal to the number of bits in the bit argument, all bits in the result are 0. Syntax > SELECT value1 << value2; Examples > SELECT 1 << 2 ; + --------+ | 1 << 2 | + --------+ | 4 | + --------+ 1 row in set ( 0 . 01 sec ) > select - 1 << 2 ; + ---------+ | - 1 << 2 | + ---------+ | - 4 | + ---------+ 1 row in set ( 0 . 01 sec ) > select null << 2 ; + -----------+ | null << 2 | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a << 2 , b << 2 from t1 ; + --------+--------+ | a << 2 | b << 2 | + --------+--------+ | - 4 | 4 | | - 20 | 20 | + --------+--------+ 2 rows in set ( 0 . 01 sec )","title":"<<"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/left-shift/#_1","text":"","title":"&lt;&lt;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/left-shift/#description","text":"Shifts a longlong (BIGINT) number or binary string to the left. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer. Bits shifted off the end of the value are lost without warning, regardless of the argument type. In particular, if the shift count is greater or equal to the number of bits in the bit argument, all bits in the result are 0.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/left-shift/#syntax","text":"> SELECT value1 << value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/left-shift/#examples","text":"> SELECT 1 << 2 ; + --------+ | 1 << 2 | + --------+ | 4 | + --------+ 1 row in set ( 0 . 01 sec ) > select - 1 << 2 ; + ---------+ | - 1 << 2 | + ---------+ | - 4 | + ---------+ 1 row in set ( 0 . 01 sec ) > select null << 2 ; + -----------+ | null << 2 | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a << 2 , b << 2 from t1 ; + --------+--------+ | a << 2 | b << 2 | + --------+--------+ | - 4 | 4 | | - 20 | 20 | + --------+--------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/right-shift/","text":">> Description Shifts a longlong (BIGINT) number or binary string to the right. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer. Bits shifted off the end of the value are lost without warning, regardless of the argument type. In particular, if the shift count is greater or equal to the number of bits in the bit argument, all bits in the result are 0. Syntax > SELECT value1 >> value2; Examples > select 1024 >> 2 ; + -----------+ | 1024 >> 2 | + -----------+ | 256 | + -----------+ 1 row in set ( 0 . 01 sec ) > select - 5 >> 2 ; + ---------+ | - 5 >> 2 | + ---------+ | - 2 | + ---------+ 1 row in set ( 0 . 01 sec ) > select null >> 2 ; + -----------+ | null >> 2 | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a >> 2 , b >> 2 from t1 ; + --------+--------+ | a >> 2 | b >> 2 | + --------+--------+ | - 1 | 0 | | - 2 | 1 | + --------+--------+ 2 rows in set ( 0 . 01 sec )","title":">>"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/right-shift/#_1","text":"","title":"&gt;&gt;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/right-shift/#description","text":"Shifts a longlong (BIGINT) number or binary string to the right. The result type depends on whether the bit argument is evaluated as a binary string or number: Binary-string evaluation occurs when the bit argument has a binary string type, and is not a hexadecimal literal, bit literal, or NULL literal. Numeric evaluation occurs otherwise, with argument conversion to an unsigned 64-bit integer as necessary. Binary-string evaluation produces a binary string of the same length as the bit argument. Numeric evaluation produces an unsigned 64-bit integer. Bits shifted off the end of the value are lost without warning, regardless of the argument type. In particular, if the shift count is greater or equal to the number of bits in the bit argument, all bits in the result are 0.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/right-shift/#syntax","text":"> SELECT value1 >> value2;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/0.6-bit-functions-and-operators/right-shift/#examples","text":"> select 1024 >> 2 ; + -----------+ | 1024 >> 2 | + -----------+ | 256 | + -----------+ 1 row in set ( 0 . 01 sec ) > select - 5 >> 2 ; + ---------+ | - 5 >> 2 | + ---------+ | - 2 | + ---------+ 1 row in set ( 0 . 01 sec ) > select null >> 2 ; + -----------+ | null >> 2 | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a int , b int unsigned ); > insert into t1 values ( - 1 , 1 ), ( - 5 , 5 ); > select a >> 2 , b >> 2 from t1 ; + --------+--------+ | a >> 2 | b >> 2 | + --------+--------+ | - 1 | 0 | | - 2 | 1 | + --------+--------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/addition/","text":"+ Description The + operator is used for addition. Syntax > SELECT value1+value2; > SELECT column1+column2... FROM table_name; Examples > select 1123 . 2333 + 1233 . 3331 ; + -----------------------+ | 1123 . 2333 + 1233 . 3331 | + -----------------------+ | 2356 . 5664 | + -----------------------+ 1 row in set ( 0 . 01 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 + 5 from t2 ; + --------+ | c1 + 5 | + --------+ | 2 | | 6 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 + c2 from t2 ; + ---------+ | c1 + c2 | + ---------+ | - 1 | | 3 | + ---------+ 2 rows in set ( 0 . 00 sec )","title":"+"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/addition/#_1","text":"","title":"+"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/addition/#description","text":"The + operator is used for addition.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/addition/#syntax","text":"> SELECT value1+value2; > SELECT column1+column2... FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/addition/#examples","text":"> select 1123 . 2333 + 1233 . 3331 ; + -----------------------+ | 1123 . 2333 + 1233 . 3331 | + -----------------------+ | 2356 . 5664 | + -----------------------+ 1 row in set ( 0 . 01 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 + 5 from t2 ; + --------+ | c1 + 5 | + --------+ | 2 | | 6 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 + c2 from t2 ; + ---------+ | c1 + c2 | + ---------+ | - 1 | | 3 | + ---------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/arithmetic-operators-overview/","text":"Arithmetic Operators Overview Name Description %,MOD Modulo operator * Multiplication operator + Addition operator - Minus operator - Change the sign of the argument / Division operator DIV Integer division The usual arithmetic operators are available. The result is determined according to the following rules: In the case of - , + , and * , the result is calculated with BIGINT (64-bit) precision if both operands are integers. If both operands are integers and any of them are unsigned, the result is an unsigned integer. If any of the operands of a + , - , / , * , % is a real or string value, the precision of the result is the precision of the operand with the maximum precision. In division performed with / , the scale of the result when using two exact-value operands is the scale of the first operand plus the value of the div_precision_increment system variable. For example, the result of the expression 5.05 / 0.014 has a scale of 13 decimal places (360.7142857142857). These rules are applied for each operation, such that nested calculations imply the precision of each component. Hence, (14620 / 9432456) / (24250 / 9432456), resolves first to (0.0014) / (0.0026), with the final result having 16 decimal places (0.6028865979381443). Constraints Arithmetic operators only apply to numbers. To ensure that components and subcomponents of a calculation use the appropriate level of precision. See Cast Functions and Operators .","title":"Arithmetic Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/arithmetic-operators-overview/#arithmetic-operators-overview","text":"Name Description %,MOD Modulo operator * Multiplication operator + Addition operator - Minus operator - Change the sign of the argument / Division operator DIV Integer division The usual arithmetic operators are available. The result is determined according to the following rules: In the case of - , + , and * , the result is calculated with BIGINT (64-bit) precision if both operands are integers. If both operands are integers and any of them are unsigned, the result is an unsigned integer. If any of the operands of a + , - , / , * , % is a real or string value, the precision of the result is the precision of the operand with the maximum precision. In division performed with / , the scale of the result when using two exact-value operands is the scale of the first operand plus the value of the div_precision_increment system variable. For example, the result of the expression 5.05 / 0.014 has a scale of 13 decimal places (360.7142857142857). These rules are applied for each operation, such that nested calculations imply the precision of each component. Hence, (14620 / 9432456) / (24250 / 9432456), resolves first to (0.0014) / (0.0026), with the final result having 16 decimal places (0.6028865979381443).","title":"Arithmetic Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/arithmetic-operators-overview/#constraints","text":"Arithmetic operators only apply to numbers. To ensure that components and subcomponents of a calculation use the appropriate level of precision. See Cast Functions and Operators .","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/div/","text":"DIV Description The DIV operator is used for integer division. Discards from the division result any fractional part to the right of the decimal point. If either operand has a non-integer type, the operands are converted to DECIMAL and divided using DECIMAL arithmetic before converting the result to BIGINT . If the result exceeds BIGINT range, an error occurs. Syntax > SELECT value1 DIV value2; > SELECT column1 DIV column2... FROM table_name; Examples > SELECT 5 DIV 2 , - 5 DIV 2 , 5 DIV - 2 , - 5 DIV - 2 ; + ---------+----------+----------+-----------+ | 5 div 2 | - 5 div 2 | 5 div - 2 | - 5 div - 2 | + ---------+----------+----------+-----------+ | 2 | - 2 | - 2 | 2 | + ---------+----------+----------+-----------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 DIV 3 from t2 ; + ----------+ | c1 div 3 | + ----------+ | - 1 | | 0 | + ----------+ 2 rows in set ( 0 . 00 sec ) > select c1 DIV c2 from t2 ; + -----------+ | c1 div c2 | + -----------+ | - 1 | | 0 | + -----------+ 2 rows in set ( 0 . 00 sec )","title":"DIV"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/div/#div","text":"","title":"DIV"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/div/#description","text":"The DIV operator is used for integer division. Discards from the division result any fractional part to the right of the decimal point. If either operand has a non-integer type, the operands are converted to DECIMAL and divided using DECIMAL arithmetic before converting the result to BIGINT . If the result exceeds BIGINT range, an error occurs.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/div/#syntax","text":"> SELECT value1 DIV value2; > SELECT column1 DIV column2... FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/div/#examples","text":"> SELECT 5 DIV 2 , - 5 DIV 2 , 5 DIV - 2 , - 5 DIV - 2 ; + ---------+----------+----------+-----------+ | 5 div 2 | - 5 div 2 | 5 div - 2 | - 5 div - 2 | + ---------+----------+----------+-----------+ | 2 | - 2 | - 2 | 2 | + ---------+----------+----------+-----------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 DIV 3 from t2 ; + ----------+ | c1 div 3 | + ----------+ | - 1 | | 0 | + ----------+ 2 rows in set ( 0 . 00 sec ) > select c1 DIV c2 from t2 ; + -----------+ | c1 div c2 | + -----------+ | - 1 | | 0 | + -----------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/division/","text":"/ Description The / operator is used for division. Syntax > SELECT value1/value2; > SELECT column1/column2... FROM table_name; Division by zero produces a error result. Examples > select 1123 . 2333 / 1233 . 3331 ; + -----------------------+ | 1123 . 2333 / 1233 . 3331 | + -----------------------+ | 0 . 9107298750029493 | + -----------------------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 / 2 from t2 ; + --------+ | c1 / 2 | + --------+ | - 1 . 5 | | 0 . 5 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 / c2 from t2 ; + ---------+ | c1 / c2 | + ---------+ | - 1 . 5 | | 0 . 5 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"/"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/division/#_1","text":"","title":"/"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/division/#description","text":"The / operator is used for division.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/division/#syntax","text":"> SELECT value1/value2; > SELECT column1/column2... FROM table_name; Division by zero produces a error result.","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/division/#examples","text":"> select 1123 . 2333 / 1233 . 3331 ; + -----------------------+ | 1123 . 2333 / 1233 . 3331 | + -----------------------+ | 0 . 9107298750029493 | + -----------------------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 / 2 from t2 ; + --------+ | c1 / 2 | + --------+ | - 1 . 5 | | 0 . 5 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 / c2 from t2 ; + ---------+ | c1 / c2 | + ---------+ | - 1 . 5 | | 0 . 5 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/minus/","text":"- Description The - operator is used for subtraction. Syntax > SELECT value1-value2; > SELECT column1-column2... FROM table_name; Examples > select 1123 . 2333 - 1233 . 3331 ; + -----------------------+ | 1123 . 2333 - 1233 . 3331 | + -----------------------+ | - 110 . 09979999999996 | + -----------------------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 - 5 from t2 ; + --------+ | c1 - 5 | + --------+ | - 8 | | - 4 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 - c2 from t2 ; + ---------+ | c1 - c2 | + ---------+ | - 5 | | - 1 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"-"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/minus/#-","text":"","title":"-"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/minus/#description","text":"The - operator is used for subtraction.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/minus/#syntax","text":"> SELECT value1-value2; > SELECT column1-column2... FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/minus/#examples","text":"> select 1123 . 2333 - 1233 . 3331 ; + -----------------------+ | 1123 . 2333 - 1233 . 3331 | + -----------------------+ | - 110 . 09979999999996 | + -----------------------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 - 5 from t2 ; + --------+ | c1 - 5 | + --------+ | - 8 | | - 4 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 - c2 from t2 ; + ---------+ | c1 - c2 | + ---------+ | - 5 | | - 1 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/mod/","text":"%,MOD Description The %,MOD operator is used for modulo operation. Returns the remainder of N divided by M. For more information. Syntax > SELECT N % M, N MOD M; Examples > select 12 mod 5 ; + --------+ | 12 % 5 | + --------+ | 2 | + --------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 mod 2 from t2 ; + --------+ | c1 % 2 | + --------+ | - 1 | | 1 | + --------+ 2 rows in set ( 0 . 01 sec ) > select c1 mod c2 from t2 ; + ---------+ | c1 % c2 | + ---------+ | - 1 | | 1 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"%,MOD"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/mod/#mod","text":"","title":"%,MOD"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/mod/#description","text":"The %,MOD operator is used for modulo operation. Returns the remainder of N divided by M. For more information.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/mod/#syntax","text":"> SELECT N % M, N MOD M;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/mod/#examples","text":"> select 12 mod 5 ; + --------+ | 12 % 5 | + --------+ | 2 | + --------+ 1 row in set ( 0 . 00 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 mod 2 from t2 ; + --------+ | c1 % 2 | + --------+ | - 1 | | 1 | + --------+ 2 rows in set ( 0 . 01 sec ) > select c1 mod c2 from t2 ; + ---------+ | c1 % c2 | + ---------+ | - 1 | | 1 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/multiplication/","text":"* Description The * operator is used for multiplication. Syntax > SELECT value1*value2; > SELECT column1*column2... FROM table_name; Examples > select 1123 . 2333 * 1233 . 3331 ; + -----------------------+ | 1123 . 2333 * 1233 . 3331 | + -----------------------+ | 1385320 . 8079122303 | + -----------------------+ 1 row in set ( 0 . 01 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 * 2 from t2 ; + --------+ | c1 * 2 | + --------+ | - 6 | | 2 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 * c2 from t2 ; + ---------+ | c1 * c2 | + ---------+ | - 6 | | 2 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"*"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/multiplication/#_1","text":"","title":"*"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/multiplication/#description","text":"The * operator is used for multiplication.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/multiplication/#syntax","text":"> SELECT value1*value2; > SELECT column1*column2... FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/multiplication/#examples","text":"> select 1123 . 2333 * 1233 . 3331 ; + -----------------------+ | 1123 . 2333 * 1233 . 3331 | + -----------------------+ | 1385320 . 8079122303 | + -----------------------+ 1 row in set ( 0 . 01 sec ) > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select c1 * 2 from t2 ; + --------+ | c1 * 2 | + --------+ | - 6 | | 2 | + --------+ 2 rows in set ( 0 . 00 sec ) > select c1 * c2 from t2 ; + ---------+ | c1 * c2 | + ---------+ | - 6 | | 2 | + ---------+ 2 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/unary-minus/","text":"- Description Unary minus. This operator changes the sign of the operand. Syntax > SELECT -column1, -column2, ... FROM table_name; Examples select - 2 ; + ------+ | - 2 | + ------+ | - 2 | + ------+ > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select - c1 from t2 ; + ------+ | - c1 | + ------+ | 3 | | - 1 | + ------+ 2 rows in set ( 0 . 00 sec )","title":"-"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/unary-minus/#-","text":"","title":"-"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/unary-minus/#description","text":"Unary minus. This operator changes the sign of the operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/unary-minus/#syntax","text":"> SELECT -column1, -column2, ... FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/arithmetic-operators/unary-minus/#examples","text":"select - 2 ; + ------+ | - 2 | + ------+ | - 2 | + ------+ > create table t2 ( c1 int , c2 int ); > insert into t2 values ( - 3 , 2 ); > insert into t2 values ( 1 , 2 ); > select - c1 from t2 ; + ------+ | - c1 | + ------+ | 3 | | - 1 | + ------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/assignment-operators-overview/","text":"Assignment Operators Overview Name Description = Equal operator","title":"Assignment Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/assignment-operators-overview/#assignment-operators-overview","text":"Name Description = Equal operator","title":"Assignment Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/equal/","text":"= Description This = operator is used to perform value assignments in the below cases: Within a SET statement, = is treated as an assignment operator that causes the user variable on the left hand side of the operator to take on the value to its right. The value on the right hand side may be a literal value, another variable storing a value, or any legal expression that yields a scalar value, including the result of a query (provided that this value is a scalar value). You can perform multiple assignments in the same SET statement. In the SET clause of an UPDATE statement, = also acts as an assignment operator. You can make multiple assignments in the same SET clause of an UPDATE statement. In any other context, = is treated as a comparison operator. Syntax > SELECT column1, column2, ... FROM table_name WHERE columnN = value1; Examples > create table t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+ 2 rows in set ( 0 . 00 sec )","title":"="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/equal/#_1","text":"","title":"="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/equal/#description","text":"This = operator is used to perform value assignments in the below cases: Within a SET statement, = is treated as an assignment operator that causes the user variable on the left hand side of the operator to take on the value to its right. The value on the right hand side may be a literal value, another variable storing a value, or any legal expression that yields a scalar value, including the result of a query (provided that this value is a scalar value). You can perform multiple assignments in the same SET statement. In the SET clause of an UPDATE statement, = also acts as an assignment operator. You can make multiple assignments in the same SET clause of an UPDATE statement. In any other context, = is treated as a comparison operator.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/equal/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE columnN = value1;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/assignment-operators/equal/#examples","text":"> create table t1 ( a bigint ( 3 ), b bigint ( 5 ) primary key ); > insert INTO t1 VALUES ( 1 , 1 ),( 1 , 2 ); > update t1 set a = 2 where a = 1 limit 1 ; > select * from t1 ; + ------+------+ | a | b | + ------+------+ | 2 | 1 | | 1 | 2 | + ------+------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/","text":"BINARY Description The BINARY() function converts a value to a binary string. Syntax > BINARY value Parameter Values Parameter Description value Required. The value to convert Examples >","title":"**BINARY**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/#binary","text":"","title":"BINARY"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/#description","text":"The BINARY() function converts a value to a binary string.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/#syntax","text":"> BINARY value","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/#parameter-values","text":"Parameter Description value Required. The value to convert","title":"Parameter Values"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/binary/#examples","text":">","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast-functions-and-operators-overview/","text":"Cast Functions and Operators Name Description CAST() Cast a value as a certain type CONVERT() Cast a value as a certain type","title":"Cast Functions and Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast-functions-and-operators-overview/#cast-functions-and-operators","text":"Name Description CAST() Cast a value as a certain type CONVERT() Cast a value as a certain type","title":"Cast Functions and Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/","text":"CAST Description The CAST() function converts a value (of any type) into the specified datatype. Syntax > CAST(value AS datatype) Parameter Values Parameter Description value Required. The value to convert datatype Required. The datatype to convert to Currently, cast can support following conversion: Conversion between numeric types, mainly including SIGNED, UNSIGNED, FLOAT, and DOUBLE type. Numeric types to character CHAR type. Numeric character types to numerical types(negative into SIGNED). A detailed data type conversion rule can be refered to Data Conversion Rule . Examples > drop table if exists t1 ; > CREATE TABLE t1 ( a int , b float , c char ( 1 ), d varchar ( 15 )); > INSERT INTO t1 VALUES ( 1 , 1 . 5 , '1' , '-2' ); > SELECT CAST ( a AS FLOAT ) a_cast , CAST ( b AS UNSIGNED ) b_cast , CAST ( c AS SIGNED ) c_cast , CAST ( d AS SIGNED ) d_cast from t1 ; + --------+--------+--------+--------+ | a_cast | b_cast | c_cast | d_cast | + --------+--------+--------+--------+ | 1 . 0000 | 1 | 1 | - 2 | + --------+--------+--------+--------+ > SELECT CAST ( a AS CHAR ) a_cast , CAST ( b AS CHAR ) b_cast , CAST ( c AS DOUBLE ) c_cast , CAST ( d AS FLOAT ) d_cast from t1 ; + --------+--------+--------+---------+ | a_cast | b_cast | c_cast | d_cast | + --------+--------+--------+---------+ | 1 | 1 . 5 | 1 . 0000 | - 2 . 0000 | + --------+--------+--------+---------+ Constraints Non-numeric character types cannot be converted to numeric types. Numeric and character types with formats of Data cannot be converted to Date. Date and Datetime types cannot be converted to character types. Date and Datetime cannot be converted to each other.","title":"CAST"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#cast","text":"","title":"CAST"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#description","text":"The CAST() function converts a value (of any type) into the specified datatype.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#syntax","text":"> CAST(value AS datatype)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#parameter-values","text":"Parameter Description value Required. The value to convert datatype Required. The datatype to convert to Currently, cast can support following conversion: Conversion between numeric types, mainly including SIGNED, UNSIGNED, FLOAT, and DOUBLE type. Numeric types to character CHAR type. Numeric character types to numerical types(negative into SIGNED). A detailed data type conversion rule can be refered to Data Conversion Rule .","title":"Parameter Values"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#examples","text":"> drop table if exists t1 ; > CREATE TABLE t1 ( a int , b float , c char ( 1 ), d varchar ( 15 )); > INSERT INTO t1 VALUES ( 1 , 1 . 5 , '1' , '-2' ); > SELECT CAST ( a AS FLOAT ) a_cast , CAST ( b AS UNSIGNED ) b_cast , CAST ( c AS SIGNED ) c_cast , CAST ( d AS SIGNED ) d_cast from t1 ; + --------+--------+--------+--------+ | a_cast | b_cast | c_cast | d_cast | + --------+--------+--------+--------+ | 1 . 0000 | 1 | 1 | - 2 | + --------+--------+--------+--------+ > SELECT CAST ( a AS CHAR ) a_cast , CAST ( b AS CHAR ) b_cast , CAST ( c AS DOUBLE ) c_cast , CAST ( d AS FLOAT ) d_cast from t1 ; + --------+--------+--------+---------+ | a_cast | b_cast | c_cast | d_cast | + --------+--------+--------+---------+ | 1 | 1 . 5 | 1 . 0000 | - 2 . 0000 | + --------+--------+--------+---------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/cast/#constraints","text":"Non-numeric character types cannot be converted to numeric types. Numeric and character types with formats of Data cannot be converted to Date. Date and Datetime types cannot be converted to character types. Date and Datetime cannot be converted to each other.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/","text":"CONVERT Description The CONVERT() function converts a value into the specified datatype or character set. Syntax > CONVERT(value, type) Or: > CONVERT(value USING charset) Parameter Values Parameter Description value Required. The value to convert. datatype Required. The datatype to convert to. charset Required. The character set to convert to. Currently, convert can support following conversion: Conversion between numeric types, mainly including SIGNED, UNSIGNED, FLOAT, and DOUBLE type. Numeric types to character CHAR type. Numeric character types to numerical types(negative into SIGNED). Examples > select convert ( 150 , char ); + -------------------+ | cast ( 150 as char ) | + -------------------+ | 150 | + -------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE t1 ( a tinyint ); > INSERT INTO t1 VALUES ( 127 ); > SELECT 1 FROM -> ( SELECT CONVERT ( t2 . a USING UTF8 ) FROM t1 , t1 t2 LIMIT 1 ) AS s LIMIT 1 ; + ------+ | 1 | + ------+ | 1 | + ------+ 1 row in set ( 0 . 00 sec ) Constraints Non-numeric character types cannot be converted to numeric types. Numeric and character types with formats of Data cannot be converted to Date. Date and Datetime types cannot be converted to character types. Date and Datetime cannot be converted to each other.","title":"CONVERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#convert","text":"","title":"CONVERT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#description","text":"The CONVERT() function converts a value into the specified datatype or character set.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#syntax","text":"> CONVERT(value, type) Or: > CONVERT(value USING charset)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#parameter-values","text":"Parameter Description value Required. The value to convert. datatype Required. The datatype to convert to. charset Required. The character set to convert to. Currently, convert can support following conversion: Conversion between numeric types, mainly including SIGNED, UNSIGNED, FLOAT, and DOUBLE type. Numeric types to character CHAR type. Numeric character types to numerical types(negative into SIGNED).","title":"Parameter Values"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#examples","text":"> select convert ( 150 , char ); + -------------------+ | cast ( 150 as char ) | + -------------------+ | 150 | + -------------------+ 1 row in set ( 0 . 01 sec ) > CREATE TABLE t1 ( a tinyint ); > INSERT INTO t1 VALUES ( 127 ); > SELECT 1 FROM -> ( SELECT CONVERT ( t2 . a USING UTF8 ) FROM t1 , t1 t2 LIMIT 1 ) AS s LIMIT 1 ; + ------+ | 1 | + ------+ | 1 | + ------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/cast-functions-and-operators/convert/#constraints","text":"Non-numeric character types cannot be converted to numeric types. Numeric and character types with formats of Data cannot be converted to Date. Date and Datetime types cannot be converted to character types. Date and Datetime cannot be converted to each other.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/","text":"COALESCE() Description The COALESCE() function returns the first non-null value in a list. Syntax > COALESCE(val1, val2, ...., val_n) Arguments Arguments Description val1, val2, val_n Required. The values to test Examples Example: Calculate > SELECT COALESCE ( 1 ) + COALESCE ( 1 ); + ---------------------------+ | coalesce ( 1 ) + coalesce ( 1 ) | + ---------------------------+ | 2 | + ---------------------------+ Example: Comparison > drop table if exists t2 ; > create table t2 ( a float , b datetime ); > insert into t2 values ( 12 . 345 , '2022-02-20 10:10:10.999999' ); > insert into t2 values ( 3 . 45646 , NULL ); > insert into t2 values ( NULL , '2023-04-03 22:10:29.999999' ); > insert into t2 values ( NULL , NULL ); > select * from t2 ; + ---------+---------------------+ | a | b | + ---------+---------------------+ | 12 . 345 | 2022 - 02 - 20 10 : 10 : 11 | | 3 . 45646 | NULL | | NULL | 2023 - 04 - 03 22 : 10 : 30 | | NULL | NULL | + ---------+---------------------+ > select coalesce ( a , 1 . 0 ) from t2 ; + --------------------+ | coalesce ( a , 1 . 0 ) | + --------------------+ | 12 . 345000267028809 | | 3 . 4564599990844727 | | 1 | | 1 | + --------------------+ > select coalesce ( a , 1 ) from t2 ; + --------------------+ | coalesce ( a , 1 ) | + --------------------+ | 12 . 345000267028809 | | 3 . 4564599990844727 | | 1 | | 1 | + --------------------+ > select coalesce ( b , 2022 - 01 - 01 ) from t2 ; + ---------------------------+ | coalesce ( b , 2022 - 1 - 1 ) | + ---------------------------+ | 2022 - 02 - 20 10 : 10 : 11 | | | | 2023 - 04 - 03 22 : 10 : 30 | | | + ---------------------------+ Example: ORDER BY Clause, DATE TYPE > CREATE TABLE t1 ( a INTEGER , b varchar ( 255 ) ); > INSERT INTO t1 VALUES ( 1 , 'z' ); > INSERT INTO t1 VALUES ( 2 , 'y' ); > INSERT INTO t1 VALUES ( 3 , 'x' ); > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( MIN ( b ), 'a' ); + -------+ | min_b | + -------+ | x | | y | | z | + -------+ > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( min_b , 'a' ); + -------+ | min_b | + -------+ | x | | y | | z | + -------+ > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( MIN ( b ), 'a' ) DESC ; + -------+ | min_b | + -------+ | z | | y | | x | + -------+ Example: Case When Clause > select if ( 1 , cast ( 1111111111111111111 as unsigned ), 1 ) i , case when 1 then cast ( 1111111111111111111 as unsigned ) else 1 end c , coalesce ( cast ( 1111111111111111111 as unsigned ), 1 ) co ; + ---------------------+---------------------+---------------------+ | i | c | co | + ---------------------+---------------------+---------------------+ | 1111111111111111111 | 1111111111111111111 | 1111111111111111111 | + ---------------------+---------------------+---------------------+ Example: IN Subquery > CREATE TABLE ot ( col_int_nokey int ( 11 ), col_varchar_nokey varchar ( 1 )); > INSERT INTO ot VALUES ( 1 , 'x' ); > CREATE TABLE it ( col_int_key int ( 11 ), col_varchar_key varchar ( 1 )); > INSERT INTO it VALUES ( NULL , 'x' ), ( NULL , 'f' ); > SELECT col_int_nokey FROM ot WHERE col_varchar_nokey IN ( SELECT col_varchar_key FROM it WHERE coalesce ( col_int_nokey , 1 ) ); + ---------------+ | col_int_nokey | + ---------------+ | 1 | + ---------------+ Example: WHERE > CREATE TABLE ot1 ( a INT ); > CREATE TABLE ot2 ( a INT ); > CREATE TABLE ot3 ( a INT ); > CREATE TABLE it1 ( a INT ); > CREATE TABLE it2 ( a INT ); > CREATE TABLE it3 ( a INT ); > INSERT INTO ot1 VALUES ( 0 ),( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ); > INSERT INTO ot2 VALUES ( 0 ),( 2 ),( 4 ),( 6 ); > INSERT INTO ot3 VALUES ( 0 ),( 3 ),( 6 ); > INSERT INTO it1 VALUES ( 0 ),( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ); > INSERT INTO it2 VALUES ( 0 ),( 2 ),( 4 ),( 6 ); > INSERT INTO it3 VALUES ( 0 ),( 3 ),( 6 ); > SELECT * FROM ot1 LEFT JOIN ot2 ON ot1 . a = ot2 . a WHERE COALESCE ( ot2 . a , 0 ) IN ( SELECT a FROM it3 ); + ------+------+ | a | a | + ------+------+ | 0 | 0 | | 1 | NULL | | 3 | NULL | | 5 | NULL | | 6 | 6 | | 7 | NULL | + ------+------+ Example: HAVING > drop table if exists t1 ; > create table t1 ( a datetime ); > INSERT INTO t1 VALUES ( NULL ), ( '2001-01-01 00:00:00.12' ), ( '2002-01-01 00:00:00.567' ); > select a from t1 group by a having COALESCE ( a ) < \"2002-01-01\" ; + ---------------------+ | a | + ---------------------+ | 2001 - 01 - 01 00 : 00 : 00 | + ---------------------+ Example: ON CONDITION > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a INT , b varchar ( 255 )); > create table t2 ( a INT , b varchar ( 255 )); > insert into t1 values ( 1 , \"\u4f60\u597d\" ), ( 3 , \"\u518d\u89c1\" ); > insert into t2 values ( 2 , \"\u65e5\u671f\u65f6\u95f4\" ), ( 4 , \"\u660e\u5929\" ); > SELECT t1 . a , t2 . a FROM t1 JOIN t2 ON ( length ( COALESCE ( t1 . b )) = length ( COALESCE ( t2 . b ))); + ------+------+ | a | a | + ------+------+ | 1 | 4 | | 3 | 4 | + ------+------+","title":"**COALESCE()**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/#coalesce","text":"","title":"COALESCE()"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/#description","text":"The COALESCE() function returns the first non-null value in a list.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/#syntax","text":"> COALESCE(val1, val2, ...., val_n)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/#arguments","text":"Arguments Description val1, val2, val_n Required. The values to test","title":"Arguments"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/0.6-coalesce/#examples","text":"Example: Calculate > SELECT COALESCE ( 1 ) + COALESCE ( 1 ); + ---------------------------+ | coalesce ( 1 ) + coalesce ( 1 ) | + ---------------------------+ | 2 | + ---------------------------+ Example: Comparison > drop table if exists t2 ; > create table t2 ( a float , b datetime ); > insert into t2 values ( 12 . 345 , '2022-02-20 10:10:10.999999' ); > insert into t2 values ( 3 . 45646 , NULL ); > insert into t2 values ( NULL , '2023-04-03 22:10:29.999999' ); > insert into t2 values ( NULL , NULL ); > select * from t2 ; + ---------+---------------------+ | a | b | + ---------+---------------------+ | 12 . 345 | 2022 - 02 - 20 10 : 10 : 11 | | 3 . 45646 | NULL | | NULL | 2023 - 04 - 03 22 : 10 : 30 | | NULL | NULL | + ---------+---------------------+ > select coalesce ( a , 1 . 0 ) from t2 ; + --------------------+ | coalesce ( a , 1 . 0 ) | + --------------------+ | 12 . 345000267028809 | | 3 . 4564599990844727 | | 1 | | 1 | + --------------------+ > select coalesce ( a , 1 ) from t2 ; + --------------------+ | coalesce ( a , 1 ) | + --------------------+ | 12 . 345000267028809 | | 3 . 4564599990844727 | | 1 | | 1 | + --------------------+ > select coalesce ( b , 2022 - 01 - 01 ) from t2 ; + ---------------------------+ | coalesce ( b , 2022 - 1 - 1 ) | + ---------------------------+ | 2022 - 02 - 20 10 : 10 : 11 | | | | 2023 - 04 - 03 22 : 10 : 30 | | | + ---------------------------+ Example: ORDER BY Clause, DATE TYPE > CREATE TABLE t1 ( a INTEGER , b varchar ( 255 ) ); > INSERT INTO t1 VALUES ( 1 , 'z' ); > INSERT INTO t1 VALUES ( 2 , 'y' ); > INSERT INTO t1 VALUES ( 3 , 'x' ); > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( MIN ( b ), 'a' ); + -------+ | min_b | + -------+ | x | | y | | z | + -------+ > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( min_b , 'a' ); + -------+ | min_b | + -------+ | x | | y | | z | + -------+ > SELECT MIN ( b ) AS min_b FROM t1 GROUP BY a ORDER BY COALESCE ( MIN ( b ), 'a' ) DESC ; + -------+ | min_b | + -------+ | z | | y | | x | + -------+ Example: Case When Clause > select if ( 1 , cast ( 1111111111111111111 as unsigned ), 1 ) i , case when 1 then cast ( 1111111111111111111 as unsigned ) else 1 end c , coalesce ( cast ( 1111111111111111111 as unsigned ), 1 ) co ; + ---------------------+---------------------+---------------------+ | i | c | co | + ---------------------+---------------------+---------------------+ | 1111111111111111111 | 1111111111111111111 | 1111111111111111111 | + ---------------------+---------------------+---------------------+ Example: IN Subquery > CREATE TABLE ot ( col_int_nokey int ( 11 ), col_varchar_nokey varchar ( 1 )); > INSERT INTO ot VALUES ( 1 , 'x' ); > CREATE TABLE it ( col_int_key int ( 11 ), col_varchar_key varchar ( 1 )); > INSERT INTO it VALUES ( NULL , 'x' ), ( NULL , 'f' ); > SELECT col_int_nokey FROM ot WHERE col_varchar_nokey IN ( SELECT col_varchar_key FROM it WHERE coalesce ( col_int_nokey , 1 ) ); + ---------------+ | col_int_nokey | + ---------------+ | 1 | + ---------------+ Example: WHERE > CREATE TABLE ot1 ( a INT ); > CREATE TABLE ot2 ( a INT ); > CREATE TABLE ot3 ( a INT ); > CREATE TABLE it1 ( a INT ); > CREATE TABLE it2 ( a INT ); > CREATE TABLE it3 ( a INT ); > INSERT INTO ot1 VALUES ( 0 ),( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ); > INSERT INTO ot2 VALUES ( 0 ),( 2 ),( 4 ),( 6 ); > INSERT INTO ot3 VALUES ( 0 ),( 3 ),( 6 ); > INSERT INTO it1 VALUES ( 0 ),( 1 ),( 2 ),( 3 ),( 4 ),( 5 ),( 6 ),( 7 ); > INSERT INTO it2 VALUES ( 0 ),( 2 ),( 4 ),( 6 ); > INSERT INTO it3 VALUES ( 0 ),( 3 ),( 6 ); > SELECT * FROM ot1 LEFT JOIN ot2 ON ot1 . a = ot2 . a WHERE COALESCE ( ot2 . a , 0 ) IN ( SELECT a FROM it3 ); + ------+------+ | a | a | + ------+------+ | 0 | 0 | | 1 | NULL | | 3 | NULL | | 5 | NULL | | 6 | 6 | | 7 | NULL | + ------+------+ Example: HAVING > drop table if exists t1 ; > create table t1 ( a datetime ); > INSERT INTO t1 VALUES ( NULL ), ( '2001-01-01 00:00:00.12' ), ( '2002-01-01 00:00:00.567' ); > select a from t1 group by a having COALESCE ( a ) < \"2002-01-01\" ; + ---------------------+ | a | + ---------------------+ | 2001 - 01 - 01 00 : 00 : 00 | + ---------------------+ Example: ON CONDITION > drop table if exists t1 ; > drop table if exists t2 ; > create table t1 ( a INT , b varchar ( 255 )); > create table t2 ( a INT , b varchar ( 255 )); > insert into t1 values ( 1 , \"\u4f60\u597d\" ), ( 3 , \"\u518d\u89c1\" ); > insert into t2 values ( 2 , \"\u65e5\u671f\u65f6\u95f4\" ), ( 4 , \"\u660e\u5929\" ); > SELECT t1 . a , t2 . a FROM t1 JOIN t2 ON ( length ( COALESCE ( t1 . b )) = length ( COALESCE ( t2 . b ))); + ------+------+ | a | a | + ------+------+ | 1 | 4 | | 3 | 4 | + ------+------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/assign-equal/","text":"= Description The = operator returns true only if the left-hand operand is equal to the right-hand operand. Syntax > SELECT x = y; Examples > SELECT 2 = 2 ; + -------+ | 2 = 2 | + -------+ | true | + -------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where userID = spID and userID = score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 3 | 3 | 3 | + --------+------+-------+ 3 rows in set ( 0 . 00 sec )","title":"="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/assign-equal/#_1","text":"","title":"="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/assign-equal/#description","text":"The = operator returns true only if the left-hand operand is equal to the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/assign-equal/#syntax","text":"> SELECT x = y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/assign-equal/#examples","text":"> SELECT 2 = 2 ; + -------+ | 2 = 2 | + -------+ | true | + -------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where userID = spID and userID = score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 3 | 3 | 3 | + --------+------+-------+ 3 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/between/","text":"BETWEEN ... AND ... Description If expr is greater than or equal to min and expr is less than or equal to max, BETWEEN returns true , otherwise it returns false . Syntax > expr BETWEEN min AND max Examples > SELECT 2 BETWEEN 1 AND 3 , 2 BETWEEN 3 and 1 ; + -------------------+-------------------+ | 2 between 1 and 3 | 2 between 3 and 1 | + -------------------+-------------------+ | true | false | + -------------------+-------------------+ 1 row in set ( 0 . 01 sec ) > create table t ( id bigint unsigned , b int ); > insert into t values ( 8894754949779693574 , 1 ); > insert into t values ( 8894754949779693579 , 2 ); > insert into t values ( 17790886498483827171 , 3 ); > select count ( * ) from t where id >= 8894754949779693574 and id = 17790886498483827171 order by 1 asc ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ > select count ( * ) from t where id between 8894754949779693574 and 17790886498483827171 ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ 1 row in set ( 0 . 01 sec )","title":"BETWEEN ... AND ..."},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/between/#between-and","text":"","title":"BETWEEN ... AND ..."},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/between/#description","text":"If expr is greater than or equal to min and expr is less than or equal to max, BETWEEN returns true , otherwise it returns false .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/between/#syntax","text":"> expr BETWEEN min AND max","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/between/#examples","text":"> SELECT 2 BETWEEN 1 AND 3 , 2 BETWEEN 3 and 1 ; + -------------------+-------------------+ | 2 between 1 and 3 | 2 between 3 and 1 | + -------------------+-------------------+ | true | false | + -------------------+-------------------+ 1 row in set ( 0 . 01 sec ) > create table t ( id bigint unsigned , b int ); > insert into t values ( 8894754949779693574 , 1 ); > insert into t values ( 8894754949779693579 , 2 ); > insert into t values ( 17790886498483827171 , 3 ); > select count ( * ) from t where id >= 8894754949779693574 and id = 17790886498483827171 order by 1 asc ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ > select count ( * ) from t where id between 8894754949779693574 and 17790886498483827171 ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/comparison-functions-and-operators-overview/","text":"Comparison Functions and Operators Overview Name Description > Greater than operator >= Greater than or equal operator < Less than operator <>,!= Not equal operator <= Less than or equal operator = Equal operator BETWEEN ... AND ... Whether a value is within a range of values IN() Whether a value is within a set of values IS Test a value against a boolean IS NOT Test a value against a boolean IS NOT NULL NOT NULL value test IS NULL NULL value test LIKE Simple pattern matching NOT BETWEEN ... AND ... Whether a value is not within a range of values NOT LIKE Negation of simple pattern matching Comparison operations result in a value of TRUE , FALSE , or NULL . These operations work for both numbers and strings. Strings are automatically converted to numbers and numbers to strings as necessary. The following relational comparison operators can be used to compare not only scalar operands, but row operands: = > < >= <= <> !=","title":"Comparison Functions and Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/comparison-functions-and-operators-overview/#comparison-functions-and-operators-overview","text":"Name Description > Greater than operator >= Greater than or equal operator < Less than operator <>,!= Not equal operator <= Less than or equal operator = Equal operator BETWEEN ... AND ... Whether a value is within a range of values IN() Whether a value is within a set of values IS Test a value against a boolean IS NOT Test a value against a boolean IS NOT NULL NOT NULL value test IS NULL NULL value test LIKE Simple pattern matching NOT BETWEEN ... AND ... Whether a value is not within a range of values NOT LIKE Negation of simple pattern matching Comparison operations result in a value of TRUE , FALSE , or NULL . These operations work for both numbers and strings. Strings are automatically converted to numbers and numbers to strings as necessary. The following relational comparison operators can be used to compare not only scalar operands, but row operands: = > < >= <= <> !=","title":"Comparison Functions and Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_coalesce/","text":"COALESCE Description The COALESCE() function returns the first non-NULL value in the list, or NULL if there are no non-NULL values. The return type of COALESCE() is the aggregated type of the argument types. Syntax > COALESCE(value,...) Examples ```sql SELECT COALESCE(NULL,1); -> 1 mysql> SELECT COALESCE(NULL,NULL,NULL); -> NULL","title":"**COALESCE**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_coalesce/#coalesce","text":"","title":"COALESCE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_coalesce/#description","text":"The COALESCE() function returns the first non-NULL value in the list, or NULL if there are no non-NULL values. The return type of COALESCE() is the aggregated type of the argument types.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_coalesce/#syntax","text":"> COALESCE(value,...)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_coalesce/#examples","text":"```sql SELECT COALESCE(NULL,1); -> 1 mysql> SELECT COALESCE(NULL,NULL,NULL); -> NULL","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_interval/","text":"INTERVAL Description The INTERVAL operator returns 0 if N < N1, 1 if N < N2 and so on or -1 if N is NULL. All arguments are treated as integers. It is required that N1 < N2 < N3 < ... < Nn for this function to work correctly. This is because a binary search is used (very fast). Syntax > INTERVAL(N,N1,N2,N3,...) Examples >","title":"**INTERVAL**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_interval/#interval","text":"","title":"INTERVAL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_interval/#description","text":"The INTERVAL operator returns 0 if N < N1, 1 if N < N2 and so on or -1 if N is NULL. All arguments are treated as integers. It is required that N1 < N2 < N3 < ... < Nn for this function to work correctly. This is because a binary search is used (very fast).","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_interval/#syntax","text":"> INTERVAL(N,N1,N2,N3,...)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_interval/#examples","text":">","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_isnull/","text":"ISNULL Description The ISNULL() function can be used instead of = to test whether a value is NULL. (Comparing a value to NULL using = always yields NULL .) If expression is NULL , this function returns true . Otherwise, it returns false . The ISNULL() function shares some special behaviors with the IS NULL comparison operator. See the description of IS NULL . Syntax > ISNULL(expr) Examples > SELECT ISNULL ( 1 + 1 ); + ---------------+ | isnull ( 1 + 1 ) | + ---------------+ | false | + ---------------+ 1 row in set ( 0 . 02 sec )","title":"**ISNULL**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_isnull/#isnull","text":"","title":"ISNULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_isnull/#description","text":"The ISNULL() function can be used instead of = to test whether a value is NULL. (Comparing a value to NULL using = always yields NULL .) If expression is NULL , this function returns true . Otherwise, it returns false . The ISNULL() function shares some special behaviors with the IS NULL comparison operator. See the description of IS NULL .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_isnull/#syntax","text":"> ISNULL(expr)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_isnull/#examples","text":"> SELECT ISNULL ( 1 + 1 ); + ---------------+ | isnull ( 1 + 1 ) | + ---------------+ | false | + ---------------+ 1 row in set ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_least/","text":"","title":"Function least"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_strcmp/","text":"STRCMP Description The STRCMP() returns 0 if the strings are the same, -1 if the first argument is smaller than the second according to the current sort order, and NULL if either argument is NULL. It returns 1 otherwise. Syntax > STRCMP(expr1,expr2) Examples","title":"**STRCMP**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_strcmp/#strcmp","text":"","title":"STRCMP"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_strcmp/#description","text":"The STRCMP() returns 0 if the strings are the same, -1 if the first argument is smaller than the second according to the current sort order, and NULL if either argument is NULL. It returns 1 otherwise.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_strcmp/#syntax","text":"> STRCMP(expr1,expr2)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/function_strcmp/#examples","text":"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than-or-equal/","text":">= Description The >= operator returns true only if the left-hand operand is greater than or equal to the right-hand operand. Syntax > SELECT x >= y; Examples > SELECT 2 >= 2 ; + --------+ | 2 >= 2 | + --------+ | true | + --------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where spID >= userID * score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 1 | + --------+------+-------+ 1 row in set ( 0 . 01 sec )","title":">="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than-or-equal/#_1","text":"","title":"&gt;="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than-or-equal/#description","text":"The >= operator returns true only if the left-hand operand is greater than or equal to the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than-or-equal/#syntax","text":"> SELECT x >= y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than-or-equal/#examples","text":"> SELECT 2 >= 2 ; + --------+ | 2 >= 2 | + --------+ | true | + --------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where spID >= userID * score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 1 | + --------+------+-------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than/","text":"> Description The > operator returns true only if the left-hand operand is greater than the right-hand operand. Syntax > SELECT x > y; Examples > SELECT 2 > 2 ; + -------+ | 2 > 2 | + -------+ | false | + -------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select spID , userID , score from t1 where spID > ( userID - 1 ); + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 2 | 1 | 4 | | 3 | 3 | 3 | | 1 | 1 | 5 | + ------+--------+-------+ 5 rows in set ( 0 . 01 sec )","title":">"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than/#_1","text":"","title":"&gt;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than/#description","text":"The > operator returns true only if the left-hand operand is greater than the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than/#syntax","text":"> SELECT x > y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/greater-than/#examples","text":"> SELECT 2 > 2 ; + -------+ | 2 > 2 | + -------+ | false | + -------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select spID , userID , score from t1 where spID > ( userID - 1 ); + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 2 | 1 | 4 | | 3 | 3 | 3 | | 1 | 1 | 5 | + ------+--------+-------+ 5 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/","text":"IN Description The IN operator allows you to specify multiple values in a WHERE clause. And it's a shorthand for multiple OR conditions. Syntax > SELECT column1, column2, ... FROM table_name WHERE column_name IN (value1, value2, ...); Examples > create table t2 ( a int , b varchar ( 5 ), c float , d date , e datetime ); > insert into t2 values ( 1 , 'a' , 1 . 001 , '2022-02-08' , '2022-02-08 12:00:00' ); > insert into t2 values ( 2 , 'b' , 2 . 001 , '2022-02-09' , '2022-02-09 12:00:00' ); > insert into t2 values ( 1 , 'c' , 3 . 001 , '2022-02-10' , '2022-02-10 12:00:00' ); > insert into t2 values ( 4 , 'd' , 4 . 001 , '2022-02-11' , '2022-02-11 12:00:00' ); > select * from t2 where a in ( 2 , 4 ); a b c d e 2 b 2 . 0010 2022 - 02 - 09 2022 - 02 - 09 12 : 00 : 00 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 > select * from t2 where a not in ( 2 , 4 ); a b c d e 1 a 1 . 0010 2022 - 02 - 08 2022 - 02 - 08 12 : 00 : 00 1 c 3 . 0010 2022 - 02 - 10 2022 - 02 - 10 12 : 00 : 00 > select * from t2 where b not in ( 'e' , \"f\" ); a b c d e 1 a 1 . 0010 2022 - 02 - 08 2022 - 02 - 08 12 : 00 : 00 2 b 2 . 0010 2022 - 02 - 09 2022 - 02 - 09 12 : 00 : 00 1 c 3 . 0010 2022 - 02 - 10 2022 - 02 - 10 12 : 00 : 00 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 > select * from t2 where e not in ( '2022-02-09 12:00:00' ) and a in ( 4 , 5 ); a b c d e 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 Constraints Currently, only constant lists are supported on the left side of IN . There can only be a single column to the left of IN , not a tuple of multiple columns. NULL values couldn\u2019t appear in the list to the right of IN .","title":"IN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/#in","text":"","title":"IN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/#description","text":"The IN operator allows you to specify multiple values in a WHERE clause. And it's a shorthand for multiple OR conditions.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE column_name IN (value1, value2, ...);","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/#examples","text":"> create table t2 ( a int , b varchar ( 5 ), c float , d date , e datetime ); > insert into t2 values ( 1 , 'a' , 1 . 001 , '2022-02-08' , '2022-02-08 12:00:00' ); > insert into t2 values ( 2 , 'b' , 2 . 001 , '2022-02-09' , '2022-02-09 12:00:00' ); > insert into t2 values ( 1 , 'c' , 3 . 001 , '2022-02-10' , '2022-02-10 12:00:00' ); > insert into t2 values ( 4 , 'd' , 4 . 001 , '2022-02-11' , '2022-02-11 12:00:00' ); > select * from t2 where a in ( 2 , 4 ); a b c d e 2 b 2 . 0010 2022 - 02 - 09 2022 - 02 - 09 12 : 00 : 00 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 > select * from t2 where a not in ( 2 , 4 ); a b c d e 1 a 1 . 0010 2022 - 02 - 08 2022 - 02 - 08 12 : 00 : 00 1 c 3 . 0010 2022 - 02 - 10 2022 - 02 - 10 12 : 00 : 00 > select * from t2 where b not in ( 'e' , \"f\" ); a b c d e 1 a 1 . 0010 2022 - 02 - 08 2022 - 02 - 08 12 : 00 : 00 2 b 2 . 0010 2022 - 02 - 09 2022 - 02 - 09 12 : 00 : 00 1 c 3 . 0010 2022 - 02 - 10 2022 - 02 - 10 12 : 00 : 00 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 > select * from t2 where e not in ( '2022-02-09 12:00:00' ) and a in ( 4 , 5 ); a b c d e 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/in/#constraints","text":"Currently, only constant lists are supported on the left side of IN . There can only be a single column to the left of IN , not a tuple of multiple columns. NULL values couldn\u2019t appear in the list to the right of IN .","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not-null/","text":"IS NOT NULL Description The IS NOT NULL function tests whether a value is not NULL . If expression is NOT NULL , this function returns true . Otherwise, it returns false . Syntax > expression IS NOT NULL Examples > SELECT 1 IS NOT NULL , 0 IS NOT NULL , NULL IS NOT NULL ; + ---------------+---------------+------------------+ | 1 is not null | 0 is not null | null is not null | + ---------------+---------------+------------------+ | true | true | false | + ---------------+---------------+------------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where b is NOT NULL ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | + -------+-------+ 4 rows in set ( 0 . 01 sec )","title":"IS NOT NULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not-null/#is-not-null","text":"","title":"IS NOT NULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not-null/#description","text":"The IS NOT NULL function tests whether a value is not NULL . If expression is NOT NULL , this function returns true . Otherwise, it returns false .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not-null/#syntax","text":"> expression IS NOT NULL","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not-null/#examples","text":"> SELECT 1 IS NOT NULL , 0 IS NOT NULL , NULL IS NOT NULL ; + ---------------+---------------+------------------+ | 1 is not null | 0 is not null | null is not null | + ---------------+---------------+------------------+ | true | true | false | + ---------------+---------------+------------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where b is NOT NULL ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | + -------+-------+ 4 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not/","text":"IS NOT Description The IS NOT tests a value against a boolean value, where boolean_value can be TRUE, FALSE, or UNKNOWN. Syntax > IS NOT boolean_value Examples > SELECT 1 IS NOT TRUE , 0 IS NOT FALSE , NULL IS NOT UNKNOWN ; + -----------+------------+----------+ | 1 != true | 0 != false | null != | + -----------+------------+----------+ | false | false | NULL | + -----------+------------+----------+ 1 row in set ( 0 . 01 sec )","title":"IS NOT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not/#is-not","text":"","title":"IS NOT"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not/#description","text":"The IS NOT tests a value against a boolean value, where boolean_value can be TRUE, FALSE, or UNKNOWN.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not/#syntax","text":"> IS NOT boolean_value","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-not/#examples","text":"> SELECT 1 IS NOT TRUE , 0 IS NOT FALSE , NULL IS NOT UNKNOWN ; + -----------+------------+----------+ | 1 != true | 0 != false | null != | + -----------+------------+----------+ | false | false | NULL | + -----------+------------+----------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-null/","text":"IS NULL Description The IS NOT NULL function tests whether a value is NULL . It returns TRUE if a NULL value is found, otherwise it returns FALSE . It can be used in a SELECT , INSERT , UPDATE , or DELETE statement. Syntax > expression IS NULL Examples > SELECT 1 IS NULL , 0 IS NULL , NULL IS NULL ; + -----------+-----------+--------------+ | 1 is null | 0 is null | null is null | + -----------+-----------+--------------+ | false | false | true | + -----------+-----------+--------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where a IS NULL ; + ------+------+ | a | b | + ------+------+ | NULL | NULL | + ------+------+ 1 row in set ( 0 . 01 sec )","title":"IS NULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-null/#is-null","text":"","title":"IS NULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-null/#description","text":"The IS NOT NULL function tests whether a value is NULL . It returns TRUE if a NULL value is found, otherwise it returns FALSE . It can be used in a SELECT , INSERT , UPDATE , or DELETE statement.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-null/#syntax","text":"> expression IS NULL","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is-null/#examples","text":"> SELECT 1 IS NULL , 0 IS NULL , NULL IS NULL ; + -----------+-----------+--------------+ | 1 is null | 0 is null | null is null | + -----------+-----------+--------------+ | false | false | true | + -----------+-----------+--------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where a IS NULL ; + ------+------+ | a | b | + ------+------+ | NULL | NULL | + ------+------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is/","text":"IS Description The IS tests a value against a boolean value, where boolean_value can be TRUE, FALSE, or UNKNOWN. Syntax > IS boolean_value Examples > SELECT 1 IS TRUE , 0 IS FALSE , NULL IS UNKNOWN ; + ----------+-----------+---------+ | 1 = true | 0 = false | null = | + ----------+-----------+---------+ | true | true | NULL | + ----------+-----------+---------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where a <= b and a is not NULL ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | true | | false | false | + -------+-------+ 3 rows in set ( 0 . 01 sec )","title":"IS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is/#is","text":"","title":"IS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is/#description","text":"The IS tests a value against a boolean value, where boolean_value can be TRUE, FALSE, or UNKNOWN.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is/#syntax","text":"> IS boolean_value","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/is/#examples","text":"> SELECT 1 IS TRUE , 0 IS FALSE , NULL IS UNKNOWN ; + ----------+-----------+---------+ | 1 = true | 0 = false | null = | + ----------+-----------+---------+ | true | true | NULL | + ----------+-----------+---------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | false | | true | true | | false | false | | NULL | NULL | + -------+-------+ > select * from t1 where a <= b and a is not NULL ; + -------+-------+ | a | b | + -------+-------+ | false | true | | true | true | | false | false | + -------+-------+ 3 rows in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than-or-equal/","text":"<= Description The <= operator returns true only if the left-hand operand is less than or equal to the right-hand operand. Syntax > SELECT x <= y; Examples > SELECT 2 <= 2 ; + --------+ | 2 <= 2 | + --------+ | true | + --------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , score , spID from t1 where userID <= score / spID ; + --------+-------+------+ | userid | score | spid | + --------+-------+------+ | 1 | 1 | 1 | | 1 | 4 | 2 | | 1 | 5 | 1 | | 11 | 99 | 5 | + --------+-------+------+ 4 rows in set ( 0 . 00 sec )","title":"<="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than-or-equal/#_1","text":"","title":"&lt;="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than-or-equal/#description","text":"The <= operator returns true only if the left-hand operand is less than or equal to the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than-or-equal/#syntax","text":"> SELECT x <= y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than-or-equal/#examples","text":"> SELECT 2 <= 2 ; + --------+ | 2 <= 2 | + --------+ | true | + --------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , score , spID from t1 where userID <= score / spID ; + --------+-------+------+ | userid | score | spid | + --------+-------+------+ | 1 | 1 | 1 | | 1 | 4 | 2 | | 1 | 5 | 1 | | 11 | 99 | 5 | + --------+-------+------+ 4 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than/","text":"< Description The < operator returns true only if the left-hand operand is less than the right-hand operand. Syntax > SELECT x < y; Examples > SELECT 2 < 2 ; + -------+ | 2 < 2 | + -------+ | false | + -------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select spID , userID , score from t1 where ( userID - 1 ) < spID ; + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 2 | 1 | 4 | | 3 | 3 | 3 | | 1 | 1 | 5 | + ------+--------+-------+ 5 rows in set ( 0 . 00 sec ) > select spID , userID , score from t1 where spID < ( userID - 1 ); + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 4 | 6 | 10 | | 5 | 11 | 99 | + ------+--------+-------+ 2 rows in set ( 0 . 00 sec )","title":"<"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than/#_1","text":"","title":"&lt;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than/#description","text":"The < operator returns true only if the left-hand operand is less than the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than/#syntax","text":"> SELECT x < y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/less-than/#examples","text":"> SELECT 2 < 2 ; + -------+ | 2 < 2 | + -------+ | false | + -------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select spID , userID , score from t1 where ( userID - 1 ) < spID ; + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 1 | 1 | 1 | | 2 | 2 | 2 | | 2 | 1 | 4 | | 3 | 3 | 3 | | 1 | 1 | 5 | + ------+--------+-------+ 5 rows in set ( 0 . 00 sec ) > select spID , userID , score from t1 where spID < ( userID - 1 ); + ------+--------+-------+ | spid | userid | score | + ------+--------+-------+ | 4 | 6 | 10 | | 5 | 11 | 99 | + ------+--------+-------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/like/","text":"LIKE Description The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the LIKE operator: The percent sign (%) represents zero, one, or multiple characters The underscore sign (_) represents one, single character Syntax > SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern; Examples > SELECT * FROM Customers WHERE CustomerName LIKE 'a%' ; // The following SQL statement selects all customers with a CustomerName starting with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%a' ; // The following SQL statement selects all customers with a CustomerName ending with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%or%' ; // The following SQL statement selects all customers with a CustomerName that have \"or\" in any position > SELECT * FROM Customers WHERE CustomerName LIKE '_r%' ; // The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position > SELECT * FROM Customers WHERE CustomerName LIKE 'a__%' ; // The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length > SELECT * FROM Customers WHERE ContactName LIKE 'a%o' ; // The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\" > SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%' ; // The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\"","title":"LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/like/#like","text":"","title":"LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/like/#description","text":"The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the LIKE operator: The percent sign (%) represents zero, one, or multiple characters The underscore sign (_) represents one, single character","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/like/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE columnN LIKE pattern;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/like/#examples","text":"> SELECT * FROM Customers WHERE CustomerName LIKE 'a%' ; // The following SQL statement selects all customers with a CustomerName starting with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%a' ; // The following SQL statement selects all customers with a CustomerName ending with \"a\" > SELECT * FROM Customers WHERE CustomerName LIKE '%or%' ; // The following SQL statement selects all customers with a CustomerName that have \"or\" in any position > SELECT * FROM Customers WHERE CustomerName LIKE '_r%' ; // The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position > SELECT * FROM Customers WHERE CustomerName LIKE 'a__%' ; // The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length > SELECT * FROM Customers WHERE ContactName LIKE 'a%o' ; // The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\" > SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%' ; // The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-between/","text":"NOT BETWEEN ... AND ... Description If expr is less than or equal to min and expr is greater than or equal to max, NOT BETWEEN returns true , otherwise it returns false . Syntax > expr NOT BETWEEN min AND max Examples > SELECT 2 NOT BETWEEN 1 AND 3 , 2 NOT BETWEEN 3 and 1 ; + -----------------------+-----------------------+ | 2 not between 1 and 3 | 2 not between 3 and 1 | + -----------------------+-----------------------+ | false | true | + -----------------------+-----------------------+ 1 row in set ( 0 . 00 sec ) > create table t ( id bigint unsigned , b int ); > insert into t values ( 8894754949779693574 , 1 ); > insert into t values ( 8894754949779693579 , 2 ); > insert into t values ( 17790886498483827171 , 3 ); > select count ( * ) from t where id >= 8894754949779693574 and id = 17790886498483827171 order by 1 asc ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ > select count ( * ) from t where id not between 8894754949779693574 and 17790886498483827171 ; + ----------+ | count ( * ) | + ----------+ | 3 | + ----------+ 1 row in set ( 0 . 00 sec )","title":"NOT BETWEEN ... AND ..."},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-between/#not-between-and","text":"","title":"NOT BETWEEN ... AND ..."},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-between/#description","text":"If expr is less than or equal to min and expr is greater than or equal to max, NOT BETWEEN returns true , otherwise it returns false .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-between/#syntax","text":"> expr NOT BETWEEN min AND max","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-between/#examples","text":"> SELECT 2 NOT BETWEEN 1 AND 3 , 2 NOT BETWEEN 3 and 1 ; + -----------------------+-----------------------+ | 2 not between 1 and 3 | 2 not between 3 and 1 | + -----------------------+-----------------------+ | false | true | + -----------------------+-----------------------+ 1 row in set ( 0 . 00 sec ) > create table t ( id bigint unsigned , b int ); > insert into t values ( 8894754949779693574 , 1 ); > insert into t values ( 8894754949779693579 , 2 ); > insert into t values ( 17790886498483827171 , 3 ); > select count ( * ) from t where id >= 8894754949779693574 and id = 17790886498483827171 order by 1 asc ; + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ > select count ( * ) from t where id not between 8894754949779693574 and 17790886498483827171 ; + ----------+ | count ( * ) | + ----------+ | 3 | + ----------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-equal/","text":"<>,!= Description The <>,!= operator returns true only if the left-hand operand is not equal to the right-hand operand. Syntax > SELECT x <> y; Examples > SELECT 2 <> 2 ; + --------+ | 2 != 2 | + --------+ | false | + --------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where userID = spID and userID <> score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 5 | + --------+------+-------+ 1 row in set ( 0 . 00 sec )","title":"<>,!="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-equal/#_1","text":"","title":"&lt;&gt;,!="},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-equal/#description","text":"The <>,!= operator returns true only if the left-hand operand is not equal to the right-hand operand.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-equal/#syntax","text":"> SELECT x <> y;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-equal/#examples","text":"> SELECT 2 <> 2 ; + --------+ | 2 != 2 | + --------+ | false | + --------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( spID smallint , userID bigint , score int ); > insert into t1 values ( 1 , 1 , 1 ); > insert into t1 values ( 2 , 2 , 2 ); > insert into t1 values ( 2 , 1 , 4 ); > insert into t1 values ( 3 , 3 , 3 ); > insert into t1 values ( 1 , 1 , 5 ); > insert into t1 values ( 4 , 6 , 10 ); > insert into t1 values ( 5 , 11 , 99 ); > select userID , spID , score from t1 where userID = spID and userID <> score ; + --------+------+-------+ | userid | spid | score | + --------+------+-------+ | 1 | 1 | 5 | + --------+------+-------+ 1 row in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/","text":"NOT IN Description The NOT IN operator allows you to specify multiple values in a WHERE clause. And it's a shorthand for multiple XOR conditions. Syntax > SELECT column1, column2, ... FROM table_name WHERE column_name NOT IN (value1, value2, ...); Examples > create table t2 ( a int , b varchar ( 5 ), c float , d date , e datetime ); > insert into t2 values ( 1 , 'a' , 1 . 001 , '2022-02-08' , '2022-02-08 12:00:00' ); > insert into t2 values ( 2 , 'b' , 2 . 001 , '2022-02-09' , '2022-02-09 12:00:00' ); > insert into t2 values ( 1 , 'c' , 3 . 001 , '2022-02-10' , '2022-02-10 12:00:00' ); > insert into t2 values ( 4 , 'd' , 4 . 001 , '2022-02-11' , '2022-02-11 12:00:00' ); > select * from t2 where a not in ( 2 , 4 ); + ------+------+-------+------------+----------------------------+ | a | b | c | d | e | + ------+------+-------+------------+----------------------------+ | 1 | a | 1 . 001 | 2022 - 02 - 08 | 2022 - 02 - 08 12 : 00 : 00 . 000000 | | 1 | c | 3 . 001 | 2022 - 02 - 10 | 2022 - 02 - 10 12 : 00 : 00 . 000000 | + ------+------+-------+------------+----------------------------+ 2 rows in set ( 0 . 00 sec ) > select * from t2 where b not in ( 'e' , \"f\" ); + ------+------+-------+------------+----------------------------+ | a | b | c | d | e | + ------+------+-------+------------+----------------------------+ | 1 | a | 1 . 001 | 2022 - 02 - 08 | 2022 - 02 - 08 12 : 00 : 00 . 000000 | | 2 | b | 2 . 001 | 2022 - 02 - 09 | 2022 - 02 - 09 12 : 00 : 00 . 000000 | | 1 | c | 3 . 001 | 2022 - 02 - 10 | 2022 - 02 - 10 12 : 00 : 00 . 000000 | | 4 | d | 4 . 001 | 2022 - 02 - 11 | 2022 - 02 - 11 12 : 00 : 00 . 000000 | + ------+------+-------+------------+----------------------------+ 4 rows in set ( 0 . 01 sec ) > select * from t2 where e not in ( '2022-02-09 12:00:00' ) and a in ( 4 , 5 ); a b c d e 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00 Constraints Currently, only constant lists are supported on the left side of NOT IN . There can only be a single column to the left of NOT IN , not a tuple of multiple columns. NULL values couldn\u2019t appear in the list to the right of NOT IN .","title":"**NOT IN**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/#not-in","text":"","title":"NOT IN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/#description","text":"The NOT IN operator allows you to specify multiple values in a WHERE clause. And it's a shorthand for multiple XOR conditions.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE column_name NOT IN (value1, value2, ...);","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/#examples","text":"> create table t2 ( a int , b varchar ( 5 ), c float , d date , e datetime ); > insert into t2 values ( 1 , 'a' , 1 . 001 , '2022-02-08' , '2022-02-08 12:00:00' ); > insert into t2 values ( 2 , 'b' , 2 . 001 , '2022-02-09' , '2022-02-09 12:00:00' ); > insert into t2 values ( 1 , 'c' , 3 . 001 , '2022-02-10' , '2022-02-10 12:00:00' ); > insert into t2 values ( 4 , 'd' , 4 . 001 , '2022-02-11' , '2022-02-11 12:00:00' ); > select * from t2 where a not in ( 2 , 4 ); + ------+------+-------+------------+----------------------------+ | a | b | c | d | e | + ------+------+-------+------------+----------------------------+ | 1 | a | 1 . 001 | 2022 - 02 - 08 | 2022 - 02 - 08 12 : 00 : 00 . 000000 | | 1 | c | 3 . 001 | 2022 - 02 - 10 | 2022 - 02 - 10 12 : 00 : 00 . 000000 | + ------+------+-------+------------+----------------------------+ 2 rows in set ( 0 . 00 sec ) > select * from t2 where b not in ( 'e' , \"f\" ); + ------+------+-------+------------+----------------------------+ | a | b | c | d | e | + ------+------+-------+------------+----------------------------+ | 1 | a | 1 . 001 | 2022 - 02 - 08 | 2022 - 02 - 08 12 : 00 : 00 . 000000 | | 2 | b | 2 . 001 | 2022 - 02 - 09 | 2022 - 02 - 09 12 : 00 : 00 . 000000 | | 1 | c | 3 . 001 | 2022 - 02 - 10 | 2022 - 02 - 10 12 : 00 : 00 . 000000 | | 4 | d | 4 . 001 | 2022 - 02 - 11 | 2022 - 02 - 11 12 : 00 : 00 . 000000 | + ------+------+-------+------------+----------------------------+ 4 rows in set ( 0 . 01 sec ) > select * from t2 where e not in ( '2022-02-09 12:00:00' ) and a in ( 4 , 5 ); a b c d e 4 d 4 . 0010 2022 - 02 - 11 2022 - 02 - 11 12 : 00 : 00","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-in/#constraints","text":"Currently, only constant lists are supported on the left side of NOT IN . There can only be a single column to the left of NOT IN , not a tuple of multiple columns. NULL values couldn\u2019t appear in the list to the right of NOT IN .","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-like/","text":"NOT LIKE Description The NOT LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the NOT LIKE operator: The percent sign (%) represents zero, one, or multiple characters. The underscore sign (_) represents one, single character. Syntax > SELECT column1, column2, ... FROM table_name WHERE columnN NOT LIKE pattern; Examples > create table t1 ( a char ( 10 )); > insert into t1 values ( 'abcdef' ); > insert into t1 values ( '_bcdef' ); > insert into t1 values ( 'a_cdef' ); > insert into t1 values ( 'ab_def' ); > insert into t1 values ( 'abc_ef' ); > insert into t1 values ( 'abcd_f' ); > insert into t1 values ( 'abcde_' ); > select * from t1 where a not like 'a%' ; + --------+ | a | + --------+ | _bcdef | + --------+ > select * from t1 where a not like \"%d_\\_\" ; + --------+ | a | + --------+ | abc_ef | + --------+ 1 row in set ( 0 . 01 sec )","title":"NOT LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-like/#not-like","text":"","title":"NOT LIKE"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-like/#description","text":"The NOT LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with the NOT LIKE operator: The percent sign (%) represents zero, one, or multiple characters. The underscore sign (_) represents one, single character.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-like/#syntax","text":"> SELECT column1, column2, ... FROM table_name WHERE columnN NOT LIKE pattern;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/comparison-functions-and-operators/not-like/#examples","text":"> create table t1 ( a char ( 10 )); > insert into t1 values ( 'abcdef' ); > insert into t1 values ( '_bcdef' ); > insert into t1 values ( 'a_cdef' ); > insert into t1 values ( 'ab_def' ); > insert into t1 values ( 'abc_ef' ); > insert into t1 values ( 'abcd_f' ); > insert into t1 values ( 'abcde_' ); > select * from t1 where a not like 'a%' ; + --------+ | a | + --------+ | _bcdef | + --------+ > select * from t1 where a not like \"%d_\\_\" ; + --------+ | a | + --------+ | abc_ef | + --------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/case-when/","text":"CASE WHEN Description CASE WHEN statement is used in that evaluates a list of conditions and returns one of multiple possible result expressions. Cases come in two formats: a simple CASE function compares an expression to a set of simple expressions to determine the result. The CASE search function evaluates a set of Boolean expressions to determine the result. Both formats support the optional ELSE argument. Syntax Syntax 1 : CASE value WHEN compare_value THEN result [WHEN compare_value THEN result ...] [ELSE result] END This CASE syntax returns the result for the first value=compare_value comparison that is true. Syntax 2 : CASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE result] END This CASE syntax returns the result for the first condition that is true. If no comparison or condition is true, the result after ELSE is returned, or NULL if there is no ELSE part. note The CASE statement cannot have an ELSE NULL clause, and it is terminated with END CASE instead of END . Examples > SELECT CASE WHEN 1 > 0 THEN 'true' ELSE 'false' END ; + ------------------------------------------+ | case when 1 > 0 then true else false end | + ------------------------------------------+ | true | + ------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( a INT , b INT ); Query OK , 0 rows affected ( 0 . 01 sec ) > INSERT INTO t1 VALUES ( 1 , 1 ),( 2 , 1 ),( 3 , 2 ),( 4 , 2 ),( 5 , 3 ),( 6 , 3 ); Query OK , 6 rows affected ( 0 . 01 sec ) > SELECT CASE WHEN AVG ( a ) >= 0 THEN 'Positive' ELSE 'Negative' END FROM t1 GROUP BY b ; + -------------------------------------------------------+ | case when avg ( a ) >= 0 then Positive else Negative end | + -------------------------------------------------------+ | Positive | | Positive | | Positive | + -------------------------------------------------------+ 3 rows in set ( 0 . 00 sec )","title":"CASE WHEN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/case-when/#case-when","text":"","title":"CASE WHEN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/case-when/#description","text":"CASE WHEN statement is used in that evaluates a list of conditions and returns one of multiple possible result expressions. Cases come in two formats: a simple CASE function compares an expression to a set of simple expressions to determine the result. The CASE search function evaluates a set of Boolean expressions to determine the result. Both formats support the optional ELSE argument.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/case-when/#syntax","text":"Syntax 1 : CASE value WHEN compare_value THEN result [WHEN compare_value THEN result ...] [ELSE result] END This CASE syntax returns the result for the first value=compare_value comparison that is true. Syntax 2 : CASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE result] END This CASE syntax returns the result for the first condition that is true. If no comparison or condition is true, the result after ELSE is returned, or NULL if there is no ELSE part. note The CASE statement cannot have an ELSE NULL clause, and it is terminated with END CASE instead of END .","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/case-when/#examples","text":"> SELECT CASE WHEN 1 > 0 THEN 'true' ELSE 'false' END ; + ------------------------------------------+ | case when 1 > 0 then true else false end | + ------------------------------------------+ | true | + ------------------------------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( a INT , b INT ); Query OK , 0 rows affected ( 0 . 01 sec ) > INSERT INTO t1 VALUES ( 1 , 1 ),( 2 , 1 ),( 3 , 2 ),( 4 , 2 ),( 5 , 3 ),( 6 , 3 ); Query OK , 6 rows affected ( 0 . 01 sec ) > SELECT CASE WHEN AVG ( a ) >= 0 THEN 'Positive' ELSE 'Negative' END FROM t1 GROUP BY b ; + -------------------------------------------------------+ | case when avg ( a ) >= 0 then Positive else Negative end | + -------------------------------------------------------+ | Positive | | Positive | | Positive | + -------------------------------------------------------+ 3 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/flow-control-functions-overview/","text":"Flow Control Functions Name Description CASE Case operator IF() If/else construct","title":"Flow Control Functions Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/flow-control-functions-overview/#flow-control-functions","text":"Name Description CASE Case operator IF() If/else construct","title":"Flow Control Functions"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/","text":"IF Description The IF() function returns a value if a condition is TRUE , or another value if a condition is FALSE . Syntax > IF(expr1,expr2,expr3) If expr1 is TRUE (expr1 <> 0 and expr1 IS NOT NULL), IF() returns expr2. Otherwise, it returns expr3. If only one of expr2 or expr3 is explicitly NULL, the result type of the IF() function is the type of the non-NULL expression. The default return type of IF() (which may matter when it is stored into a temporary table) is calculated as follows: If expr2 or expr3 produce a string, the result is a string. If expr2 and expr3 are both strings, the result is case-sensitive if either string is case-sensitive. If expr2 or expr3 produce a floating-point value, the result is a floating-point value. If expr2 or expr3 produce an integer, the result is an integer. Examples > SELECT IF ( 1 > 2 , 2 , 3 ); + -----------------+ | if ( 1 > 2 , 2 , 3 ) | + -----------------+ | 3 | + -----------------+ 1 row in set ( 0 . 01 sec ) > SELECT IF ( 1 < 2 , 'yes' , 'no' ); + --------------------+ | if ( 1 < 2 , yes , no ) | + --------------------+ | yes | + --------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( st varchar ( 255 ) NOT NULL , u int ( 11 ) NOT NULL ); > INSERT INTO t1 VALUES ( 'a' , 1 ),( 'A' , 1 ),( 'aa' , 1 ),( 'AA' , 1 ),( 'a' , 1 ),( 'aaa' , 0 ),( 'BBB' , 0 ); > select if ( u = 1 , st , st ) s from t1 order by s ; + ------+ | s | + ------+ | A | | AA | | BBB | | a | | a | | aa | | aaa | + ------+ 7 rows in set ( 0 . 00 sec ) > select if ( u = 1 , st , st ) s from t1 where st like \"%a%\" order by s ; + ------+ | s | + ------+ | a | | a | | aa | | aaa | + ------+ 4 rows in set ( 0 . 00 sec ) Constraints Parameters BIGINT and VARCHAR are not supported with the function 'if'.","title":"IF"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/#if","text":"","title":"IF"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/#description","text":"The IF() function returns a value if a condition is TRUE , or another value if a condition is FALSE .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/#syntax","text":"> IF(expr1,expr2,expr3) If expr1 is TRUE (expr1 <> 0 and expr1 IS NOT NULL), IF() returns expr2. Otherwise, it returns expr3. If only one of expr2 or expr3 is explicitly NULL, the result type of the IF() function is the type of the non-NULL expression. The default return type of IF() (which may matter when it is stored into a temporary table) is calculated as follows: If expr2 or expr3 produce a string, the result is a string. If expr2 and expr3 are both strings, the result is case-sensitive if either string is case-sensitive. If expr2 or expr3 produce a floating-point value, the result is a floating-point value. If expr2 or expr3 produce an integer, the result is an integer.","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/#examples","text":"> SELECT IF ( 1 > 2 , 2 , 3 ); + -----------------+ | if ( 1 > 2 , 2 , 3 ) | + -----------------+ | 3 | + -----------------+ 1 row in set ( 0 . 01 sec ) > SELECT IF ( 1 < 2 , 'yes' , 'no' ); + --------------------+ | if ( 1 < 2 , yes , no ) | + --------------------+ | yes | + --------------------+ 1 row in set ( 0 . 00 sec ) > CREATE TABLE t1 ( st varchar ( 255 ) NOT NULL , u int ( 11 ) NOT NULL ); > INSERT INTO t1 VALUES ( 'a' , 1 ),( 'A' , 1 ),( 'aa' , 1 ),( 'AA' , 1 ),( 'a' , 1 ),( 'aaa' , 0 ),( 'BBB' , 0 ); > select if ( u = 1 , st , st ) s from t1 order by s ; + ------+ | s | + ------+ | A | | AA | | BBB | | a | | a | | aa | | aaa | + ------+ 7 rows in set ( 0 . 00 sec ) > select if ( u = 1 , st , st ) s from t1 where st like \"%a%\" order by s ; + ------+ | s | + ------+ | a | | a | | aa | | aaa | + ------+ 4 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_if/#constraints","text":"Parameters BIGINT and VARCHAR are not supported with the function 'if'.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_ifnull/","text":"IFNULL Description If expr1 is not NULL , IFNULL() returns expr1; otherwise it returns expr2. The default return type of IFNULL(expr1,expr2) is the more \u201cgeneral\u201d of the two expressions, in the order STRING , REAL , or INTEGER . Syntax > IFNULL(expr1,expr2) Examples > SELECT IFNULL ( NULL , 10 ); + ------------------+ | ifnull ( null , 10 ) | + ------------------+ | 10 | + ------------------+ 1 row in set ( 0 . 00 sec ) SELECT CAST ( IFNULL ( NULL , NULL ) AS DECIMAL ); + -----------------------------------------+ | cast ( ifnull ( null , null ) as decimal ( 10 )) | + -----------------------------------------+ | NULL | + -----------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"**IFNULL**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_ifnull/#ifnull","text":"","title":"IFNULL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_ifnull/#description","text":"If expr1 is not NULL , IFNULL() returns expr1; otherwise it returns expr2. The default return type of IFNULL(expr1,expr2) is the more \u201cgeneral\u201d of the two expressions, in the order STRING , REAL , or INTEGER .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_ifnull/#syntax","text":"> IFNULL(expr1,expr2)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_ifnull/#examples","text":"> SELECT IFNULL ( NULL , 10 ); + ------------------+ | ifnull ( null , 10 ) | + ------------------+ | 10 | + ------------------+ 1 row in set ( 0 . 00 sec ) SELECT CAST ( IFNULL ( NULL , NULL ) AS DECIMAL ); + -----------------------------------------+ | cast ( ifnull ( null , null ) as decimal ( 10 )) | + -----------------------------------------+ | NULL | + -----------------------------------------+ 1 row in set ( 0 . 01 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_nullif/","text":"NULLIF Description The NULLIF() function returns NULL if expr1 = expr2 is true, otherwise returns expr1. The return value has the same type as the first argument. Syntax > NULLIF(expr1,expr2) Examples > SELECT NULLIF ( 1 , 1 ); + --------------+ | nullif ( 1 , 1 ) | + --------------+ | NULL | + --------------+ 1 row in set ( 0 . 00 sec ) > SELECT NULLIF ( 1 , 2 ); + --------------+ | nullif ( 1 , 2 ) | + --------------+ | 1 | + --------------+ 1 row in set ( 0 . 01 sec ) > SELECT CAST ( IFNULL ( NULL , NULL ) AS DECIMAL ); + -----------------------------------------+ | cast ( ifnull ( null , null ) as decimal ( 10 )) | + -----------------------------------------+ | NULL | + -----------------------------------------+","title":"**NULLIF**"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_nullif/#nullif","text":"","title":"NULLIF"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_nullif/#description","text":"The NULLIF() function returns NULL if expr1 = expr2 is true, otherwise returns expr1. The return value has the same type as the first argument.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_nullif/#syntax","text":"> NULLIF(expr1,expr2)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/flow-control-functions/function_nullif/#examples","text":"> SELECT NULLIF ( 1 , 1 ); + --------------+ | nullif ( 1 , 1 ) | + --------------+ | NULL | + --------------+ 1 row in set ( 0 . 00 sec ) > SELECT NULLIF ( 1 , 2 ); + --------------+ | nullif ( 1 , 2 ) | + --------------+ | 1 | + --------------+ 1 row in set ( 0 . 01 sec ) > SELECT CAST ( IFNULL ( NULL , NULL ) AS DECIMAL ); + -----------------------------------------+ | cast ( ifnull ( null , null ) as decimal ( 10 )) | + -----------------------------------------+ | NULL | + -----------------------------------------+","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/and/","text":"AND,&& Description Logical AND,&& . Evaluates to true if all operands are nonzero and not NULL, to false if one or more operands are 0, otherwise NULL is returned. Syntax > SELECT column_1 AND column_2 FROM table_name; Examples > select 1 and 1 ; + ---------+ | 1 and 1 | + ---------+ | true | + ---------+ > select 1 and 0 ; + ---------+ | 1 and 0 | + ---------+ | false | + ---------+ > select 1 and null ; + ------------+ | 1 and null | + ------------+ | NULL | + ------------+ > select null and 0 ; + ------------+ | null and 0 | + ------------+ | false | + ------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a and b from t1 ; + ---------+ | a and b | + ---------+ | false | | false | | true | | false | | NULL | + ---------+ 5 rows in set ( 0 . 00 sec )","title":"AND,&&"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/and/#and","text":"","title":"AND,&amp;&amp;"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/and/#description","text":"Logical AND,&& . Evaluates to true if all operands are nonzero and not NULL, to false if one or more operands are 0, otherwise NULL is returned.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/and/#syntax","text":"> SELECT column_1 AND column_2 FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/and/#examples","text":"> select 1 and 1 ; + ---------+ | 1 and 1 | + ---------+ | true | + ---------+ > select 1 and 0 ; + ---------+ | 1 and 0 | + ---------+ | false | + ---------+ > select 1 and null ; + ------------+ | 1 and null | + ------------+ | NULL | + ------------+ > select null and 0 ; + ------------+ | null and 0 | + ------------+ | false | + ------------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a and b from t1 ; + ---------+ | a and b | + ---------+ | false | | false | | true | | false | | NULL | + ---------+ 5 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/logical-operators-overview/","text":"Logical Operators Name Description AND,&& Logical AND NOT,! Negates value OR Logical OR XOR Logical XOR","title":"Logical Operators Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/logical-operators-overview/#logical-operators","text":"Name Description AND,&& Logical AND NOT,! Negates value OR Logical OR XOR Logical XOR","title":"Logical Operators"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/","text":"NOT,! Description Logical NOT,! . Evaluates to true if the operand is 0, to false if the operand is nonzero, and NOT NULL returns NULL. Syntax > SELECT not column_name FROM table_name; Examples > select not 0 ; + -------+ | not 0 | + -------+ | true | + -------+ 1 row in set ( 0 . 02 sec ) > select not null ; + ----------+ | not null | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 00 sec ) > select not 1 ; + -------+ | not 1 | + -------+ | false | + -------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select not a and not b from t1 ; + -----------------+ | not a and not b | + -----------------+ | false | | false | | false | | true | | NULL | + -----------------+ 5 rows in set ( 0 . 00 sec ) Constraints ! is not supported for now.","title":"NOT,!"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/#not","text":"","title":"NOT,!"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/#description","text":"Logical NOT,! . Evaluates to true if the operand is 0, to false if the operand is nonzero, and NOT NULL returns NULL.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/#syntax","text":"> SELECT not column_name FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/#examples","text":"> select not 0 ; + -------+ | not 0 | + -------+ | true | + -------+ 1 row in set ( 0 . 02 sec ) > select not null ; + ----------+ | not null | + ----------+ | NULL | + ----------+ 1 row in set ( 0 . 00 sec ) > select not 1 ; + -------+ | not 1 | + -------+ | false | + -------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select not a and not b from t1 ; + -----------------+ | not a and not b | + -----------------+ | false | | false | | false | | true | | NULL | + -----------------+ 5 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/not/#constraints","text":"! is not supported for now.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/or/","text":"OR Description Logical OR,|| . When both operands are non-NULL, the result is true if any operand is nonzero, and false otherwise. With a NULL operand, the result is true if the other operand is nonzero, and NULL otherwise. If both operands are NULL , the result is NULL . Syntax > SELECT column_1 OR column_2 FROM table_name; Examples > select 1 or 1 ; + --------+ | 1 or 1 | + --------+ | true | + --------+ 1 row in set ( 0 . 01 sec ) > select 1 or 0 ; + --------+ | 1 or 0 | + --------+ | true | + --------+ 1 row in set ( 0 . 00 sec ) > select 0 or 0 ; + --------+ | 0 or 0 | + --------+ | false | + --------+ 1 row in set ( 0 . 01 sec ) > select 0 or null ; + -----------+ | 0 or null | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 00 sec ) > select 1 or null ; + -----------+ | 1 or null | + -----------+ | true | + -----------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a or b from t1 ; + --------+ | a or b | + --------+ | true | | true | | true | | false | | NULL | + --------+ 5 rows in set ( 0 . 00 sec )","title":"OR"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/or/#or","text":"","title":"OR"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/or/#description","text":"Logical OR,|| . When both operands are non-NULL, the result is true if any operand is nonzero, and false otherwise. With a NULL operand, the result is true if the other operand is nonzero, and NULL otherwise. If both operands are NULL , the result is NULL .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/or/#syntax","text":"> SELECT column_1 OR column_2 FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/or/#examples","text":"> select 1 or 1 ; + --------+ | 1 or 1 | + --------+ | true | + --------+ 1 row in set ( 0 . 01 sec ) > select 1 or 0 ; + --------+ | 1 or 0 | + --------+ | true | + --------+ 1 row in set ( 0 . 00 sec ) > select 0 or 0 ; + --------+ | 0 or 0 | + --------+ | false | + --------+ 1 row in set ( 0 . 01 sec ) > select 0 or null ; + -----------+ | 0 or null | + -----------+ | NULL | + -----------+ 1 row in set ( 0 . 00 sec ) > select 1 or null ; + -----------+ | 1 or null | + -----------+ | true | + -----------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a or b from t1 ; + --------+ | a or b | + --------+ | true | | true | | true | | false | | NULL | + --------+ 5 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/xor/","text":"XOR Description Logical XOR . Returns NULL if either operand is NULL. For non-NULL operands, evaluates to true if an odd number of operands is nonzero, otherwise false is returned. a XOR b is mathematically equal to (a AND (NOT b)) OR ((NOT a) and b) . Syntax > SELECT column_1 XOR column_2 FROM table_name; Examples > select 1 xor 1 ; + ---------+ | 1 xor 1 | + ---------+ | false | + ---------+ 1 row in set ( 0 . 01 sec ) > select 1 xor 0 ; + ---------+ | 1 xor 0 | + ---------+ | true | + ---------+ 1 row in set ( 0 . 00 sec ) > select 1 xor null ; + ------------+ | 1 xor null | + ------------+ | NULL | + ------------+ 1 row in set ( 0 . 01 sec ) > select 1 xor 1 xor 1 ; + ---------------+ | 1 xor 1 xor 1 | + ---------------+ | true | + ---------------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a xor b from t1 ; + ---------+ | a xor b | + ---------+ | true | | true | | false | | false | | NULL | + ---------+ 5 rows in set ( 0 . 00 sec )","title":"XOR"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/xor/#xor","text":"","title":"XOR"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/xor/#description","text":"Logical XOR . Returns NULL if either operand is NULL. For non-NULL operands, evaluates to true if an odd number of operands is nonzero, otherwise false is returned. a XOR b is mathematically equal to (a AND (NOT b)) OR ((NOT a) and b) .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/xor/#syntax","text":"> SELECT column_1 XOR column_2 FROM table_name;","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/operators/logical-operators/xor/#examples","text":"> select 1 xor 1 ; + ---------+ | 1 xor 1 | + ---------+ | false | + ---------+ 1 row in set ( 0 . 01 sec ) > select 1 xor 0 ; + ---------+ | 1 xor 0 | + ---------+ | true | + ---------+ 1 row in set ( 0 . 00 sec ) > select 1 xor null ; + ------------+ | 1 xor null | + ------------+ | NULL | + ------------+ 1 row in set ( 0 . 01 sec ) > select 1 xor 1 xor 1 ; + ---------------+ | 1 xor 1 xor 1 | + ---------------+ | true | + ---------------+ 1 row in set ( 0 . 00 sec ) > create table t1 ( a boolean , b bool ); > insert into t1 values ( 0 , 1 ),( true , false ),( true , 1 ),( 0 , false ),( NULL , NULL ); > select * from t1 ; > select a xor b from t1 ; + ---------+ | a xor b | + ---------+ | true | | true | | false | | false | | NULL | + ---------+ 5 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/","text":"Comparisons Using Subqueries Description The most common use of a subquery is in the form: non_subquery_operand comparison_operator (subquery) Where comparison_operator is one of these operators: = > < >= <= <> != <=> Syntax > SELECT column_name(s) FROM table_name WHERE 'a' = (SELECT column1 FROM t1) Examples > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > select * from t3 where a = ( select b from t2 ); ERROR 1105 ( HY000 ): scalar subquery returns more than 1 row > select * from t3 where a = ( select distinct b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 rows in set ( 0 . 01 sec ) > select a , b from t4 where a > ( select a , b from t2 where a > 1 ); ERROR 1105 ( HY000 ): Internal error : Unknow type TUPLE Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"Comparisons Using Subqueries"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/#comparisons-using-subqueries","text":"","title":"Comparisons Using Subqueries"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/#description","text":"The most common use of a subquery is in the form: non_subquery_operand comparison_operator (subquery) Where comparison_operator is one of these operators: = > < >= <= <> != <=>","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/#syntax","text":"> SELECT column_name(s) FROM table_name WHERE 'a' = (SELECT column1 FROM t1)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/#examples","text":"> create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > select * from t3 where a = ( select b from t2 ); ERROR 1105 ( HY000 ): scalar subquery returns more than 1 row > select * from t3 where a = ( select distinct b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 rows in set ( 0 . 01 sec ) > select a , b from t4 where a > ( select a , b from t2 where a > 1 ); ERROR 1105 ( HY000 ): Internal error : Unknow type TUPLE","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/comparisons-using-subqueries/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/","text":"Derived Tables Description This topic describes subqueries that occur as nested SELECT statements in the FROM clause of an outer SELECT statement. Such subqueries are sometimes called derived tables or table expressions because the outer query uses the results of the subquery as a data source. Syntax Every table in a FROM clause must have a name, therefore the [AS] name clause is mandatory. Any columns in the subquery select list must have unique names. > SELECT ... FROM (subquery) [AS] name ... Examples > CREATE TABLE tb1 ( c1 INT , c2 CHAR ( 5 ), c3 FLOAT ); > INSERT INTO tb1 VALUES ( 1 , '1' , 1 . 0 ); > INSERT INTO tb1 VALUES ( 2 , '2' , 2 . 0 ); > INSERT INTO tb1 VALUES ( 3 , '3' , 3 . 0 ); > select * from tb1 ; + ------+------+--------+ | c1 | c2 | c3 | + ------+------+--------+ | 1 | 1 | 1 . 0000 | | 2 | 2 | 2 . 0000 | | 3 | 3 | 3 . 0000 | + ------+------+--------+ 3 rows in set ( 0 . 03 sec ) > SELECT sc1 , sc2 , sc3 FROM ( SELECT c1 AS sc1 , c2 AS sc2 , c3 * 3 AS sc3 FROM tb1 ) AS sb WHERE sc1 > 1 ; + ------+------+--------+ | sc1 | sc2 | sc3 | + ------+------+--------+ | 2 | 2 | 6 . 0000 | | 3 | 3 | 9 . 0000 | + ------+------+--------+ 2 rows in set ( 0 . 02 sec ) Subquery with Join : > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select * from ( select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ) sub ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 00 sec ) Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"Derived Tables"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/#derived-tables","text":"","title":"Derived Tables"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/#description","text":"This topic describes subqueries that occur as nested SELECT statements in the FROM clause of an outer SELECT statement. Such subqueries are sometimes called derived tables or table expressions because the outer query uses the results of the subquery as a data source.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/#syntax","text":"Every table in a FROM clause must have a name, therefore the [AS] name clause is mandatory. Any columns in the subquery select list must have unique names. > SELECT ... FROM (subquery) [AS] name ...","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/#examples","text":"> CREATE TABLE tb1 ( c1 INT , c2 CHAR ( 5 ), c3 FLOAT ); > INSERT INTO tb1 VALUES ( 1 , '1' , 1 . 0 ); > INSERT INTO tb1 VALUES ( 2 , '2' , 2 . 0 ); > INSERT INTO tb1 VALUES ( 3 , '3' , 3 . 0 ); > select * from tb1 ; + ------+------+--------+ | c1 | c2 | c3 | + ------+------+--------+ | 1 | 1 | 1 . 0000 | | 2 | 2 | 2 . 0000 | | 3 | 3 | 3 . 0000 | + ------+------+--------+ 3 rows in set ( 0 . 03 sec ) > SELECT sc1 , sc2 , sc3 FROM ( SELECT c1 AS sc1 , c2 AS sc2 , c3 * 3 AS sc3 FROM tb1 ) AS sb WHERE sc1 > 1 ; + ------+------+--------+ | sc1 | sc2 | sc3 | + ------+------+--------+ | 2 | 2 | 6 . 0000 | | 3 | 3 | 9 . 0000 | + ------+------+--------+ 2 rows in set ( 0 . 02 sec ) Subquery with Join : > create table t1 ( libname1 varchar ( 21 ) not null primary key , city varchar ( 20 )); > create table t2 ( isbn2 varchar ( 21 ) not null primary key , author varchar ( 20 ), title varchar ( 60 )); > create table t3 ( isbn3 varchar ( 21 ) not null , libname3 varchar ( 21 ) not null , quantity int ); > insert into t2 values ( '001' , 'Daffy' , 'Aducklife' ); > insert into t2 values ( '002' , 'Bugs' , 'Arabbitlife' ); > insert into t2 values ( '003' , 'Cowboy' , 'Lifeontherange' ); > insert into t2 values ( '000' , 'Anonymous' , 'Wannabuythisbook?' ); > insert into t2 values ( '004' , 'BestSeller' , 'OneHeckuvabook' ); > insert into t2 values ( '005' , 'EveryoneBuys' , 'Thisverybook' ); > insert into t2 values ( '006' , 'SanFran' , 'Itisasanfranlifestyle' ); > insert into t2 values ( '007' , 'BerkAuthor' , 'Cool.Berkley.the.book' ); > insert into t3 values ( '000' , 'NewYorkPublicLibra' , 1 ); > insert into t3 values ( '001' , 'NewYorkPublicLibra' , 2 ); > insert into t3 values ( '002' , 'NewYorkPublicLibra' , 3 ); > insert into t3 values ( '003' , 'NewYorkPublicLibra' , 4 ); > insert into t3 values ( '004' , 'NewYorkPublicLibra' , 5 ); > insert into t3 values ( '005' , 'NewYorkPublicLibra' , 6 ); > insert into t3 values ( '006' , 'SanFransiscoPublic' , 5 ); > insert into t3 values ( '007' , 'BerkeleyPublic1' , 3 ); > insert into t3 values ( '007' , 'BerkeleyPublic2' , 3 ); > insert into t3 values ( '001' , 'NYC Lib' , 8 ); > insert into t1 values ( 'NewYorkPublicLibra' , 'NewYork' ); > insert into t1 values ( 'SanFransiscoPublic' , 'SanFran' ); > insert into t1 values ( 'BerkeleyPublic1' , 'Berkeley' ); > insert into t1 values ( 'BerkeleyPublic2' , 'Berkeley' ); > insert into t1 values ( 'NYCLib' , 'NewYork' ); > select * from ( select city , libname1 , count ( libname1 ) as a from t3 join t1 on libname1 = libname3 join t2 on isbn3 = isbn2 group by city , libname1 ) sub ; + ----------+--------------------+------+ | city | libname1 | a | + ----------+--------------------+------+ | NewYork | NewYorkPublicLibra | 6 | | SanFran | SanFransiscoPublic | 1 | | Berkeley | BerkeleyPublic1 | 1 | | Berkeley | BerkeleyPublic2 | 1 | + ----------+--------------------+------+ 4 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/derived-tables/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/","text":"Subqueries with ALL Description The word ALL , which must follow a comparison operator, means \u201creturn TRUE if the comparison is TRUE for ALL of the values in the column that the subquery returns.\u201d: operand comparison_operator ALL (subquery) For example: SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2); Suppose that there is a row in table t1 containing (10). The expression is TRUE if table t2 contains (-5,0,+5) because 10 is greater than all three values in t2. The expression is FALSE if table t2 contains (12,6,NULL,-100) because there is a single value 12 in table t2 that is greater than 10, and the result returns Empty set . The expression is unknown (that is, NULL ) if table t2 contains (0,NULL,1). Finally, the expression is TRUE if table t2 is empty. So, the following expression is TRUE when table t2 is empty: SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2); But this expression is NULL when table t2 is empty: SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2); In addition, the following expression is NULL when table t2 is empty: SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2); In general, tables containing NULL values and empty tables are \u201cedge cases.\u201d When writing subqueries, always consider whether you have taken those two possibilities into account. Syntax > SELECT column_name(s) FROM table_name {WHERE | HAVING} [not] expression comparison_operator ALL (subquery) Examples > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select * from t3 where a <> all ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t4 where 5 > all ( select a from t5 ); + ------+------+ | a | b | + ------+------+ | 4 | 8 | | 3 | 8 | | 5 | 9 | + ------+------+ 3 rows in set ( 0 . 01 sec ) > select * from t3 where 10 > all ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 7 | | 3 | + ------+ 3 rows in set ( 0 . 00 sec ) > select a , b from t6 where a > all ( select a , b from t4 where a > 3 ); ERROR 1105 ( HY000 ): subquery should return 1 column Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"SUBQUERY with ALL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/#subqueries-with-all","text":"","title":"Subqueries with ALL"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/#description","text":"The word ALL , which must follow a comparison operator, means \u201creturn TRUE if the comparison is TRUE for ALL of the values in the column that the subquery returns.\u201d: operand comparison_operator ALL (subquery) For example: SELECT s1 FROM t1 WHERE s1 > ALL (SELECT s1 FROM t2); Suppose that there is a row in table t1 containing (10). The expression is TRUE if table t2 contains (-5,0,+5) because 10 is greater than all three values in t2. The expression is FALSE if table t2 contains (12,6,NULL,-100) because there is a single value 12 in table t2 that is greater than 10, and the result returns Empty set . The expression is unknown (that is, NULL ) if table t2 contains (0,NULL,1). Finally, the expression is TRUE if table t2 is empty. So, the following expression is TRUE when table t2 is empty: SELECT * FROM t1 WHERE 1 > ALL (SELECT s1 FROM t2); But this expression is NULL when table t2 is empty: SELECT * FROM t1 WHERE 1 > (SELECT s1 FROM t2); In addition, the following expression is NULL when table t2 is empty: SELECT * FROM t1 WHERE 1 > ALL (SELECT MAX(s1) FROM t2); In general, tables containing NULL values and empty tables are \u201cedge cases.\u201d When writing subqueries, always consider whether you have taken those two possibilities into account.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/#syntax","text":"> SELECT column_name(s) FROM table_name {WHERE | HAVING} [not] expression comparison_operator ALL (subquery)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/#examples","text":"> create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select * from t3 where a <> all ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t4 where 5 > all ( select a from t5 ); + ------+------+ | a | b | + ------+------+ | 4 | 8 | | 3 | 8 | | 5 | 9 | + ------+------+ 3 rows in set ( 0 . 01 sec ) > select * from t3 where 10 > all ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 7 | | 3 | + ------+ 3 rows in set ( 0 . 00 sec ) > select a , b from t6 where a > all ( select a , b from t4 where a > 3 ); ERROR 1105 ( HY000 ): subquery should return 1 column","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-all/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/","text":"Subqueries with ANY or SOME Description Comparison operators (=, >, < , etc.) are used only on subqueries that return one row. SQL Subqueries with ANY , you can make comparisons on subqueries that return multiple rows. ANY evaluate whether any or all of the values returned by a subquery match the left-hand expression. Subqueries that use the ANY keyword return true when any value retrieved in the subquery matches the value of the left-hand expression. note The word SOME is an alias for ANY . Syntax > SELECT column_name(s) FROM table_name WHERE column_name ANY (subquery); Examples > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select * from t3 where a <> any ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t3 where a <> some ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t3 where a = some ( select b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select * from t3 where a = any ( select b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select a , b from t6 where a > any ( select a , b from t4 where a > 3 ); ERROR 1105 ( HY000 ): subquery should return 1 column Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"SUBQUERY with ANY or SOME"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/#subqueries-with-any-or-some","text":"","title":"Subqueries with ANY or SOME"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/#description","text":"Comparison operators (=, >, < , etc.) are used only on subqueries that return one row. SQL Subqueries with ANY , you can make comparisons on subqueries that return multiple rows. ANY evaluate whether any or all of the values returned by a subquery match the left-hand expression. Subqueries that use the ANY keyword return true when any value retrieved in the subquery matches the value of the left-hand expression. note The word SOME is an alias for ANY .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/#syntax","text":"> SELECT column_name(s) FROM table_name WHERE column_name ANY (subquery);","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/#examples","text":"> create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select * from t3 where a <> any ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t3 where a <> some ( select b from t2 ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) > select * from t3 where a = some ( select b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select * from t3 where a = any ( select b from t2 ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select a , b from t6 where a > any ( select a , b from t4 where a > 3 ); ERROR 1105 ( HY000 ): subquery should return 1 column","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-any-some/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/","text":"Subqueries with EXISTS or NOT EXISTS Description The EXISTS operator is used to test for the existence of any record in a subquery. If a subquery returns any rows at all, EXISTS subquery is TRUE , and NOT EXISTS subquery is FALSE . Syntax > SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition); Examples > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > select * from t3 where exists ( select * from t2 where t2 . b = t3 . a ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select * from t3 where not exists ( select * from t2 where t2 . b = t3 . a ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec ) Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"SUBQUERY with EXISTS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/#subqueries-with-exists-or-not-exists","text":"","title":"Subqueries with EXISTS or NOT EXISTS"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/#description","text":"The EXISTS operator is used to test for the existence of any record in a subquery. If a subquery returns any rows at all, EXISTS subquery is TRUE , and NOT EXISTS subquery is FALSE .","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/#syntax","text":"> SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/#examples","text":"> create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > select * from t3 where exists ( select * from t2 where t2 . b = t3 . a ); + ------+ | a | + ------+ | 7 | + ------+ 1 row in set ( 0 . 00 sec ) > select * from t3 where not exists ( select * from t2 where t2 . b = t3 . a ); + ------+ | a | + ------+ | 6 | | 3 | + ------+ 2 rows in set ( 0 . 00 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-exists/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/","text":"Subqueries with IN Description A subquery can be used with the IN operator as \"expression IN (subquery)\". The subquery should return a single column with one or more rows to form a list of values to be used by the IN operation. Use the IN clause for multiple-record, single-column subqueries. After the subquery returns results introduced by IN or NOT IN , the outer query uses them to return the final result. If any row in the sub-query result matches, the answer is true. If the subquery result is empty, the answer is false. If no row in the sub-query result matches, the answer is also false. If all of the values in the sub-query result are null, the answer is false. Syntax > SELECT ... FROM table_name WHERE column_name IN (subquery) Examples > create table t1 ( val varchar ( 10 )); > insert into t1 values ( 'aaa' ), ( 'bbb' ),( 'eee' ),( 'mmm' ),( 'ppp' ); > select count ( * ) from t1 as w1 where w1 . val in ( select w2 . val from t1 as w2 where w2 . val like 'm%' ) and w1 . val in ( select w3 . val from t1 as w3 where w3 . val like 'e%' ); + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( id int not null , text varchar ( 20 ) not null default '' , primary key ( id )); > insert into t1 ( id , text ) values ( 1 , 'text1' ), ( 2 , 'text2' ), ( 3 , 'text3' ), ( 4 , 'text4' ), ( 5 , 'text5' ), ( 6 , 'text6' ), ( 7 , 'text7' ), ( 8 , 'text8' ), ( 9 , 'text9' ), ( 10 , 'text10' ), ( 11 , 'text11' ), ( 12 , 'text12' ); > select * from t1 where id not in ( select id from t1 where id < 8 ); + ------+--------+ | id | text | + ------+--------+ | 8 | text8 | | 9 | text9 | | 10 | text10 | | 11 | text11 | | 12 | text12 | + ------+--------+ 5 rows in set ( 0 . 00 sec ) > CREATE TABLE t1 ( a int ); > CREATE TABLE t2 ( a int , b int ); > CREATE TABLE t3 ( b int NOT NULL ); > INSERT INTO t1 VALUES ( 1 ), ( 2 ), ( 3 ), ( 4 ); > INSERT INTO t2 VALUES ( 1 , 10 ), ( 3 , 30 ); > select * from t1 where t1 . a in ( SELECT t1 . a FROM t1 LEFT JOIN t2 ON t2 . a = t1 . a ); + ------+ | a | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+ 4 rows in set ( 0 . 01 sec ) > SELECT * FROM t2 LEFT JOIN t3 ON t2 . b = t3 . b WHERE t3 . b IS NOT NULL OR t2 . a > 10 ; Empty set ( 0 . 01 sec ) > SELECT * FROM t1 WHERE t1 . a NOT IN ( SELECT a FROM t2 LEFT JOIN t3 ON t2 . b = t3 . b WHERE t3 . b IS NOT NULL OR t2 . a > 10 ); + ------+ | a | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+ 4 rows in set ( 0 . 00 sec ) > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select a , b from t6 where ( a , b ) in ( select a , b from t4 where a > 3 ); Empty set ( 0 . 02 sec ) Constraints MatrixOne does not support selecting multiple columns for the subquery.","title":"SUBQUERY with IN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/#subqueries-with-in","text":"","title":"Subqueries with IN"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/#description","text":"A subquery can be used with the IN operator as \"expression IN (subquery)\". The subquery should return a single column with one or more rows to form a list of values to be used by the IN operation. Use the IN clause for multiple-record, single-column subqueries. After the subquery returns results introduced by IN or NOT IN , the outer query uses them to return the final result. If any row in the sub-query result matches, the answer is true. If the subquery result is empty, the answer is false. If no row in the sub-query result matches, the answer is also false. If all of the values in the sub-query result are null, the answer is false.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/#syntax","text":"> SELECT ... FROM table_name WHERE column_name IN (subquery)","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/#examples","text":"> create table t1 ( val varchar ( 10 )); > insert into t1 values ( 'aaa' ), ( 'bbb' ),( 'eee' ),( 'mmm' ),( 'ppp' ); > select count ( * ) from t1 as w1 where w1 . val in ( select w2 . val from t1 as w2 where w2 . val like 'm%' ) and w1 . val in ( select w3 . val from t1 as w3 where w3 . val like 'e%' ); + ----------+ | count ( * ) | + ----------+ | 0 | + ----------+ 1 row in set ( 0 . 01 sec ) > create table t1 ( id int not null , text varchar ( 20 ) not null default '' , primary key ( id )); > insert into t1 ( id , text ) values ( 1 , 'text1' ), ( 2 , 'text2' ), ( 3 , 'text3' ), ( 4 , 'text4' ), ( 5 , 'text5' ), ( 6 , 'text6' ), ( 7 , 'text7' ), ( 8 , 'text8' ), ( 9 , 'text9' ), ( 10 , 'text10' ), ( 11 , 'text11' ), ( 12 , 'text12' ); > select * from t1 where id not in ( select id from t1 where id < 8 ); + ------+--------+ | id | text | + ------+--------+ | 8 | text8 | | 9 | text9 | | 10 | text10 | | 11 | text11 | | 12 | text12 | + ------+--------+ 5 rows in set ( 0 . 00 sec ) > CREATE TABLE t1 ( a int ); > CREATE TABLE t2 ( a int , b int ); > CREATE TABLE t3 ( b int NOT NULL ); > INSERT INTO t1 VALUES ( 1 ), ( 2 ), ( 3 ), ( 4 ); > INSERT INTO t2 VALUES ( 1 , 10 ), ( 3 , 30 ); > select * from t1 where t1 . a in ( SELECT t1 . a FROM t1 LEFT JOIN t2 ON t2 . a = t1 . a ); + ------+ | a | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+ 4 rows in set ( 0 . 01 sec ) > SELECT * FROM t2 LEFT JOIN t3 ON t2 . b = t3 . b WHERE t3 . b IS NOT NULL OR t2 . a > 10 ; Empty set ( 0 . 01 sec ) > SELECT * FROM t1 WHERE t1 . a NOT IN ( SELECT a FROM t2 LEFT JOIN t3 ON t2 . b = t3 . b WHERE t3 . b IS NOT NULL OR t2 . a > 10 ); + ------+ | a | + ------+ | 1 | | 2 | | 3 | | 4 | + ------+ 4 rows in set ( 0 . 00 sec ) > create table t1 ( a int ); > create table t2 ( a int , b int ); > create table t3 ( a int ); > create table t4 ( a int not null , b int not null ); > create table t5 ( a int ); > create table t6 ( a int , b int ); > insert into t1 values ( 2 ); > insert into t2 values ( 1 , 7 ),( 2 , 7 ); > insert into t4 values ( 4 , 8 ),( 3 , 8 ),( 5 , 9 ); > insert into t5 values ( null ); > insert into t3 values ( 6 ),( 7 ),( 3 ); > insert into t6 values ( 10 , 7 ),( null , 7 ); > select a , b from t6 where ( a , b ) in ( select a , b from t4 where a > 3 ); Empty set ( 0 . 02 sec )","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Data-Manipulation-Statements/subqueries/subquery-with-in/#constraints","text":"MatrixOne does not support selecting multiple columns for the subquery.","title":"Constraints"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain-analyze/","text":"Obtaining Information with EXPLAIN ANALYZE EXPLAIN ANALYZE , which runs a statement and produces EXPLAIN output along with timing and additional, iterator-based, information about how the optimizer's expectations matched the actual execution. For each iterator, the following information is provided: Estimated execution cost Some iterators are not accounted for by the cost model, and so are not included in the estimate. Estimated number of returned rows Time to return first row Time spent executing this iterator (including child iterators, but not parent iterators), in milliseconds. Number of rows returned by the iterator Number of loops The query execution information is displayed using the TREE output format, in which nodes represent iterators. EXPLAIN ANALYZE always uses the TREE output format, also can optionally be specified explicitly using FORMAT=TREE; formats other than TREE remain unsupported. EXPLAIN ANALYZE can be used with SELECT statements, as well as with multi-table UPDATE and DELETE statements. You can terminate this statement using KILL QUERY or CTRL-C . EXPLAIN ANALYZE cannot be used with FOR CONNECTION. Example Create table CREATE TABLE t1 ( c1 INTEGER DEFAULT NULL , c2 INTEGER DEFAULT NULL ); CREATE TABLE t2 ( c1 INTEGER DEFAULT NULL , c2 INTEGER DEFAULT NULL ); CREATE TABLE t3 ( pk INTEGER NOT NULL PRIMARY KEY , i INTEGER DEFAULT NULL ); Example output : > EXPLAIN ANALYZE SELECT * FROM t1 JOIN t2 ON ( t1 . c1 = t2 . c2 ) \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Join *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 5053 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Join Type : INNER *************************** 6 . row *************************** QUERY PLAN : Join Cond : ( t1 . c1 = t2 . c2 ) *************************** 7 . row *************************** QUERY PLAN : -> Table Scan on aaa . t1 *************************** 8 . row *************************** QUERY PLAN : Analyze : timeConsumed = 2176 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 9 . row *************************** QUERY PLAN : -> Table Scan on aaa . t2 *************************** 10 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes 10 rows in set ( 0 . 00 sec ) > EXPLAIN ANALYZE SELECT * FROM t3 WHERE i > 8 \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Table Scan on aaa . t3 *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 154 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Filter Cond : ( CAST ( t3 . i AS BIGINT ) > 8 ) 5 rows in set ( 0 . 00 sec ) > EXPLAIN ANALYZE SELECT * FROM t3 WHERE pk > 17 \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Table Scan on aaa . t3 *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 309 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Filter Cond : ( CAST ( t3 . pk AS BIGINT ) > 17 ) 5 rows in set ( 0 . 00 sec ) Values shown for actual time in the output of this statement are expressed in milliseconds.","title":"Explain Analyze"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain-analyze/#obtaining-information-with-explain-analyze","text":"EXPLAIN ANALYZE , which runs a statement and produces EXPLAIN output along with timing and additional, iterator-based, information about how the optimizer's expectations matched the actual execution. For each iterator, the following information is provided: Estimated execution cost Some iterators are not accounted for by the cost model, and so are not included in the estimate. Estimated number of returned rows Time to return first row Time spent executing this iterator (including child iterators, but not parent iterators), in milliseconds. Number of rows returned by the iterator Number of loops The query execution information is displayed using the TREE output format, in which nodes represent iterators. EXPLAIN ANALYZE always uses the TREE output format, also can optionally be specified explicitly using FORMAT=TREE; formats other than TREE remain unsupported. EXPLAIN ANALYZE can be used with SELECT statements, as well as with multi-table UPDATE and DELETE statements. You can terminate this statement using KILL QUERY or CTRL-C . EXPLAIN ANALYZE cannot be used with FOR CONNECTION.","title":"Obtaining Information with EXPLAIN ANALYZE"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain-analyze/#example","text":"Create table CREATE TABLE t1 ( c1 INTEGER DEFAULT NULL , c2 INTEGER DEFAULT NULL ); CREATE TABLE t2 ( c1 INTEGER DEFAULT NULL , c2 INTEGER DEFAULT NULL ); CREATE TABLE t3 ( pk INTEGER NOT NULL PRIMARY KEY , i INTEGER DEFAULT NULL ); Example output : > EXPLAIN ANALYZE SELECT * FROM t1 JOIN t2 ON ( t1 . c1 = t2 . c2 ) \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Join *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 5053 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Join Type : INNER *************************** 6 . row *************************** QUERY PLAN : Join Cond : ( t1 . c1 = t2 . c2 ) *************************** 7 . row *************************** QUERY PLAN : -> Table Scan on aaa . t1 *************************** 8 . row *************************** QUERY PLAN : Analyze : timeConsumed = 2176 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 9 . row *************************** QUERY PLAN : -> Table Scan on aaa . t2 *************************** 10 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes 10 rows in set ( 0 . 00 sec ) > EXPLAIN ANALYZE SELECT * FROM t3 WHERE i > 8 \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Table Scan on aaa . t3 *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 154 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Filter Cond : ( CAST ( t3 . i AS BIGINT ) > 8 ) 5 rows in set ( 0 . 00 sec ) > EXPLAIN ANALYZE SELECT * FROM t3 WHERE pk > 17 \\ G *************************** 1 . row *************************** QUERY PLAN : Project *************************** 2 . row *************************** QUERY PLAN : Analyze : timeConsumed = 0 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 3 . row *************************** QUERY PLAN : -> Table Scan on aaa . t3 *************************** 4 . row *************************** QUERY PLAN : Analyze : timeConsumed = 309 us inputRows = 0 outputRows = 0 inputSize = 0 bytes outputSize = 0 bytes memorySize = 0 bytes *************************** 5 . row *************************** QUERY PLAN : Filter Cond : ( CAST ( t3 . pk AS BIGINT ) > 17 ) 5 rows in set ( 0 . 00 sec ) Values shown for actual time in the output of this statement are expressed in milliseconds.","title":"Example"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/","text":"EXPLAIN EXPLAIN \u2014 show the execution plan of a statement. Syntax EXPLAIN [ ( option [, ...] ) ] statement where option can be one of: ANALYZE [ boolean ] VERBOSE [ boolean ] FORMAT { TEXT | JSON } For 0.5.1, only TEXT format is supported. Description This command displays the execution plan that the MatrixOne planner generates for the supplied statement. The execution plan shows how the table(s) referenced by the statement will be scanned \u2014 by plain sequential scan, index scan, etc. \u2014 and if multiple tables are referenced, what join algorithms will be used to bring together the required rows from each input table. The most critical part of the display is the estimated statement execution cost, which is the planner's guess at how long it will take to run the statement (measured in cost units that are arbitrary, but conventionally mean disk page fetches). Actually two numbers are shown: the start-up cost before the first row can be returned, and the total cost to return all the rows. For most queries the total cost is what matters, but in contexts such as a subquery in EXISTS , the planner will choose the smallest start-up cost instead of the smallest total cost (since the executor will stop after getting one row, anyway). Also, if you limit the number of rows to return with a LIMIT clause, the planner makes an appropriate interpolation between the endpoint costs to estimate which plan is really the cheapest. The ANALYZE option causes the statement to be actually executed, not only planned. Then actual run time statistics are added to the display, including the total elapsed time expended within each plan node (in milliseconds) and the total number of rows it actually returned. This is useful for seeing whether the planner's estimates are close to reality. Parameters ANALYZE: Carry out the command and show actual run times and other statistics. This parameter defaults to FALSE . VERBOSE: Display additional information regarding the plan. Specifically, include the output column list for each node in the plan tree, schema-qualify table and function names, always label variables in expressions with their range table alias, and always print the name of each trigger for which statistics are displayed. This parameter is FALSE by default. FORMAT: Specify the output format, which can be TEXT, JSON. Non-text output contains the same information as the text output format, but is easier for programs to parse. This parameter is TEXT by dafault. BOOLEAN: Specifies whether the selected option should be turned on or off. You can write TRUE to enable the option, and FALSE to disable it. The boolean value can also be omitted, in which case TRUE is assumed. STETEMENT MatrixOne supports any SELECT , UPDATE , DELETE statement execution plan. For INSERT statement, only INSERT INTO..SELECT is supported in 0.5.1 version. INSERT INTO...VALUES is not supported yet. Examples Node_TABLE_SCAN mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 OR N_NATIONKEY < 10 ; + ------------------------------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : (( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ) or ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 )) | + ------------------------------------------------------------------------------------+ Node_VALUE_SCAN mysql > explain verbose select abs ( - 1 ); + -----------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 1 | | -> Values Scan \"*VALUES*\" ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 0 | + -----------------------------------------------------------------------------+ Node_SORT mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 AND N_NATIONKEY < 10 ORDER BY N_NAME , N_REGIONKEY DESC ; + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Sort Key : # [ 0 , 0 ] INTERNAL , # [ 0 , 1 ] DESC | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ), ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 ) | + --------------------------------------------------------------------------------------------+ With limit and offset: mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY limit 10 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY LIMIT 10 offset 20 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 , Offset : 20 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ Node_AGG mysql > explain verbose SELECT count ( * ) FROM NATION group by N_NAME ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Aggregate ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ - 2 , 0 ] | | Group Key : # [ 0 , 1 ] | | Aggregate Functions : starcount ( # [ 0 , 0 ]) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' ) | + -------------------------------------------------------------------------------------+ Node_JOIN mysql > explain verbose SELECT NATION . N_NAME , REGION . R_NAME FROM NATION join REGION on NATION . N_REGIONKEY = REGION . R_REGIONKEY WHERE NATION . N_REGIONKEY > 10 AND LENGTH ( NATION . N_NAME ) > LENGTH ( REGION . R_NAME ); + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 0 ] | | -> Filter ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Filter Cond : ( length ( CAST ( # [ 0 , 1 ] AS CHAR )) > length ( CAST ( # [ 0 , 0 ] AS CHAR ))) | | -> Join ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 1 , 0 ] | | Join Type : INNER | | Join Cond : ( # [ 1 , 1 ] = # [ 0 , 0 ]) | | -> Table Scan on tpch . region ( cost = 0 . 00 .. 0 . 00 card = 5 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'region' ( 0 : 'r_regionkey' , 1 : 'r_name' ) | | -> Table Scan on tpch . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_name' , 1 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 1 ] AS INT64 ) > 10 ) | + --------------------------------------------------------------------------------------------+ Node_INSERT mysql > explain verbose INSERT NATION select * from nation ; + ---------------------------------------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------------------------------------+ | Insert on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' , 3 : 'n_comment' ) | + ---------------------------------------------------------------------------------------------+ 7 rows in set ( 0 . 00 sec ) Node_Update mysql > explain verbose UPDATE NATION SET N_NAME = 'U1' , N_REGIONKEY = 2 WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Update on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], 'U1' , CAST ( 2 AS INT32 ) | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ Node_Delete mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ With limit: mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"EXPLAIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#explain","text":"EXPLAIN \u2014 show the execution plan of a statement.","title":"EXPLAIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#syntax","text":"EXPLAIN [ ( option [, ...] ) ] statement where option can be one of: ANALYZE [ boolean ] VERBOSE [ boolean ] FORMAT { TEXT | JSON } For 0.5.1, only TEXT format is supported.","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#description","text":"This command displays the execution plan that the MatrixOne planner generates for the supplied statement. The execution plan shows how the table(s) referenced by the statement will be scanned \u2014 by plain sequential scan, index scan, etc. \u2014 and if multiple tables are referenced, what join algorithms will be used to bring together the required rows from each input table. The most critical part of the display is the estimated statement execution cost, which is the planner's guess at how long it will take to run the statement (measured in cost units that are arbitrary, but conventionally mean disk page fetches). Actually two numbers are shown: the start-up cost before the first row can be returned, and the total cost to return all the rows. For most queries the total cost is what matters, but in contexts such as a subquery in EXISTS , the planner will choose the smallest start-up cost instead of the smallest total cost (since the executor will stop after getting one row, anyway). Also, if you limit the number of rows to return with a LIMIT clause, the planner makes an appropriate interpolation between the endpoint costs to estimate which plan is really the cheapest. The ANALYZE option causes the statement to be actually executed, not only planned. Then actual run time statistics are added to the display, including the total elapsed time expended within each plan node (in milliseconds) and the total number of rows it actually returned. This is useful for seeing whether the planner's estimates are close to reality.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#parameters","text":"ANALYZE: Carry out the command and show actual run times and other statistics. This parameter defaults to FALSE . VERBOSE: Display additional information regarding the plan. Specifically, include the output column list for each node in the plan tree, schema-qualify table and function names, always label variables in expressions with their range table alias, and always print the name of each trigger for which statistics are displayed. This parameter is FALSE by default. FORMAT: Specify the output format, which can be TEXT, JSON. Non-text output contains the same information as the text output format, but is easier for programs to parse. This parameter is TEXT by dafault. BOOLEAN: Specifies whether the selected option should be turned on or off. You can write TRUE to enable the option, and FALSE to disable it. The boolean value can also be omitted, in which case TRUE is assumed. STETEMENT MatrixOne supports any SELECT , UPDATE , DELETE statement execution plan. For INSERT statement, only INSERT INTO..SELECT is supported in 0.5.1 version. INSERT INTO...VALUES is not supported yet.","title":"Parameters"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#examples","text":"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_table_scan","text":"mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 OR N_NATIONKEY < 10 ; + ------------------------------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : (( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ) or ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 )) | + ------------------------------------------------------------------------------------+","title":"Node_TABLE_SCAN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_value_scan","text":"mysql > explain verbose select abs ( - 1 ); + -----------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 1 | | -> Values Scan \"*VALUES*\" ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 0 | + -----------------------------------------------------------------------------+","title":"Node_VALUE_SCAN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_sort","text":"mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 AND N_NATIONKEY < 10 ORDER BY N_NAME , N_REGIONKEY DESC ; + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Sort Key : # [ 0 , 0 ] INTERNAL , # [ 0 , 1 ] DESC | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ), ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 ) | + --------------------------------------------------------------------------------------------+ With limit and offset: mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY limit 10 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY LIMIT 10 offset 20 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 , Offset : 20 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+","title":"Node_SORT"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_agg","text":"mysql > explain verbose SELECT count ( * ) FROM NATION group by N_NAME ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Aggregate ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ - 2 , 0 ] | | Group Key : # [ 0 , 1 ] | | Aggregate Functions : starcount ( # [ 0 , 0 ]) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' ) | + -------------------------------------------------------------------------------------+","title":"Node_AGG"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_join","text":"mysql > explain verbose SELECT NATION . N_NAME , REGION . R_NAME FROM NATION join REGION on NATION . N_REGIONKEY = REGION . R_REGIONKEY WHERE NATION . N_REGIONKEY > 10 AND LENGTH ( NATION . N_NAME ) > LENGTH ( REGION . R_NAME ); + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 0 ] | | -> Filter ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Filter Cond : ( length ( CAST ( # [ 0 , 1 ] AS CHAR )) > length ( CAST ( # [ 0 , 0 ] AS CHAR ))) | | -> Join ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 1 , 0 ] | | Join Type : INNER | | Join Cond : ( # [ 1 , 1 ] = # [ 0 , 0 ]) | | -> Table Scan on tpch . region ( cost = 0 . 00 .. 0 . 00 card = 5 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'region' ( 0 : 'r_regionkey' , 1 : 'r_name' ) | | -> Table Scan on tpch . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_name' , 1 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 1 ] AS INT64 ) > 10 ) | + --------------------------------------------------------------------------------------------+","title":"Node_JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_insert","text":"mysql > explain verbose INSERT NATION select * from nation ; + ---------------------------------------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------------------------------------+ | Insert on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' , 3 : 'n_comment' ) | + ---------------------------------------------------------------------------------------------+ 7 rows in set ( 0 . 00 sec )","title":"Node_INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_update","text":"mysql > explain verbose UPDATE NATION SET N_NAME = 'U1' , N_REGIONKEY = 2 WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Update on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], 'U1' , CAST ( 2 AS INT32 ) | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"Node_Update"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/0.6-explain/#node_delete","text":"mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ With limit: mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"Node_Delete"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/","text":"EXPLAIN Output Format Output Structure The command's result is a textual description of the plan selected for the statement , optionally annotated with execution statistics. Take the following SQL as an example, we demonstrate the output structure. explain select city,libname1,count(libname1) as a from t3 join t1 on libname1=libname3 join t2 on isbn3=isbn2 group by city,libname1; +--------------------------------------------------------------------------------------------+ | QUERY PLAN | +--------------------------------------------------------------------------------------------+ | Project(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | -> Aggregate(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | Group Key:#[0,1], #[0,0] | | Aggregate Functions: count(#[0,0]) | | -> Join(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | Join Type: INNER | | Join Cond: (#[1,2] = #[0,0]) | | -> Table Scan on abc.t2(cost=0.00..0.00 card=8.00 ndv=0.00 rowsize=0 | | -> Join(cost=0.00..0.00 card=50.00 ndv=0.00 rowsize=0 | | Join Type: INNER | | Join Cond: (#[0,0] = #[1,1]) | | -> Table Scan on abc.t1(cost=0.00..0.00 card=5.00 ndv=0.00 rowsize=0 | | -> Table Scan on abc.t3(cost=0.00..0.00 card=10.00 ndv=0.00 rowsize=0 | +--------------------------------------------------------------------------------------------+ 13 rows in set (0.00 sec) EXPLAIN outputs a tree structure, named as Execution Plan Tree . Every leaf node includes the information of node type, affected objects and other properties such as cost , rowsize etc. We can simplify the above example only with node type information. It visualizes the whole process of a SQL query, shows which operation nodes it goes through and what are their cost estimation. Project \u2514\u2500\u2500 Aggregate \u2514\u2500\u2500 Join \u2514\u2500\u2500 Table Scan \u2514\u2500\u2500 Join \u2514\u2500\u2500Table Scan \u2514\u2500\u2500Table Scan Node types In 0.5.0 version, the following node types are supported. Node Type Name in Explain Node_VALUE_SCAN Values Scan Node_TABLE_SCAN Table Scan Node_PROJECT Project Node_AGG Aggregate Node_FILTER Filter Node_JOIN Join Node_SORT Sort Node_INSERT Insert Node_UPDATE Update Node_DELETE Delete Table Scan Property Format Description cost cost=0.00..0.00 The first is estimated start-up cost. This is the time expended before the output phase can begin, e.g., time to do the sorting in a sort node. The second is estimated total cost. This is stated on the assumption that the plan node is run to completion, i.e., all available rows are retrieved. In practice a node's parent node might stop short of reading all available rows (see the LIMIT example below). card card=14.00 Estimated column cardinality. ndv ndv=0.00 Estimated number of distinct values. rowsize rowsize=0.00 Estimated rowsize. output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information. Table Table : 'emp' (0:'empno', 1:'ename', 2:'job', 3:'mgr',) Table definition information after column pruning. Filter Cond Filter Cond: (CAST(#[0,5] AS DECIMAL128) > CAST(20 AS DECIMAL128)) Filter condition. Values Scan Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: 0 Node output information Project Property Format Description cost (cost=0.00..0.00 card=25.00 ndv=0.00 rowsize=0) Estimated cost output Output: (CAST(#[0,0] AS INT64) + 2) Node output information Aggregate Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Group Key Group Key:#[0,0] Key for grouping Aggregate Functions Aggregate Functions: max(#[0,1]) Aggregate function name Filter Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Filter Cond Filter Cond: (CAST(#[0,1] AS INT64) > 10) Filter condition Join Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0] Node output information Join Type: INNER Join Type: INNER Join type Join Cond Join Cond: (#[0,0] = #[1,0]) Join condition Sort Property Format Description cost (cost=0.00..0.00 card=25.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Sort Key Sort Key: #[0,0] DESC, #[0,1] INTERNAL Sort key Limit Limit: 10 Number limit for output data Offset Offset: 20 Number offset for output data","title":"EXPLAIN Output Format"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#explain-output-format","text":"","title":"EXPLAIN Output Format"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#output-structure","text":"The command's result is a textual description of the plan selected for the statement , optionally annotated with execution statistics. Take the following SQL as an example, we demonstrate the output structure. explain select city,libname1,count(libname1) as a from t3 join t1 on libname1=libname3 join t2 on isbn3=isbn2 group by city,libname1; +--------------------------------------------------------------------------------------------+ | QUERY PLAN | +--------------------------------------------------------------------------------------------+ | Project(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | -> Aggregate(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | Group Key:#[0,1], #[0,0] | | Aggregate Functions: count(#[0,0]) | | -> Join(cost=0.00..0.00 card=400.00 ndv=0.00 rowsize=0 | | Join Type: INNER | | Join Cond: (#[1,2] = #[0,0]) | | -> Table Scan on abc.t2(cost=0.00..0.00 card=8.00 ndv=0.00 rowsize=0 | | -> Join(cost=0.00..0.00 card=50.00 ndv=0.00 rowsize=0 | | Join Type: INNER | | Join Cond: (#[0,0] = #[1,1]) | | -> Table Scan on abc.t1(cost=0.00..0.00 card=5.00 ndv=0.00 rowsize=0 | | -> Table Scan on abc.t3(cost=0.00..0.00 card=10.00 ndv=0.00 rowsize=0 | +--------------------------------------------------------------------------------------------+ 13 rows in set (0.00 sec) EXPLAIN outputs a tree structure, named as Execution Plan Tree . Every leaf node includes the information of node type, affected objects and other properties such as cost , rowsize etc. We can simplify the above example only with node type information. It visualizes the whole process of a SQL query, shows which operation nodes it goes through and what are their cost estimation. Project \u2514\u2500\u2500 Aggregate \u2514\u2500\u2500 Join \u2514\u2500\u2500 Table Scan \u2514\u2500\u2500 Join \u2514\u2500\u2500Table Scan \u2514\u2500\u2500Table Scan","title":"Output Structure"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#node-types","text":"In 0.5.0 version, the following node types are supported. Node Type Name in Explain Node_VALUE_SCAN Values Scan Node_TABLE_SCAN Table Scan Node_PROJECT Project Node_AGG Aggregate Node_FILTER Filter Node_JOIN Join Node_SORT Sort Node_INSERT Insert Node_UPDATE Update Node_DELETE Delete","title":"Node types"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#table-scan","text":"Property Format Description cost cost=0.00..0.00 The first is estimated start-up cost. This is the time expended before the output phase can begin, e.g., time to do the sorting in a sort node. The second is estimated total cost. This is stated on the assumption that the plan node is run to completion, i.e., all available rows are retrieved. In practice a node's parent node might stop short of reading all available rows (see the LIMIT example below). card card=14.00 Estimated column cardinality. ndv ndv=0.00 Estimated number of distinct values. rowsize rowsize=0.00 Estimated rowsize. output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information. Table Table : 'emp' (0:'empno', 1:'ename', 2:'job', 3:'mgr',) Table definition information after column pruning. Filter Cond Filter Cond: (CAST(#[0,5] AS DECIMAL128) > CAST(20 AS DECIMAL128)) Filter condition.","title":"Table Scan"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#values-scan","text":"Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: 0 Node output information","title":"Values Scan"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#project","text":"Property Format Description cost (cost=0.00..0.00 card=25.00 ndv=0.00 rowsize=0) Estimated cost output Output: (CAST(#[0,0] AS INT64) + 2) Node output information","title":"Project"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#aggregate","text":"Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Group Key Group Key:#[0,0] Key for grouping Aggregate Functions Aggregate Functions: max(#[0,1]) Aggregate function name","title":"Aggregate"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#filter","text":"Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Filter Cond Filter Cond: (CAST(#[0,1] AS INT64) > 10) Filter condition","title":"Filter"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#join","text":"Property Format Description cost (cost=0.00..0.00 card=14.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0] Node output information Join Type: INNER Join Type: INNER Join type Join Cond Join Cond: (#[0,0] = #[1,0]) Join condition","title":"Join"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain-workflow/#sort","text":"Property Format Description cost (cost=0.00..0.00 card=25.00 ndv=0.00 rowsize=0) Estimated cost output Output: #[0,0], #[0,1], #[0,2], #[0,3], #[0,4], #[0,5], #[0,6], #[0,7] Node output information Sort Key Sort Key: #[0,0] DESC, #[0,1] INTERNAL Sort key Limit Limit: 10 Number limit for output data Offset Offset: 20 Number offset for output data","title":"Sort"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/","text":"EXPLAIN EXPLAIN \u2014 show the execution plan of a statement. Syntax EXPLAIN [ ( option [, ...] ) ] statement where option can be one of: VERBOSE [ boolean ] FORMAT { TEXT | JSON } For 0.5.1, only TEXT format is supported. Description This command displays the execution plan that the MatrixOne planner generates for the supplied statement. The execution plan shows how the table(s) referenced by the statement will be scanned \u2014 by plain sequential scan, index scan, etc. \u2014 and if multiple tables are referenced, what join algorithms will be used to bring together the required rows from each input table. The most critical part of the display is the estimated statement execution cost, which is the planner's guess at how long it will take to run the statement (measured in cost units that are arbitrary, but conventionally mean disk page fetches). Actually two numbers are shown: the start-up cost before the first row can be returned, and the total cost to return all the rows. For most queries the total cost is what matters, but in contexts such as a subquery in EXISTS , the planner will choose the smallest start-up cost instead of the smallest total cost (since the executor will stop after getting one row, anyway). Also, if you limit the number of rows to return with a LIMIT clause, the planner makes an appropriate interpolation between the endpoint costs to estimate which plan is really the cheapest. Parameters VERBOSE: Display additional information regarding the plan. Specifically, include the output column list for each node in the plan tree, schema-qualify table and function names, always label variables in expressions with their range table alias, and always print the name of each trigger for which statistics are displayed. This parameter is FALSE by default. FORMAT: Specify the output format, which can be TEXT, JSON. Non-text output contains the same information as the text output format, but is easier for programs to parse. This parameter is TEXT by dafault. BOOLEAN: Specifies whether the selected option should be turned on or off. You can write TRUE to enable the option, and FALSE to disable it. The boolean value can also be omitted, in which case TRUE is assumed. STETEMENT MatrixOne supports any SELECT , UPDATE , DELETE statement execution plan. For INSERT statement, only INSERT INTO..SELECT is supported in 0.5.1 version. INSERT INTO...VALUES is not supported yet. Examples Node_TABLE_SCAN mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 OR N_NATIONKEY < 10 ; + ------------------------------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : (( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ) or ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 )) | + ------------------------------------------------------------------------------------+ Node_VALUE_SCAN mysql > explain verbose select abs ( - 1 ); + -----------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 1 | | -> Values Scan \"*VALUES*\" ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 0 | + -----------------------------------------------------------------------------+ Node_SORT mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 AND N_NATIONKEY < 10 ORDER BY N_NAME , N_REGIONKEY DESC ; + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Sort Key : # [ 0 , 0 ] INTERNAL , # [ 0 , 1 ] DESC | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ), ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 ) | + --------------------------------------------------------------------------------------------+ With limit and offset: mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY limit 10 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY LIMIT 10 offset 20 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 , Offset : 20 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ Node_AGG mysql > explain verbose SELECT count ( * ) FROM NATION group by N_NAME ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Aggregate ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ - 2 , 0 ] | | Group Key : # [ 0 , 1 ] | | Aggregate Functions : starcount ( # [ 0 , 0 ]) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' ) | + -------------------------------------------------------------------------------------+ Node_JOIN mysql > explain verbose SELECT NATION . N_NAME , REGION . R_NAME FROM NATION join REGION on NATION . N_REGIONKEY = REGION . R_REGIONKEY WHERE NATION . N_REGIONKEY > 10 AND LENGTH ( NATION . N_NAME ) > LENGTH ( REGION . R_NAME ); + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 0 ] | | -> Filter ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Filter Cond : ( length ( CAST ( # [ 0 , 1 ] AS CHAR )) > length ( CAST ( # [ 0 , 0 ] AS CHAR ))) | | -> Join ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 1 , 0 ] | | Join Type : INNER | | Join Cond : ( # [ 1 , 1 ] = # [ 0 , 0 ]) | | -> Table Scan on tpch . region ( cost = 0 . 00 .. 0 . 00 card = 5 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'region' ( 0 : 'r_regionkey' , 1 : 'r_name' ) | | -> Table Scan on tpch . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_name' , 1 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 1 ] AS INT64 ) > 10 ) | + --------------------------------------------------------------------------------------------+ Node_INSERT mysql > explain verbose INSERT NATION select * from nation ; + ---------------------------------------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------------------------------------+ | Insert on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' , 3 : 'n_comment' ) | + ---------------------------------------------------------------------------------------------+ 7 rows in set ( 0 . 00 sec ) Node_Update mysql > explain verbose UPDATE NATION SET N_NAME = 'U1' , N_REGIONKEY = 2 WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Update on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], 'U1' , CAST ( 2 AS INT32 ) | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ Node_Delete mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ With limit: mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"EXPLAIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#explain","text":"EXPLAIN \u2014 show the execution plan of a statement.","title":"EXPLAIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#syntax","text":"EXPLAIN [ ( option [, ...] ) ] statement where option can be one of: VERBOSE [ boolean ] FORMAT { TEXT | JSON } For 0.5.1, only TEXT format is supported.","title":"Syntax"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#description","text":"This command displays the execution plan that the MatrixOne planner generates for the supplied statement. The execution plan shows how the table(s) referenced by the statement will be scanned \u2014 by plain sequential scan, index scan, etc. \u2014 and if multiple tables are referenced, what join algorithms will be used to bring together the required rows from each input table. The most critical part of the display is the estimated statement execution cost, which is the planner's guess at how long it will take to run the statement (measured in cost units that are arbitrary, but conventionally mean disk page fetches). Actually two numbers are shown: the start-up cost before the first row can be returned, and the total cost to return all the rows. For most queries the total cost is what matters, but in contexts such as a subquery in EXISTS , the planner will choose the smallest start-up cost instead of the smallest total cost (since the executor will stop after getting one row, anyway). Also, if you limit the number of rows to return with a LIMIT clause, the planner makes an appropriate interpolation between the endpoint costs to estimate which plan is really the cheapest.","title":"Description"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#parameters","text":"VERBOSE: Display additional information regarding the plan. Specifically, include the output column list for each node in the plan tree, schema-qualify table and function names, always label variables in expressions with their range table alias, and always print the name of each trigger for which statistics are displayed. This parameter is FALSE by default. FORMAT: Specify the output format, which can be TEXT, JSON. Non-text output contains the same information as the text output format, but is easier for programs to parse. This parameter is TEXT by dafault. BOOLEAN: Specifies whether the selected option should be turned on or off. You can write TRUE to enable the option, and FALSE to disable it. The boolean value can also be omitted, in which case TRUE is assumed. STETEMENT MatrixOne supports any SELECT , UPDATE , DELETE statement execution plan. For INSERT statement, only INSERT INTO..SELECT is supported in 0.5.1 version. INSERT INTO...VALUES is not supported yet.","title":"Parameters"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#examples","text":"","title":"Examples"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_table_scan","text":"mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 OR N_NATIONKEY < 10 ; + ------------------------------------------------------------------------------------+ | QUERY PLAN | + ------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : (( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ) or ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 )) | + ------------------------------------------------------------------------------------+","title":"Node_TABLE_SCAN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_value_scan","text":"mysql > explain verbose select abs ( - 1 ); + -----------------------------------------------------------------------------+ | QUERY PLAN | + -----------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 1 | | -> Values Scan \"*VALUES*\" ( cost = 0 . 00 .. 0 . 00 card = 1 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : 0 | + -----------------------------------------------------------------------------+","title":"Node_VALUE_SCAN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_sort","text":"mysql > explain verbose SELECT N_NAME , N_REGIONKEY a FROM NATION WHERE N_NATIONKEY > 0 AND N_NATIONKEY < 10 ORDER BY N_NAME , N_REGIONKEY DESC ; + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Sort Key : # [ 0 , 0 ] INTERNAL , # [ 0 , 1 ] DESC | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 2 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 0 ), ( CAST ( # [ 0 , 0 ] AS INT64 ) < 10 ) | + --------------------------------------------------------------------------------------------+ With limit and offset: mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY limit 10 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+ mysql > explain SELECT N_NAME , N_REGIONKEY FROM NATION WHERE abs ( N_REGIONKEY ) > 0 AND N_NAME LIKE '%AA' ORDER BY N_NAME DESC , N_REGIONKEY LIMIT 10 offset 20 ; + -------------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Sort ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Sort Key : # [ 0 , 0 ] DESC , # [ 0 , 1 ] INTERNAL | | Limit : 10 , Offset : 20 | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Filter Cond : ( abs ( CAST ( # [ 0 , 1 ] AS INT64 )) > 0 ), ( # [ 0 , 0 ] like '%AA' ) | + -------------------------------------------------------------------------------------------+","title":"Node_SORT"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_agg","text":"mysql > explain verbose SELECT count ( * ) FROM NATION group by N_NAME ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Aggregate ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ - 2 , 0 ] | | Group Key : # [ 0 , 1 ] | | Aggregate Functions : starcount ( # [ 0 , 0 ]) | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' ) | + -------------------------------------------------------------------------------------+","title":"Node_AGG"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_join","text":"mysql > explain verbose SELECT NATION . N_NAME , REGION . R_NAME FROM NATION join REGION on NATION . N_REGIONKEY = REGION . R_REGIONKEY WHERE NATION . N_REGIONKEY > 10 AND LENGTH ( NATION . N_NAME ) > LENGTH ( REGION . R_NAME ); + --------------------------------------------------------------------------------------------+ | QUERY PLAN | + --------------------------------------------------------------------------------------------+ | Project ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 0 , 0 ] | | -> Filter ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Filter Cond : ( length ( CAST ( # [ 0 , 1 ] AS CHAR )) > length ( CAST ( # [ 0 , 0 ] AS CHAR ))) | | -> Join ( cost = 0 . 00 .. 0 . 00 card = 125 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ], # [ 1 , 0 ] | | Join Type : INNER | | Join Cond : ( # [ 1 , 1 ] = # [ 0 , 0 ]) | | -> Table Scan on tpch . region ( cost = 0 . 00 .. 0 . 00 card = 5 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'region' ( 0 : 'r_regionkey' , 1 : 'r_name' ) | | -> Table Scan on tpch . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_name' , 1 : 'n_regionkey' ) | | Filter Cond : ( CAST ( # [ 0 , 1 ] AS INT64 ) > 10 ) | + --------------------------------------------------------------------------------------------+","title":"Node_JOIN"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_insert","text":"mysql > explain verbose INSERT NATION select * from nation ; + ---------------------------------------------------------------------------------------------+ | QUERY PLAN | + ---------------------------------------------------------------------------------------------+ | Insert on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], # [ 0 , 1 ], # [ 0 , 2 ], # [ 0 , 3 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'n_name' , 2 : 'n_regionkey' , 3 : 'n_comment' ) | + ---------------------------------------------------------------------------------------------+ 7 rows in set ( 0 . 00 sec )","title":"Node_INSERT"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_update","text":"mysql > explain verbose UPDATE NATION SET N_NAME = 'U1' , N_REGIONKEY = 2 WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Update on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ], 'U1' , CAST ( 2 AS INT32 ) | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"Node_Update"},{"location":"MatrixOne/Reference/SQL-Reference/Explain/explain/#node_delete","text":"mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+ With limit: mysql > explain verbose DELETE FROM NATION WHERE N_NATIONKEY > 10 LIMIT 20 ; + -------------------------------------------------------------------------------------+ | QUERY PLAN | + -------------------------------------------------------------------------------------+ | Delete on db1 . nation ( cost = 0 . 0 .. 0 . 0 rows = 0 ndv = 0 rowsize = 0 ) | | -> Project ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 0 ] | | Limit : 20 | | -> Table Scan on db1 . nation ( cost = 0 . 00 .. 0 . 00 card = 25 . 00 ndv = 0 . 00 rowsize = 0 ) | | Output : # [ 0 , 1 ] | | Table : 'nation' ( 0 : 'n_nationkey' , 1 : 'PADDR' ) | | Filter Cond : ( CAST ( # [ 0 , 0 ] AS INT64 ) > 10 ) | + -------------------------------------------------------------------------------------+","title":"Node_Delete"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/","text":"Transactions MatrixOne supports bundling multiple SQL statements into a single all-or-nothing transaction. Each transaction guarantees ACID semantics spanning arbitrary tables and rows. If a transaction succeeds, all mutations are applied together with virtual simultaneity. If any part of a transaction fails, the entire transaction is aborted, and the database is left unchanged. MatrixOne guarantees that while a transaction is pending, it is isolated from other concurrent transactions with snapshot isolation. In 0.5.1 version, MatrixOne supports standalone database transaction. MatrixOne supports optimistic transaction mode. This document introduces commonly used transaction-related statements, explicit and implicit transactions, isolation levels, lazy check for constraints, and transaction sizes. SQL statements The following SQL statements control transactions\uff1a START TRANSACTION or BEGIN start a new transaction. COMMIT commits the current transaction, making its changes permanent. ROLLBACK rolls back the current transaction, canceling its changes. SET autocommit disables or enables the default autocommit mode for the current session. (It's not fully implemented in 0.5.1 version, MatrixOne only supports autocommit mode enabled, it cannot be switched off yet). Starting a transaction The statements BEGIN and START TRANSACTION can be used interchangeably to explicitly start a new transaction. Syntax: BEGIN ; START TRANSACTION; With START TRANSACTION or BEGIN , autocommit remains disabled until you end the transaction with COMMIT or ROLLBACK . The autocommit mode then reverts to its previous state. Unlike MySQL, START TRANSACTION in MatrixOne doesn't have a modifier that control transaction characteristics. Committing a transaction The statement COMMIT instructs MatrixOne to apply all changes made in the current transaction. Syntax: COMMIT ; Rolling back a transaction The statement ROLLBACK rolls back and cancels all changes in the current transaction. Syntax: ROLLBACK ; Transactions are also automatically rolled back if the client connection is aborted or closed. Autocommit By default, MatrixOne runs with autocommit mode enabled. This means that, when not otherwise inside a transaction, each statement is atomic, as if it were surrounded by START TRANSACTION and COMMIT . You cannot use ROLLBACK to undo the effect; however, if an error occurs during statement execution, the statement is rolled back. For example: mysql > SELECT @@ autocommit ; + --------------+ | @@ autocommit | + --------------+ | on | + --------------+ 1 row in set ( 0 . 01 sec ) mysql > create table test ( c int primary key , d int ); Query OK , 0 rows affected ( 0 . 03 sec ) mysql > Insert into test values ( 1 , 1 ); Query OK , 1 row affected ( 0 . 04 sec ) mysql > rollback ; ERROR 1105 ( HY000 ): the txn has not been began mysql > select * from test ; + ------+------+ | c | d | + ------+------+ | 1 | 1 | + ------+------+ 1 row in set ( 0 . 01 sec ) In the above example, the ROLLBACK statement has no effect. This is because the INSERT statement is executed in autocommit. ROLLBACK only works with a BEGIN or START TRANSACTION . That is, it was the equivalent of the following single-statement transaction: START TRANSACTION; Insert into test values(1,1); COMMIT; Autocommit will not apply if a transaction has been explicitly started. In the following example, the ROLLBACK statement successfully reverts the INSERT statement: mysql> SELECT @@autocommit; +--------------+ | @@autocommit | +--------------+ | on | +--------------+ 1 row in set (0.01 sec) mysql> create table test (c int primary key,d int); Query OK, 0 rows affected (0.03 sec) mysql> BEGIN; Query OK, 0 rows affected (0.00 sec) mysql> Insert into test values(1,1); Query OK, 1 row affected (0.01 sec) mysql> ROLLBACK; Query OK, 0 rows affected (0.03 sec) mysql> SELECT * from test; Empty set (0.01 sec) The autocommit system variable cannot be changed on either a global nor session basis for now. Explicit and implicit transaction MatrixOne supports explicit transactions (use [BEGIN|START TRANSACTION] and COMMIT to define the start and end of the transaction) and implicit transactions (by default). If you start a new transaction through the [BEGIN|START TRANSACTION] statement, the autocommit is disabled before COMMIT or ROLLBACK which makes the transaction becomes explicit. Statement rollback MatrixOne supports atomic rollback after statement execution failure. If a statement results in an error, the changes it made will not take effect. The transaction will remain open, and additional changes can be made before issuing a COMMIT or ROLLBACK statement. mysql> CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY); Query OK, 0 rows affected (0.04 sec) mysql> INSERT INTO t1 VALUES (1); Query OK, 1 row affected (0.16 sec) mysql> BEGIN; Query OK, 0 rows affected (0.00 sec) mysql> INSERT INTO t1 VALUES (1); ERROR 1105 (HY000): tae data: duplicate mysql> INSERT INTO t1 VALUES (2); Query OK, 1 row affected (0.03 sec) mysql> INSERT INTO t1_1 VALUES (3); ERROR 1105 (HY000): tae catalog: not found mysql> INSERT INTO t1 VALUES (3); Query OK, 1 row affected (0.00 sec) mysql> commit; Query OK, 0 rows affected (0.03 sec) mysql> select * from t1; +------+ | id | +------+ | 1 | | 2 | | 3 | +------+ 3 rows in set (0.02 sec) In the above example, the transaction remains open after the failed INSERT statements. The final insert statement is then successful and changes are committed. Snapshot Isolation Level Transaction isolation is one of the foundations of database transaction processing. Isolation is one of the four key properties of a transaction (commonly referred as ACID). The SQL-92 standard defines four levels of transaction isolation: Read Uncommitted, Read Committed, Repeatable Read, and Serializable. See the following table for details: Isolation Level Dirty Write Dirty Read Fuzzy Read Phantom READ UNCOMMITTED Not Possible Possible Possible Possible READ COMMITTED Not Possible Not possible Possible Possible REPEATABLE READ Not Possible Not possible Not possible Possible SERIALIZABLE Not Possible Not possible Not possible Not possible MatrixOne implements Snapshot Isolation (SI) consistency, this level of isolation is between REPEATABLE READ and SERIALIZABLE for SQL-92 standard. In a snapshot isolated system, each transaction appears to operate on an independent, consistent snapshot of the database. Its changes are visible only to that transaction until commit time, when all changes become visible atomically to any transaction which begins at a later time.If transaction T1 has modified an object x , and another transaction T2 committed a write to x after T1\u2019s snapshot began, and before T1\u2019s commit, then T1 must abort. If we look at the isolation levels with the possible anomalies allowed proposed by A Critique of ANSI SQL Isolation Levels , we can conclude MatrixOne's isolation level with such a following table, which is slightly different with the Snapshot Isolation in the article. Isolation Level P0 Dirty Write P1 Dirty Read P4C Cursor Lost Update P4 Lost Update P2 Fuzzy Read P3 Phantom A5A Read Skew A5B Write Skew MatrixOne's Snapshot Isolation Not Possible Not Possible Not Possible Not Possible Not Possible Not Possible Not Possible Possible Optimistic Transaction Model MatrixOne supports an optimistic transaction model. Users who use optimistic concurrency do not lock a row when reading it. When a user wants to update a row, the application must determine whether another user has changed the row since it was read. Optimistic concurrency is generally used in environments with a low contention for data. In an optimistic concurrency model, a violation is considered to have occurred if, after a user receives a value from the database, another user modifies the value before the first user has attempted to modify it. How the server resolves a concurrency violation is best shown by first describing the following example. The following tables follow an example of optimistic concurrency. At 1:00 p.m., User1 reads a row from the database with the following values: CustID LastName FirstName 101 Smith Bob Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob Bob Bob At 1:01 p.m., User2 reads the same row. At 1:03 p.m., User2 changes FirstName from \"Bob\" to \"Robert\" and updates the database. Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob Robert Bob The update succeeds because the values in the database at the time of update match the original values that User2 has. At 1:05 p.m., User1 changes \"Bob\"'s first name to \"James\" and tries to update the row. Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob James Robert At this point, User1 encounters an optimistic concurrency violation because the value in the database (\"Robert\") no longer matches the original value that User1 was expecting (\"Bob\"). The concurrency violation simply lets you know that the update failed. The decision now needs to be made whether to overwrite the changes supplied by User2 with the changes supplied by User1, or to cancel the changes by User1.","title":"Transaction Overview"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#transactions","text":"MatrixOne supports bundling multiple SQL statements into a single all-or-nothing transaction. Each transaction guarantees ACID semantics spanning arbitrary tables and rows. If a transaction succeeds, all mutations are applied together with virtual simultaneity. If any part of a transaction fails, the entire transaction is aborted, and the database is left unchanged. MatrixOne guarantees that while a transaction is pending, it is isolated from other concurrent transactions with snapshot isolation. In 0.5.1 version, MatrixOne supports standalone database transaction. MatrixOne supports optimistic transaction mode. This document introduces commonly used transaction-related statements, explicit and implicit transactions, isolation levels, lazy check for constraints, and transaction sizes.","title":"Transactions"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#sql-statements","text":"The following SQL statements control transactions\uff1a START TRANSACTION or BEGIN start a new transaction. COMMIT commits the current transaction, making its changes permanent. ROLLBACK rolls back the current transaction, canceling its changes. SET autocommit disables or enables the default autocommit mode for the current session. (It's not fully implemented in 0.5.1 version, MatrixOne only supports autocommit mode enabled, it cannot be switched off yet).","title":"SQL statements"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#starting-a-transaction","text":"The statements BEGIN and START TRANSACTION can be used interchangeably to explicitly start a new transaction. Syntax: BEGIN ; START TRANSACTION; With START TRANSACTION or BEGIN , autocommit remains disabled until you end the transaction with COMMIT or ROLLBACK . The autocommit mode then reverts to its previous state. Unlike MySQL, START TRANSACTION in MatrixOne doesn't have a modifier that control transaction characteristics.","title":"Starting a transaction"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#committing-a-transaction","text":"The statement COMMIT instructs MatrixOne to apply all changes made in the current transaction. Syntax: COMMIT ;","title":"Committing a transaction"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#rolling-back-a-transaction","text":"The statement ROLLBACK rolls back and cancels all changes in the current transaction. Syntax: ROLLBACK ; Transactions are also automatically rolled back if the client connection is aborted or closed.","title":"Rolling back a transaction"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#autocommit","text":"By default, MatrixOne runs with autocommit mode enabled. This means that, when not otherwise inside a transaction, each statement is atomic, as if it were surrounded by START TRANSACTION and COMMIT . You cannot use ROLLBACK to undo the effect; however, if an error occurs during statement execution, the statement is rolled back. For example: mysql > SELECT @@ autocommit ; + --------------+ | @@ autocommit | + --------------+ | on | + --------------+ 1 row in set ( 0 . 01 sec ) mysql > create table test ( c int primary key , d int ); Query OK , 0 rows affected ( 0 . 03 sec ) mysql > Insert into test values ( 1 , 1 ); Query OK , 1 row affected ( 0 . 04 sec ) mysql > rollback ; ERROR 1105 ( HY000 ): the txn has not been began mysql > select * from test ; + ------+------+ | c | d | + ------+------+ | 1 | 1 | + ------+------+ 1 row in set ( 0 . 01 sec ) In the above example, the ROLLBACK statement has no effect. This is because the INSERT statement is executed in autocommit. ROLLBACK only works with a BEGIN or START TRANSACTION . That is, it was the equivalent of the following single-statement transaction: START TRANSACTION; Insert into test values(1,1); COMMIT; Autocommit will not apply if a transaction has been explicitly started. In the following example, the ROLLBACK statement successfully reverts the INSERT statement: mysql> SELECT @@autocommit; +--------------+ | @@autocommit | +--------------+ | on | +--------------+ 1 row in set (0.01 sec) mysql> create table test (c int primary key,d int); Query OK, 0 rows affected (0.03 sec) mysql> BEGIN; Query OK, 0 rows affected (0.00 sec) mysql> Insert into test values(1,1); Query OK, 1 row affected (0.01 sec) mysql> ROLLBACK; Query OK, 0 rows affected (0.03 sec) mysql> SELECT * from test; Empty set (0.01 sec) The autocommit system variable cannot be changed on either a global nor session basis for now.","title":"Autocommit"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#explicit-and-implicit-transaction","text":"MatrixOne supports explicit transactions (use [BEGIN|START TRANSACTION] and COMMIT to define the start and end of the transaction) and implicit transactions (by default). If you start a new transaction through the [BEGIN|START TRANSACTION] statement, the autocommit is disabled before COMMIT or ROLLBACK which makes the transaction becomes explicit.","title":"Explicit and implicit transaction"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#statement-rollback","text":"MatrixOne supports atomic rollback after statement execution failure. If a statement results in an error, the changes it made will not take effect. The transaction will remain open, and additional changes can be made before issuing a COMMIT or ROLLBACK statement. mysql> CREATE TABLE t1 (id INT NOT NULL PRIMARY KEY); Query OK, 0 rows affected (0.04 sec) mysql> INSERT INTO t1 VALUES (1); Query OK, 1 row affected (0.16 sec) mysql> BEGIN; Query OK, 0 rows affected (0.00 sec) mysql> INSERT INTO t1 VALUES (1); ERROR 1105 (HY000): tae data: duplicate mysql> INSERT INTO t1 VALUES (2); Query OK, 1 row affected (0.03 sec) mysql> INSERT INTO t1_1 VALUES (3); ERROR 1105 (HY000): tae catalog: not found mysql> INSERT INTO t1 VALUES (3); Query OK, 1 row affected (0.00 sec) mysql> commit; Query OK, 0 rows affected (0.03 sec) mysql> select * from t1; +------+ | id | +------+ | 1 | | 2 | | 3 | +------+ 3 rows in set (0.02 sec) In the above example, the transaction remains open after the failed INSERT statements. The final insert statement is then successful and changes are committed.","title":"Statement rollback"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#snapshot-isolation-level","text":"Transaction isolation is one of the foundations of database transaction processing. Isolation is one of the four key properties of a transaction (commonly referred as ACID). The SQL-92 standard defines four levels of transaction isolation: Read Uncommitted, Read Committed, Repeatable Read, and Serializable. See the following table for details: Isolation Level Dirty Write Dirty Read Fuzzy Read Phantom READ UNCOMMITTED Not Possible Possible Possible Possible READ COMMITTED Not Possible Not possible Possible Possible REPEATABLE READ Not Possible Not possible Not possible Possible SERIALIZABLE Not Possible Not possible Not possible Not possible MatrixOne implements Snapshot Isolation (SI) consistency, this level of isolation is between REPEATABLE READ and SERIALIZABLE for SQL-92 standard. In a snapshot isolated system, each transaction appears to operate on an independent, consistent snapshot of the database. Its changes are visible only to that transaction until commit time, when all changes become visible atomically to any transaction which begins at a later time.If transaction T1 has modified an object x , and another transaction T2 committed a write to x after T1\u2019s snapshot began, and before T1\u2019s commit, then T1 must abort. If we look at the isolation levels with the possible anomalies allowed proposed by A Critique of ANSI SQL Isolation Levels , we can conclude MatrixOne's isolation level with such a following table, which is slightly different with the Snapshot Isolation in the article. Isolation Level P0 Dirty Write P1 Dirty Read P4C Cursor Lost Update P4 Lost Update P2 Fuzzy Read P3 Phantom A5A Read Skew A5B Write Skew MatrixOne's Snapshot Isolation Not Possible Not Possible Not Possible Not Possible Not Possible Not Possible Not Possible Possible","title":"Snapshot Isolation Level"},{"location":"MatrixOne/Reference/SQL-Reference/Transactions/transaction-overview/#optimistic-transaction-model","text":"MatrixOne supports an optimistic transaction model. Users who use optimistic concurrency do not lock a row when reading it. When a user wants to update a row, the application must determine whether another user has changed the row since it was read. Optimistic concurrency is generally used in environments with a low contention for data. In an optimistic concurrency model, a violation is considered to have occurred if, after a user receives a value from the database, another user modifies the value before the first user has attempted to modify it. How the server resolves a concurrency violation is best shown by first describing the following example. The following tables follow an example of optimistic concurrency. At 1:00 p.m., User1 reads a row from the database with the following values: CustID LastName FirstName 101 Smith Bob Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob Bob Bob At 1:01 p.m., User2 reads the same row. At 1:03 p.m., User2 changes FirstName from \"Bob\" to \"Robert\" and updates the database. Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob Robert Bob The update succeeds because the values in the database at the time of update match the original values that User2 has. At 1:05 p.m., User1 changes \"Bob\"'s first name to \"James\" and tries to update the row. Column name Original value Current value Value in database CustID 101 101 101 LastName Smith Smith Smith FirstName Bob James Robert At this point, User1 encounters an optimistic concurrency violation because the value in the database (\"Robert\") no longer matches the original value that User1 was expecting (\"Bob\"). The concurrency violation simply lets you know that the update failed. The decision now needs to be made whether to overwrite the changes supplied by User2 with the changes supplied by User1, or to cancel the changes by User1.","title":"Optimistic Transaction Model"},{"location":"MatrixOne/Reference/System-Parameters/0.6-timezone/","text":"Time Zone Support The time zone in MatrixOne is decided by the global time_zone system variable. The default value of time_zone is SYSTEM. You can use the following statement to set the global server time_zone value at runtime: > SET GLOBAL time_zone = timezone; You can use the following statement to view the current values of the global, client-specific and system time zones: > SELECT @@global.time_zone, @@session.time_zone, @@global.system_time_zone; +-------------+-------------+--------------------+ | @@time_zone | @@time_zone | @@system_time_zone | +-------------+-------------+--------------------+ | timezone | +08:00 | | +-------------+-------------+--------------------+ 1 row in set (0.00 sec) To set the format of the value of the time_zone: The value SYSTEM indicates that the time zone should be the same as the system time zone. The value can be given as a string indicating an offset from UTC, such as +10:00 or -06:00 . The value can be given as a named time zone, such as Europe/Helsinki , US/Eastern , or MET . The current session time zone setting affects the display and storage of time values that are zone-sensitive. This includes the values displayed by functions such as NOW() . Note Only the values of the Timestamp data type is affected by time zone. This is because the Timestamp data type uses the literal value + time zone information. Other data types, such as Datetime/Date/Time, do not have time zone information, thus their values are not affected by the changes of time zone. > SELECT @@ global . time_zone , @@ session . time_zone , @@ global . system_time_zone ; + -------------+-------------+--------------------+ | @@ time_zone | @@ time_zone | @@ system_time_zone | + -------------+-------------+--------------------+ | SYSTEM | SYSTEM | | + -------------+-------------+--------------------+ 1 row in set ( 0 . 01 sec ) > create table t ( ts timestamp , dt datetime ); Query OK , 0 rows affected ( 0 . 02 sec ) mysql > set @@ time_zone = 'UTC' ; Query OK , 0 rows affected ( 0 . 00 sec ) mysql > insert into t values ( '2017-09-30 11:11:11' , '2017-09-30 11:11:11' ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > set @@ time_zone = '+8:00' ; ERROR 20101 ( HY000 ): internal error : incorrect timezone + 8 : 00 mysql > set @@ time_zone = '+08:00' ; Query OK , 0 rows affected ( 0 . 00 sec ) mysql > select * from t ; + ---------------------+---------------------+ | ts | dt | + ---------------------+---------------------+ | 2017 - 09 - 30 19 : 11 : 11 | 2017 - 09 - 30 11 : 11 : 11 | + ---------------------+---------------------+ 1 row in set ( 0 . 00 sec ) In this example, no matter how you adjust the value of the time zone, the value of the Datetime data type is not affected. But the displayed value of the Timestamp data type changes if the time zone information changes. In fact, the value that is stored in the storage does not change, it's just displayed differently according to different time zone setting. Note Time zone is involved during the conversion of the value of Timestamp and Datetime, which is handled based on the current time_zone. Changing MatrixOne Time Zone View the current time and time zone: > select now (); + ----------------------------+ | now () | + ----------------------------+ | 2022 - 10 - 14 18 : 38 : 27 . 876181 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > show variables like \"%time_zone%\" ; + ------------------+--------+ | Variable_name | Value | + ------------------+--------+ | system_time_zone | | | time_zone | + 08 : 00 | + ------------------+--------+ 2 rows in set ( 0 . 00 sec ) time_zone indicates that MatrixOne uses the system time zone. system_time_zone indicates that MatrixOne uses the CST time zone. modify the time zone: set global time_zone = '+08:00'; set time_zone = '+08:00'; set global time_zone = '+08:00'; : Change the global time zone to Beijing time if we are in the east eight zones. set time_zone = '+08:00'; : Change the time zone of the current session.","title":"Time Zone Support"},{"location":"MatrixOne/Reference/System-Parameters/0.6-timezone/#time-zone-support","text":"The time zone in MatrixOne is decided by the global time_zone system variable. The default value of time_zone is SYSTEM. You can use the following statement to set the global server time_zone value at runtime: > SET GLOBAL time_zone = timezone; You can use the following statement to view the current values of the global, client-specific and system time zones: > SELECT @@global.time_zone, @@session.time_zone, @@global.system_time_zone; +-------------+-------------+--------------------+ | @@time_zone | @@time_zone | @@system_time_zone | +-------------+-------------+--------------------+ | timezone | +08:00 | | +-------------+-------------+--------------------+ 1 row in set (0.00 sec) To set the format of the value of the time_zone: The value SYSTEM indicates that the time zone should be the same as the system time zone. The value can be given as a string indicating an offset from UTC, such as +10:00 or -06:00 . The value can be given as a named time zone, such as Europe/Helsinki , US/Eastern , or MET . The current session time zone setting affects the display and storage of time values that are zone-sensitive. This includes the values displayed by functions such as NOW() . Note Only the values of the Timestamp data type is affected by time zone. This is because the Timestamp data type uses the literal value + time zone information. Other data types, such as Datetime/Date/Time, do not have time zone information, thus their values are not affected by the changes of time zone. > SELECT @@ global . time_zone , @@ session . time_zone , @@ global . system_time_zone ; + -------------+-------------+--------------------+ | @@ time_zone | @@ time_zone | @@ system_time_zone | + -------------+-------------+--------------------+ | SYSTEM | SYSTEM | | + -------------+-------------+--------------------+ 1 row in set ( 0 . 01 sec ) > create table t ( ts timestamp , dt datetime ); Query OK , 0 rows affected ( 0 . 02 sec ) mysql > set @@ time_zone = 'UTC' ; Query OK , 0 rows affected ( 0 . 00 sec ) mysql > insert into t values ( '2017-09-30 11:11:11' , '2017-09-30 11:11:11' ); Query OK , 1 row affected ( 0 . 02 sec ) mysql > set @@ time_zone = '+8:00' ; ERROR 20101 ( HY000 ): internal error : incorrect timezone + 8 : 00 mysql > set @@ time_zone = '+08:00' ; Query OK , 0 rows affected ( 0 . 00 sec ) mysql > select * from t ; + ---------------------+---------------------+ | ts | dt | + ---------------------+---------------------+ | 2017 - 09 - 30 19 : 11 : 11 | 2017 - 09 - 30 11 : 11 : 11 | + ---------------------+---------------------+ 1 row in set ( 0 . 00 sec ) In this example, no matter how you adjust the value of the time zone, the value of the Datetime data type is not affected. But the displayed value of the Timestamp data type changes if the time zone information changes. In fact, the value that is stored in the storage does not change, it's just displayed differently according to different time zone setting. Note Time zone is involved during the conversion of the value of Timestamp and Datetime, which is handled based on the current time_zone.","title":"Time Zone Support"},{"location":"MatrixOne/Reference/System-Parameters/0.6-timezone/#changing-matrixone-time-zone","text":"View the current time and time zone: > select now (); + ----------------------------+ | now () | + ----------------------------+ | 2022 - 10 - 14 18 : 38 : 27 . 876181 | + ----------------------------+ 1 row in set ( 0 . 00 sec ) > show variables like \"%time_zone%\" ; + ------------------+--------+ | Variable_name | Value | + ------------------+--------+ | system_time_zone | | | time_zone | + 08 : 00 | + ------------------+--------+ 2 rows in set ( 0 . 00 sec ) time_zone indicates that MatrixOne uses the system time zone. system_time_zone indicates that MatrixOne uses the CST time zone. modify the time zone: set global time_zone = '+08:00'; set time_zone = '+08:00'; set global time_zone = '+08:00'; : Change the global time zone to Beijing time if we are in the east eight zones. set time_zone = '+08:00'; : Change the time zone of the current session.","title":"Changing MatrixOne Time Zone"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/","text":"MatrixOne Server Setting To launch a MatrixOne instance, a configuration file is required. The configuration file will be generated in make config , it's located in matrixone/system_vars_config.toml file. The settings are listed as below: General Settings Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip Log Settings Parameter Type Default Value Range Functionality logLevel string debug [debug, info, warn, error, fatal] the log output level logFormat string json [json, console] output log style logFilename string \"\" string value output log filename logMaxSize int64 512 [0 - 314572800] maximum log file size logMaxDays int64 0 [0 - 314572800] maximum log file days kept logMaxBackups int64 0 [0 - 314572800] maximum numbers of old log files to retain lengthOfQueryPrinted int64 50 [-1 - 10000] the length of query printed into console. -1, complete string. 0, empty string. >0 , length of characters at the header of the string. printLogInterVal int64 10 [1 - 1000] the interval for printing logs Data Storage Settings Parameter Type Default Value Range Functionality storePath string ./store file path the root directory of data storage Memory Settings Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960 Metrics Settings Parameter Type Default Value Range Functionality statusPort int64 7001 All ports statusPort defines which port the mo status server (for metric etc.) listens on and clients connect to metricToProm bool true true false if true, metrics can be scraped through host:status/metrics endpoint enableMetric bool true true false default is true. if true, enable metric at booting Other Settings Parameter Type Default Value Range Functionality batchSizeInLoadData int64 50 10 - 40000 the number of rows for a batch in loading data loadDataConcurrencyCount int64 4 1 - 16 the concurrent threads to load data maxBytesInOutbufToFlush int64 1024 32 - 4096 KB the output memory buffer, the buffer will be flushed when it exceeds this limit exportDataDefaultFlushSize int64 1 1,2,4,8 MB texport data to csv file default flush size","title":"General Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#matrixone-server-setting","text":"To launch a MatrixOne instance, a configuration file is required. The configuration file will be generated in make config , it's located in matrixone/system_vars_config.toml file. The settings are listed as below:","title":"MatrixOne Server Setting"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#general-settings","text":"Parameter Type Default Value Range Functionality rootpassword string \"\" string value password for root user dumpdatabase string default string value dump database name for backup port int64 6001 [0 - 65536] port defines which port the mo-server listens on and clients connect to host string 0.0.0.0 [0.0.0.0 - 255.255.255.255] listening ip","title":"General Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#log-settings","text":"Parameter Type Default Value Range Functionality logLevel string debug [debug, info, warn, error, fatal] the log output level logFormat string json [json, console] output log style logFilename string \"\" string value output log filename logMaxSize int64 512 [0 - 314572800] maximum log file size logMaxDays int64 0 [0 - 314572800] maximum log file days kept logMaxBackups int64 0 [0 - 314572800] maximum numbers of old log files to retain lengthOfQueryPrinted int64 50 [-1 - 10000] the length of query printed into console. -1, complete string. 0, empty string. >0 , length of characters at the header of the string. printLogInterVal int64 10 [1 - 1000] the interval for printing logs","title":"Log Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#data-storage-settings","text":"Parameter Type Default Value Range Functionality storePath string ./store file path the root directory of data storage","title":"Data Storage Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#memory-settings","text":"Parameter Type Default Value Range Functionality hostMmuLimitation int64 1099511627776 [0 - 1099511627776] host mmu limitation. default: 1 << 40 = 1099511627776 guestMmuLimitation int64 1099511627776 [0 - 1099511627776] guest mmu limitation. default: 1 << 40 = 1099511627776 mempoolMaxSize int64 1099511627776 [0 - 1099511627776] mempool maxsize. default: 1 << 40 = 1099511627776 mempoolFactor int64 8 [0 - TBD] mempool factor. Default: 8 processLimitationSize int64 42949672960 [0 - 42949672960] process.Limitation.Size. default: 10 << 32 = 42949672960 processLimitationBatchRows int64 42949672960 [0 - 42949672960] process.Limitation.BatchRows. default: 10 << 32 = 42949672960 processLimitationPartitionRows int64 42949672960 [0 - 42949672960] process.Limitation.PartitionRows. default: 10 << 32 = 42949672960","title":"Memory Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#metrics-settings","text":"Parameter Type Default Value Range Functionality statusPort int64 7001 All ports statusPort defines which port the mo status server (for metric etc.) listens on and clients connect to metricToProm bool true true false if true, metrics can be scraped through host:status/metrics endpoint enableMetric bool true true false default is true. if true, enable metric at booting","title":"Metrics Settings"},{"location":"MatrixOne/Reference/System-Parameters/configuration-settings/#other-settings","text":"Parameter Type Default Value Range Functionality batchSizeInLoadData int64 50 10 - 40000 the number of rows for a batch in loading data loadDataConcurrencyCount int64 4 1 - 16 the concurrent threads to load data maxBytesInOutbufToFlush int64 1024 32 - 4096 KB the output memory buffer, the buffer will be flushed when it exceeds this limit exportDataDefaultFlushSize int64 1 1,2,4,8 MB texport data to csv file default flush size","title":"Other Settings"},{"location":"MatrixOne/Release-Notes/release-timeline/","text":"MatrixOne Release Timeline This document shows all the released MatrixOne versions in reverse chronological order. Version Release Date v0.5.1 2022/8/19 v0.5.0 2022/7/18 v0.4.0 2022/5/5 v0.3.0 2022/3/10 v0.2.0 2022/1/6 v0.1.0 2021/10/24","title":"Release Timeline"},{"location":"MatrixOne/Release-Notes/release-timeline/#matrixone-release-timeline","text":"This document shows all the released MatrixOne versions in reverse chronological order. Version Release Date v0.5.1 2022/8/19 v0.5.0 2022/7/18 v0.4.0 2022/5/5 v0.3.0 2022/3/10 v0.2.0 2022/1/6 v0.1.0 2021/10/24","title":"MatrixOne Release Timeline"},{"location":"MatrixOne/Release-Notes/v0.1.0/","text":"MatrixOne v0.1.0 Release Notes We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers! Docker docker pull matrixorigin/matrixone:0.1.0 Features SQL Following SQL statements are supported in this release. DDL CREATE / DROP DATABASE CREATE / DROP TABLE DML INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE Data Types TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR Operators <, >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST Aggregation Functions COUNT SUM AVG MAX MIN Database Engine MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy. Contributors This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"v0.1.0"},{"location":"MatrixOne/Release-Notes/v0.1.0/#matrixone-v010-release-notes","text":"We are excited to announce the first release of MatrixOne 0.1.0 on 2021/10/24. Cheers!","title":"MatrixOne v0.1.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.1.0/#docker","text":"docker pull matrixorigin/matrixone:0.1.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.1.0/#features","text":"","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.1.0/#sql","text":"Following SQL statements are supported in this release.","title":"SQL"},{"location":"MatrixOne/Release-Notes/v0.1.0/#ddl","text":"CREATE / DROP DATABASE CREATE / DROP TABLE","title":"DDL"},{"location":"MatrixOne/Release-Notes/v0.1.0/#dml","text":"INSERT LOAD DATA SELECT WHERE GROUP BY ORDER BY LIMIT, OFFSET SHOW DATABASES TABLES USE","title":"DML"},{"location":"MatrixOne/Release-Notes/v0.1.0/#data-types","text":"TINYINT / SMALLINT / INT / BIGINT, SIGNED / UNSIGNED FLOAT / DOUBLE CHAR / VARCHAR","title":"Data Types"},{"location":"MatrixOne/Release-Notes/v0.1.0/#operators","text":"<, >=, <, <=, <>, !=, = BETWEEN \u2026 AND \u2026, NOT BETWEEN \u2026 AND \u2026 AND, &&, OR, || +, -, *, /, %, MOD, DIV, NEG CAST","title":"Operators"},{"location":"MatrixOne/Release-Notes/v0.1.0/#aggregation-functions","text":"COUNT SUM AVG MAX MIN","title":"Aggregation Functions"},{"location":"MatrixOne/Release-Notes/v0.1.0/#database-engine","text":"MySQL dialect is supported. Build-in Append only columnar engine(AOE) has been supported as the first fusion database engine. Real-time analytical queries are supported. Vectorized query execution engine, based on MPP solution, is introduced. Part of the expression execution has been vectorized through SIMD instructions. Distributed AOE with strong consistency guaranteed by RAFT has been supported. The performance of replicated state machine has been greatly improved through the unique design of reusing RAFT log as well as Write-Ahead log without any redundancy.","title":"Database Engine"},{"location":"MatrixOne/Release-Notes/v0.1.0/#contributors","text":"This release includes 453 commits by 16 authors. Special thanks to the first author: Yan Wenze (@nnsgmsone) Chen Mingsong\uff08@m-schen\uff09 Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Wei Ziran (@w-zr) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.2.0/","text":"MatrixOne v0.2.0 Release Notes We are excited to announce MatrixOne 0.2.0 release on 2022/1/6. Cheers! Docker docker pull matrixorigin/matrixone:0.2.0 Features Support automatic rebalancing for the built-in AOE columnar storage engine. Introduce new SQL parser. Introduce factorized SQL execution engine which is the fastest MPP in Golang. Support CREATE / DROP INDEX. Support PRIMARY KEY in CREATE TABLE. Support more data types for SQL binary operators. Support equi join with group by or aggregation statements. Support new types of DATE and DATETIME. Database Engine For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence. Contributors This release includes 243 commits by 21 authors. BingLin Chang (@decster) Chen Mingsong\uff08@m-schen\uff09 Nan Deng (@dengn) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) broccoliSpicy(@broccoliSpicy) Ryan Wang(@wanglei4687) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"v0.2.0"},{"location":"MatrixOne/Release-Notes/v0.2.0/#matrixone-v020-release-notes","text":"We are excited to announce MatrixOne 0.2.0 release on 2022/1/6. Cheers!","title":"MatrixOne v0.2.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.2.0/#docker","text":"docker pull matrixorigin/matrixone:0.2.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.2.0/#features","text":"Support automatic rebalancing for the built-in AOE columnar storage engine. Introduce new SQL parser. Introduce factorized SQL execution engine which is the fastest MPP in Golang. Support CREATE / DROP INDEX. Support PRIMARY KEY in CREATE TABLE. Support more data types for SQL binary operators. Support equi join with group by or aggregation statements. Support new types of DATE and DATETIME.","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.2.0/#database-engine","text":"For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence.","title":"Database Engine"},{"location":"MatrixOne/Release-Notes/v0.2.0/#contributors","text":"This release includes 243 commits by 21 authors. BingLin Chang (@decster) Chen Mingsong\uff08@m-schen\uff09 Nan Deng (@dengn) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Li Yang (@lignay) Lin Junhong (@iamlinjunhong) lni (@lni) Long Ran (@aunjgr) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) broccoliSpicy(@broccoliSpicy) Ryan Wang(@wanglei4687) Xiong Jingjuan (@anitajjx) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.3.0/","text":"MatrixOne v0.3.0 Release Notes We are excited to announce MatrixOne 0.3.0 release on 2022/3/10. Cheers! Docker docker pull matrixorigin/matrixone:0.3.0 Features Exports data into CSV file. Introduces parallel execution and improve performance for projection query. Introduces IN operator and allows you to specify multiple values in a WHERE clause. Support NULLABLE column in group by expression. Introduces new functions: round and floor. Introduces a Chaos Testing framework for distributed system. Known issues For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence. Contributors This release includes 157 commits by 21 authors. broccoliSpicy(@broccoliSpicy) Chen Mingsong(@m-schen) hanfang (@aptend) O2 (@ikenchina) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Lin Junhong (@iamlinjunhong) Long Ran (@aunjgr) Nan Deng (@dengn) Otter(@WenhaoKong2001) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Sundy Li(@sundy-li) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) Wan Hanbo(@wanhanbo ) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng) New Contributors @wanhanbo made their first contribution in https://github.com/matrixorigin/matrixone/pull/1600 @ikenchina made their first contribution in https://github.com/matrixorigin/matrixone/pull/1685 @sundy-li made their first contribution in https://github.com/matrixorigin/matrixone/pull/1704 @WenhaoKong2001 made their first contribution in https://github.com/matrixorigin/matrixone/pull/1838 We appreciate your contribution! Welcome to MatrixOne community. Full Changelog https://github.com/matrixorigin/matrixone/compare/v0.2.0...v0.3.0","title":"v0.3.0"},{"location":"MatrixOne/Release-Notes/v0.3.0/#matrixone-v030-release-notes","text":"We are excited to announce MatrixOne 0.3.0 release on 2022/3/10. Cheers!","title":"MatrixOne v0.3.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.3.0/#docker","text":"docker pull matrixorigin/matrixone:0.3.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.3.0/#features","text":"Exports data into CSV file. Introduces parallel execution and improve performance for projection query. Introduces IN operator and allows you to specify multiple values in a WHERE clause. Support NULLABLE column in group by expression. Introduces new functions: round and floor. Introduces a Chaos Testing framework for distributed system.","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.3.0/#known-issues","text":"For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence.","title":"Known issues"},{"location":"MatrixOne/Release-Notes/v0.3.0/#contributors","text":"This release includes 157 commits by 21 authors. broccoliSpicy(@broccoliSpicy) Chen Mingsong(@m-schen) hanfang (@aptend) O2 (@ikenchina) Jin Hai (@JinHai-CN) Jiang xinmeng (@jiangxinmeng1) Lin Junhong (@iamlinjunhong) Long Ran (@aunjgr) Nan Deng (@dengn) Otter(@WenhaoKong2001) Peng Zhen (@daviszhen) Qin Shuqi (@sukki37) Sundy Li(@sundy-li) Shen JiangWei(@LeftHandCold) Jian Wang(@jianwan0214) Wan Hanbo(@wanhanbo ) Xu Peng (@XuPeng-SH) Yan Wenze(@nnsgmsone) Yuesheng Li(@reusee) Zilong Zhou (@zzl200012) Zhang Yingfeng (@yingfeng)","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.3.0/#new-contributors","text":"@wanhanbo made their first contribution in https://github.com/matrixorigin/matrixone/pull/1600 @ikenchina made their first contribution in https://github.com/matrixorigin/matrixone/pull/1685 @sundy-li made their first contribution in https://github.com/matrixorigin/matrixone/pull/1704 @WenhaoKong2001 made their first contribution in https://github.com/matrixorigin/matrixone/pull/1838 We appreciate your contribution! Welcome to MatrixOne community.","title":"New Contributors"},{"location":"MatrixOne/Release-Notes/v0.3.0/#full-changelog","text":"https://github.com/matrixorigin/matrixone/compare/v0.2.0...v0.3.0","title":"Full Changelog"},{"location":"MatrixOne/Release-Notes/v0.4.0/","text":"MatrixOne v0.4.0 Release Notes We are excited to announce MatrixOne 0.4.0 release on 2022/5/5. Cheers! Docker docker pull matrixorigin/matrixone:0.4.0 Features Support inner join with equality operator. Support subquery within from clause. Support decimal data type. Support following builtin functions: Mathematical: Abs, Log, Ln, Ceil, Exp, Power, Pi, Sin, Sinh, Cos, ACos, Tan, ATan, Cot Datetime: Month, Weekday, Date, DayOfYear String: Space, Reverse, Substring, Ltrim, Rtrim, StartsWith, EndsWith, Lpad, Rpad, Empty, LengthUTF8 Support following aggregate functions: Bit_and, Bit_or, Bit_xor, Stddev_pop, Var Known issues For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence. Contributors This release includes 253 commits by 50 authors. New Contributors @BePPPower @JackTan25 @Charlie17Li @domingozhang @Fungx @JasonPeng1310 @jiajunhuang @NTH19 @noneback @RinChanNOWWW @chaixuqing @Y7n05h @yuxubinchen @adlternative @ajian2002 @bxiiiiii @coderzc @e11jah @fengttt @florashi181 @hiyoyolumi @jinfuchiang @ouyuanning @qingxinhome @supermario1990 @whileskies @xiw5 @yclchuxue @ZtXavier We appreciate your contribution! Welcome to MatrixOne community. Full Changelog https://github.com/matrixorigin/matrixone/compare/v0.3.0...v0.4.0","title":"v0.4.0"},{"location":"MatrixOne/Release-Notes/v0.4.0/#matrixone-v040-release-notes","text":"We are excited to announce MatrixOne 0.4.0 release on 2022/5/5. Cheers!","title":"MatrixOne v0.4.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.4.0/#docker","text":"docker pull matrixorigin/matrixone:0.4.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.4.0/#features","text":"Support inner join with equality operator. Support subquery within from clause. Support decimal data type. Support following builtin functions: Mathematical: Abs, Log, Ln, Ceil, Exp, Power, Pi, Sin, Sinh, Cos, ACos, Tan, ATan, Cot Datetime: Month, Weekday, Date, DayOfYear String: Space, Reverse, Substring, Ltrim, Rtrim, StartsWith, EndsWith, Lpad, Rpad, Empty, LengthUTF8 Support following aggregate functions: Bit_and, Bit_or, Bit_xor, Stddev_pop, Var","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.4.0/#known-issues","text":"For continuous table creation actions in a script, the parameter of pre-allocated-group-num should be set to a bigger value such in cluster scenarios. Otherwise, \"no available raft group\" may be notified during tables creation sequence.","title":"Known issues"},{"location":"MatrixOne/Release-Notes/v0.4.0/#contributors","text":"This release includes 253 commits by 50 authors.","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.4.0/#new-contributors","text":"@BePPPower @JackTan25 @Charlie17Li @domingozhang @Fungx @JasonPeng1310 @jiajunhuang @NTH19 @noneback @RinChanNOWWW @chaixuqing @Y7n05h @yuxubinchen @adlternative @ajian2002 @bxiiiiii @coderzc @e11jah @fengttt @florashi181 @hiyoyolumi @jinfuchiang @ouyuanning @qingxinhome @supermario1990 @whileskies @xiw5 @yclchuxue @ZtXavier We appreciate your contribution! Welcome to MatrixOne community.","title":"New Contributors"},{"location":"MatrixOne/Release-Notes/v0.4.0/#full-changelog","text":"https://github.com/matrixorigin/matrixone/compare/v0.3.0...v0.4.0","title":"Full Changelog"},{"location":"MatrixOne/Release-Notes/v0.5.0/","text":"MatrixOne v0.5.0 Release Notes We are excited to announce MatrixOne 0.5.0 release on 2022/7/18. In this release, MatrixOne has a stand-alone columnar storage engine which can support HTAP workloads. Cheers! Docker docker pull matrixorigin/matrixone:0.5.0 Features Support ACID transaction with a Snapshot Isolation level. Support UPDATE, DELETE and INSERT INTO ... SELECT ... statement. Support BOOL and Timestamp data type. Support LEFT / RIGHT / OUTER / NATURAL JOIN. Support Having expression. Support subquery. Support Common Table Expression. Support CASE ... WHEN expression. Support Interval expression. Support Explain plan tree. Support new aggregate function: any_value Lots of new functions are supported. Known issues Hotfix on 0.5.0 may cause data format incompatable. 'Too many open files' error might be issued when user insert/update/delete data or create/drop table frequently. User need to increase the 'max open files' to resolve the issue. Running 1GB TPCH benchmark test with memory less than 64GB may result in an out of memory error. Loading large size of CSV file than 100GB might lead to system hanging. #3858 Mixed TP and AP work loads running for a long time, might cause system panic. #3947 #3961 Contributors This release includes 811 commits by 73 authors. New Contributors @lawrshen @lyfer233 @wuliuqii @ericsyh @dongdongyang33 @aylei @richelleguice @aressu1985 @mklzl We appreciate your contribution! Welcome to MatrixOne community. Full Changelog https://github.com/matrixorigin/matrixone/compare/v0.4.0...v0.5.0","title":"v0.5.0"},{"location":"MatrixOne/Release-Notes/v0.5.0/#matrixone-v050-release-notes","text":"We are excited to announce MatrixOne 0.5.0 release on 2022/7/18. In this release, MatrixOne has a stand-alone columnar storage engine which can support HTAP workloads. Cheers!","title":"MatrixOne v0.5.0 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.5.0/#docker","text":"docker pull matrixorigin/matrixone:0.5.0","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.5.0/#features","text":"Support ACID transaction with a Snapshot Isolation level. Support UPDATE, DELETE and INSERT INTO ... SELECT ... statement. Support BOOL and Timestamp data type. Support LEFT / RIGHT / OUTER / NATURAL JOIN. Support Having expression. Support subquery. Support Common Table Expression. Support CASE ... WHEN expression. Support Interval expression. Support Explain plan tree. Support new aggregate function: any_value Lots of new functions are supported.","title":"Features"},{"location":"MatrixOne/Release-Notes/v0.5.0/#known-issues","text":"Hotfix on 0.5.0 may cause data format incompatable. 'Too many open files' error might be issued when user insert/update/delete data or create/drop table frequently. User need to increase the 'max open files' to resolve the issue. Running 1GB TPCH benchmark test with memory less than 64GB may result in an out of memory error. Loading large size of CSV file than 100GB might lead to system hanging. #3858 Mixed TP and AP work loads running for a long time, might cause system panic. #3947 #3961","title":"Known issues"},{"location":"MatrixOne/Release-Notes/v0.5.0/#contributors","text":"This release includes 811 commits by 73 authors.","title":"Contributors"},{"location":"MatrixOne/Release-Notes/v0.5.0/#new-contributors","text":"@lawrshen @lyfer233 @wuliuqii @ericsyh @dongdongyang33 @aylei @richelleguice @aressu1985 @mklzl We appreciate your contribution! Welcome to MatrixOne community.","title":"New Contributors"},{"location":"MatrixOne/Release-Notes/v0.5.0/#full-changelog","text":"https://github.com/matrixorigin/matrixone/compare/v0.4.0...v0.5.0","title":"Full Changelog"},{"location":"MatrixOne/Release-Notes/v0.5.1/","text":"MatrixOne v0.5.1 Release Notes We are excited to announce MatrixOne 0.5.1 release on 2022/8/19. In this release, MatrixOne resolved some log replaying and storage Garbage Collection(GC) issues. Docker docker pull matrixorigin/matrixone:0.5.1 Function Optimize Optimize checkpoint in replay. #4214 Fix the bug that block and index file reference count is not released. #4052 Fix the bug that replay dead loop when the log is not full. #4051 These bugs lead to some stability issues of a MatrixOne instance. Version Upgrade If you need to upgrade your MatrixOne from v0.5.0 to v0.5.1, for more details, see Update Standalone MatrixOne \u3002 Full Changelog https://github.com/matrixorigin/matrixone/compare/v0.4.0...v0.5.1","title":"v0.5.1"},{"location":"MatrixOne/Release-Notes/v0.5.1/#matrixone-v051-release-notes","text":"We are excited to announce MatrixOne 0.5.1 release on 2022/8/19. In this release, MatrixOne resolved some log replaying and storage Garbage Collection(GC) issues.","title":"MatrixOne v0.5.1 Release Notes"},{"location":"MatrixOne/Release-Notes/v0.5.1/#docker","text":"docker pull matrixorigin/matrixone:0.5.1","title":"Docker"},{"location":"MatrixOne/Release-Notes/v0.5.1/#function-optimize","text":"Optimize checkpoint in replay. #4214 Fix the bug that block and index file reference count is not released. #4052 Fix the bug that replay dead loop when the log is not full. #4051 These bugs lead to some stability issues of a MatrixOne instance.","title":"Function Optimize"},{"location":"MatrixOne/Release-Notes/v0.5.1/#version-upgrade","text":"If you need to upgrade your MatrixOne from v0.5.0 to v0.5.1, for more details, see Update Standalone MatrixOne \u3002","title":"Version Upgrade"},{"location":"MatrixOne/Release-Notes/v0.5.1/#full-changelog","text":"https://github.com/matrixorigin/matrixone/compare/v0.4.0...v0.5.1","title":"Full Changelog"},{"location":"MatrixOne/Test/0.6-mo-tester-reference/","text":"MO-Tester Specification Case specifications Specification Description File name 1. Use .sql or .test as the suffix. 2. The file name has a practical meaning. For example, if you need to write a index case, you can name the index case index.sql or index_xxxx.sql . Case 1. In the specific example content in the case, all empty lines are automatically ignored during testing. You can add blank lines to make the SQLs more readable. 2. Each SQL statement contains only one line. If multiple lines are required, each line must be preceded by no space. Otherwise, the SQL in the case file and the result file cannot match each other completely. 3. Add a comment indicating the purpose of the test case you are currently writing. 4. Add a Tag to the case that is in need. Tag specifications in the cases Annotation Start with End with Description -- @bvt:issue -- @bvt:issue#{issueNO.}] -- @bvt:issue the SQL marked with this flag will not been executed -- @sessio -- @session:id=X{ -- @session} all the SQLs enclosed by this tag will execute in a new session with id=X -- @separator / / The specified SQL statement in its result and generated the result file using the columns of the separator. There are two values. -- @separator:table / / The column separator in the result is a TAB character. \\t -- @separator:space / / The column separator in the result is four Spaces -- @sortkey -- @sortkey:1,2,3 / The results of the SQL statement are ordered, with the first, second, and third columns (starting from 0) sorted. Under normal circumstances, the tested system returns the result of the order is not fixed, so tools in comparison, the actual results, and expected results are sorted, but for some SQL, the expected results should be ordered, such as order by statement, you need to add such SQL on the tag, The tool does not reorder these columns in sortkey when comparing them. Result specifications Specification Description Normal cases generate test results 1. If a case file is created, ensure that all SQL is debuggable and use the Mo-Tester tool to generate results automatically. 2. If some SQLs are added to the existing case, ensure that all SQLs has passed debugging, and use the Mo-Tester tool to generate results automatically. Cases with tags generate test results 1. If a case contains SQL with the --bvt:issue tag, use the MO-Tester tool to generate results automatically. SQL with the --bvt:issue tag in the generated result file results as' unknown result because it is related to issue#XXX\" '. 2. If the results have been automatically generated by the MO-Tester tool. When the results are automatically generated by the MO-Tester tool again, the SQL with the tag --bvt:issue will retain the original value in the generated result file, no more updates. Write results manually 1. If the result is writed manually, do not have empty lines. Otherwise, a parsing error occurs. 2. If there are tabs or more than 4 consecutive spaces in the expected execution result of a certain SQL, the corresponding SQL statement in the test case file must be added with Tag -- @separator: , otherwise the parsing will fail. For example, if the SQL in the case file contains 4 consecutive spaces, you need to specify the Tag label -- @separator:table ; if it contains tab characters, specify the Tag label -- @separator:space .","title":"MO-Tester Specification"},{"location":"MatrixOne/Test/0.6-mo-tester-reference/#mo-tester-specification","text":"","title":"MO-Tester Specification"},{"location":"MatrixOne/Test/0.6-mo-tester-reference/#case-specifications","text":"Specification Description File name 1. Use .sql or .test as the suffix. 2. The file name has a practical meaning. For example, if you need to write a index case, you can name the index case index.sql or index_xxxx.sql . Case 1. In the specific example content in the case, all empty lines are automatically ignored during testing. You can add blank lines to make the SQLs more readable. 2. Each SQL statement contains only one line. If multiple lines are required, each line must be preceded by no space. Otherwise, the SQL in the case file and the result file cannot match each other completely. 3. Add a comment indicating the purpose of the test case you are currently writing. 4. Add a Tag to the case that is in need.","title":"Case specifications"},{"location":"MatrixOne/Test/0.6-mo-tester-reference/#tag-specifications-in-the-cases","text":"Annotation Start with End with Description -- @bvt:issue -- @bvt:issue#{issueNO.}] -- @bvt:issue the SQL marked with this flag will not been executed -- @sessio -- @session:id=X{ -- @session} all the SQLs enclosed by this tag will execute in a new session with id=X -- @separator / / The specified SQL statement in its result and generated the result file using the columns of the separator. There are two values. -- @separator:table / / The column separator in the result is a TAB character. \\t -- @separator:space / / The column separator in the result is four Spaces -- @sortkey -- @sortkey:1,2,3 / The results of the SQL statement are ordered, with the first, second, and third columns (starting from 0) sorted. Under normal circumstances, the tested system returns the result of the order is not fixed, so tools in comparison, the actual results, and expected results are sorted, but for some SQL, the expected results should be ordered, such as order by statement, you need to add such SQL on the tag, The tool does not reorder these columns in sortkey when comparing them.","title":"Tag specifications in the cases"},{"location":"MatrixOne/Test/0.6-mo-tester-reference/#result-specifications","text":"Specification Description Normal cases generate test results 1. If a case file is created, ensure that all SQL is debuggable and use the Mo-Tester tool to generate results automatically. 2. If some SQLs are added to the existing case, ensure that all SQLs has passed debugging, and use the Mo-Tester tool to generate results automatically. Cases with tags generate test results 1. If a case contains SQL with the --bvt:issue tag, use the MO-Tester tool to generate results automatically. SQL with the --bvt:issue tag in the generated result file results as' unknown result because it is related to issue#XXX\" '. 2. If the results have been automatically generated by the MO-Tester tool. When the results are automatically generated by the MO-Tester tool again, the SQL with the tag --bvt:issue will retain the original value in the generated result file, no more updates. Write results manually 1. If the result is writed manually, do not have empty lines. Otherwise, a parsing error occurs. 2. If there are tabs or more than 4 consecutive spaces in the expected execution result of a certain SQL, the corresponding SQL statement in the test case file must be added with Tag -- @separator: , otherwise the parsing will fail. For example, if the SQL in the case file contains 4 consecutive spaces, you need to specify the Tag label -- @separator:table ; if it contains tab characters, specify the Tag label -- @separator:space .","title":"Result specifications"},{"location":"MatrixOne/Test/0.6-mo-tester/","text":"From the 0.5.0 version, MatrixOne introduces an automatic testing framework MO-Tester . This tester is designed to test MatrixOne or other database functionalities with SQL. What's in MO-Tester? MO-Tester is a java-based tester suite for MatrixOne. It has built a whole toolchain to run automatic SQL tests. It contains the test cases and results. Once launched, MO-Tester runs all SQL test cases with MatrixOne, and compares all output SQL results with expected results. All successful and failed cases will be logged into reports. MO-Tester content locations: Cases : https://github.com/matrixorigin/matrixone/tree/main/test/cases Result : https://github.com/matrixorigin/mo-tester/tree/main/result Result can also generated in the path of /cases , for example, /cases/auto_increment . Report : once finished running, a mo-tester/report will be generated in the local directory. The Cases and Results are 1-1 correspondence, and they are actually git submodules from MatrixOne repository. Adding new cases and results should be in MatrixOne repo: https://github.com/matrixorigin/matrixone/tree/main/test How to use MO-Tester? 1. Prepare the testing environment Make sure you have installed jdk8. Launch MatrixOne or other database instance. Please refer to more information about how to install and launch MatrixOne . Clone mo-tester repository. git clone https://github.com/matrixorigin/mo-tester.git Clone matrixOne repository. git clone https://github.com/matrixorigin/matrixone.git 2. Configure mo-tester In mo.yml file, configure the server address, default database name, username, and password, etc. MO-tester is based on java, so these parameters are required for the JDBC(JDBC\uff0cJava Database Connectivity) driver. Below is a default example for a local standalone version MatrixOne. #jdbc jdbc: driver: \"com.mysql.cj.jdbc.Driver\" server: - addr: \"127.0.0.1:6001\" database: default: \"test\" paremeter: characterSetResults: \"utf8\" continueBatchOnError: \"false\" useServerPrepStmts: \"true\" alwaysSendSetIsolation: \"false\" useLocalSessionState: \"true\" zeroDateTimeBehavior: \"CONVERT_TO_NULL\" failoverReadOnly: \"false\" serverTimezone: \"Asia/Shanghai\" socketTimeout: 30000 #users user: name: \"dump\" passwrod: \"111\" 3. Run mo-tester With the simple below command, all the SQL test cases will automatically run and generate reports and error messages to report/report.txt and report/error.txt . > ./run.sh -p {path_name}/matrixone/test/cases If you'd like to adjust the test range, you can just change the path parameter of run.yml . And you can also specify some parameters when executing the command ./run.sh , parameters are as followings: Parameters Description -p set the path of test cases needed to be executed by mo-tester, the default value is configured by the path in run.yaml -m set the method that mo-tester will run with, the default value is configured by the method in run.yaml -t set the type of the format that mo-tester executes the SQL command in, the default value is configured by the type in run.yaml -r set The success rate that test cases should reach, the default value is configured by the rate in run.yaml -i set the including list, and only script files in the path whose name contains one of the lists will be executed, if more than one, separated by , , if not specified, refers to all cases included -e set the excluding list, and script files in the path whose name contains one of the lists will not be executed, if more than one, separated by , , if not specified, refers to none of the cases excluded -g means SQL commands which is marked with [bvt:issue] flag will not be executed,this flag starts with [-- @bvt:issue#{issueNO.}],and ends with [-- @bvt:issue],eg: -- @bvt:issue#3236 select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-10000:1\" HOUR_MINUTE); select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-100 1\" YEAR_MONTH); -- @bvt:issue Those two sql commands are associated with issue#3236, and they will not be executed in bvt test, until the flag is removed when issue#3236 is fixed. -n means the metadata of the resultset will be ignored when comparing the result -c only check whether the case file matches the related result file Examples : ./run.sh -p {path_name}/matrixone/test/cases -m run -t script -r 100 -i select,subquery -e substring -g If you want to automatically generate SQL results for the new SQL cases, you can just change the method parameter of run.yml file to genrs , or you can just change the command -m run to -m genrs , then running the ./run.sh scripts will directly record test results in the same path of the new SQL case file. For more information on example, see Example 4 . Note Every time running run.sh will overwrite the report of the error.txt file, report.txt file, and success.txt file in the mo-tester repository. 4. Check the report Once the test is finished, mo-tester generates error.txt file, report.txt file and success.txt file reports. An example of report.txt file looks like this: [SUMMARY] COST : 98s, TOTAL :12702, SUCCESS : 11851, FAILED :13, IGNORED :838, ABNORAML :0, SUCCESS RATE : 99% [{path_name}/matrixone/test/cases/auto_increment/auto_increment_columns.sql] COST : 2.159s, TOTAL :185, SUCCESS :163, FAILED :0, IGNORED :22, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/benchmark/tpch/01_DDL/01_create_table.sql] COST : 0.226s, TOTAL :11, SUCCESS :11, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/benchmark/tpch/02_LOAD/02_insert_customer.sql] COST : 0.357s, TOTAL :16, SUCCESS :16, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% Report Keywords Description TOTAL the total number of executed test cases (SQL) SUCCESS The total number of successfully executed test cases(SQL) FAILED the total number of failed executed test case(SQL) IGNORED the total number of ignored executed test cases (SQL), especially with the --bvt:issue tag test cases (SQL) ABNORAML the total number of abnormal executed test cases (SQL), such as the execution of MatrixOne can't determine the actual result is a system exception or .result file parsing error, etc SUCCESS RATE success rate: SUCCESS/(TOTAL - IGNORED) An example of error.txt file looks like this: [ERROR] [SCRIPT FILE]: cases/transaction/atomicity.sql [ROW NUMBER]: 14 [SQL STATEMENT]: select * from test_11 ; [EXPECT RESULT]: c d 1 1 2 2 [ACTUAL RESULT]: c d 1 1 5. Test Examples Example 1 Example Description : Run all test cases in the /cases path of the matrixone repository. Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run all the test cases of the matrixone repository, you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. Example 2 Example Description : Run the test cases in the /cases/transaction/ path of the matrixone repository. Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run the test cases in the cases/transaction/ path of the matrixone repository, you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/transaction/ Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. The example of the expected report.txt looks like this: [SUMMARY] COST : 5s, TOTAL :1362, SUCCESS : 1354, FAILED :0, IGNORED :8, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/atomicity.sql] COST : 0.575s, TOTAL :66, SUCCESS :66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit.test] COST : 0.175s, TOTAL :50, SUCCESS :50, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_1.sql] COST : 1.141s, TOTAL :296, SUCCESS :288, FAILED :0, IGNORED :8, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_atomicity.sql] COST : 0.52s, TOTAL :75, SUCCESS :75, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_isolation.sql] COST : 1.607s, TOTAL :215, SUCCESS :215, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_isolation_1.sql] COST : 1.438s, TOTAL :241, SUCCESS :241, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/isolation.sql] COST : 1.632s, TOTAL :202, SUCCESS :202, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/isolation_1.sql] COST : 1.512s, TOTAL :217, SUCCESS :217, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% Example 3 Example Description : Run the single test case cases/transaction/atomicity.sql . Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run the test cases cases/transaction/atomicity.sql , you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/transaction/atomicity.sql Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. The example of the expected report.txt looks like this: [SUMMARY] COST : 0s, TOTAL :66, SUCCESS : 66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/atomicity.sql] COST : 0.56s, TOTAL :66, SUCCESS :66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% Example 4 Example Description : Create a new folder named local_test and place it in {path_name}/matrixone/test/cases Add a test file named new_test.sql to {path_name}/matrixone/test/cases/local_test/ Only run the single test case new_test.sql * Steps Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git Generate test results: Method 1: To generate the test result, you need switch into the mo-tester repository first, then, run the following command. cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/local_test/new_test.sql -m genrs -g Method 2: Open the run.yml file in the mo-tester repository, change the method parameter from the default run to genrs , and run the following command to generate the test result. cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/local_test/new_test.sql Check the result file in the test/cases\u3001result/ path of the matrixone repository. Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. The example of the expected report.txt looks like this: [SUMMARY] COST : 0s, TOTAL :66, SUCCESS : 66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/atomicity.sql] COST : 0.56s, TOTAL :66, SUCCESS :66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% Reference For more information on the annotations of MO-Tester, see MO-Tester Annotations .","title":"MO-Tester"},{"location":"MatrixOne/Test/0.6-mo-tester/#whats-in-mo-tester","text":"MO-Tester is a java-based tester suite for MatrixOne. It has built a whole toolchain to run automatic SQL tests. It contains the test cases and results. Once launched, MO-Tester runs all SQL test cases with MatrixOne, and compares all output SQL results with expected results. All successful and failed cases will be logged into reports. MO-Tester content locations: Cases : https://github.com/matrixorigin/matrixone/tree/main/test/cases Result : https://github.com/matrixorigin/mo-tester/tree/main/result Result can also generated in the path of /cases , for example, /cases/auto_increment . Report : once finished running, a mo-tester/report will be generated in the local directory. The Cases and Results are 1-1 correspondence, and they are actually git submodules from MatrixOne repository. Adding new cases and results should be in MatrixOne repo: https://github.com/matrixorigin/matrixone/tree/main/test","title":"What's in MO-Tester?"},{"location":"MatrixOne/Test/0.6-mo-tester/#how-to-use-mo-tester","text":"","title":"How to use MO-Tester?"},{"location":"MatrixOne/Test/0.6-mo-tester/#1-prepare-the-testing-environment","text":"Make sure you have installed jdk8. Launch MatrixOne or other database instance. Please refer to more information about how to install and launch MatrixOne . Clone mo-tester repository. git clone https://github.com/matrixorigin/mo-tester.git Clone matrixOne repository. git clone https://github.com/matrixorigin/matrixone.git","title":"1. Prepare the testing environment"},{"location":"MatrixOne/Test/0.6-mo-tester/#2-configure-mo-tester","text":"In mo.yml file, configure the server address, default database name, username, and password, etc. MO-tester is based on java, so these parameters are required for the JDBC(JDBC\uff0cJava Database Connectivity) driver. Below is a default example for a local standalone version MatrixOne. #jdbc jdbc: driver: \"com.mysql.cj.jdbc.Driver\" server: - addr: \"127.0.0.1:6001\" database: default: \"test\" paremeter: characterSetResults: \"utf8\" continueBatchOnError: \"false\" useServerPrepStmts: \"true\" alwaysSendSetIsolation: \"false\" useLocalSessionState: \"true\" zeroDateTimeBehavior: \"CONVERT_TO_NULL\" failoverReadOnly: \"false\" serverTimezone: \"Asia/Shanghai\" socketTimeout: 30000 #users user: name: \"dump\" passwrod: \"111\"","title":"2. Configure mo-tester"},{"location":"MatrixOne/Test/0.6-mo-tester/#3-run-mo-tester","text":"With the simple below command, all the SQL test cases will automatically run and generate reports and error messages to report/report.txt and report/error.txt . > ./run.sh -p {path_name}/matrixone/test/cases If you'd like to adjust the test range, you can just change the path parameter of run.yml . And you can also specify some parameters when executing the command ./run.sh , parameters are as followings: Parameters Description -p set the path of test cases needed to be executed by mo-tester, the default value is configured by the path in run.yaml -m set the method that mo-tester will run with, the default value is configured by the method in run.yaml -t set the type of the format that mo-tester executes the SQL command in, the default value is configured by the type in run.yaml -r set The success rate that test cases should reach, the default value is configured by the rate in run.yaml -i set the including list, and only script files in the path whose name contains one of the lists will be executed, if more than one, separated by , , if not specified, refers to all cases included -e set the excluding list, and script files in the path whose name contains one of the lists will not be executed, if more than one, separated by , , if not specified, refers to none of the cases excluded -g means SQL commands which is marked with [bvt:issue] flag will not be executed,this flag starts with [-- @bvt:issue#{issueNO.}],and ends with [-- @bvt:issue],eg: -- @bvt:issue#3236 select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-10000:1\" HOUR_MINUTE); select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-100 1\" YEAR_MONTH); -- @bvt:issue Those two sql commands are associated with issue#3236, and they will not be executed in bvt test, until the flag is removed when issue#3236 is fixed. -n means the metadata of the resultset will be ignored when comparing the result -c only check whether the case file matches the related result file Examples : ./run.sh -p {path_name}/matrixone/test/cases -m run -t script -r 100 -i select,subquery -e substring -g If you want to automatically generate SQL results for the new SQL cases, you can just change the method parameter of run.yml file to genrs , or you can just change the command -m run to -m genrs , then running the ./run.sh scripts will directly record test results in the same path of the new SQL case file. For more information on example, see Example 4 . Note Every time running run.sh will overwrite the report of the error.txt file, report.txt file, and success.txt file in the mo-tester repository.","title":"3. Run mo-tester"},{"location":"MatrixOne/Test/0.6-mo-tester/#4-check-the-report","text":"Once the test is finished, mo-tester generates error.txt file, report.txt file and success.txt file reports. An example of report.txt file looks like this: [SUMMARY] COST : 98s, TOTAL :12702, SUCCESS : 11851, FAILED :13, IGNORED :838, ABNORAML :0, SUCCESS RATE : 99% [{path_name}/matrixone/test/cases/auto_increment/auto_increment_columns.sql] COST : 2.159s, TOTAL :185, SUCCESS :163, FAILED :0, IGNORED :22, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/benchmark/tpch/01_DDL/01_create_table.sql] COST : 0.226s, TOTAL :11, SUCCESS :11, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/benchmark/tpch/02_LOAD/02_insert_customer.sql] COST : 0.357s, TOTAL :16, SUCCESS :16, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% Report Keywords Description TOTAL the total number of executed test cases (SQL) SUCCESS The total number of successfully executed test cases(SQL) FAILED the total number of failed executed test case(SQL) IGNORED the total number of ignored executed test cases (SQL), especially with the --bvt:issue tag test cases (SQL) ABNORAML the total number of abnormal executed test cases (SQL), such as the execution of MatrixOne can't determine the actual result is a system exception or .result file parsing error, etc SUCCESS RATE success rate: SUCCESS/(TOTAL - IGNORED) An example of error.txt file looks like this: [ERROR] [SCRIPT FILE]: cases/transaction/atomicity.sql [ROW NUMBER]: 14 [SQL STATEMENT]: select * from test_11 ; [EXPECT RESULT]: c d 1 1 2 2 [ACTUAL RESULT]: c d 1 1","title":"4. Check the report"},{"location":"MatrixOne/Test/0.6-mo-tester/#5-test-examples","text":"","title":"5. Test Examples"},{"location":"MatrixOne/Test/0.6-mo-tester/#example-1","text":"Example Description : Run all test cases in the /cases path of the matrixone repository. Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run all the test cases of the matrixone repository, you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path.","title":"Example 1"},{"location":"MatrixOne/Test/0.6-mo-tester/#example-2","text":"Example Description : Run the test cases in the /cases/transaction/ path of the matrixone repository. Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run the test cases in the cases/transaction/ path of the matrixone repository, you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/transaction/ Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. The example of the expected report.txt looks like this: [SUMMARY] COST : 5s, TOTAL :1362, SUCCESS : 1354, FAILED :0, IGNORED :8, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/atomicity.sql] COST : 0.575s, TOTAL :66, SUCCESS :66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit.test] COST : 0.175s, TOTAL :50, SUCCESS :50, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_1.sql] COST : 1.141s, TOTAL :296, SUCCESS :288, FAILED :0, IGNORED :8, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_atomicity.sql] COST : 0.52s, TOTAL :75, SUCCESS :75, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_isolation.sql] COST : 1.607s, TOTAL :215, SUCCESS :215, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/autocommit_isolation_1.sql] COST : 1.438s, TOTAL :241, SUCCESS :241, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/isolation.sql] COST : 1.632s, TOTAL :202, SUCCESS :202, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/isolation_1.sql] COST : 1.512s, TOTAL :217, SUCCESS :217, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100%","title":"Example 2"},{"location":"MatrixOne/Test/0.6-mo-tester/#example-3","text":"Example Description : Run the single test case cases/transaction/atomicity.sql . Steps : Get the latest matrixone code. cd matrixone git pull https://github.com/matrixorigin/matrixone.git To run the test cases cases/transaction/atomicity.sql , you need switch into the mo-tester repository first, see the following commands: cd mo-tester ./run.sh -p {path_name}/matrixone/test/cases/transaction/atomicity.sql Check the result reports in the error.txt file, report.txt file, and success.txt file in the mo-tester/report/ path. The example of the expected report.txt looks like this: [SUMMARY] COST : 0s, TOTAL :66, SUCCESS : 66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100% [{path_name}/matrixone/test/cases/transaction/atomicity.sql] COST : 0.56s, TOTAL :66, SUCCESS :66, FAILED :0, IGNORED :0, ABNORAML :0, SUCCESS RATE : 100%","title":"Example 3"},{"location":"MatrixOne/Test/0.6-mo-tester/#example-4","text":"","title":"Example 4"},{"location":"MatrixOne/Test/0.6-mo-tester/#reference","text":"For more information on the annotations of MO-Tester, see MO-Tester Annotations .","title":"Reference"},{"location":"MatrixOne/Test/mo-tester/","text":"From the 0.5.0 version, MatrixOne introduces an automatic testing framework MO-Tester . This tester is designed to test MatrixOne or other database functionalities with SQL. What's in MO-Tester? MO-Tester is a java-based tester suite for MatrixOne. It has built a whole toolchain to run automatic SQL tests. It contains the test cases and results. Once launched, MO-Tester runs all SQL test cases with MatrixOne, and compares all output SQL results with expected results. All successful and failed cases will be logged into reports. MO-Tester content locations: Cases : https://github.com/matrixorigin/mo-tester/tree/main/cases Result : https://github.com/matrixorigin/mo-tester/tree/main/result Report : once finished running, a mo-tester/report will be generated in the local directory. The Cases and Results are 1-1 correspondence, and they are actually git submodules from MatrixOne repository. Adding new cases and results should be in MatrixOne repo: https://github.com/matrixorigin/matrixone/tree/main/test MO-Tester includes testing cases in the following table. Test cases Description Benchmark/TPCH DDL and 22 Queries of TPCH Benchmark Database DDL Statements, creation/drop databases Table DDL Statements, creation/drop tables DML DML Statements, including insert, select, show statements dtype Data Types and type conversion test cases Expression Case when, With(CTE), Temporal Interval Function Aggregate function, built-in function Explain Explain statement Join Join statement, including Left/Right/Inner/Outer/Natural Join Operator Including +,-,*,/,MOD,%,=, >, <, IS, LIKE etc Subquery Including Select/From/Where subquery Transaction Test of isolation level, atomicity How to use MO-Tester? 1. Prepare the testing environment Make sure you have installed jdk8. Launch MatrixOne or other database instance. Please refer to more information about how to install and launch MatrixOne . Clone mo-tester repository. git clone https://github.com/matrixorigin/mo-tester.git 2. Configure mo-tester In mo.yml file, configure the server address, default database name, username, and password, etc. MO-tester is based on java, so these parameters are required for the JDBC(JDBC\uff0cJava Database Connectivity) driver. Below is a default example for a local standalone version MatrixOne. #jdbc jdbc: driver: \"com.mysql.cj.jdbc.Driver\" server: - addr: \"127.0.0.1:6001\" database: default: \"test\" paremeter: characterSetResults: \"utf8\" continueBatchOnError: \"false\" useServerPrepStmts: \"true\" alwaysSendSetIsolation: \"false\" useLocalSessionState: \"true\" zeroDateTimeBehavior: \"CONVERT_TO_NULL\" failoverReadOnly: \"false\" serverTimezone: \"Asia/Shanghai\" #users user: name: \"dump\" passwrod: \"111\" 3. Run mo-tester With the simple below command, all the SQL test cases will automatically run and generate reports and error messages to report/report.txt and report/error.txt . > ./run.sh If you'd like to adjust the test range, you can just change the path parameter of run.yml . And you can also specify some parameters when executing the command run.sh , parameters are as followings: Parameters Description -p set the path of test cases needed to be executed by mo-tester, the default value is configured by the path in run.yaml -m set the method that mo-tester will run with, the default value is configured by the method in run.yaml -t set the type of the format that mo-tester executes the SQL command in, the default value is configured by the type in run.yaml -r set The success rate that test cases should reach, the default value is configured by the rate in run.yaml -i set the including list, and only script files in the path whose name contains one of the lists will be executed, if more than one, separated by , , if not specified, refers to all cases included -e set the excluding list, and script files in the path whose name contains one of the lists will not be executed, if more than one, separated by , , if not specified, refers to none of the cases excluded -g means SQL commands which is marked with [bvt:issue] flag will not be executed,this flag starts with [-- @bvt:issue#{issueNO.}],and ends with [-- @bvt:issue],eg: -- @bvt:issue#3236 select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-10000:1\" HOUR_MINUTE); select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-100 1\" YEAR_MONTH); -- @bvt:issue Those two sql commands are associated with issue#3236, and they will not be executed in bvt test, until the flag is removed when issue#3236 is fixed. -n means the metadata of the resultset will be ignored when comparing the result Examples : ./run.sh -p case -m run -t script -r 100 -i select,subquery -e substring -g If you want to automatically generate SQL results for the new SQL cases, you can just change the method parameter of run.yml file to genrs , or you can just change the command -m run to -m genrs . Running the run.sh scripts will directly record test results in the result/ path with their original filenames. For more information on example, see Example 4 . Note Every time running run.sh will overwrite the report of the error.txt file, report.txt file, and success.txt file. 4. Check the report Once the test is finished, mo-tester generates error.txt file, report.txt file and success.txt file reports . An example of report.txt file looks like this: [SUMMARY] TOTAL : 486, SUCCESS : 486, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [SUMMARY] TOTAL : 486, SUCCESS : 485, ERROR :1, NOEXE :0, SUCCESS RATE : 99% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 66, ERROR :1, NOEXE :0, SUCCESS RATE : 98% [cases/transaction/isolation.sql] TOTAL : 202, SUCCESS : 202, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation_1.sql] TOTAL : 217, SUCCESS : 217, ERROR :0, NOEXE :0, SUCCESS RATE : 100% An example of error.txt file looks like this: [ERROR] [SCRIPT FILE]: cases/transaction/atomicity.sql [ROW NUMBER]: 14 [SQL STATEMENT]: select * from test_11 ; [EXPECT RESULT]: c d 1 1 2 2 [ACTUAL RESULT]: c d 1 1 5. Test Examples Example 1 Example Description : Run all test cases in the /cases path of the mo-tester repository. Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run all the test cases of the mo-tester repository, see the following commands: ./run.sh Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. Example 2 Example Description : Run the test cases in the /cases/transaction/ path of the mo-tester repository. Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run the test cases in the cases/transaction/ path of the mo-tester repository, see the following commands: ./run.sh -p cases/transaction/ Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. The example of the expected report.txt looks like this: [SUMMARY] TOTAL : 486, SUCCESS : 486, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation.sql] TOTAL : 202, SUCCESS : 202, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation_1.sql] TOTAL : 217, SUCCESS : 217, ERROR :0, NOEXE :0, SUCCESS RATE : 100% Example 3 Example Description : Run the single test case cases/transaction/atomicity.sql . Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run the test cases cases/transaction/atomicity.sql , see the following commands: ./run.sh -p cases/transaction/atomicity.sql Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. The example of the expected report.txt looks like this: [SUMMARY] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% Example 4 Example Description : Create a new folder named local_test and place it in /cases Add a test file named new_test.sql to cases/local_test/ Only run the single test case new_test.sql * Steps Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git Generate test results: Method 1: To generate the test result, run the following command. ./run.sh -p cases/local_test/new_test.sql -m genrs -g Method 2: Open the run.yml file, change the method parameter from the default run to genrs , and run the following command to generate the test result. ./run.sh -p cases/local_test/new_test.sql Check the result file in the result/ path. To run the test cases cases/local_test/new_test.sql , see the following commands: ./run.sh -p cases/local_test/new_test.sql -m run -g Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. The example of the expected report.txt looks like this: [SUMMARY] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/local_test/new_test.sql] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100%","title":"Mo tester"},{"location":"MatrixOne/Test/mo-tester/#whats-in-mo-tester","text":"MO-Tester is a java-based tester suite for MatrixOne. It has built a whole toolchain to run automatic SQL tests. It contains the test cases and results. Once launched, MO-Tester runs all SQL test cases with MatrixOne, and compares all output SQL results with expected results. All successful and failed cases will be logged into reports. MO-Tester content locations: Cases : https://github.com/matrixorigin/mo-tester/tree/main/cases Result : https://github.com/matrixorigin/mo-tester/tree/main/result Report : once finished running, a mo-tester/report will be generated in the local directory. The Cases and Results are 1-1 correspondence, and they are actually git submodules from MatrixOne repository. Adding new cases and results should be in MatrixOne repo: https://github.com/matrixorigin/matrixone/tree/main/test MO-Tester includes testing cases in the following table. Test cases Description Benchmark/TPCH DDL and 22 Queries of TPCH Benchmark Database DDL Statements, creation/drop databases Table DDL Statements, creation/drop tables DML DML Statements, including insert, select, show statements dtype Data Types and type conversion test cases Expression Case when, With(CTE), Temporal Interval Function Aggregate function, built-in function Explain Explain statement Join Join statement, including Left/Right/Inner/Outer/Natural Join Operator Including +,-,*,/,MOD,%,=, >, <, IS, LIKE etc Subquery Including Select/From/Where subquery Transaction Test of isolation level, atomicity","title":"What's in MO-Tester?"},{"location":"MatrixOne/Test/mo-tester/#how-to-use-mo-tester","text":"","title":"How to use MO-Tester?"},{"location":"MatrixOne/Test/mo-tester/#1-prepare-the-testing-environment","text":"Make sure you have installed jdk8. Launch MatrixOne or other database instance. Please refer to more information about how to install and launch MatrixOne . Clone mo-tester repository. git clone https://github.com/matrixorigin/mo-tester.git","title":"1. Prepare the testing environment"},{"location":"MatrixOne/Test/mo-tester/#2-configure-mo-tester","text":"In mo.yml file, configure the server address, default database name, username, and password, etc. MO-tester is based on java, so these parameters are required for the JDBC(JDBC\uff0cJava Database Connectivity) driver. Below is a default example for a local standalone version MatrixOne. #jdbc jdbc: driver: \"com.mysql.cj.jdbc.Driver\" server: - addr: \"127.0.0.1:6001\" database: default: \"test\" paremeter: characterSetResults: \"utf8\" continueBatchOnError: \"false\" useServerPrepStmts: \"true\" alwaysSendSetIsolation: \"false\" useLocalSessionState: \"true\" zeroDateTimeBehavior: \"CONVERT_TO_NULL\" failoverReadOnly: \"false\" serverTimezone: \"Asia/Shanghai\" #users user: name: \"dump\" passwrod: \"111\"","title":"2. Configure mo-tester"},{"location":"MatrixOne/Test/mo-tester/#3-run-mo-tester","text":"With the simple below command, all the SQL test cases will automatically run and generate reports and error messages to report/report.txt and report/error.txt . > ./run.sh If you'd like to adjust the test range, you can just change the path parameter of run.yml . And you can also specify some parameters when executing the command run.sh , parameters are as followings: Parameters Description -p set the path of test cases needed to be executed by mo-tester, the default value is configured by the path in run.yaml -m set the method that mo-tester will run with, the default value is configured by the method in run.yaml -t set the type of the format that mo-tester executes the SQL command in, the default value is configured by the type in run.yaml -r set The success rate that test cases should reach, the default value is configured by the rate in run.yaml -i set the including list, and only script files in the path whose name contains one of the lists will be executed, if more than one, separated by , , if not specified, refers to all cases included -e set the excluding list, and script files in the path whose name contains one of the lists will not be executed, if more than one, separated by , , if not specified, refers to none of the cases excluded -g means SQL commands which is marked with [bvt:issue] flag will not be executed,this flag starts with [-- @bvt:issue#{issueNO.}],and ends with [-- @bvt:issue],eg: -- @bvt:issue#3236 select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-10000:1\" HOUR_MINUTE); select date_add(\"1997-12-31 23:59:59\",INTERVAL \"-100 1\" YEAR_MONTH); -- @bvt:issue Those two sql commands are associated with issue#3236, and they will not be executed in bvt test, until the flag is removed when issue#3236 is fixed. -n means the metadata of the resultset will be ignored when comparing the result Examples : ./run.sh -p case -m run -t script -r 100 -i select,subquery -e substring -g If you want to automatically generate SQL results for the new SQL cases, you can just change the method parameter of run.yml file to genrs , or you can just change the command -m run to -m genrs . Running the run.sh scripts will directly record test results in the result/ path with their original filenames. For more information on example, see Example 4 . Note Every time running run.sh will overwrite the report of the error.txt file, report.txt file, and success.txt file.","title":"3. Run mo-tester"},{"location":"MatrixOne/Test/mo-tester/#4-check-the-report","text":"Once the test is finished, mo-tester generates error.txt file, report.txt file and success.txt file reports . An example of report.txt file looks like this: [SUMMARY] TOTAL : 486, SUCCESS : 486, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [SUMMARY] TOTAL : 486, SUCCESS : 485, ERROR :1, NOEXE :0, SUCCESS RATE : 99% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 66, ERROR :1, NOEXE :0, SUCCESS RATE : 98% [cases/transaction/isolation.sql] TOTAL : 202, SUCCESS : 202, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation_1.sql] TOTAL : 217, SUCCESS : 217, ERROR :0, NOEXE :0, SUCCESS RATE : 100% An example of error.txt file looks like this: [ERROR] [SCRIPT FILE]: cases/transaction/atomicity.sql [ROW NUMBER]: 14 [SQL STATEMENT]: select * from test_11 ; [EXPECT RESULT]: c d 1 1 2 2 [ACTUAL RESULT]: c d 1 1","title":"4. Check the report"},{"location":"MatrixOne/Test/mo-tester/#5-test-examples","text":"","title":"5. Test Examples"},{"location":"MatrixOne/Test/mo-tester/#example-1","text":"Example Description : Run all test cases in the /cases path of the mo-tester repository. Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run all the test cases of the mo-tester repository, see the following commands: ./run.sh Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path.","title":"Example 1"},{"location":"MatrixOne/Test/mo-tester/#example-2","text":"Example Description : Run the test cases in the /cases/transaction/ path of the mo-tester repository. Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run the test cases in the cases/transaction/ path of the mo-tester repository, see the following commands: ./run.sh -p cases/transaction/ Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. The example of the expected report.txt looks like this: [SUMMARY] TOTAL : 486, SUCCESS : 486, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation.sql] TOTAL : 202, SUCCESS : 202, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/isolation_1.sql] TOTAL : 217, SUCCESS : 217, ERROR :0, NOEXE :0, SUCCESS RATE : 100%","title":"Example 2"},{"location":"MatrixOne/Test/mo-tester/#example-3","text":"Example Description : Run the single test case cases/transaction/atomicity.sql . Steps : Get the latest mo-tester code. cd mo-tester git pull https://github.com/matrixorigin/mo-tester.git To run the test cases cases/transaction/atomicity.sql , see the following commands: ./run.sh -p cases/transaction/atomicity.sql Check the result reports in the error.txt file, report.txt file, and success.txt file in the report/ path. The example of the expected report.txt looks like this: [SUMMARY] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100% [cases/transaction/atomicity.sql] TOTAL : 67, SUCCESS : 67, ERROR :0, NOEXE :0, SUCCESS RATE : 100%","title":"Example 3"},{"location":"MatrixOne/Test/mo-tester/#example-4","text":"","title":"Example 4"},{"location":"MatrixOne/Troubleshooting/audit/","text":"Audit Overview The audit function records user behaviors and major internal events in the database. After logging in to the database, it registers all users' database operations and major internal events. It is also one of the essential features of many enterprise databases. With MatrixOne 0.6.0, the audit capability is in its initial form and is available for testing. To facilitate users obtaining the required information, you can use this document to enable this function. In daily database operation and maintenance, an audit is a very effective means to ensure that all behaviors of database users comply with the law. When important events occur in the database, such as start and stop, node breakdown, etc., the audit content can be very convenient for tracing the behavior of the protective device library before and after the period. It is necessary to enable database audit when you need to effectively and completely monitor necessary service information tables or system configuration tables. For example, it monitors all user A's behaviors in the database to discover the source of data modification or deletion promptly. For the monitoring of major internal events in the database, the fault can be rectified immediately, and the root cause of the accident can be traced back. Enable Audit To enable the audit, execute the following SQL statements: > drop database if exists mo_audits ; > create database mo_audits ; > use mo_audits ; > create view mo_user_action as select request_at , user , host , statement , status from system . statement_info where user <> 'internal' order by request_at desc ; > create view mo_events as select timestamp , level , message from system . log_info where level in ( 'error' , 'panic' , 'fatal' ) order by timestamp desc ; Audit Query To audit user behaviors, execute the following SQL statement: > select * from mo_audits . mo_user_action ; The example query result as below: | 2022-10-18 16:45:43.508278 | dump | 0.0.0.0 | show grants for test@localhost | Success | | 2022-10-18 16:45:26.058345 | dump | 0.0.0.0 | show grants for root@localhost | Success | | 2022-10-18 16:45:18.957485 | dump | 0.0.0.0 | show grants for root@localhost@% | Success | | 2022-10-18 16:45:12.331454 | dump | 0.0.0.0 | show grants for root@% | Success | | 2022-10-18 16:43:44.027403 | dump | 0.0.0.0 | show grants | Success | | 2022-10-18 16:31:18.406944 | dump | 0.0.0.0 | select date_sub(now(), interval(1, \"hour\")) | Success | | 2022-10-18 16:28:51.355151 | dump | 0.0.0.0 | create view error_message as select timestamp, message from system.log_info where level in (\"error\", \"panic\", \"faltal\") | Success | | 2022-10-18 16:28:51.351457 | dump | 0.0.0.0 | create view slow_query_with_plan as select statement, request_at, duration / 1000000000 as duration_second, exec_plan from system.statement_info where statement like \"select%\" and duration / 1000000000 > 1 order by request_at desc | Success | | 2022-10-18 16:28:51.347598 | dump | 0.0.0.0 | create view slow_query as select statement, request_at, duration / 1000000000 as duration_second from system.statement_info where statement like \"select%\" and duration / 1000000000 > 1 order by request_at desc | Success | | 2022-10-18 16:28:51.343752 | dump | 0.0.0.0 | show tables | Success | | 2022-10-18 16:28:51.341880 | dump | 0.0.0.0 | show databases | Success | | 2022-10-18 16:28:51.340159 | dump | 0.0.0.0 | use mo_ts | Success | | 2022-10-18 16:28:51.339825 | dump | 0.0.0.0 | select database() | Success | | 2022-10-18 16:28:51.337843 | dump | 0.0.0.0 | create database mo_ts | Success | | 2022-10-18 16:28:51.335967 | dump | 0.0.0.0 | drop database if exists mo_ts | Success | | 2022-10-18 16:28:21.830069 | dump | 0.0.0.0 | use mo_ts | Failed | | 2022-10-18 16:28:21.829747 | dump | 0.0.0.0 | select database() | Success | | 2022-10-18 16:28:21.827240 | dump | 0.0.0.0 | drop database if exists mo_ts | Success | Query database internal status change query, execute the following SQL statement to view: > select * from mo_events ; The example query result as below: | | 2022-10-18 15:26:20.293735 | error | error: timeout, converted to code 20429 | | 2022-10-18 15:26:20.293725 | error | failed to propose initial cluster info | | 2022-10-18 15:26:20.288695 | error | failed to set initial cluster info | | 2022-10-18 15:26:20.288559 | error | failed to propose initial cluster info | | 2022-10-18 15:26:20.285384 | error | failed to set initial cluster info | | 2022-10-18 15:26:20.285235 | error | failed to propose initial cluster info | | 2022-10-18 15:26:18.473472 | error | failed to join the gossip group, 1 error occurred: * Failed to join 127.0.0.1:32022: dial tcp 127.0.0.1:32022: connect: connection refused | | 2022-10-18 15:26:18.469029 | error | failed to join the gossip group, 1 error occurred: * Failed to join 127.0.0.1:32012: dial tcp 127.0.0.1:32012: connect: connection refused Disable Audit To disable the audit, execute the following SQL statement: > drop database if exists mo_audits ;","title":"Audit"},{"location":"MatrixOne/Troubleshooting/audit/#audit","text":"","title":"Audit"},{"location":"MatrixOne/Troubleshooting/audit/#overview","text":"The audit function records user behaviors and major internal events in the database. After logging in to the database, it registers all users' database operations and major internal events. It is also one of the essential features of many enterprise databases. With MatrixOne 0.6.0, the audit capability is in its initial form and is available for testing. To facilitate users obtaining the required information, you can use this document to enable this function. In daily database operation and maintenance, an audit is a very effective means to ensure that all behaviors of database users comply with the law. When important events occur in the database, such as start and stop, node breakdown, etc., the audit content can be very convenient for tracing the behavior of the protective device library before and after the period. It is necessary to enable database audit when you need to effectively and completely monitor necessary service information tables or system configuration tables. For example, it monitors all user A's behaviors in the database to discover the source of data modification or deletion promptly. For the monitoring of major internal events in the database, the fault can be rectified immediately, and the root cause of the accident can be traced back.","title":"Overview"},{"location":"MatrixOne/Troubleshooting/audit/#enable-audit","text":"To enable the audit, execute the following SQL statements: > drop database if exists mo_audits ; > create database mo_audits ; > use mo_audits ; > create view mo_user_action as select request_at , user , host , statement , status from system . statement_info where user <> 'internal' order by request_at desc ; > create view mo_events as select timestamp , level , message from system . log_info where level in ( 'error' , 'panic' , 'fatal' ) order by timestamp desc ;","title":"Enable Audit"},{"location":"MatrixOne/Troubleshooting/audit/#audit-query","text":"To audit user behaviors, execute the following SQL statement: > select * from mo_audits . mo_user_action ; The example query result as below: | 2022-10-18 16:45:43.508278 | dump | 0.0.0.0 | show grants for test@localhost | Success | | 2022-10-18 16:45:26.058345 | dump | 0.0.0.0 | show grants for root@localhost | Success | | 2022-10-18 16:45:18.957485 | dump | 0.0.0.0 | show grants for root@localhost@% | Success | | 2022-10-18 16:45:12.331454 | dump | 0.0.0.0 | show grants for root@% | Success | | 2022-10-18 16:43:44.027403 | dump | 0.0.0.0 | show grants | Success | | 2022-10-18 16:31:18.406944 | dump | 0.0.0.0 | select date_sub(now(), interval(1, \"hour\")) | Success | | 2022-10-18 16:28:51.355151 | dump | 0.0.0.0 | create view error_message as select timestamp, message from system.log_info where level in (\"error\", \"panic\", \"faltal\") | Success | | 2022-10-18 16:28:51.351457 | dump | 0.0.0.0 | create view slow_query_with_plan as select statement, request_at, duration / 1000000000 as duration_second, exec_plan from system.statement_info where statement like \"select%\" and duration / 1000000000 > 1 order by request_at desc | Success | | 2022-10-18 16:28:51.347598 | dump | 0.0.0.0 | create view slow_query as select statement, request_at, duration / 1000000000 as duration_second from system.statement_info where statement like \"select%\" and duration / 1000000000 > 1 order by request_at desc | Success | | 2022-10-18 16:28:51.343752 | dump | 0.0.0.0 | show tables | Success | | 2022-10-18 16:28:51.341880 | dump | 0.0.0.0 | show databases | Success | | 2022-10-18 16:28:51.340159 | dump | 0.0.0.0 | use mo_ts | Success | | 2022-10-18 16:28:51.339825 | dump | 0.0.0.0 | select database() | Success | | 2022-10-18 16:28:51.337843 | dump | 0.0.0.0 | create database mo_ts | Success | | 2022-10-18 16:28:51.335967 | dump | 0.0.0.0 | drop database if exists mo_ts | Success | | 2022-10-18 16:28:21.830069 | dump | 0.0.0.0 | use mo_ts | Failed | | 2022-10-18 16:28:21.829747 | dump | 0.0.0.0 | select database() | Success | | 2022-10-18 16:28:21.827240 | dump | 0.0.0.0 | drop database if exists mo_ts | Success | Query database internal status change query, execute the following SQL statement to view: > select * from mo_events ; The example query result as below: | | 2022-10-18 15:26:20.293735 | error | error: timeout, converted to code 20429 | | 2022-10-18 15:26:20.293725 | error | failed to propose initial cluster info | | 2022-10-18 15:26:20.288695 | error | failed to set initial cluster info | | 2022-10-18 15:26:20.288559 | error | failed to propose initial cluster info | | 2022-10-18 15:26:20.285384 | error | failed to set initial cluster info | | 2022-10-18 15:26:20.285235 | error | failed to propose initial cluster info | | 2022-10-18 15:26:18.473472 | error | failed to join the gossip group, 1 error occurred: * Failed to join 127.0.0.1:32022: dial tcp 127.0.0.1:32022: connect: connection refused | | 2022-10-18 15:26:18.469029 | error | failed to join the gossip group, 1 error occurred: * Failed to join 127.0.0.1:32012: dial tcp 127.0.0.1:32012: connect: connection refused","title":"Audit Query"},{"location":"MatrixOne/Troubleshooting/audit/#disable-audit","text":"To disable the audit, execute the following SQL statement: > drop database if exists mo_audits ;","title":"Disable Audit"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/","text":"Common statistic data query Statistic data is a common query periodically performed during the operation and maintenance of a database. It helps the users intuitively and accurately grasp the current database status and health status. In MatrixOne, statistics include the following: Metadata : data that describes the database, including database information, table information, and column information. SQL Statistics : indicates whether the SQL is executed successfully, by whom, and at the start and stop time in a specific time range. Role and Permission information : You can query the authorization, permission, inheritance, execution time, and authorization person of all roles in a MatrixOne. Check basic information on all databases To view the basic information on all databases of the current account, execute the SQL as below: > select md . datname as database_name , md . created_time as created_time , mu . user_name as creator , mr . role_name as owner_role , count ( mt . reldatabase ) as total_tables from mo_catalog . mo_database md , mo_catalog . mo_role mr , mo_catalog . mo_user mu , mo_catalog . mo_tables mt where md . creator = mu . user_id and md . owner = mr . role_id and mt . reldatabase_id = md . dat_id group by mt . reldatabase , md . datname , md . created_time , mu . user_name , mr . role_name order by md . created_time asc ; View the information on all auto increment columns To view the information on all the auto increment columns, execute the SQL as below: > select att_database as database_name , att_relname as table_name , attname as column_name from mo_catalog . mo_columns where att_is_auto_increment = 1 order by att_database , att_relname asc ; View the information on all the views To view the information on all the views, execute the SQL as below: > select mt . relname as view_name , mt . reldatabase as database_name , mu . user_name as created_user , mr . role_name as owner_role , mt . created_time from mo_catalog . mo_tables mt , mo_catalog . mo_user mu , mo_catalog . mo_role mr where mt . relkind = 'v' and mt . creator = mu . user_id and mt . owner = mr . role_id order by 1 , 2 asc ; View the information on all the external tables To view the information on all the external tables, execute the SQL as below: > select mt . relname as view_name , mt . reldatabase as database_name , mu . user_name as created_user , mr . role_name as owner_role , mt . created_time from mo_catalog . mo_tables mt , mo_catalog . mo_user mu , mo_catalog . mo_role mr where mt . relkind = 'e' and mt . creator = mu . user_id and mt . owner = mr . role_id order by 1 , 2 asc ; View the information on all the primary keys of tables To view the information on all the primary keys of tables, execute the SQL as below: > select att_database as database_name , att_relname as table_name , attname as column_name from mo_catalog . mo_columns where att_constraint_type = 'p' and att_relname not like '%!%' order by att_database , att_relname asc ; View the information on all the tables without primary keys To view the information on all the tables without primary keys, execute the SQL as below: > select distinct att_database as database_name , att_relname as table_name from mo_catalog . mo_columns minus select att_database as database_name , att_relname as table_name from mo_catalog . mo_columns where att_constraint_type = 'p' order by database_name , table_name asc ; View the sql statistics of the last 24 hours (not supported for non-sys account) > select user , host , status , count ( status ) as count , date_sub ( now (), interval 24 hour ) as start_time , now () as end_time from system . statement_info where status in ( 'Success' , 'Failed' ) and user <> 'internal' and request_at between date_sub ( now (), interval 24 hour ) and now () group by status , user , host order by user , status asc ; View the information on all role grant users To view the information on all role grant users, execute the SQL as below: > select mu . user_name as user_name , mr . role_name as role_name , mug . with_grant_option from mo_catalog . mo_user mu , mo_catalog . mo_role mr , mo_catalog . mo_user_grant mug where mu . user_id = mug . user_id and mr . role_id = mug . role_id order by mu . user_name , mr . role_name asc ; View the promission of all roles To view the promission of all roles, execute the SQL as below: > select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , md . datname as object_name , with_grant_option from mo_catalog . mo_role_privs mrp , mo_catalog . mo_database md where mrp . obj_id = md . dat_id and mrp . obj_type = 'database' union select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , '*' , with_grant_option from mo_catalog . mo_role_privs mrp where obj_id = 0 union select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , mt . relname as object_name , with_grant_option from mo_catalog . mo_role_privs mrp , mo_catalog . mo_tables mt where mrp . obj_id = mt . rel_id and mrp . obj_type = 'table' order by 1 , 2 asc ; View all role inheritance information To view all role inheritance information, execute the SQL as below: > select mr1 . role_name as inheritor_role , mr2 . role_name as inheritee_role , mu . user_name as operator_user , mrg . granted_time , mrg . with_grant_option from mo_catalog . mo_user mu , mo_catalog . mo_role mr1 , mo_catalog . mo_role mr2 , mo_catalog . mo_role_grant mrg where mu . user_id = mrg . operation_user_id and mr1 . role_id = mrg . grantee_id and mr2 . role_id = mrg . granted_id order by mr1 . role_name , mr2 . role_name asc ;","title":"Common statistic data query"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#common-statistic-data-query","text":"Statistic data is a common query periodically performed during the operation and maintenance of a database. It helps the users intuitively and accurately grasp the current database status and health status. In MatrixOne, statistics include the following: Metadata : data that describes the database, including database information, table information, and column information. SQL Statistics : indicates whether the SQL is executed successfully, by whom, and at the start and stop time in a specific time range. Role and Permission information : You can query the authorization, permission, inheritance, execution time, and authorization person of all roles in a MatrixOne.","title":"Common statistic data query"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#check-basic-information-on-all-databases","text":"To view the basic information on all databases of the current account, execute the SQL as below: > select md . datname as database_name , md . created_time as created_time , mu . user_name as creator , mr . role_name as owner_role , count ( mt . reldatabase ) as total_tables from mo_catalog . mo_database md , mo_catalog . mo_role mr , mo_catalog . mo_user mu , mo_catalog . mo_tables mt where md . creator = mu . user_id and md . owner = mr . role_id and mt . reldatabase_id = md . dat_id group by mt . reldatabase , md . datname , md . created_time , mu . user_name , mr . role_name order by md . created_time asc ;","title":"Check basic information on all databases"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-auto-increment-columns","text":"To view the information on all the auto increment columns, execute the SQL as below: > select att_database as database_name , att_relname as table_name , attname as column_name from mo_catalog . mo_columns where att_is_auto_increment = 1 order by att_database , att_relname asc ;","title":"View the information on all auto increment columns"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-the-views","text":"To view the information on all the views, execute the SQL as below: > select mt . relname as view_name , mt . reldatabase as database_name , mu . user_name as created_user , mr . role_name as owner_role , mt . created_time from mo_catalog . mo_tables mt , mo_catalog . mo_user mu , mo_catalog . mo_role mr where mt . relkind = 'v' and mt . creator = mu . user_id and mt . owner = mr . role_id order by 1 , 2 asc ;","title":"View the information on all the views"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-the-external-tables","text":"To view the information on all the external tables, execute the SQL as below: > select mt . relname as view_name , mt . reldatabase as database_name , mu . user_name as created_user , mr . role_name as owner_role , mt . created_time from mo_catalog . mo_tables mt , mo_catalog . mo_user mu , mo_catalog . mo_role mr where mt . relkind = 'e' and mt . creator = mu . user_id and mt . owner = mr . role_id order by 1 , 2 asc ;","title":"View the information on all the external tables"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-the-primary-keys-of-tables","text":"To view the information on all the primary keys of tables, execute the SQL as below: > select att_database as database_name , att_relname as table_name , attname as column_name from mo_catalog . mo_columns where att_constraint_type = 'p' and att_relname not like '%!%' order by att_database , att_relname asc ;","title":"View the information on all the primary keys of tables"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-the-tables-without-primary-keys","text":"To view the information on all the tables without primary keys, execute the SQL as below: > select distinct att_database as database_name , att_relname as table_name from mo_catalog . mo_columns minus select att_database as database_name , att_relname as table_name from mo_catalog . mo_columns where att_constraint_type = 'p' order by database_name , table_name asc ;","title":"View the information on all the tables without primary keys"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-sql-statistics-of-the-last-24-hours-not-supported-for-non-sys-account","text":"> select user , host , status , count ( status ) as count , date_sub ( now (), interval 24 hour ) as start_time , now () as end_time from system . statement_info where status in ( 'Success' , 'Failed' ) and user <> 'internal' and request_at between date_sub ( now (), interval 24 hour ) and now () group by status , user , host order by user , status asc ;","title":"View the sql statistics of the last 24 hours (not supported for non-sys account)"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-information-on-all-role-grant-users","text":"To view the information on all role grant users, execute the SQL as below: > select mu . user_name as user_name , mr . role_name as role_name , mug . with_grant_option from mo_catalog . mo_user mu , mo_catalog . mo_role mr , mo_catalog . mo_user_grant mug where mu . user_id = mug . user_id and mr . role_id = mug . role_id order by mu . user_name , mr . role_name asc ;","title":"View the information on all role grant users"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-the-promission-of-all-roles","text":"To view the promission of all roles, execute the SQL as below: > select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , md . datname as object_name , with_grant_option from mo_catalog . mo_role_privs mrp , mo_catalog . mo_database md where mrp . obj_id = md . dat_id and mrp . obj_type = 'database' union select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , '*' , with_grant_option from mo_catalog . mo_role_privs mrp where obj_id = 0 union select mrp . role_name , mrp . privilege_name , mrp . obj_type , mrp . privilege_level , mt . relname as object_name , with_grant_option from mo_catalog . mo_role_privs mrp , mo_catalog . mo_tables mt where mrp . obj_id = mt . rel_id and mrp . obj_type = 'table' order by 1 , 2 asc ;","title":"View the promission of all roles"},{"location":"MatrixOne/Troubleshooting/common-statistics-query/#view-all-role-inheritance-information","text":"To view all role inheritance information, execute the SQL as below: > select mr1 . role_name as inheritor_role , mr2 . role_name as inheritee_role , mu . user_name as operator_user , mrg . granted_time , mrg . with_grant_option from mo_catalog . mo_user mu , mo_catalog . mo_role mr1 , mo_catalog . mo_role mr2 , mo_catalog . mo_role_grant mrg where mu . user_id = mrg . operation_user_id and mr1 . role_id = mrg . grantee_id and mr2 . role_id = mrg . granted_id order by mr1 . role_name , mr2 . role_name asc ;","title":"View all role inheritance information"},{"location":"MatrixOne/Troubleshooting/slow-queries/","text":"Slow Query Currently, the slow queries on a MatrixOne are longer than 1000 milliseconds and cannot be directly output to corresponding log files. You need to create a view to filter the query information. Enable Slow Query MatrixOne slow query feature is available in version 0.6.0 with the following basic information: statement : indicates the SQL text that provides the complete SQL statement. request_at : indicates the start time of the SQL statement. duration_second : indicates the actual execution time of the SQL statement. exec_plan : indicates the detailed execution plan of the SQL statement. To enable the slow query, execute the following SQL statements: > drop database if exists mo_ts ; > create database mo_ts ; > use mo_ts ; > create view slow_query as select statement , request_at , duration / 1000000000 as duration_second from system . statement_info where statement like 'select%' and duration / 1000000000 > 1 order by request_at desc ; > create view slow_query_with_plan as select statement , request_at , duration / 1000000000 as duration_second , exec_plan from system . statement_info where statement like 'select%' and duration / 1000000000 > 1 order by request_at desc ; For all queries longer than 1 second, execute the following SQL statement to view them: > select * from mo_ts . slow_query ; > select * from mo_ts . slow_query_with_plan ; Explanations select * from mo_ts.slow_query; : slow query without plan. select * from mo_ts.slow_query_with_plan; : slow query with plan.\u3002 Error Log When slow query is enabled, you can enable error logs, check logs, and locate error information. Enable Error Log To enable the error log, , execute the following SQL statements: > create database mo_ts ; > use mo_ts ; > create view error_message as select timestamp , message from system . log_info where level in ( 'error' , 'panic' , 'faltal' ); > create view error_sql as select si . request_at time_stamp , si . statement as SQL , el . err_code from statement_info si , error_info el where si . statement_id = el . statement_id and user <> 'internal' ; To query the error message of database, execute the following SQL statements: > select * from mo_ts . error_message ; To query the error of SQL, execute the following SQL statements: > select * from mo_ts . error_sql ;","title":"Slow Queries"},{"location":"MatrixOne/Troubleshooting/slow-queries/#slow-query","text":"Currently, the slow queries on a MatrixOne are longer than 1000 milliseconds and cannot be directly output to corresponding log files. You need to create a view to filter the query information.","title":"Slow Query"},{"location":"MatrixOne/Troubleshooting/slow-queries/#enable-slow-query","text":"MatrixOne slow query feature is available in version 0.6.0 with the following basic information: statement : indicates the SQL text that provides the complete SQL statement. request_at : indicates the start time of the SQL statement. duration_second : indicates the actual execution time of the SQL statement. exec_plan : indicates the detailed execution plan of the SQL statement. To enable the slow query, execute the following SQL statements: > drop database if exists mo_ts ; > create database mo_ts ; > use mo_ts ; > create view slow_query as select statement , request_at , duration / 1000000000 as duration_second from system . statement_info where statement like 'select%' and duration / 1000000000 > 1 order by request_at desc ; > create view slow_query_with_plan as select statement , request_at , duration / 1000000000 as duration_second , exec_plan from system . statement_info where statement like 'select%' and duration / 1000000000 > 1 order by request_at desc ; For all queries longer than 1 second, execute the following SQL statement to view them: > select * from mo_ts . slow_query ; > select * from mo_ts . slow_query_with_plan ; Explanations select * from mo_ts.slow_query; : slow query without plan. select * from mo_ts.slow_query_with_plan; : slow query with plan.\u3002","title":"Enable Slow Query"},{"location":"MatrixOne/Troubleshooting/slow-queries/#error-log","text":"When slow query is enabled, you can enable error logs, check logs, and locate error information.","title":"Error Log"},{"location":"MatrixOne/Troubleshooting/slow-queries/#enable-error-log","text":"To enable the error log, , execute the following SQL statements: > create database mo_ts ; > use mo_ts ; > create view error_message as select timestamp , message from system . log_info where level in ( 'error' , 'panic' , 'faltal' ); > create view error_sql as select si . request_at time_stamp , si . statement as SQL , el . err_code from statement_info si , error_info el where si . statement_id = el . statement_id and user <> 'internal' ; To query the error message of database, execute the following SQL statements: > select * from mo_ts . error_message ; To query the error of SQL, execute the following SQL statements: > select * from mo_ts . error_sql ;","title":"Enable Error Log"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/","text":"Complete a SSB Test with MatrixOne The Star Schema Benchmark\uff08SSB\uff09Test is a popular scenario for OLAP database performance test. By going through this tutorial, you\u2019ll learn how to complete a SSB Test with MatrixOne. Before you start Make sure you have already installed MatrixOne and connected to MatrixOne Server . 1. Compile dbgen git clone git@github.com:vadimtk/ssb-dbgen.git cd ssb-dbgen make Note Compile dbgen on a PC with M1 chip. See Deployment FAQs . 2. Generate data Option 1: Generate the single table dataset With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) ./dbgen -s 1 -T c ./dbgen -s 1 -T l ./dbgen -s 1 -T p ./dbgen -s 1 -T s ./dbgen -s 1 -T d Option 2: Download the large wide table dataset We have also prepared a 1GB large wide table dataset for downloading. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2 3. Create tables in MatrixOne create database if not exists ssb; use ssb; drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dates; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate date, lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate date, lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dates ( d_datekey date, d_date char (18), d_dayofweek char (9), d_month char (9), d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek varchar(12), d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) ); 4. Load data into the created tables Option 1: Load the sigle table dataset into related tables with this command in MatrixOne load data infile '/ssb-dbgen-path/supplier.tbl' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl' into table dates FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. Option 2: Load the large wide table dataset into the lineorder_flat load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; 5. Run SSB Queries Note GROUP BY does not support using the alias name for now\u3002 Flat table queries --Q1.1 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1993 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25 ; --Q1.2 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1994 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35 ; --Q1.3 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1994 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35 ; --Q2.1 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#12' AND S_REGION = 'AMERICA' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q2.2 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q2.3 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q3.1 SELECT C_NATION , S_NATION , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_NATION , S_NATION , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.2 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.3 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE ( C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7' ) AND ( S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7' ) AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.4 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE ( C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7' ) AND ( S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4' ) AND year ( LO_ORDERDATE ) = 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q4.1 SELECT year ( LO_ORDERDATE ) AS year , C_NATION , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND ( P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2' ) GROUP BY year ( LO_ORDERDATE ), C_NATION ORDER BY year , C_NATION ; --Q4.2 SELECT year ( LO_ORDERDATE ) AS year , S_NATION , P_CATEGORY , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND ( year ( LO_ORDERDATE ) = 1997 OR year ( LO_ORDERDATE ) = 1998 ) AND ( P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2' ) GROUP BY year ( LO_ORDERDATE ), S_NATION , P_CATEGORY ORDER BY year , S_NATION , P_CATEGORY ; --Q4.3 SELECT year ( LO_ORDERDATE ) AS year , S_CITY , P_BRAND , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND ( year ( LO_ORDERDATE ) = 1997 OR year ( LO_ORDERDATE ) = 1998 ) AND P_CATEGORY = 'MFGR#14' GROUP BY year ( LO_ORDERDATE ), S_CITY , P_BRAND ORDER BY year , S_CITY , P_BRAND ; Multiple tables queries --Q1.1 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where year ( d_datekey ) = 1993 and lo_discount between 1 and 3 and lo_quantity < 25 ; --Q1.2 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where d_yearmonthnum = 199401 and lo_discount between 4 and 6 and lo_quantity between 26 and 35 ; --Q1.3 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where d_weeknuminyear = 6 and year ( d_datekey ) = 1994 and lo_discount between 5 and 7 and lo_quantity between 26 and 35 ; --Q2.1 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_category = 'MFGR#12' and s_region = 'AMERICA' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q2.2 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_brand between 'MFGR#2221' and 'MFGR#2228' and s_region = 'ASIA' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q2.3 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_brand = 'MFGR#2239' and s_region = 'EUROPE' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q3.1 select c_nation , s_nation , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where c_region = 'ASIA' and s_region = 'ASIA' and year ( d_datekey ) between 1992 and 1997 group by c_nation , s_nation , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.2 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where c_nation = 'UNITED STATES' and s_nation = 'UNITED STATES' and year ( d_datekey ) between 1992 and 1997 group by c_city , s_city , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.3 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where ( c_city = 'UNITED KI1' or c_city = 'UNITED KI5' ) and ( s_city = 'UNITED KI1' or s_city = 'UNITED KI5' ) and year ( d_datekey ) between 1992 and 1997 group by c_city , s_city , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.4 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where ( c_city = 'UNITED KI1' or c_city = 'UNITED KI5' ) and ( s_city = 'UNITED KI1' or s_city = 'UNITED KI5' ) and d_yearmonth = '199712' group by c_city , s_city , year ( d_datekey ) order by year ( d_datekey ) asc , lo_revenue desc ; --Q4.1 select year ( d_datekey ) as year , c_nation , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where c_region = 'AMERICA' and s_region = 'AMERICA' and ( p_mfgr = 'MFGR#1' or p_mfgr = 'MFGR#2' ) group by year ( d_datekey ), c_nation order by year , c_nation ; --Q4.2 select year ( d_datekey ) as year , s_nation , p_category , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where c_region = 'AMERICA' and s_region = 'AMERICA' and ( year ( d_datekey ) = 1997 or year ( d_datekey ) = 1998 ) and ( p_mfgr = 'MFGR#1' or p_mfgr = 'MFGR#2' ) group by year ( d_datekey ), s_nation , p_category order by year , s_nation , p_category ; --Q4.3 select year ( d_datekey ) as year , s_city , p_brand , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit , c_region , s_nation , p_category from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where ( year ( d_datekey ) = 1997 or year ( d_datekey ) = 1998 ) and s_nation = 'ALGERIA' group by year ( d_datekey ), s_city , p_brand , c_region , s_nation , p_category order by year , s_city , p_brand ; 6. Expected Results Flat table queries expected results --Q1.1 +--------------+ | revenue | +--------------+ | 702223464659 | +--------------+ --Q1.2 +---------------+ | revenue | +---------------+ | 1842875090496 | +---------------+ --Q1.3 +---------------+ | revenue | +---------------+ | 2208738861324 | +---------------+ --Q2.1 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 283684289 | 1992 | MFGR#121 | | 1344702529 | 1992 | MFGR#1210 | | 757158682 | 1992 | MFGR#1211 | | 1156022815 | 1992 | MFGR#1212 | | 676164367 | 1992 | MFGR#1213 | | 522779256 | 1992 | MFGR#1214 | | 233507213 | 1992 | MFGR#1215 | | 726755819 | 1992 | MFGR#1216 | | 1865504710 | 1992 | MFGR#1217 | | 685600451 | 1992 | MFGR#1218 | | 814671470 | 1992 | MFGR#1219 | | 655405800 | 1992 | MFGR#122 | | 962120553 | 1992 | MFGR#1220 | | 961393626 | 1992 | MFGR#1221 | | 922110830 | 1992 | MFGR#1222 | | 814842712 | 1992 | MFGR#1223 | | 1402773165 | 1992 | MFGR#1224 | | 977517439 | 1992 | MFGR#1225 | | 1392114944 | 1992 | MFGR#1226 | | 658922951 | 1992 | MFGR#1227 | | 892495927 | 1992 | MFGR#1228 | | 806609100 | 1992 | MFGR#1229 | | 578875657 | 1992 | MFGR#123 | | 691236902 | 1992 | MFGR#1230 | | 482715249 | 1992 | MFGR#1231 | | 618556590 | 1992 | MFGR#1232 | | 981657009 | 1992 | MFGR#1233 | | 1050794669 | 1992 | MFGR#1234 | | 1335217991 | 1992 | MFGR#1235 | | 686009527 | 1992 | MFGR#1236 | | 605242584 | 1992 | MFGR#1237 | | 430455641 | 1992 | MFGR#1238 | | 359654993 | 1992 | MFGR#1239 | | 818818457 | 1992 | MFGR#124 | | 1388502581 | 1992 | MFGR#1240 | | 711566198 | 1992 | MFGR#125 | | 893045647 | 1992 | MFGR#126 | | 1240534333 | 1992 | MFGR#127 | | 871966127 | 1992 | MFGR#128 | | 719176622 | 1992 | MFGR#129 | | 245880758 | 1993 | MFGR#121 | | 1480662753 | 1993 | MFGR#1210 | | 982292725 | 1993 | MFGR#1211 | | 1001136766 | 1993 | MFGR#1212 | | 227144072 | 1993 | MFGR#1213 | | 291611370 | 1993 | MFGR#1214 | | 454576668 | 1993 | MFGR#1215 | | 772027256 | 1993 | MFGR#1216 | | 1155751851 | 1993 | MFGR#1217 | | 897883050 | 1993 | MFGR#1218 | | 1209508962 | 1993 | MFGR#1219 | | 530577973 | 1993 | MFGR#122 | | 901650471 | 1993 | MFGR#1220 | | 739540494 | 1993 | MFGR#1221 | | 698751459 | 1993 | MFGR#1222 | | 1327979157 | 1993 | MFGR#1223 | | 1476697469 | 1993 | MFGR#1224 | | 792103134 | 1993 | MFGR#1225 | | 1420277376 | 1993 | MFGR#1226 | | 1446032835 | 1993 | MFGR#1227 | | 884375309 | 1993 | MFGR#1228 | | 522705868 | 1993 | MFGR#1229 | | 601685233 | 1993 | MFGR#123 | | 806727248 | 1993 | MFGR#1230 | | 399477390 | 1993 | MFGR#1231 | | 894047578 | 1993 | MFGR#1232 | | 496067089 | 1993 | MFGR#1233 | | 1050223756 | 1993 | MFGR#1234 | | 891681399 | 1993 | MFGR#1235 | | 1402903631 | 1993 | MFGR#1236 | | 347380448 | 1993 | MFGR#1237 | | 514853194 | 1993 | MFGR#1238 | | 410543863 | 1993 | MFGR#1239 | | 673483594 | 1993 | MFGR#124 | | 713343630 | 1993 | MFGR#1240 | | 512610707 | 1993 | MFGR#125 | | 1228110634 | 1993 | MFGR#126 | | 936958961 | 1993 | MFGR#127 | | 579067515 | 1993 | MFGR#128 | | 636174833 | 1993 | MFGR#129 | | 370347074 | 1994 | MFGR#121 | | 483900410 | 1994 | MFGR#1210 | | 1240306281 | 1994 | MFGR#1211 | | 1003345253 | 1994 | MFGR#1212 | | 557310864 | 1994 | MFGR#1213 | | 314972328 | 1994 | MFGR#1214 | | 1130260810 | 1994 | MFGR#1215 | | 401618319 | 1994 | MFGR#1216 | | 652173601 | 1994 | MFGR#1217 | | 923612074 | 1994 | MFGR#1218 | | 469711377 | 1994 | MFGR#1219 | | 580152115 | 1994 | MFGR#122 | | 433134653 | 1994 | MFGR#1220 | | 730569849 | 1994 | MFGR#1221 | | 607609104 | 1994 | MFGR#1222 | | 949877669 | 1994 | MFGR#1223 | | 1644687916 | 1994 | MFGR#1224 | | 492974194 | 1994 | MFGR#1225 | | 921499688 | 1994 | MFGR#1226 | | 719059761 | 1994 | MFGR#1227 | | 1000497056 | 1994 | MFGR#1228 | | 486968927 | 1994 | MFGR#1229 | | 734124906 | 1994 | MFGR#123 | | 645016873 | 1994 | MFGR#1230 | | 526638240 | 1994 | MFGR#1231 | | 1358112405 | 1994 | MFGR#1232 | | 1167074905 | 1994 | MFGR#1233 | | 1102915239 | 1994 | MFGR#1234 | | 693058125 | 1994 | MFGR#1235 | | 1673392892 | 1994 | MFGR#1236 | | 849630029 | 1994 | MFGR#1237 | | 721392705 | 1994 | MFGR#1238 | | 1237195774 | 1994 | MFGR#1239 | | 1107832795 | 1994 | MFGR#124 | | 827906290 | 1994 | MFGR#1240 | | 682827304 | 1994 | MFGR#125 | | 1198768141 | 1994 | MFGR#126 | | 1274148181 | 1994 | MFGR#127 | | 738849138 | 1994 | MFGR#128 | | 751136619 | 1994 | MFGR#129 | | 318978803 | 1995 | MFGR#121 | | 383199448 | 1995 | MFGR#1210 | | 1300165814 | 1995 | MFGR#1211 | | 1550400731 | 1995 | MFGR#1212 | | 451958158 | 1995 | MFGR#1213 | | 431434279 | 1995 | MFGR#1214 | | 713735582 | 1995 | MFGR#1215 | | 919323722 | 1995 | MFGR#1216 | | 1542358864 | 1995 | MFGR#1217 | | 500930092 | 1995 | MFGR#1218 | | 1208162086 | 1995 | MFGR#1219 | | 785707989 | 1995 | MFGR#122 | | 993828211 | 1995 | MFGR#1220 | | 667253893 | 1995 | MFGR#1221 | | 1654114297 | 1995 | MFGR#1222 | | 986528377 | 1995 | MFGR#1223 | | 755014642 | 1995 | MFGR#1224 | | 1090300100 | 1995 | MFGR#1225 | | 1063626454 | 1995 | MFGR#1226 | | 1382528859 | 1995 | MFGR#1227 | | 919953351 | 1995 | MFGR#1228 | | 457795295 | 1995 | MFGR#1229 | | 953851827 | 1995 | MFGR#123 | | 807209283 | 1995 | MFGR#1230 | | 236304454 | 1995 | MFGR#1231 | | 668449537 | 1995 | MFGR#1232 | | 240657083 | 1995 | MFGR#1233 | | 920389826 | 1995 | MFGR#1234 | | 684096065 | 1995 | MFGR#1235 | | 1005844219 | 1995 | MFGR#1236 | | 626170996 | 1995 | MFGR#1237 | | 984581826 | 1995 | MFGR#1238 | | 602850634 | 1995 | MFGR#1239 | | 1172025628 | 1995 | MFGR#124 | | 489788581 | 1995 | MFGR#1240 | | 643100327 | 1995 | MFGR#125 | | 894596661 | 1995 | MFGR#126 | | 706917239 | 1995 | MFGR#127 | | 428671983 | 1995 | MFGR#128 | | 971611472 | 1995 | MFGR#129 | | 306497573 | 1996 | MFGR#121 | | 890719726 | 1996 | MFGR#1210 | | 1761977172 | 1996 | MFGR#1211 | | 633845765 | 1996 | MFGR#1212 | | 475801202 | 1996 | MFGR#1213 | | 271930385 | 1996 | MFGR#1214 | | 366399844 | 1996 | MFGR#1215 | | 877472476 | 1996 | MFGR#1216 | | 970366290 | 1996 | MFGR#1217 | | 537175690 | 1996 | MFGR#1218 | | 956970528 | 1996 | MFGR#1219 | | 711962074 | 1996 | MFGR#122 | | 1062161683 | 1996 | MFGR#1220 | | 406293744 | 1996 | MFGR#1221 | | 785404335 | 1996 | MFGR#1222 | | 579267044 | 1996 | MFGR#1223 | | 1220640256 | 1996 | MFGR#1224 | | 490130196 | 1996 | MFGR#1225 | | 1603805636 | 1996 | MFGR#1226 | | 1530646510 | 1996 | MFGR#1227 | | 1093328922 | 1996 | MFGR#1228 | | 596520140 | 1996 | MFGR#1229 | | 450815571 | 1996 | MFGR#123 | | 315053350 | 1996 | MFGR#1230 | | 198951017 | 1996 | MFGR#1231 | | 579778438 | 1996 | MFGR#1232 | | 480905486 | 1996 | MFGR#1233 | | 1433336215 | 1996 | MFGR#1234 | | 560925251 | 1996 | MFGR#1235 | | 1038766181 | 1996 | MFGR#1236 | | 783697960 | 1996 | MFGR#1237 | | 972656445 | 1996 | MFGR#1238 | | 614528801 | 1996 | MFGR#1239 | | 1418931894 | 1996 | MFGR#124 | | 995139591 | 1996 | MFGR#1240 | | 824028471 | 1996 | MFGR#125 | | 669475113 | 1996 | MFGR#126 | | 831704651 | 1996 | MFGR#127 | | 920514555 | 1996 | MFGR#128 | | 436162421 | 1996 | MFGR#129 | | 553684594 | 1997 | MFGR#121 | | 1317368046 | 1997 | MFGR#1210 | | 1617056983 | 1997 | MFGR#1211 | | 1196031005 | 1997 | MFGR#1212 | | 1056458336 | 1997 | MFGR#1213 | | 352179650 | 1997 | MFGR#1214 | | 511058114 | 1997 | MFGR#1215 | | 658259312 | 1997 | MFGR#1216 | | 1238450697 | 1997 | MFGR#1217 | | 376245955 | 1997 | MFGR#1218 | | 913437812 | 1997 | MFGR#1219 | | 1114996000 | 1997 | MFGR#122 | | 814059433 | 1997 | MFGR#1220 | | 817328516 | 1997 | MFGR#1221 | | 541428597 | 1997 | MFGR#1222 | | 1260539052 | 1997 | MFGR#1223 | | 1766426582 | 1997 | MFGR#1224 | | 1221271245 | 1997 | MFGR#1225 | | 1499152922 | 1997 | MFGR#1226 | | 491586909 | 1997 | MFGR#1227 | | 911517084 | 1997 | MFGR#1228 | | 728186585 | 1997 | MFGR#1229 | | 904363416 | 1997 | MFGR#123 | | 605369014 | 1997 | MFGR#1230 | | 290370455 | 1997 | MFGR#1231 | | 602414397 | 1997 | MFGR#1232 | | 765339065 | 1997 | MFGR#1233 | | 1170973957 | 1997 | MFGR#1234 | | 860319765 | 1997 | MFGR#1235 | | 1031080311 | 1997 | MFGR#1236 | | 736404810 | 1997 | MFGR#1237 | | 1012330790 | 1997 | MFGR#1238 | | 681055343 | 1997 | MFGR#1239 | | 601626600 | 1997 | MFGR#124 | | 920404157 | 1997 | MFGR#1240 | | 1007678757 | 1997 | MFGR#125 | | 622347203 | 1997 | MFGR#126 | | 1215295592 | 1997 | MFGR#127 | | 822274972 | 1997 | MFGR#128 | | 643903475 | 1997 | MFGR#129 | | 470008435 | 1998 | MFGR#121 | | 568508492 | 1998 | MFGR#1210 | | 323759101 | 1998 | MFGR#1211 | | 572013331 | 1998 | MFGR#1212 | | 448137748 | 1998 | MFGR#1213 | | 137422458 | 1998 | MFGR#1214 | | 346491756 | 1998 | MFGR#1215 | | 454542243 | 1998 | MFGR#1216 | | 759205210 | 1998 | MFGR#1217 | | 674544462 | 1998 | MFGR#1218 | | 735952270 | 1998 | MFGR#1219 | | 490186568 | 1998 | MFGR#122 | | 769456686 | 1998 | MFGR#1220 | | 654540341 | 1998 | MFGR#1221 | | 800329859 | 1998 | MFGR#1222 | | 263849231 | 1998 | MFGR#1223 | | 445461642 | 1998 | MFGR#1224 | | 387808862 | 1998 | MFGR#1225 | | 675424382 | 1998 | MFGR#1226 | | 265906673 | 1998 | MFGR#1227 | | 585938371 | 1998 | MFGR#1228 | | 683188537 | 1998 | MFGR#1229 | | 304403717 | 1998 | MFGR#123 | | 533781674 | 1998 | MFGR#1230 | | 304060011 | 1998 | MFGR#1231 | | 635275907 | 1998 | MFGR#1232 | | 658295080 | 1998 | MFGR#1233 | | 524133341 | 1998 | MFGR#1234 | | 363911877 | 1998 | MFGR#1235 | | 300885635 | 1998 | MFGR#1236 | | 532608453 | 1998 | MFGR#1237 | | 484291410 | 1998 | MFGR#1238 | | 445336624 | 1998 | MFGR#1239 | | 719027801 | 1998 | MFGR#124 | | 518860961 | 1998 | MFGR#1240 | | 491235383 | 1998 | MFGR#125 | | 520917638 | 1998 | MFGR#126 | | 1158787745 | 1998 | MFGR#127 | | 401190922 | 1998 | MFGR#128 | | 406656337 | 1998 | MFGR#129 | +-----------------+------+-----------+ --Q2.2 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 1259802358 | 1992 | MFGR#2221 | | 1728549344 | 1992 | MFGR#2222 | | 1375260024 | 1992 | MFGR#2223 | | 1299982475 | 1992 | MFGR#2224 | | 1541960331 | 1992 | MFGR#2225 | | 1151853513 | 1992 | MFGR#2226 | | 1271175264 | 1992 | MFGR#2227 | | 1726441695 | 1992 | MFGR#2228 | | 1251460032 | 1993 | MFGR#2221 | | 1331062515 | 1993 | MFGR#2222 | | 902809293 | 1993 | MFGR#2223 | | 980512417 | 1993 | MFGR#2224 | | 1253088003 | 1993 | MFGR#2225 | | 959195148 | 1993 | MFGR#2226 | | 555593932 | 1993 | MFGR#2227 | | 2186479174 | 1993 | MFGR#2228 | | 1094092222 | 1994 | MFGR#2221 | | 1491699323 | 1994 | MFGR#2222 | | 1501160826 | 1994 | MFGR#2223 | | 1387107418 | 1994 | MFGR#2224 | | 1641588884 | 1994 | MFGR#2225 | | 1387296390 | 1994 | MFGR#2226 | | 1038341470 | 1994 | MFGR#2227 | | 1565763138 | 1994 | MFGR#2228 | | 1412945650 | 1995 | MFGR#2221 | | 1546178356 | 1995 | MFGR#2222 | | 1218352073 | 1995 | MFGR#2223 | | 1052197762 | 1995 | MFGR#2224 | | 1822921900 | 1995 | MFGR#2225 | | 728142181 | 1995 | MFGR#2226 | | 966131607 | 1995 | MFGR#2227 | | 1379320517 | 1995 | MFGR#2228 | | 1042767284 | 1996 | MFGR#2221 | | 994733835 | 1996 | MFGR#2222 | | 1615788545 | 1996 | MFGR#2223 | | 1113980216 | 1996 | MFGR#2224 | | 1622570253 | 1996 | MFGR#2225 | | 1540226758 | 1996 | MFGR#2226 | | 1115687883 | 1996 | MFGR#2227 | | 1716355343 | 1996 | MFGR#2228 | | 867705636 | 1997 | MFGR#2221 | | 1529877498 | 1997 | MFGR#2222 | | 1594444450 | 1997 | MFGR#2223 | | 587421043 | 1997 | MFGR#2224 | | 1112274470 | 1997 | MFGR#2225 | | 1327884722 | 1997 | MFGR#2226 | | 884180880 | 1997 | MFGR#2227 | | 1664207656 | 1997 | MFGR#2228 | | 827743515 | 1998 | MFGR#2221 | | 662242310 | 1998 | MFGR#2222 | | 861445539 | 1998 | MFGR#2223 | | 694538672 | 1998 | MFGR#2224 | | 675179021 | 1998 | MFGR#2225 | | 480728720 | 1998 | MFGR#2226 | | 643763072 | 1998 | MFGR#2227 | | 994499201 | 1998 | MFGR#2228 | +-----------------+------+-----------+ --Q2.3 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 1428843284 | 1992 | MFGR#2239 | | 1865666054 | 1993 | MFGR#2239 | | 2242753254 | 1994 | MFGR#2239 | | 1446677305 | 1995 | MFGR#2239 | | 921681503 | 1996 | MFGR#2239 | | 1549990572 | 1997 | MFGR#2239 | | 926327433 | 1998 | MFGR#2239 | +-----------------+------+-----------+ --Q3.1 +-----------+-----------+------+-------------+ | c_nation | s_nation | year | revenue | +-----------+-----------+------+-------------+ | VIETNAM | CHINA | 1992 | 17194479086 | | JAPAN | CHINA | 1992 | 15572594510 | | JAPAN | JAPAN | 1992 | 13861682954 | | INDONESIA | CHINA | 1992 | 13499663933 | | VIETNAM | INDONESIA | 1992 | 13163103649 | | JAPAN | INDONESIA | 1992 | 13035158590 | | INDIA | CHINA | 1992 | 12987688902 | | INDONESIA | JAPAN | 1992 | 12939737918 | | VIETNAM | JAPAN | 1992 | 12174715858 | | JAPAN | VIETNAM | 1992 | 11669093753 | | INDIA | INDONESIA | 1992 | 11452602145 | | INDONESIA | INDONESIA | 1992 | 10394407561 | | INDIA | JAPAN | 1992 | 10313084900 | | JAPAN | INDIA | 1992 | 10035511089 | | CHINA | CHINA | 1992 | 9828744666 | | VIETNAM | VIETNAM | 1992 | 9701522505 | | INDONESIA | INDIA | 1992 | 9271105764 | | INDIA | INDIA | 1992 | 8879645522 | | CHINA | INDONESIA | 1992 | 8373693838 | | CHINA | JAPAN | 1992 | 8051248951 | | VIETNAM | INDIA | 1992 | 7804539029 | | INDONESIA | VIETNAM | 1992 | 7615465790 | | CHINA | INDIA | 1992 | 7344868842 | | INDIA | VIETNAM | 1992 | 6830508508 | | CHINA | VIETNAM | 1992 | 6529888238 | | JAPAN | CHINA | 1993 | 18839180326 | | VIETNAM | CHINA | 1993 | 14761890330 | | JAPAN | INDONESIA | 1993 | 13648082171 | | INDONESIA | CHINA | 1993 | 13518181805 | | INDIA | CHINA | 1993 | 13249555999 | | JAPAN | JAPAN | 1993 | 12667833152 | | JAPAN | VIETNAM | 1993 | 11529854580 | | CHINA | CHINA | 1993 | 11216468573 | | INDONESIA | INDONESIA | 1993 | 10953284722 | | VIETNAM | INDONESIA | 1993 | 10582912267 | | INDIA | JAPAN | 1993 | 10482950584 | | VIETNAM | JAPAN | 1993 | 10370811002 | | INDIA | INDONESIA | 1993 | 10145286112 | | INDONESIA | JAPAN | 1993 | 9850020303 | | VIETNAM | VIETNAM | 1993 | 9591468153 | | CHINA | INDONESIA | 1993 | 9015864524 | | CHINA | JAPAN | 1993 | 8972996729 | | INDONESIA | INDIA | 1993 | 8903638786 | | JAPAN | INDIA | 1993 | 8848048514 | | INDONESIA | VIETNAM | 1993 | 8024464882 | | VIETNAM | INDIA | 1993 | 7806575746 | | INDIA | VIETNAM | 1993 | 7537331106 | | INDIA | INDIA | 1993 | 7211053846 | | CHINA | VIETNAM | 1993 | 6700022269 | | CHINA | INDIA | 1993 | 6327331541 | | JAPAN | CHINA | 1994 | 15661051644 | | VIETNAM | CHINA | 1994 | 13958591931 | | JAPAN | JAPAN | 1994 | 13566252348 | | CHINA | CHINA | 1994 | 12870010072 | | VIETNAM | JAPAN | 1994 | 12728320716 | | INDONESIA | CHINA | 1994 | 12295790872 | | INDIA | CHINA | 1994 | 12166419121 | | JAPAN | INDONESIA | 1994 | 11358955025 | | INDIA | INDONESIA | 1994 | 11111248365 | | JAPAN | INDIA | 1994 | 10078806371 | | VIETNAM | INDONESIA | 1994 | 9923852578 | | INDIA | JAPAN | 1994 | 9839136767 | | CHINA | JAPAN | 1994 | 9836586308 | | INDONESIA | JAPAN | 1994 | 9786694572 | | INDIA | VIETNAM | 1994 | 9551081406 | | JAPAN | VIETNAM | 1994 | 9035431932 | | VIETNAM | INDIA | 1994 | 9032319402 | | INDONESIA | INDONESIA | 1994 | 8876012426 | | CHINA | INDONESIA | 1994 | 8375581981 | | VIETNAM | VIETNAM | 1994 | 8095638136 | | INDONESIA | INDIA | 1994 | 7943993512 | | INDONESIA | VIETNAM | 1994 | 7927236697 | | INDIA | INDIA | 1994 | 7534915457 | | CHINA | VIETNAM | 1994 | 6062387221 | | CHINA | INDIA | 1994 | 5816794324 | | VIETNAM | CHINA | 1995 | 15128423080 | | INDONESIA | CHINA | 1995 | 14794647970 | | INDIA | CHINA | 1995 | 14724240804 | | JAPAN | CHINA | 1995 | 14579848516 | | CHINA | CHINA | 1995 | 14296657586 | | INDIA | JAPAN | 1995 | 13511381754 | | JAPAN | JAPAN | 1995 | 12015968288 | | VIETNAM | INDONESIA | 1995 | 11290647784 | | JAPAN | INDONESIA | 1995 | 10968840402 | | INDIA | INDONESIA | 1995 | 10879296370 | | CHINA | INDONESIA | 1995 | 10611767914 | | VIETNAM | JAPAN | 1995 | 10493043807 | | INDONESIA | INDONESIA | 1995 | 10350165199 | | VIETNAM | INDIA | 1995 | 10147175135 | | CHINA | JAPAN | 1995 | 9967113498 | | JAPAN | VIETNAM | 1995 | 9871240910 | | INDONESIA | JAPAN | 1995 | 9554798320 | | JAPAN | INDIA | 1995 | 9224478715 | | INDIA | INDIA | 1995 | 8880501531 | | VIETNAM | VIETNAM | 1995 | 8530802028 | | INDIA | VIETNAM | 1995 | 8470249830 | | CHINA | INDIA | 1995 | 8460557790 | | INDONESIA | VIETNAM | 1995 | 8393411088 | | CHINA | VIETNAM | 1995 | 7838238263 | | INDONESIA | INDIA | 1995 | 7001659338 | | JAPAN | CHINA | 1996 | 14974943391 | | INDIA | CHINA | 1996 | 14236197987 | | VIETNAM | CHINA | 1996 | 13723231674 | | JAPAN | INDONESIA | 1996 | 13304501801 | | INDONESIA | CHINA | 1996 | 12444022202 | | CHINA | CHINA | 1996 | 12120893189 | | INDIA | JAPAN | 1996 | 11649117519 | | INDONESIA | JAPAN | 1996 | 11345350775 | | VIETNAM | JAPAN | 1996 | 11294284203 | | INDONESIA | INDONESIA | 1996 | 11111201530 | | JAPAN | INDIA | 1996 | 10871364136 | | JAPAN | JAPAN | 1996 | 10836947449 | | INDIA | INDONESIA | 1996 | 10568008435 | | JAPAN | VIETNAM | 1996 | 10503890555 | | VIETNAM | INDONESIA | 1996 | 10494783196 | | INDONESIA | VIETNAM | 1996 | 9940440124 | | INDONESIA | INDIA | 1996 | 9864980677 | | VIETNAM | VIETNAM | 1996 | 9560258720 | | INDIA | VIETNAM | 1996 | 9324764214 | | INDIA | INDIA | 1996 | 9023346020 | | VIETNAM | INDIA | 1996 | 8968179949 | | CHINA | INDONESIA | 1996 | 8877441837 | | CHINA | JAPAN | 1996 | 8749420872 | | CHINA | VIETNAM | 1996 | 6973983457 | | CHINA | INDIA | 1996 | 6515658476 | | JAPAN | CHINA | 1997 | 15365039212 | | INDONESIA | CHINA | 1997 | 14159930904 | | VIETNAM | CHINA | 1997 | 13678288757 | | INDIA | CHINA | 1997 | 13599028484 | | JAPAN | JAPAN | 1997 | 12921870544 | | CHINA | CHINA | 1997 | 12720975220 | | VIETNAM | JAPAN | 1997 | 11929000810 | | VIETNAM | INDONESIA | 1997 | 11325447090 | | JAPAN | INDONESIA | 1997 | 10764312416 | | INDONESIA | JAPAN | 1997 | 10555558162 | | INDONESIA | INDONESIA | 1997 | 10416928126 | | CHINA | INDONESIA | 1997 | 10317902565 | | INDIA | JAPAN | 1997 | 10272590051 | | JAPAN | VIETNAM | 1997 | 9940032294 | | CHINA | JAPAN | 1997 | 9519485461 | | JAPAN | INDIA | 1997 | 9465935835 | | INDIA | INDONESIA | 1997 | 9405085270 | | INDONESIA | INDIA | 1997 | 8930955270 | | INDIA | INDIA | 1997 | 8295504178 | | VIETNAM | VIETNAM | 1997 | 8293412532 | | INDONESIA | VIETNAM | 1997 | 8116443059 | | INDIA | VIETNAM | 1997 | 7960292262 | | VIETNAM | INDIA | 1997 | 7529455873 | | CHINA | VIETNAM | 1997 | 7038413355 | | CHINA | INDIA | 1997 | 6530770558 | +-----------+-----------+------+-------------+ --Q3.2 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | CHINA 3 | CHINA 0 | 1992 | 539864249 | | CHINA 0 | CHINA 6 | 1992 | 471363128 | | CHINA 8 | CHINA 1 | 1992 | 421384110 | | CHINA 6 | CHINA 1 | 1992 | 382204882 | | CHINA 6 | CHINA 7 | 1992 | 355755835 | | CHINA 8 | CHINA 9 | 1992 | 349006417 | | CHINA 7 | CHINA 7 | 1992 | 320232842 | | CHINA 8 | CHINA 3 | 1992 | 296105733 | | CHINA 5 | CHINA 3 | 1992 | 277283951 | | CHINA 6 | CHINA 6 | 1992 | 265527771 | | CHINA 4 | CHINA 1 | 1992 | 237402078 | | CHINA 8 | CHINA 6 | 1992 | 234720401 | | CHINA 4 | CHINA 6 | 1992 | 230169075 | | CHINA 9 | CHINA 1 | 1992 | 223815249 | | CHINA 1 | CHINA 1 | 1992 | 223467947 | | CHINA 2 | CHINA 1 | 1992 | 219559691 | | CHINA 9 | CHINA 6 | 1992 | 205915890 | | CHINA 7 | CHINA 9 | 1992 | 201288909 | | CHINA 1 | CHINA 6 | 1992 | 195622902 | | CHINA 9 | CHINA 7 | 1992 | 190345063 | | CHINA 8 | CHINA 4 | 1992 | 174478626 | | CHINA 1 | CHINA 7 | 1992 | 173803257 | | CHINA 9 | CHINA 9 | 1992 | 162458028 | | CHINA 6 | CHINA 0 | 1992 | 154260702 | | CHINA 8 | CHINA 0 | 1992 | 149794069 | | CHINA 5 | CHINA 9 | 1992 | 149369922 | | CHINA 8 | CHINA 8 | 1992 | 147607252 | | CHINA 6 | CHINA 4 | 1992 | 147137516 | | CHINA 7 | CHINA 8 | 1992 | 139974858 | | CHINA 5 | CHINA 6 | 1992 | 138467127 | | CHINA 3 | CHINA 6 | 1992 | 119521008 | | CHINA 8 | CHINA 7 | 1992 | 109887269 | | CHINA 6 | CHINA 3 | 1992 | 107201214 | | CHINA 9 | CHINA 4 | 1992 | 101504450 | | CHINA 1 | CHINA 3 | 1992 | 101388208 | | CHINA 7 | CHINA 0 | 1992 | 98475237 | | CHINA 5 | CHINA 8 | 1992 | 98370738 | | CHINA 2 | CHINA 6 | 1992 | 93254616 | | CHINA 2 | CHINA 4 | 1992 | 86394644 | | CHINA 3 | CHINA 7 | 1992 | 81027008 | | CHINA 5 | CHINA 4 | 1992 | 78587418 | | CHINA 3 | CHINA 9 | 1992 | 78114762 | | CHINA 2 | CHINA 0 | 1992 | 77786892 | | CHINA 2 | CHINA 8 | 1992 | 75605732 | | CHINA 4 | CHINA 3 | 1992 | 75101512 | | CHINA 7 | CHINA 4 | 1992 | 74119240 | | CHINA 2 | CHINA 9 | 1992 | 73413108 | | CHINA 5 | CHINA 7 | 1992 | 73199718 | | CHINA 4 | CHINA 4 | 1992 | 72839118 | | CHINA 1 | CHINA 9 | 1992 | 68538220 | | CHINA 0 | CHINA 8 | 1992 | 65856888 | | CHINA 0 | CHINA 9 | 1992 | 65590624 | | CHINA 3 | CHINA 8 | 1992 | 64556586 | | CHINA 2 | CHINA 7 | 1992 | 63336330 | | CHINA 4 | CHINA 9 | 1992 | 57645963 | | CHINA 0 | CHINA 7 | 1992 | 55251918 | | CHINA 0 | CHINA 1 | 1992 | 51774462 | | CHINA 6 | CHINA 8 | 1992 | 45676858 | | CHINA 3 | CHINA 3 | 1992 | 41147560 | | CHINA 3 | CHINA 4 | 1992 | 36838082 | | CHINA 5 | CHINA 0 | 1992 | 36554488 | | CHINA 3 | CHINA 1 | 1992 | 32036313 | | CHINA 4 | CHINA 8 | 1992 | 31517575 | | CHINA 0 | CHINA 3 | 1992 | 25524054 | | CHINA 1 | CHINA 4 | 1992 | 12681846 | | CHINA 7 | CHINA 3 | 1992 | 11395152 | | CHINA 6 | CHINA 9 | 1992 | 8642375 | | CHINA 8 | CHINA 6 | 1993 | 638396852 | | CHINA 7 | CHINA 6 | 1993 | 576731239 | | CHINA 2 | CHINA 6 | 1993 | 528008729 | | CHINA 8 | CHINA 9 | 1993 | 522412584 | | CHINA 8 | CHINA 7 | 1993 | 475478848 | | CHINA 8 | CHINA 1 | 1993 | 452064153 | | CHINA 0 | CHINA 1 | 1993 | 425902649 | | CHINA 9 | CHINA 1 | 1993 | 405252987 | | CHINA 6 | CHINA 9 | 1993 | 385005953 | | CHINA 8 | CHINA 8 | 1993 | 382884778 | | CHINA 0 | CHINA 6 | 1993 | 344911487 | | CHINA 6 | CHINA 7 | 1993 | 341436211 | | CHINA 3 | CHINA 6 | 1993 | 291652051 | | CHINA 7 | CHINA 1 | 1993 | 257769861 | | CHINA 8 | CHINA 0 | 1993 | 231981252 | | CHINA 4 | CHINA 6 | 1993 | 215180968 | | CHINA 3 | CHINA 0 | 1993 | 213320777 | | CHINA 9 | CHINA 6 | 1993 | 207281000 | | CHINA 5 | CHINA 9 | 1993 | 206555882 | | CHINA 6 | CHINA 1 | 1993 | 205665388 | | CHINA 5 | CHINA 1 | 1993 | 193491875 | | CHINA 2 | CHINA 9 | 1993 | 193324425 | | CHINA 5 | CHINA 8 | 1993 | 190521023 | | CHINA 7 | CHINA 0 | 1993 | 183487919 | | CHINA 0 | CHINA 9 | 1993 | 170223958 | | CHINA 6 | CHINA 8 | 1993 | 166821272 | | CHINA 3 | CHINA 8 | 1993 | 163053528 | | CHINA 2 | CHINA 0 | 1993 | 158276154 | | CHINA 3 | CHINA 1 | 1993 | 153652018 | | CHINA 5 | CHINA 6 | 1993 | 151359347 | | CHINA 6 | CHINA 0 | 1993 | 140494698 | | CHINA 8 | CHINA 4 | 1993 | 139857147 | | CHINA 2 | CHINA 7 | 1993 | 136009418 | | CHINA 5 | CHINA 7 | 1993 | 133892119 | | CHINA 9 | CHINA 9 | 1993 | 118965507 | | CHINA 1 | CHINA 1 | 1993 | 108898379 | | CHINA 6 | CHINA 6 | 1993 | 100311475 | | CHINA 0 | CHINA 4 | 1993 | 93483068 | | CHINA 1 | CHINA 4 | 1993 | 87714152 | | CHINA 4 | CHINA 1 | 1993 | 87690658 | | CHINA 4 | CHINA 7 | 1993 | 83701574 | | CHINA 1 | CHINA 0 | 1993 | 82670983 | | CHINA 7 | CHINA 4 | 1993 | 77396461 | | CHINA 5 | CHINA 4 | 1993 | 73556161 | | CHINA 4 | CHINA 8 | 1993 | 72203335 | | CHINA 0 | CHINA 7 | 1993 | 70395334 | | CHINA 3 | CHINA 4 | 1993 | 64771003 | | CHINA 7 | CHINA 8 | 1993 | 64514099 | | CHINA 3 | CHINA 7 | 1993 | 62868516 | | CHINA 8 | CHINA 3 | 1993 | 56504804 | | CHINA 2 | CHINA 4 | 1993 | 56031779 | | CHINA 1 | CHINA 7 | 1993 | 48951262 | | CHINA 7 | CHINA 3 | 1993 | 45962220 | | CHINA 4 | CHINA 9 | 1993 | 43158138 | | CHINA 7 | CHINA 9 | 1993 | 42611979 | | CHINA 2 | CHINA 8 | 1993 | 38092546 | | CHINA 1 | CHINA 9 | 1993 | 29665374 | | CHINA 1 | CHINA 3 | 1993 | 23991216 | | CHINA 6 | CHINA 6 | 1994 | 596294890 | | CHINA 8 | CHINA 6 | 1994 | 542104721 | | CHINA 6 | CHINA 1 | 1994 | 504359553 | | CHINA 3 | CHINA 7 | 1994 | 476727294 | | CHINA 3 | CHINA 6 | 1994 | 476349724 | | CHINA 8 | CHINA 9 | 1994 | 427241348 | | CHINA 6 | CHINA 9 | 1994 | 358191581 | | CHINA 9 | CHINA 6 | 1994 | 352344057 | | CHINA 3 | CHINA 0 | 1994 | 351708546 | | CHINA 8 | CHINA 0 | 1994 | 351131413 | | CHINA 3 | CHINA 3 | 1994 | 339279574 | | CHINA 0 | CHINA 1 | 1994 | 298307857 | | CHINA 0 | CHINA 7 | 1994 | 289536010 | | CHINA 0 | CHINA 6 | 1994 | 285639032 | | CHINA 7 | CHINA 6 | 1994 | 263170455 | | CHINA 2 | CHINA 8 | 1994 | 250332990 | | CHINA 6 | CHINA 4 | 1994 | 235897763 | | CHINA 5 | CHINA 1 | 1994 | 234681515 | | CHINA 8 | CHINA 7 | 1994 | 234390101 | | CHINA 1 | CHINA 6 | 1994 | 232792764 | | CHINA 8 | CHINA 1 | 1994 | 223808842 | | CHINA 4 | CHINA 6 | 1994 | 209522926 | | CHINA 8 | CHINA 4 | 1994 | 208632636 | | CHINA 7 | CHINA 3 | 1994 | 202424117 | | CHINA 4 | CHINA 7 | 1994 | 185487544 | | CHINA 2 | CHINA 7 | 1994 | 183551771 | | CHINA 7 | CHINA 1 | 1994 | 178421732 | | CHINA 4 | CHINA 1 | 1994 | 176262868 | | CHINA 5 | CHINA 6 | 1994 | 173651872 | | CHINA 0 | CHINA 4 | 1994 | 173584501 | | CHINA 8 | CHINA 8 | 1994 | 172179808 | | CHINA 9 | CHINA 1 | 1994 | 169617585 | | CHINA 0 | CHINA 9 | 1994 | 167569085 | | CHINA 5 | CHINA 8 | 1994 | 162066559 | | CHINA 7 | CHINA 9 | 1994 | 161041255 | | CHINA 5 | CHINA 4 | 1994 | 154820955 | | CHINA 7 | CHINA 0 | 1994 | 152844960 | | CHINA 2 | CHINA 6 | 1994 | 149839190 | | CHINA 7 | CHINA 8 | 1994 | 149536114 | | CHINA 1 | CHINA 4 | 1994 | 142403628 | | CHINA 9 | CHINA 9 | 1994 | 131064832 | | CHINA 2 | CHINA 1 | 1994 | 124489283 | | CHINA 2 | CHINA 0 | 1994 | 114263273 | | CHINA 5 | CHINA 7 | 1994 | 113311766 | | CHINA 8 | CHINA 3 | 1994 | 112573609 | | CHINA 3 | CHINA 4 | 1994 | 104903651 | | CHINA 4 | CHINA 0 | 1994 | 101914439 | | CHINA 3 | CHINA 1 | 1994 | 98253251 | | CHINA 1 | CHINA 7 | 1994 | 94582288 | | CHINA 4 | CHINA 4 | 1994 | 92818317 | | CHINA 1 | CHINA 9 | 1994 | 85220541 | | CHINA 6 | CHINA 3 | 1994 | 84604801 | | CHINA 0 | CHINA 3 | 1994 | 77574978 | | CHINA 1 | CHINA 3 | 1994 | 74435316 | | CHINA 4 | CHINA 9 | 1994 | 72622300 | | CHINA 3 | CHINA 8 | 1994 | 72559366 | | CHINA 9 | CHINA 0 | 1994 | 69298222 | | CHINA 3 | CHINA 9 | 1994 | 67472592 | | CHINA 6 | CHINA 8 | 1994 | 66271372 | | CHINA 7 | CHINA 4 | 1994 | 59634606 | | CHINA 2 | CHINA 9 | 1994 | 56882136 | | CHINA 1 | CHINA 1 | 1994 | 56592337 | | CHINA 5 | CHINA 9 | 1994 | 52879724 | | CHINA 9 | CHINA 4 | 1994 | 49324497 | | CHINA 2 | CHINA 3 | 1994 | 45042384 | | CHINA 7 | CHINA 7 | 1994 | 44458451 | | CHINA 5 | CHINA 0 | 1994 | 39091925 | | CHINA 9 | CHINA 3 | 1994 | 39082405 | | CHINA 0 | CHINA 8 | 1994 | 28203459 | | CHINA 6 | CHINA 7 | 1994 | 27243775 | | CHINA 0 | CHINA 0 | 1994 | 15591040 | | CHINA 2 | CHINA 6 | 1995 | 832176707 | | CHINA 8 | CHINA 6 | 1995 | 793322102 | | CHINA 3 | CHINA 7 | 1995 | 505446788 | | CHINA 7 | CHINA 9 | 1995 | 483519933 | | CHINA 4 | CHINA 6 | 1995 | 440320366 | | CHINA 8 | CHINA 1 | 1995 | 394522570 | | CHINA 7 | CHINA 1 | 1995 | 393861389 | | CHINA 5 | CHINA 1 | 1995 | 343166828 | | CHINA 1 | CHINA 7 | 1995 | 341736584 | | CHINA 8 | CHINA 7 | 1995 | 323623203 | | CHINA 6 | CHINA 6 | 1995 | 312876143 | | CHINA 3 | CHINA 6 | 1995 | 306516324 | | CHINA 7 | CHINA 6 | 1995 | 294840537 | | CHINA 3 | CHINA 3 | 1995 | 290066240 | | CHINA 8 | CHINA 3 | 1995 | 289182495 | | CHINA 3 | CHINA 1 | 1995 | 288853766 | | CHINA 0 | CHINA 1 | 1995 | 279082523 | | CHINA 0 | CHINA 8 | 1995 | 265291443 | | CHINA 1 | CHINA 6 | 1995 | 262283412 | | CHINA 4 | CHINA 1 | 1995 | 246559891 | | CHINA 2 | CHINA 8 | 1995 | 246465167 | | CHINA 6 | CHINA 7 | 1995 | 246385862 | | CHINA 9 | CHINA 6 | 1995 | 231314393 | | CHINA 2 | CHINA 7 | 1995 | 224354491 | | CHINA 4 | CHINA 7 | 1995 | 222368398 | | CHINA 0 | CHINA 7 | 1995 | 221334917 | | CHINA 6 | CHINA 3 | 1995 | 217756587 | | CHINA 6 | CHINA 9 | 1995 | 215736018 | | CHINA 4 | CHINA 9 | 1995 | 210496516 | | CHINA 0 | CHINA 6 | 1995 | 197891458 | | CHINA 8 | CHINA 9 | 1995 | 192018213 | | CHINA 7 | CHINA 0 | 1995 | 188804482 | | CHINA 5 | CHINA 6 | 1995 | 186378531 | | CHINA 6 | CHINA 1 | 1995 | 165831073 | | CHINA 1 | CHINA 3 | 1995 | 165118263 | | CHINA 6 | CHINA 8 | 1995 | 157640218 | | CHINA 1 | CHINA 1 | 1995 | 150838433 | | CHINA 1 | CHINA 4 | 1995 | 147632879 | | CHINA 6 | CHINA 0 | 1995 | 147314401 | | CHINA 5 | CHINA 4 | 1995 | 142820978 | | CHINA 5 | CHINA 9 | 1995 | 141416829 | | CHINA 2 | CHINA 0 | 1995 | 135608473 | | CHINA 5 | CHINA 7 | 1995 | 131596218 | | CHINA 0 | CHINA 4 | 1995 | 129159370 | | CHINA 3 | CHINA 9 | 1995 | 126837748 | | CHINA 8 | CHINA 0 | 1995 | 126564932 | | CHINA 0 | CHINA 3 | 1995 | 121337041 | | CHINA 7 | CHINA 7 | 1995 | 118697587 | | CHINA 5 | CHINA 8 | 1995 | 116538842 | | CHINA 8 | CHINA 8 | 1995 | 110161904 | | CHINA 9 | CHINA 0 | 1995 | 109582187 | | CHINA 9 | CHINA 1 | 1995 | 103455098 | | CHINA 2 | CHINA 1 | 1995 | 100264691 | | CHINA 7 | CHINA 3 | 1995 | 99011859 | | CHINA 3 | CHINA 0 | 1995 | 90383390 | | CHINA 4 | CHINA 3 | 1995 | 89908903 | | CHINA 7 | CHINA 8 | 1995 | 81425699 | | CHINA 3 | CHINA 4 | 1995 | 77577579 | | CHINA 4 | CHINA 8 | 1995 | 74805746 | | CHINA 9 | CHINA 7 | 1995 | 74597020 | | CHINA 9 | CHINA 9 | 1995 | 73514511 | | CHINA 5 | CHINA 0 | 1995 | 73274726 | | CHINA 8 | CHINA 4 | 1995 | 61708487 | | CHINA 1 | CHINA 0 | 1995 | 58753734 | | CHINA 3 | CHINA 8 | 1995 | 57133566 | | CHINA 9 | CHINA 4 | 1995 | 53259334 | | CHINA 1 | CHINA 9 | 1995 | 46177797 | | CHINA 2 | CHINA 4 | 1995 | 45147325 | | CHINA 0 | CHINA 0 | 1995 | 43963173 | | CHINA 0 | CHINA 9 | 1995 | 40184107 | | CHINA 1 | CHINA 8 | 1995 | 18859188 | | CHINA 8 | CHINA 7 | 1996 | 621957444 | | CHINA 3 | CHINA 9 | 1996 | 530082848 | | CHINA 8 | CHINA 6 | 1996 | 525755549 | | CHINA 8 | CHINA 1 | 1996 | 399229343 | | CHINA 6 | CHINA 7 | 1996 | 365540749 | | CHINA 8 | CHINA 8 | 1996 | 351864283 | | CHINA 1 | CHINA 6 | 1996 | 329186504 | | CHINA 9 | CHINA 6 | 1996 | 321113085 | | CHINA 3 | CHINA 6 | 1996 | 318264871 | | CHINA 2 | CHINA 6 | 1996 | 315233397 | | CHINA 2 | CHINA 9 | 1996 | 285852841 | | CHINA 9 | CHINA 9 | 1996 | 264510548 | | CHINA 5 | CHINA 6 | 1996 | 261385523 | | CHINA 8 | CHINA 9 | 1996 | 259497265 | | CHINA 6 | CHINA 6 | 1996 | 258200131 | | CHINA 4 | CHINA 9 | 1996 | 257345949 | | CHINA 6 | CHINA 9 | 1996 | 247667288 | | CHINA 2 | CHINA 7 | 1996 | 234569026 | | CHINA 2 | CHINA 1 | 1996 | 218568966 | | CHINA 4 | CHINA 1 | 1996 | 207383476 | | CHINA 0 | CHINA 1 | 1996 | 204596428 | | CHINA 3 | CHINA 0 | 1996 | 204375870 | | CHINA 4 | CHINA 0 | 1996 | 202299286 | | CHINA 4 | CHINA 4 | 1996 | 191983261 | | CHINA 4 | CHINA 8 | 1996 | 183961012 | | CHINA 4 | CHINA 6 | 1996 | 183872085 | | CHINA 6 | CHINA 8 | 1996 | 182132356 | | CHINA 7 | CHINA 9 | 1996 | 170941341 | | CHINA 0 | CHINA 6 | 1996 | 168082672 | | CHINA 1 | CHINA 7 | 1996 | 165942066 | | CHINA 1 | CHINA 9 | 1996 | 165878775 | | CHINA 9 | CHINA 8 | 1996 | 156009357 | | CHINA 7 | CHINA 7 | 1996 | 155842944 | | CHINA 2 | CHINA 0 | 1996 | 147709906 | | CHINA 5 | CHINA 7 | 1996 | 147257366 | | CHINA 1 | CHINA 8 | 1996 | 141840928 | | CHINA 2 | CHINA 4 | 1996 | 136244052 | | CHINA 9 | CHINA 0 | 1996 | 130997019 | | CHINA 1 | CHINA 0 | 1996 | 124362038 | | CHINA 0 | CHINA 9 | 1996 | 114011231 | | CHINA 7 | CHINA 3 | 1996 | 112398764 | | CHINA 4 | CHINA 7 | 1996 | 110567337 | | CHINA 3 | CHINA 4 | 1996 | 109269982 | | CHINA 5 | CHINA 1 | 1996 | 107482704 | | CHINA 6 | CHINA 4 | 1996 | 105485170 | | CHINA 1 | CHINA 4 | 1996 | 105320270 | | CHINA 0 | CHINA 7 | 1996 | 102545071 | | CHINA 2 | CHINA 3 | 1996 | 100407151 | | CHINA 0 | CHINA 4 | 1996 | 95913303 | | CHINA 7 | CHINA 0 | 1996 | 94706269 | | CHINA 6 | CHINA 1 | 1996 | 86949951 | | CHINA 8 | CHINA 3 | 1996 | 84157344 | | CHINA 2 | CHINA 8 | 1996 | 83176903 | | CHINA 5 | CHINA 9 | 1996 | 83104330 | | CHINA 7 | CHINA 8 | 1996 | 81490639 | | CHINA 9 | CHINA 3 | 1996 | 79655829 | | CHINA 5 | CHINA 0 | 1996 | 77489995 | | CHINA 8 | CHINA 0 | 1996 | 76989056 | | CHINA 9 | CHINA 1 | 1996 | 72011031 | | CHINA 7 | CHINA 4 | 1996 | 64764322 | | CHINA 5 | CHINA 4 | 1996 | 62827767 | | CHINA 5 | CHINA 8 | 1996 | 62673237 | | CHINA 7 | CHINA 6 | 1996 | 61880459 | | CHINA 3 | CHINA 7 | 1996 | 56642844 | | CHINA 3 | CHINA 1 | 1996 | 50799366 | | CHINA 3 | CHINA 3 | 1996 | 42601269 | | CHINA 4 | CHINA 3 | 1996 | 38290290 | | CHINA 3 | CHINA 8 | 1996 | 21263056 | | CHINA 7 | CHINA 1 | 1996 | 14836937 | | CHINA 5 | CHINA 3 | 1996 | 13611339 | | CHINA 1 | CHINA 3 | 1996 | 8430793 | | CHINA 1 | CHINA 1 | 1996 | 1601332 | | CHINA 1 | CHINA 7 | 1997 | 664436721 | | CHINA 8 | CHINA 9 | 1997 | 585552148 | | CHINA 8 | CHINA 6 | 1997 | 543571889 | | CHINA 8 | CHINA 7 | 1997 | 516131917 | | CHINA 6 | CHINA 7 | 1997 | 467477883 | | CHINA 3 | CHINA 9 | 1997 | 444914344 | | CHINA 5 | CHINA 6 | 1997 | 353316321 | | CHINA 6 | CHINA 4 | 1997 | 338136205 | | CHINA 0 | CHINA 7 | 1997 | 329137493 | | CHINA 5 | CHINA 1 | 1997 | 328142466 | | CHINA 8 | CHINA 4 | 1997 | 308276385 | | CHINA 6 | CHINA 9 | 1997 | 306814317 | | CHINA 5 | CHINA 9 | 1997 | 301145803 | | CHINA 7 | CHINA 1 | 1997 | 299575802 | | CHINA 8 | CHINA 8 | 1997 | 282083295 | | CHINA 4 | CHINA 9 | 1997 | 280242025 | | CHINA 9 | CHINA 1 | 1997 | 253155313 | | CHINA 4 | CHINA 6 | 1997 | 234247182 | | CHINA 5 | CHINA 0 | 1997 | 217246162 | | CHINA 9 | CHINA 4 | 1997 | 215424663 | | CHINA 0 | CHINA 6 | 1997 | 211152240 | | CHINA 3 | CHINA 6 | 1997 | 205982217 | | CHINA 7 | CHINA 6 | 1997 | 196440117 | | CHINA 1 | CHINA 6 | 1997 | 195757737 | | CHINA 2 | CHINA 3 | 1997 | 189836909 | | CHINA 7 | CHINA 8 | 1997 | 189291379 | | CHINA 9 | CHINA 6 | 1997 | 189236146 | | CHINA 3 | CHINA 1 | 1997 | 188537684 | | CHINA 9 | CHINA 7 | 1997 | 182516267 | | CHINA 0 | CHINA 0 | 1997 | 182459980 | | CHINA 5 | CHINA 8 | 1997 | 177077882 | | CHINA 2 | CHINA 6 | 1997 | 176030529 | | CHINA 2 | CHINA 1 | 1997 | 168770050 | | CHINA 8 | CHINA 0 | 1997 | 167294093 | | CHINA 4 | CHINA 3 | 1997 | 161980658 | | CHINA 3 | CHINA 4 | 1997 | 154433882 | | CHINA 6 | CHINA 6 | 1997 | 153336736 | | CHINA 6 | CHINA 3 | 1997 | 151596497 | | CHINA 8 | CHINA 1 | 1997 | 145432603 | | CHINA 1 | CHINA 4 | 1997 | 126773981 | | CHINA 1 | CHINA 0 | 1997 | 120594770 | | CHINA 7 | CHINA 3 | 1997 | 119618460 | | CHINA 6 | CHINA 1 | 1997 | 119529805 | | CHINA 2 | CHINA 9 | 1997 | 114591288 | | CHINA 7 | CHINA 7 | 1997 | 111335941 | | CHINA 5 | CHINA 3 | 1997 | 111044153 | | CHINA 6 | CHINA 0 | 1997 | 104404276 | | CHINA 1 | CHINA 1 | 1997 | 98869501 | | CHINA 7 | CHINA 0 | 1997 | 97198605 | | CHINA 7 | CHINA 9 | 1997 | 92872632 | | CHINA 0 | CHINA 9 | 1997 | 91097832 | | CHINA 9 | CHINA 9 | 1997 | 86479272 | | CHINA 2 | CHINA 7 | 1997 | 79380820 | | CHINA 9 | CHINA 0 | 1997 | 78499693 | | CHINA 1 | CHINA 9 | 1997 | 73589328 | | CHINA 2 | CHINA 8 | 1997 | 71633835 | | CHINA 8 | CHINA 3 | 1997 | 70505885 | | CHINA 3 | CHINA 0 | 1997 | 61039282 | | CHINA 0 | CHINA 3 | 1997 | 58325113 | | CHINA 5 | CHINA 7 | 1997 | 55476389 | | CHINA 4 | CHINA 7 | 1997 | 46480159 | | CHINA 0 | CHINA 1 | 1997 | 38223038 | | CHINA 4 | CHINA 1 | 1997 | 21636342 | | CHINA 9 | CHINA 3 | 1997 | 13092788 | | CHINA 6 | CHINA 8 | 1997 | 2490092 | +------------+------------+------+-----------+ --Q3.3 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | UNITED KI0 | UNITED KI7 | 1992 | 251282102 | | UNITED KI0 | UNITED KI0 | 1992 | 170005406 | | UNITED KI7 | UNITED KI7 | 1992 | 36835396 | | UNITED KI0 | UNITED KI7 | 1993 | 560335810 | | UNITED KI0 | UNITED KI0 | 1993 | 294257692 | | UNITED KI7 | UNITED KI0 | 1993 | 159005896 | | UNITED KI7 | UNITED KI7 | 1993 | 139029264 | | UNITED KI0 | UNITED KI7 | 1994 | 739847089 | | UNITED KI0 | UNITED KI0 | 1994 | 302339390 | | UNITED KI7 | UNITED KI7 | 1994 | 275609814 | | UNITED KI7 | UNITED KI0 | 1994 | 117654093 | | UNITED KI0 | UNITED KI7 | 1995 | 540994655 | | UNITED KI0 | UNITED KI0 | 1995 | 230825439 | | UNITED KI7 | UNITED KI0 | 1995 | 197347696 | | UNITED KI7 | UNITED KI7 | 1995 | 136620517 | | UNITED KI0 | UNITED KI7 | 1996 | 448412094 | | UNITED KI0 | UNITED KI0 | 1996 | 203511607 | | UNITED KI7 | UNITED KI7 | 1996 | 94528075 | | UNITED KI7 | UNITED KI0 | 1996 | 35448536 | | UNITED KI7 | UNITED KI0 | 1997 | 289323850 | | UNITED KI7 | UNITED KI7 | 1997 | 214791175 | | UNITED KI0 | UNITED KI7 | 1997 | 196510174 | | UNITED KI0 | UNITED KI0 | 1997 | 125066127 | +------------+------------+------+-----------+ --Q3.4 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | UNITED KI7 | KENYA 4 | 1997 | 170083300 | | UNITED KI0 | MOZAMBIQU1 | 1997 | 155234463 | | UNITED KI0 | KENYA 4 | 1997 | 87283610 | +------------+------------+------+-----------+ --Q4.1 +------+---------------+-------------+ | year | c_nation | profit | +------+---------------+-------------+ | 1992 | ARGENTINA | 13746243380 | | 1992 | BRAZIL | 15762831144 | | 1992 | CANADA | 17477043721 | | 1992 | PERU | 14698567030 | | 1992 | UNITED STATES | 14043501956 | | 1993 | ARGENTINA | 13992888207 | | 1993 | BRAZIL | 15146262693 | | 1993 | CANADA | 12463985574 | | 1993 | PERU | 11385007831 | | 1993 | UNITED STATES | 10651361815 | | 1994 | ARGENTINA | 13128610315 | | 1994 | BRAZIL | 13764866493 | | 1994 | CANADA | 13723188154 | | 1994 | PERU | 12784683808 | | 1994 | UNITED STATES | 12554422837 | | 1995 | ARGENTINA | 14337205612 | | 1995 | BRAZIL | 15068918320 | | 1995 | CANADA | 14529005783 | | 1995 | PERU | 13086675480 | | 1995 | UNITED STATES | 11330297649 | | 1996 | ARGENTINA | 13659108915 | | 1996 | BRAZIL | 12660837584 | | 1996 | CANADA | 14558903190 | | 1996 | PERU | 14162285166 | | 1996 | UNITED STATES | 11117076866 | | 1997 | ARGENTINA | 12556399750 | | 1997 | BRAZIL | 13961587144 | | 1997 | CANADA | 15567856947 | | 1997 | PERU | 13595325340 | | 1997 | UNITED STATES | 10779073839 | | 1998 | ARGENTINA | 7843424759 | | 1998 | BRAZIL | 8853904827 | | 1998 | CANADA | 8286104334 | | 1998 | PERU | 5822590950 | | 1998 | UNITED STATES | 8526236814 | +------+---------------+-------------+ --Q4.2 +------+---------------+------------+------------+ | year | s_nation | p_category | profit | +------+---------------+------------+------------+ | 1997 | ARGENTINA | MFGR#11 | 1636950553 | | 1997 | ARGENTINA | MFGR#12 | 1265547847 | | 1997 | ARGENTINA | MFGR#13 | 1505131346 | | 1997 | ARGENTINA | MFGR#14 | 1405447137 | | 1997 | ARGENTINA | MFGR#15 | 1564085340 | | 1997 | ARGENTINA | MFGR#21 | 1335009490 | | 1997 | ARGENTINA | MFGR#22 | 1309054179 | | 1997 | ARGENTINA | MFGR#23 | 1305213794 | | 1997 | ARGENTINA | MFGR#24 | 1089725126 | | 1997 | ARGENTINA | MFGR#25 | 1291995512 | | 1997 | BRAZIL | MFGR#11 | 721240147 | | 1997 | BRAZIL | MFGR#12 | 928318830 | | 1997 | BRAZIL | MFGR#13 | 1164674879 | | 1997 | BRAZIL | MFGR#14 | 1215622587 | | 1997 | BRAZIL | MFGR#15 | 940971658 | | 1997 | BRAZIL | MFGR#21 | 1158909618 | | 1997 | BRAZIL | MFGR#22 | 1251221641 | | 1997 | BRAZIL | MFGR#23 | 1552552455 | | 1997 | BRAZIL | MFGR#24 | 929057361 | | 1997 | BRAZIL | MFGR#25 | 574645288 | | 1997 | CANADA | MFGR#11 | 1170341370 | | 1997 | CANADA | MFGR#12 | 1220238121 | | 1997 | CANADA | MFGR#13 | 1245774025 | | 1997 | CANADA | MFGR#14 | 1032046642 | | 1997 | CANADA | MFGR#15 | 738650612 | | 1997 | CANADA | MFGR#21 | 1476055209 | | 1997 | CANADA | MFGR#22 | 1239005798 | | 1997 | CANADA | MFGR#23 | 869393804 | | 1997 | CANADA | MFGR#24 | 1466964051 | | 1997 | CANADA | MFGR#25 | 1358922727 | | 1997 | PERU | MFGR#11 | 1031023174 | | 1997 | PERU | MFGR#12 | 731821491 | | 1997 | PERU | MFGR#13 | 1044642877 | | 1997 | PERU | MFGR#14 | 654877417 | | 1997 | PERU | MFGR#15 | 1201769474 | | 1997 | PERU | MFGR#21 | 1275496672 | | 1997 | PERU | MFGR#22 | 599324545 | | 1997 | PERU | MFGR#23 | 1200754744 | | 1997 | PERU | MFGR#24 | 942152801 | | 1997 | PERU | MFGR#25 | 1064322995 | | 1997 | UNITED STATES | MFGR#11 | 2365218925 | | 1997 | UNITED STATES | MFGR#12 | 1132346574 | | 1997 | UNITED STATES | MFGR#13 | 2460882362 | | 1997 | UNITED STATES | MFGR#14 | 2190816877 | | 1997 | UNITED STATES | MFGR#15 | 1687829921 | | 1997 | UNITED STATES | MFGR#21 | 2125880770 | | 1997 | UNITED STATES | MFGR#22 | 2013348097 | | 1997 | UNITED STATES | MFGR#23 | 2570581084 | | 1997 | UNITED STATES | MFGR#24 | 2724372315 | | 1997 | UNITED STATES | MFGR#25 | 1480012758 | | 1998 | ARGENTINA | MFGR#11 | 783662770 | | 1998 | ARGENTINA | MFGR#12 | 472818450 | | 1998 | ARGENTINA | MFGR#13 | 585091533 | | 1998 | ARGENTINA | MFGR#14 | 507297527 | | 1998 | ARGENTINA | MFGR#15 | 549185408 | | 1998 | ARGENTINA | MFGR#21 | 972928972 | | 1998 | ARGENTINA | MFGR#22 | 1508294213 | | 1998 | ARGENTINA | MFGR#23 | 517896738 | | 1998 | ARGENTINA | MFGR#24 | 240754731 | | 1998 | ARGENTINA | MFGR#25 | 757030162 | | 1998 | BRAZIL | MFGR#11 | 826283793 | | 1998 | BRAZIL | MFGR#12 | 482293349 | | 1998 | BRAZIL | MFGR#13 | 1037202334 | | 1998 | BRAZIL | MFGR#14 | 743598666 | | 1998 | BRAZIL | MFGR#15 | 584176304 | | 1998 | BRAZIL | MFGR#21 | 557259779 | | 1998 | BRAZIL | MFGR#22 | 535654445 | | 1998 | BRAZIL | MFGR#23 | 403656721 | | 1998 | BRAZIL | MFGR#24 | 1305217551 | | 1998 | BRAZIL | MFGR#25 | 1109801463 | | 1998 | CANADA | MFGR#11 | 936169617 | | 1998 | CANADA | MFGR#12 | 1017751308 | | 1998 | CANADA | MFGR#13 | 850046376 | | 1998 | CANADA | MFGR#14 | 808138010 | | 1998 | CANADA | MFGR#15 | 701990010 | | 1998 | CANADA | MFGR#21 | 402611051 | | 1998 | CANADA | MFGR#22 | 382705122 | | 1998 | CANADA | MFGR#23 | 509674722 | | 1998 | CANADA | MFGR#24 | 1003021250 | | 1998 | CANADA | MFGR#25 | 574602788 | | 1998 | PERU | MFGR#11 | 552608732 | | 1998 | PERU | MFGR#12 | 500581456 | | 1998 | PERU | MFGR#13 | 894607711 | | 1998 | PERU | MFGR#14 | 386487826 | | 1998 | PERU | MFGR#15 | 1044780577 | | 1998 | PERU | MFGR#21 | 184346232 | | 1998 | PERU | MFGR#22 | 674942976 | | 1998 | PERU | MFGR#23 | 665523956 | | 1998 | PERU | MFGR#24 | 631374203 | | 1998 | PERU | MFGR#25 | 602609608 | | 1998 | UNITED STATES | MFGR#11 | 1230069867 | | 1998 | UNITED STATES | MFGR#12 | 1557720319 | | 1998 | UNITED STATES | MFGR#13 | 999206739 | | 1998 | UNITED STATES | MFGR#14 | 605040268 | | 1998 | UNITED STATES | MFGR#15 | 850219215 | | 1998 | UNITED STATES | MFGR#21 | 1032550760 | | 1998 | UNITED STATES | MFGR#22 | 1370141401 | | 1998 | UNITED STATES | MFGR#23 | 1226632297 | | 1998 | UNITED STATES | MFGR#24 | 1528135100 | | 1998 | UNITED STATES | MFGR#25 | 1127867278 | +------+---------------+------------+------------+ --Q4.3 +------+------------+-----------+-----------+ | year | s_city | p_brand | profit | +------+------------+-----------+-----------+ | 1997 | UNITED ST0 | MFGR#1410 | 58481513 | | 1997 | UNITED ST0 | MFGR#1412 | 33582225 | | 1997 | UNITED ST0 | MFGR#1413 | 135625490 | | 1997 | UNITED ST0 | MFGR#1414 | 18581969 | | 1997 | UNITED ST0 | MFGR#142 | 164080005 | | 1997 | UNITED ST0 | MFGR#1420 | 30831591 | | 1997 | UNITED ST0 | MFGR#1424 | 4085253 | | 1997 | UNITED ST0 | MFGR#1425 | 163183170 | | 1997 | UNITED ST0 | MFGR#1427 | 87578288 | | 1997 | UNITED ST0 | MFGR#1428 | 109488143 | | 1997 | UNITED ST0 | MFGR#143 | 198055627 | | 1997 | UNITED ST0 | MFGR#1430 | 52544552 | | 1997 | UNITED ST0 | MFGR#1432 | 158742311 | | 1997 | UNITED ST0 | MFGR#144 | 43479982 | | 1997 | UNITED ST0 | MFGR#1440 | 40412893 | | 1997 | UNITED ST0 | MFGR#145 | 175568435 | | 1997 | UNITED ST1 | MFGR#141 | 11932912 | | 1997 | UNITED ST1 | MFGR#1411 | 40637463 | | 1997 | UNITED ST1 | MFGR#1415 | 27562355 | | 1997 | UNITED ST1 | MFGR#1421 | 100271780 | | 1997 | UNITED ST1 | MFGR#1422 | 103286764 | | 1997 | UNITED ST1 | MFGR#1423 | 106114459 | | 1997 | UNITED ST1 | MFGR#1427 | 157715681 | | 1997 | UNITED ST1 | MFGR#1428 | 91550168 | | 1997 | UNITED ST1 | MFGR#1430 | 56560173 | | 1997 | UNITED ST1 | MFGR#1431 | 248448914 | | 1997 | UNITED ST1 | MFGR#1435 | 994228 | | 1997 | UNITED ST1 | MFGR#144 | 55729825 | | 1997 | UNITED ST1 | MFGR#145 | 118034196 | | 1997 | UNITED ST1 | MFGR#146 | 99170724 | | 1997 | UNITED ST1 | MFGR#147 | 5123001 | | 1997 | UNITED ST2 | MFGR#141 | 111908637 | | 1997 | UNITED ST2 | MFGR#1414 | 96864725 | | 1997 | UNITED ST2 | MFGR#1415 | 123601050 | | 1997 | UNITED ST2 | MFGR#1421 | 21014618 | | 1997 | UNITED ST2 | MFGR#1427 | 46524767 | | 1997 | UNITED ST2 | MFGR#1429 | 18800062 | | 1997 | UNITED ST2 | MFGR#1431 | 79199532 | | 1997 | UNITED ST2 | MFGR#1432 | 53841788 | | 1997 | UNITED ST2 | MFGR#1433 | 133842836 | | 1997 | UNITED ST2 | MFGR#1434 | 96443006 | | 1997 | UNITED ST2 | MFGR#1435 | 50858424 | | 1997 | UNITED ST2 | MFGR#1438 | 64571457 | | 1997 | UNITED ST2 | MFGR#144 | 61319000 | | 1997 | UNITED ST2 | MFGR#146 | 69558050 | | 1997 | UNITED ST2 | MFGR#147 | 41160961 | | 1997 | UNITED ST2 | MFGR#149 | 31735872 | | 1997 | UNITED ST3 | MFGR#1410 | 306449140 | | 1997 | UNITED ST3 | MFGR#1411 | 114677189 | | 1997 | UNITED ST3 | MFGR#1412 | 49229127 | | 1997 | UNITED ST3 | MFGR#1413 | 174911640 | | 1997 | UNITED ST3 | MFGR#1415 | 134932298 | | 1997 | UNITED ST3 | MFGR#1416 | 97111854 | | 1997 | UNITED ST3 | MFGR#1417 | 176279103 | | 1997 | UNITED ST3 | MFGR#1418 | 70684147 | | 1997 | UNITED ST3 | MFGR#1420 | 27591782 | | 1997 | UNITED ST3 | MFGR#1422 | 39411253 | | 1997 | UNITED ST3 | MFGR#1424 | 226736650 | | 1997 | UNITED ST3 | MFGR#1426 | 63997112 | | 1997 | UNITED ST3 | MFGR#1429 | 556053 | | 1997 | UNITED ST3 | MFGR#143 | 73550925 | | 1997 | UNITED ST3 | MFGR#1430 | 218807697 | | 1997 | UNITED ST3 | MFGR#1431 | 39936281 | | 1997 | UNITED ST3 | MFGR#1432 | 44356689 | | 1997 | UNITED ST3 | MFGR#1435 | 49225455 | | 1997 | UNITED ST3 | MFGR#1436 | 90326644 | | 1997 | UNITED ST3 | MFGR#1439 | 84615817 | | 1997 | UNITED ST3 | MFGR#144 | 59081596 | | 1997 | UNITED ST3 | MFGR#1440 | 59601014 | | 1997 | UNITED ST3 | MFGR#145 | 100692258 | | 1997 | UNITED ST3 | MFGR#147 | 142417874 | | 1997 | UNITED ST3 | MFGR#148 | 38233221 | | 1997 | UNITED ST5 | MFGR#1416 | 62387773 | | 1997 | UNITED ST5 | MFGR#1417 | 54974702 | | 1997 | UNITED ST5 | MFGR#1418 | 87301086 | | 1997 | UNITED ST5 | MFGR#1421 | 9869673 | | 1997 | UNITED ST5 | MFGR#1422 | 58912225 | | 1997 | UNITED ST5 | MFGR#1424 | 80038584 | | 1997 | UNITED ST5 | MFGR#1428 | 44422717 | | 1997 | UNITED ST5 | MFGR#1430 | 67186074 | | 1997 | UNITED ST5 | MFGR#1433 | 105646942 | | 1997 | UNITED ST5 | MFGR#1434 | 13923867 | | 1997 | UNITED ST5 | MFGR#145 | 104286534 | | 1997 | UNITED ST5 | MFGR#146 | 20965182 | | 1997 | UNITED ST5 | MFGR#148 | 170596496 | | 1997 | UNITED ST5 | MFGR#149 | 42639213 | | 1997 | UNITED ST6 | MFGR#1411 | 48199726 | | 1997 | UNITED ST6 | MFGR#1413 | 28825982 | | 1997 | UNITED ST6 | MFGR#1414 | 107783723 | | 1997 | UNITED ST6 | MFGR#1415 | 92119787 | | 1997 | UNITED ST6 | MFGR#1416 | 35390328 | | 1997 | UNITED ST6 | MFGR#1417 | 92594053 | | 1997 | UNITED ST6 | MFGR#1418 | 67638716 | | 1997 | UNITED ST6 | MFGR#1421 | 98608466 | | 1997 | UNITED ST6 | MFGR#143 | 23938737 | | 1997 | UNITED ST6 | MFGR#1432 | 104846191 | | 1997 | UNITED ST6 | MFGR#1435 | 185809031 | | 1997 | UNITED ST6 | MFGR#1436 | 82920407 | | 1997 | UNITED ST6 | MFGR#1438 | 137524730 | | 1997 | UNITED ST6 | MFGR#146 | 28124052 | | 1997 | UNITED ST7 | MFGR#141 | 65266383 | | 1997 | UNITED ST7 | MFGR#1411 | 78295166 | | 1997 | UNITED ST7 | MFGR#1413 | 37554700 | | 1997 | UNITED ST7 | MFGR#1414 | 20428356 | | 1997 | UNITED ST7 | MFGR#1416 | 92381468 | | 1997 | UNITED ST7 | MFGR#1418 | 105276410 | | 1997 | UNITED ST7 | MFGR#1419 | 116086880 | | 1997 | UNITED ST7 | MFGR#1420 | 62010492 | | 1997 | UNITED ST7 | MFGR#1428 | 50904528 | | 1997 | UNITED ST7 | MFGR#1430 | 103558679 | | 1997 | UNITED ST7 | MFGR#1431 | 38342548 | | 1997 | UNITED ST7 | MFGR#1436 | 59859992 | | 1997 | UNITED ST7 | MFGR#1437 | 90701341 | | 1997 | UNITED ST7 | MFGR#147 | 133840269 | | 1997 | UNITED ST7 | MFGR#148 | 175852097 | | 1997 | UNITED ST9 | MFGR#1411 | 62786695 | | 1997 | UNITED ST9 | MFGR#1416 | 25354497 | | 1997 | UNITED ST9 | MFGR#1417 | 47367797 | | 1997 | UNITED ST9 | MFGR#1418 | 27220077 | | 1997 | UNITED ST9 | MFGR#142 | 41015203 | | 1997 | UNITED ST9 | MFGR#1423 | 41473506 | | 1997 | UNITED ST9 | MFGR#1424 | 10735092 | | 1997 | UNITED ST9 | MFGR#1425 | 27926087 | | 1997 | UNITED ST9 | MFGR#1426 | 136645966 | | 1997 | UNITED ST9 | MFGR#1430 | 41283531 | | 1997 | UNITED ST9 | MFGR#1433 | 497505 | | 1997 | UNITED ST9 | MFGR#1434 | 101147110 | | 1997 | UNITED ST9 | MFGR#1436 | 30923170 | | 1997 | UNITED ST9 | MFGR#145 | 18049495 | | 1997 | UNITED ST9 | MFGR#146 | 43726737 | | 1998 | UNITED ST0 | MFGR#1413 | 131487843 | | 1998 | UNITED ST0 | MFGR#1426 | 52942692 | | 1998 | UNITED ST0 | MFGR#146 | 13567224 | | 1998 | UNITED ST1 | MFGR#1410 | 65992198 | | 1998 | UNITED ST1 | MFGR#1416 | 115552383 | | 1998 | UNITED ST1 | MFGR#1418 | 15646035 | | 1998 | UNITED ST1 | MFGR#1419 | 129708776 | | 1998 | UNITED ST1 | MFGR#1428 | 18176281 | | 1998 | UNITED ST1 | MFGR#1431 | 17985830 | | 1998 | UNITED ST1 | MFGR#1436 | 16714417 | | 1998 | UNITED ST1 | MFGR#145 | 48297153 | | 1998 | UNITED ST2 | MFGR#1418 | 9240384 | | 1998 | UNITED ST2 | MFGR#1419 | 40909344 | | 1998 | UNITED ST2 | MFGR#1420 | 78625306 | | 1998 | UNITED ST2 | MFGR#1426 | 67161050 | | 1998 | UNITED ST2 | MFGR#1430 | 19028508 | | 1998 | UNITED ST2 | MFGR#1434 | 127804385 | | 1998 | UNITED ST2 | MFGR#1435 | 75092689 | | 1998 | UNITED ST2 | MFGR#1436 | 54579894 | | 1998 | UNITED ST2 | MFGR#1440 | 29067722 | | 1998 | UNITED ST2 | MFGR#148 | 78886426 | | 1998 | UNITED ST3 | MFGR#141 | 4311846 | | 1998 | UNITED ST3 | MFGR#1412 | 98979253 | | 1998 | UNITED ST3 | MFGR#1415 | 102275672 | | 1998 | UNITED ST3 | MFGR#1416 | 50781431 | | 1998 | UNITED ST3 | MFGR#1419 | 37451476 | | 1998 | UNITED ST3 | MFGR#1420 | 24660608 | | 1998 | UNITED ST3 | MFGR#1422 | 98548762 | | 1998 | UNITED ST3 | MFGR#1424 | 96601854 | | 1998 | UNITED ST3 | MFGR#1425 | 74508450 | | 1998 | UNITED ST3 | MFGR#1426 | 330583054 | | 1998 | UNITED ST3 | MFGR#1427 | 41352585 | | 1998 | UNITED ST3 | MFGR#1428 | 61979722 | | 1998 | UNITED ST3 | MFGR#1429 | 869295 | | 1998 | UNITED ST3 | MFGR#1432 | 66991135 | | 1998 | UNITED ST3 | MFGR#146 | 35929398 | | 1998 | UNITED ST3 | MFGR#147 | 8484972 | | 1998 | UNITED ST3 | MFGR#149 | 11793257 | | 1998 | UNITED ST5 | MFGR#1410 | 55951811 | | 1998 | UNITED ST5 | MFGR#1413 | 13403140 | | 1998 | UNITED ST5 | MFGR#142 | 24156762 | | 1998 | UNITED ST5 | MFGR#1422 | 105826683 | | 1998 | UNITED ST5 | MFGR#1430 | 67851607 | | 1998 | UNITED ST5 | MFGR#1431 | 84833774 | | 1998 | UNITED ST5 | MFGR#1434 | 45541810 | | 1998 | UNITED ST5 | MFGR#1437 | 33353745 | | 1998 | UNITED ST5 | MFGR#146 | 19891496 | | 1998 | UNITED ST6 | MFGR#1413 | 135522572 | | 1998 | UNITED ST6 | MFGR#1416 | 185707286 | | 1998 | UNITED ST6 | MFGR#1417 | 80511133 | | 1998 | UNITED ST6 | MFGR#1419 | 127132766 | | 1998 | UNITED ST6 | MFGR#142 | 72629474 | | 1998 | UNITED ST6 | MFGR#1435 | 158543190 | | 1998 | UNITED ST7 | MFGR#1412 | 56750777 | | 1998 | UNITED ST7 | MFGR#1424 | 89508621 | | 1998 | UNITED ST7 | MFGR#1425 | 160377031 | | 1998 | UNITED ST7 | MFGR#1434 | 20882477 | | 1998 | UNITED ST7 | MFGR#146 | 100783548 | | 1998 | UNITED ST7 | MFGR#147 | 61595522 | | 1998 | UNITED ST9 | MFGR#1412 | 5049765 | | 1998 | UNITED ST9 | MFGR#142 | 69919113 | | 1998 | UNITED ST9 | MFGR#1425 | 11003199 | | 1998 | UNITED ST9 | MFGR#1426 | 103616972 | | 1998 | UNITED ST9 | MFGR#1435 | 18879758 | | 1998 | UNITED ST9 | MFGR#1438 | 101903219 | +------+------------+-----------+-----------+ Multiple tables queries expected results --Q1.1 +--------------+ | revenue | +--------------+ | 218453880421 | +--------------+ --Q1.2 +---------+ | revenue | +---------+ | NULL | +---------+ --Q1.3 +-------------+ | revenue | +-------------+ | 17527575453 | +-------------+ --Q2.1 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1135676414 | 1992 | MFGR#121 | | 1221327580 | 1992 | MFGR#1210 | | 1101539324 | 1992 | MFGR#1211 | | 1298411712 | 1992 | MFGR#1212 | | 1248062482 | 1992 | MFGR#1213 | | 1340976936 | 1992 | MFGR#1214 | | 1266304940 | 1992 | MFGR#1215 | | 1349693562 | 1992 | MFGR#1216 | | 1350186870 | 1992 | MFGR#1217 | | 1200404140 | 1992 | MFGR#1218 | | 1076087188 | 1992 | MFGR#1219 | | 1310653344 | 1992 | MFGR#122 | | 1080525764 | 1992 | MFGR#1220 | | 1112241266 | 1992 | MFGR#1221 | | 1181525554 | 1992 | MFGR#1222 | | 1070897302 | 1992 | MFGR#1223 | | 1407505222 | 1992 | MFGR#1224 | | 1141665736 | 1992 | MFGR#1225 | | 1228123186 | 1992 | MFGR#1226 | | 1163518776 | 1992 | MFGR#1227 | | 1289285184 | 1992 | MFGR#1228 | | 1281716860 | 1992 | MFGR#1229 | | 1579511670 | 1992 | MFGR#123 | | 937070174 | 1992 | MFGR#1230 | | 1184873312 | 1992 | MFGR#1231 | | 1328550304 | 1992 | MFGR#1232 | | 1227770200 | 1992 | MFGR#1233 | | 1334798562 | 1992 | MFGR#1234 | | 1280580140 | 1992 | MFGR#1235 | | 1003785122 | 1992 | MFGR#1236 | | 1182963006 | 1992 | MFGR#1237 | | 954847540 | 1992 | MFGR#1238 | | 1276518748 | 1992 | MFGR#1239 | | 1144708392 | 1992 | MFGR#124 | | 1480958496 | 1992 | MFGR#1240 | | 957554190 | 1992 | MFGR#125 | | 1184349232 | 1992 | MFGR#126 | | 1412303264 | 1992 | MFGR#127 | | 1084613292 | 1992 | MFGR#128 | | 1163974704 | 1992 | MFGR#129 | | 1646175404 | 1993 | MFGR#121 | | 1296321412 | 1993 | MFGR#1210 | | 1269487796 | 1993 | MFGR#1211 | | 1571278566 | 1993 | MFGR#1212 | | 1276510058 | 1993 | MFGR#1213 | | 1233674474 | 1993 | MFGR#1214 | | 1269375950 | 1993 | MFGR#1215 | | 1276707800 | 1993 | MFGR#1216 | | 1326745902 | 1993 | MFGR#1217 | | 1367971710 | 1993 | MFGR#1218 | | 1293900066 | 1993 | MFGR#1219 | | 1245065968 | 1993 | MFGR#122 | | 1061660254 | 1993 | MFGR#1220 | | 1086692674 | 1993 | MFGR#1221 | | 1513842406 | 1993 | MFGR#1222 | | 1067088700 | 1993 | MFGR#1223 | | 1831832170 | 1993 | MFGR#1224 | | 946014762 | 1993 | MFGR#1225 | | 1478072248 | 1993 | MFGR#1226 | | 1184357774 | 1993 | MFGR#1227 | | 1167014116 | 1993 | MFGR#1228 | | 1234906982 | 1993 | MFGR#1229 | | 1275727736 | 1993 | MFGR#123 | | 1251068620 | 1993 | MFGR#1230 | | 1160655270 | 1993 | MFGR#1231 | | 1394746196 | 1993 | MFGR#1232 | | 1031142832 | 1993 | MFGR#1233 | | 1303871516 | 1993 | MFGR#1234 | | 1151558960 | 1993 | MFGR#1235 | | 1183757334 | 1993 | MFGR#1236 | | 1219237152 | 1993 | MFGR#1237 | | 889228020 | 1993 | MFGR#1238 | | 1190512654 | 1993 | MFGR#1239 | | 1321172474 | 1993 | MFGR#124 | | 1577460118 | 1993 | MFGR#1240 | | 1232449078 | 1993 | MFGR#125 | | 1234253508 | 1993 | MFGR#126 | | 1308876648 | 1993 | MFGR#127 | | 1463314002 | 1993 | MFGR#128 | | 1096096790 | 1993 | MFGR#129 | | 1128811296 | 1994 | MFGR#121 | | 1290809698 | 1994 | MFGR#1210 | | 1263241270 | 1994 | MFGR#1211 | | 1136664696 | 1994 | MFGR#1212 | | 1357571714 | 1994 | MFGR#1213 | | 1068004660 | 1994 | MFGR#1214 | | 1308800484 | 1994 | MFGR#1215 | | 1117292682 | 1994 | MFGR#1216 | | 1375691282 | 1994 | MFGR#1217 | | 1093348694 | 1994 | MFGR#1218 | | 1134545884 | 1994 | MFGR#1219 | | 1319768124 | 1994 | MFGR#122 | | 1125164344 | 1994 | MFGR#1220 | | 1197237994 | 1994 | MFGR#1221 | | 1202032882 | 1994 | MFGR#1222 | | 1110268808 | 1994 | MFGR#1223 | | 1474844604 | 1994 | MFGR#1224 | | 1141491910 | 1994 | MFGR#1225 | | 1492604490 | 1994 | MFGR#1226 | | 1303414962 | 1994 | MFGR#1227 | | 1147387094 | 1994 | MFGR#1228 | | 1295836746 | 1994 | MFGR#1229 | | 1160899184 | 1994 | MFGR#123 | | 986540824 | 1994 | MFGR#1230 | | 1207092296 | 1994 | MFGR#1231 | | 1439730662 | 1994 | MFGR#1232 | | 1277964476 | 1994 | MFGR#1233 | | 1486495354 | 1994 | MFGR#1234 | | 1197361918 | 1994 | MFGR#1235 | | 1231452194 | 1994 | MFGR#1236 | | 1085139630 | 1994 | MFGR#1237 | | 1147021562 | 1994 | MFGR#1238 | | 1159711706 | 1994 | MFGR#1239 | | 1369146644 | 1994 | MFGR#124 | | 1747471474 | 1994 | MFGR#1240 | | 1120976608 | 1994 | MFGR#125 | | 1314073028 | 1994 | MFGR#126 | | 1245142366 | 1994 | MFGR#127 | | 1173691328 | 1994 | MFGR#128 | | 1069083050 | 1994 | MFGR#129 | | 1412939022 | 1995 | MFGR#121 | | 1205785606 | 1995 | MFGR#1210 | | 1290332184 | 1995 | MFGR#1211 | | 1226578566 | 1995 | MFGR#1212 | | 1199172958 | 1995 | MFGR#1213 | | 1125141608 | 1995 | MFGR#1214 | | 1345057510 | 1995 | MFGR#1215 | | 1338001944 | 1995 | MFGR#1216 | | 1450724898 | 1995 | MFGR#1217 | | 1314053270 | 1995 | MFGR#1218 | | 1039318006 | 1995 | MFGR#1219 | | 1449455482 | 1995 | MFGR#122 | | 1035912262 | 1995 | MFGR#1220 | | 1271482702 | 1995 | MFGR#1221 | | 1128736820 | 1995 | MFGR#1222 | | 1201330298 | 1995 | MFGR#1223 | | 1525400702 | 1995 | MFGR#1224 | | 1343339172 | 1995 | MFGR#1225 | | 1145137496 | 1995 | MFGR#1226 | | 1060722600 | 1995 | MFGR#1227 | | 1266714170 | 1995 | MFGR#1228 | | 1095920488 | 1995 | MFGR#1229 | | 1321422154 | 1995 | MFGR#123 | | 1205471716 | 1995 | MFGR#1230 | | 999704292 | 1995 | MFGR#1231 | | 1430601506 | 1995 | MFGR#1232 | | 1114299142 | 1995 | MFGR#1233 | | 1420046118 | 1995 | MFGR#1234 | | 1244850478 | 1995 | MFGR#1235 | | 1269131002 | 1995 | MFGR#1236 | | 1145694540 | 1995 | MFGR#1237 | | 1098637824 | 1995 | MFGR#1238 | | 1187703424 | 1995 | MFGR#1239 | | 1170843630 | 1995 | MFGR#124 | | 1414415776 | 1995 | MFGR#1240 | | 1076493744 | 1995 | MFGR#125 | | 1211598042 | 1995 | MFGR#126 | | 1331956224 | 1995 | MFGR#127 | | 1293921912 | 1995 | MFGR#128 | | 1017498802 | 1995 | MFGR#129 | | 1047758290 | 1996 | MFGR#121 | | 1287290106 | 1996 | MFGR#1210 | | 1190130678 | 1996 | MFGR#1211 | | 1349252880 | 1996 | MFGR#1212 | | 992594174 | 1996 | MFGR#1213 | | 1166499010 | 1996 | MFGR#1214 | | 1404369714 | 1996 | MFGR#1215 | | 1203618668 | 1996 | MFGR#1216 | | 1409796774 | 1996 | MFGR#1217 | | 1057686172 | 1996 | MFGR#1218 | | 1172492660 | 1996 | MFGR#1219 | | 1424220984 | 1996 | MFGR#122 | | 1036888430 | 1996 | MFGR#1220 | | 998638828 | 1996 | MFGR#1221 | | 1358938712 | 1996 | MFGR#1222 | | 1257525508 | 1996 | MFGR#1223 | | 1449689712 | 1996 | MFGR#1224 | | 1321241174 | 1996 | MFGR#1225 | | 1335349458 | 1996 | MFGR#1226 | | 967676170 | 1996 | MFGR#1227 | | 1219710782 | 1996 | MFGR#1228 | | 1317919114 | 1996 | MFGR#1229 | | 1132435704 | 1996 | MFGR#123 | | 1057759996 | 1996 | MFGR#1230 | | 1178962388 | 1996 | MFGR#1231 | | 1405611792 | 1996 | MFGR#1232 | | 1327359894 | 1996 | MFGR#1233 | | 1142298900 | 1996 | MFGR#1234 | | 957296148 | 1996 | MFGR#1235 | | 1136498730 | 1996 | MFGR#1236 | | 1185232334 | 1996 | MFGR#1237 | | 933352296 | 1996 | MFGR#1238 | | 1341387438 | 1996 | MFGR#1239 | | 1121335438 | 1996 | MFGR#124 | | 1642335900 | 1996 | MFGR#1240 | | 953728666 | 1996 | MFGR#125 | | 1116061768 | 1996 | MFGR#126 | | 1271747782 | 1996 | MFGR#127 | | 1102021236 | 1996 | MFGR#128 | | 1121141260 | 1996 | MFGR#129 | | 1174026414 | 1997 | MFGR#121 | | 1232575784 | 1997 | MFGR#1210 | | 1097177522 | 1997 | MFGR#1211 | | 1179187784 | 1997 | MFGR#1212 | | 848613340 | 1997 | MFGR#1213 | | 1023943820 | 1997 | MFGR#1214 | | 1263544492 | 1997 | MFGR#1215 | | 1384270280 | 1997 | MFGR#1216 | | 1555989914 | 1997 | MFGR#1217 | | 1414107440 | 1997 | MFGR#1218 | | 1122339054 | 1997 | MFGR#1219 | | 1329832490 | 1997 | MFGR#122 | | 1188932314 | 1997 | MFGR#1220 | | 1177696342 | 1997 | MFGR#1221 | | 1057977920 | 1997 | MFGR#1222 | | 1074196422 | 1997 | MFGR#1223 | | 1349526332 | 1997 | MFGR#1224 | | 900804584 | 1997 | MFGR#1225 | | 1402721444 | 1997 | MFGR#1226 | | 1012023140 | 1997 | MFGR#1227 | | 1171157474 | 1997 | MFGR#1228 | | 1245488032 | 1997 | MFGR#1229 | | 1293006336 | 1997 | MFGR#123 | | 1143601882 | 1997 | MFGR#1230 | | 1005203580 | 1997 | MFGR#1231 | | 1355849312 | 1997 | MFGR#1232 | | 1068911952 | 1997 | MFGR#1233 | | 1429869430 | 1997 | MFGR#1234 | | 1534302840 | 1997 | MFGR#1235 | | 1237754358 | 1997 | MFGR#1236 | | 1279276114 | 1997 | MFGR#1237 | | 803906838 | 1997 | MFGR#1238 | | 1221513428 | 1997 | MFGR#1239 | | 1086496174 | 1997 | MFGR#124 | | 1350265384 | 1997 | MFGR#1240 | | 958198730 | 1997 | MFGR#125 | | 1141393136 | 1997 | MFGR#126 | | 1166149184 | 1997 | MFGR#127 | | 1390266208 | 1997 | MFGR#128 | | 1311277552 | 1997 | MFGR#129 | | 689151850 | 1998 | MFGR#121 | | 834304832 | 1998 | MFGR#1210 | | 634136336 | 1998 | MFGR#1211 | | 748683032 | 1998 | MFGR#1212 | | 665481806 | 1998 | MFGR#1213 | | 609746004 | 1998 | MFGR#1214 | | 732202264 | 1998 | MFGR#1215 | | 758267796 | 1998 | MFGR#1216 | | 719016994 | 1998 | MFGR#1217 | | 641246668 | 1998 | MFGR#1218 | | 692365724 | 1998 | MFGR#1219 | | 624880054 | 1998 | MFGR#122 | | 696247922 | 1998 | MFGR#1220 | | 679690796 | 1998 | MFGR#1221 | | 710832322 | 1998 | MFGR#1222 | | 689779644 | 1998 | MFGR#1223 | | 793813382 | 1998 | MFGR#1224 | | 580417756 | 1998 | MFGR#1225 | | 838831414 | 1998 | MFGR#1226 | | 716932680 | 1998 | MFGR#1227 | | 503099910 | 1998 | MFGR#1228 | | 766277720 | 1998 | MFGR#1229 | | 592661122 | 1998 | MFGR#123 | | 874362486 | 1998 | MFGR#1230 | | 797888984 | 1998 | MFGR#1231 | | 848124910 | 1998 | MFGR#1232 | | 813934376 | 1998 | MFGR#1233 | | 857734480 | 1998 | MFGR#1234 | | 704555562 | 1998 | MFGR#1235 | | 723654172 | 1998 | MFGR#1236 | | 683237138 | 1998 | MFGR#1237 | | 489478462 | 1998 | MFGR#1238 | | 828303606 | 1998 | MFGR#1239 | | 660164742 | 1998 | MFGR#124 | | 830624906 | 1998 | MFGR#1240 | | 720579248 | 1998 | MFGR#125 | | 683315160 | 1998 | MFGR#126 | | 755014122 | 1998 | MFGR#127 | | 722832994 | 1998 | MFGR#128 | | 637539146 | 1998 | MFGR#129 | +------------+------+-----------+ --Q2.2 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1419049858 | 1992 | MFGR#2221 | | 1567692788 | 1992 | MFGR#2222 | | 1530104004 | 1992 | MFGR#2223 | | 1302977924 | 1992 | MFGR#2224 | | 1293057178 | 1992 | MFGR#2225 | | 1419301096 | 1992 | MFGR#2226 | | 1491112632 | 1992 | MFGR#2227 | | 1513803750 | 1992 | MFGR#2228 | | 1533042206 | 1993 | MFGR#2221 | | 1382951194 | 1993 | MFGR#2222 | | 1516441504 | 1993 | MFGR#2223 | | 1339325414 | 1993 | MFGR#2224 | | 1547708456 | 1993 | MFGR#2225 | | 1474175036 | 1993 | MFGR#2226 | | 1563935532 | 1993 | MFGR#2227 | | 1361760432 | 1993 | MFGR#2228 | | 1371555036 | 1994 | MFGR#2221 | | 1333049614 | 1994 | MFGR#2222 | | 1467987180 | 1994 | MFGR#2223 | | 1415738080 | 1994 | MFGR#2224 | | 1442503934 | 1994 | MFGR#2225 | | 1644991838 | 1994 | MFGR#2226 | | 1441674256 | 1994 | MFGR#2227 | | 1652450700 | 1994 | MFGR#2228 | | 1550874148 | 1995 | MFGR#2221 | | 1522709584 | 1995 | MFGR#2222 | | 1275665150 | 1995 | MFGR#2223 | | 1179531414 | 1995 | MFGR#2224 | | 1416580078 | 1995 | MFGR#2225 | | 1494712766 | 1995 | MFGR#2226 | | 1605005080 | 1995 | MFGR#2227 | | 1791873572 | 1995 | MFGR#2228 | | 1400020016 | 1996 | MFGR#2221 | | 1554620170 | 1996 | MFGR#2222 | | 1312190628 | 1996 | MFGR#2223 | | 1313719834 | 1996 | MFGR#2224 | | 1531641792 | 1996 | MFGR#2225 | | 1616355468 | 1996 | MFGR#2226 | | 1459126606 | 1996 | MFGR#2227 | | 1639331748 | 1996 | MFGR#2228 | | 1454684764 | 1997 | MFGR#2221 | | 1329067558 | 1997 | MFGR#2222 | | 1496576784 | 1997 | MFGR#2223 | | 1260844162 | 1997 | MFGR#2224 | | 1514782406 | 1997 | MFGR#2225 | | 1495778514 | 1997 | MFGR#2226 | | 1457715798 | 1997 | MFGR#2227 | | 1550625970 | 1997 | MFGR#2228 | | 670609008 | 1998 | MFGR#2221 | | 818694274 | 1998 | MFGR#2222 | | 918219154 | 1998 | MFGR#2223 | | 826636144 | 1998 | MFGR#2224 | | 820804190 | 1998 | MFGR#2225 | | 907030088 | 1998 | MFGR#2226 | | 781012810 | 1998 | MFGR#2227 | | 795878206 | 1998 | MFGR#2228 | +------------+------+-----------+ --Q2.3 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1452854972 | 1992 | MFGR#2239 | | 1410477918 | 1993 | MFGR#2239 | | 1328290268 | 1994 | MFGR#2239 | | 1427678672 | 1995 | MFGR#2239 | | 1456985730 | 1996 | MFGR#2239 | | 1467793064 | 1997 | MFGR#2239 | | 760511462 | 1998 | MFGR#2239 | +------------+------+-----------+ --Q3.1 +-----------+-----------+------+-------------+ | c_nation | s_nation | year | lo_revenue | +-----------+-----------+------+-------------+ | INDONESIA | INDONESIA | 1992 | 13811397976 | | CHINA | INDONESIA | 1992 | 13232157738 | | CHINA | CHINA | 1992 | 12912862954 | | VIETNAM | INDONESIA | 1992 | 12680363414 | | VIETNAM | CHINA | 1992 | 12665688780 | | INDONESIA | CHINA | 1992 | 12621419066 | | INDIA | INDONESIA | 1992 | 12477614708 | | JAPAN | INDONESIA | 1992 | 12445131276 | | CHINA | INDIA | 1992 | 12379662702 | | CHINA | JAPAN | 1992 | 12315357786 | | JAPAN | CHINA | 1992 | 12134201310 | | INDIA | CHINA | 1992 | 12132923622 | | VIETNAM | JAPAN | 1992 | 11727572698 | | JAPAN | INDIA | 1992 | 11605499970 | | INDONESIA | INDIA | 1992 | 11540406436 | | VIETNAM | INDIA | 1992 | 11397022802 | | INDONESIA | JAPAN | 1992 | 11327531220 | | JAPAN | JAPAN | 1992 | 11296069422 | | INDIA | JAPAN | 1992 | 10843918562 | | CHINA | VIETNAM | 1992 | 10824644052 | | JAPAN | VIETNAM | 1992 | 10803385110 | | INDIA | INDIA | 1992 | 10722487510 | | INDONESIA | VIETNAM | 1992 | 10605276744 | | INDIA | VIETNAM | 1992 | 10490661242 | | VIETNAM | VIETNAM | 1992 | 10223463556 | | INDONESIA | INDONESIA | 1993 | 13862726524 | | INDONESIA | CHINA | 1993 | 13225782498 | | CHINA | INDONESIA | 1993 | 13163026732 | | VIETNAM | INDONESIA | 1993 | 13023278704 | | CHINA | CHINA | 1993 | 12889027574 | | CHINA | INDIA | 1993 | 12843388242 | | VIETNAM | CHINA | 1993 | 12827159998 | | INDIA | INDONESIA | 1993 | 12662117188 | | JAPAN | CHINA | 1993 | 12584587990 | | INDIA | CHINA | 1993 | 12418707584 | | CHINA | JAPAN | 1993 | 12390933768 | | VIETNAM | INDIA | 1993 | 12322348954 | | INDONESIA | INDIA | 1993 | 12303328612 | | INDONESIA | JAPAN | 1993 | 12295210498 | | JAPAN | INDONESIA | 1993 | 12107892626 | | INDIA | JAPAN | 1993 | 11990417970 | | CHINA | VIETNAM | 1993 | 11770046456 | | VIETNAM | JAPAN | 1993 | 11748533734 | | INDONESIA | VIETNAM | 1993 | 11680575444 | | JAPAN | INDIA | 1993 | 11646686314 | | INDIA | INDIA | 1993 | 11143151598 | | VIETNAM | VIETNAM | 1993 | 11108322366 | | JAPAN | JAPAN | 1993 | 10860637166 | | JAPAN | VIETNAM | 1993 | 10813139306 | | INDIA | VIETNAM | 1993 | 10467742974 | | VIETNAM | CHINA | 1994 | 13419766884 | | CHINA | CHINA | 1994 | 13297885930 | | INDONESIA | CHINA | 1994 | 12967201820 | | CHINA | JAPAN | 1994 | 12698074042 | | VIETNAM | INDONESIA | 1994 | 12694883862 | | JAPAN | CHINA | 1994 | 12640018436 | | INDONESIA | INDONESIA | 1994 | 12630662172 | | CHINA | INDIA | 1994 | 12595165622 | | CHINA | INDONESIA | 1994 | 12469575792 | | VIETNAM | JAPAN | 1994 | 12463946094 | | INDONESIA | INDIA | 1994 | 12396824490 | | INDIA | INDONESIA | 1994 | 12336379718 | | INDONESIA | JAPAN | 1994 | 12282391938 | | JAPAN | INDONESIA | 1994 | 12026069236 | | CHINA | VIETNAM | 1994 | 11770637466 | | INDIA | CHINA | 1994 | 11630045428 | | VIETNAM | INDIA | 1994 | 11578797382 | | JAPAN | JAPAN | 1994 | 11507642964 | | JAPAN | INDIA | 1994 | 11291637744 | | INDONESIA | VIETNAM | 1994 | 11248692736 | | INDIA | INDIA | 1994 | 11169873030 | | VIETNAM | VIETNAM | 1994 | 10836996318 | | INDIA | JAPAN | 1994 | 10788269948 | | JAPAN | VIETNAM | 1994 | 10551643274 | | INDIA | VIETNAM | 1994 | 10502079630 | | CHINA | INDONESIA | 1995 | 14149078888 | | INDONESIA | CHINA | 1995 | 13857241240 | | CHINA | CHINA | 1995 | 13249333224 | | JAPAN | CHINA | 1995 | 13039778770 | | VIETNAM | CHINA | 1995 | 12665462536 | | INDONESIA | INDONESIA | 1995 | 12537062642 | | VIETNAM | JAPAN | 1995 | 12527914040 | | CHINA | INDIA | 1995 | 12493312748 | | VIETNAM | INDIA | 1995 | 12396883914 | | INDONESIA | INDIA | 1995 | 12347610366 | | VIETNAM | INDONESIA | 1995 | 12115640296 | | CHINA | JAPAN | 1995 | 12043708260 | | INDONESIA | JAPAN | 1995 | 12038187742 | | INDIA | CHINA | 1995 | 12021065586 | | INDIA | INDONESIA | 1995 | 11951037194 | | JAPAN | JAPAN | 1995 | 11904558258 | | JAPAN | INDONESIA | 1995 | 11894001470 | | VIETNAM | VIETNAM | 1995 | 11509455214 | | JAPAN | INDIA | 1995 | 11461486252 | | INDONESIA | VIETNAM | 1995 | 11149948132 | | INDIA | INDIA | 1995 | 11131991100 | | JAPAN | VIETNAM | 1995 | 11002627550 | | CHINA | VIETNAM | 1995 | 10979872126 | | INDIA | JAPAN | 1995 | 10938406854 | | INDIA | VIETNAM | 1995 | 10414126568 | | INDONESIA | INDONESIA | 1996 | 13500112566 | | CHINA | INDONESIA | 1996 | 13314250150 | | INDONESIA | CHINA | 1996 | 13226878224 | | CHINA | CHINA | 1996 | 13183395830 | | VIETNAM | CHINA | 1996 | 12857307780 | | VIETNAM | INDONESIA | 1996 | 12591253464 | | JAPAN | INDONESIA | 1996 | 12454895712 | | INDIA | CHINA | 1996 | 12397135638 | | INDIA | INDONESIA | 1996 | 12378484116 | | CHINA | INDIA | 1996 | 12307574730 | | INDONESIA | INDIA | 1996 | 12277621726 | | CHINA | JAPAN | 1996 | 12211132648 | | JAPAN | CHINA | 1996 | 12177971128 | | INDONESIA | JAPAN | 1996 | 12111276444 | | VIETNAM | JAPAN | 1996 | 11839994300 | | VIETNAM | VIETNAM | 1996 | 11721684604 | | INDIA | JAPAN | 1996 | 11683329610 | | VIETNAM | INDIA | 1996 | 11614973966 | | JAPAN | INDIA | 1996 | 11289159232 | | JAPAN | JAPAN | 1996 | 11132409590 | | INDIA | INDIA | 1996 | 11064146206 | | INDONESIA | VIETNAM | 1996 | 10877028774 | | CHINA | VIETNAM | 1996 | 10869545636 | | JAPAN | VIETNAM | 1996 | 10668555098 | | INDIA | VIETNAM | 1996 | 10587783062 | | CHINA | INDONESIA | 1997 | 13306469392 | | INDONESIA | CHINA | 1997 | 13154792628 | | CHINA | CHINA | 1997 | 12927589590 | | JAPAN | INDONESIA | 1997 | 12858540252 | | INDONESIA | INDONESIA | 1997 | 12796855642 | | VIETNAM | INDONESIA | 1997 | 12727166240 | | CHINA | JAPAN | 1997 | 12569467036 | | VIETNAM | CHINA | 1997 | 12328437446 | | INDIA | CHINA | 1997 | 12306564428 | | CHINA | INDIA | 1997 | 12168567966 | | INDONESIA | JAPAN | 1997 | 12002855912 | | INDIA | INDONESIA | 1997 | 11966878600 | | JAPAN | CHINA | 1997 | 11947699374 | | CHINA | VIETNAM | 1997 | 11816508352 | | JAPAN | INDIA | 1997 | 11593843984 | | JAPAN | JAPAN | 1997 | 11580900078 | | INDONESIA | INDIA | 1997 | 11578734210 | | VIETNAM | INDIA | 1997 | 11460243216 | | INDIA | INDIA | 1997 | 11386057814 | | VIETNAM | JAPAN | 1997 | 11378690460 | | INDONESIA | VIETNAM | 1997 | 11331356264 | | VIETNAM | VIETNAM | 1997 | 11240502648 | | INDIA | JAPAN | 1997 | 11175655826 | | JAPAN | VIETNAM | 1997 | 10499749228 | | INDIA | VIETNAM | 1997 | 10007249674 | +-----------+-----------+------+-------------+ --Q3.2 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED ST4 | UNITED ST1 | 1992 | 204054910 | | UNITED ST1 | UNITED ST0 | 1992 | 193978982 | | UNITED ST7 | UNITED ST0 | 1992 | 192156020 | | UNITED ST9 | UNITED ST0 | 1992 | 189626588 | | UNITED ST4 | UNITED ST0 | 1992 | 189288484 | | UNITED ST2 | UNITED ST4 | 1992 | 182361000 | | UNITED ST5 | UNITED ST0 | 1992 | 180864600 | | UNITED ST6 | UNITED ST7 | 1992 | 175316534 | | UNITED ST3 | UNITED ST9 | 1992 | 172284096 | | UNITED ST6 | UNITED ST5 | 1992 | 171765932 | | UNITED ST7 | UNITED ST3 | 1992 | 167531332 | | UNITED ST2 | UNITED ST9 | 1992 | 167411236 | | UNITED ST4 | UNITED ST6 | 1992 | 163772748 | | UNITED ST2 | UNITED ST1 | 1992 | 163678330 | | UNITED ST9 | UNITED ST1 | 1992 | 161590604 | | UNITED ST6 | UNITED ST3 | 1992 | 157556436 | | UNITED ST6 | UNITED ST0 | 1992 | 157393912 | | UNITED ST0 | UNITED ST1 | 1992 | 154534792 | | UNITED ST0 | UNITED ST0 | 1992 | 151244244 | | UNITED ST1 | UNITED ST9 | 1992 | 150734118 | | UNITED ST3 | UNITED ST1 | 1992 | 147274980 | | UNITED ST2 | UNITED ST0 | 1992 | 144420436 | | UNITED ST1 | UNITED ST7 | 1992 | 142945946 | | UNITED ST6 | UNITED ST4 | 1992 | 142173888 | | UNITED ST4 | UNITED ST4 | 1992 | 140222670 | | UNITED ST6 | UNITED ST1 | 1992 | 138817376 | | UNITED ST4 | UNITED ST3 | 1992 | 138003574 | | UNITED ST5 | UNITED ST7 | 1992 | 136667302 | | UNITED ST4 | UNITED ST9 | 1992 | 135675940 | | UNITED ST7 | UNITED ST6 | 1992 | 131026410 | | UNITED ST4 | UNITED ST5 | 1992 | 130115744 | | UNITED ST7 | UNITED ST4 | 1992 | 129801776 | | UNITED ST1 | UNITED ST1 | 1992 | 129338140 | | UNITED ST3 | UNITED ST5 | 1992 | 128478096 | | UNITED ST0 | UNITED ST9 | 1992 | 127959992 | | UNITED ST3 | UNITED ST4 | 1992 | 126289544 | | UNITED ST5 | UNITED ST6 | 1992 | 125256186 | | UNITED ST4 | UNITED ST7 | 1992 | 125058752 | | UNITED ST3 | UNITED ST0 | 1992 | 124883312 | | UNITED ST9 | UNITED ST4 | 1992 | 122979026 | | UNITED ST8 | UNITED ST6 | 1992 | 121080880 | | UNITED ST7 | UNITED ST9 | 1992 | 120652084 | | UNITED ST7 | UNITED ST7 | 1992 | 120242772 | | UNITED ST5 | UNITED ST1 | 1992 | 119890574 | | UNITED ST5 | UNITED ST4 | 1992 | 115251254 | | UNITED ST7 | UNITED ST5 | 1992 | 115133604 | | UNITED ST2 | UNITED ST5 | 1992 | 114042730 | | UNITED ST9 | UNITED ST7 | 1992 | 113766718 | | UNITED ST0 | UNITED ST3 | 1992 | 112718634 | | UNITED ST1 | UNITED ST3 | 1992 | 111454948 | | UNITED ST5 | UNITED ST3 | 1992 | 107927106 | | UNITED ST0 | UNITED ST7 | 1992 | 101166818 | | UNITED ST5 | UNITED ST9 | 1992 | 100382182 | | UNITED ST7 | UNITED ST1 | 1992 | 100334416 | | UNITED ST0 | UNITED ST8 | 1992 | 99465280 | | UNITED ST0 | UNITED ST4 | 1992 | 99353614 | | UNITED ST9 | UNITED ST3 | 1992 | 95362330 | | UNITED ST8 | UNITED ST4 | 1992 | 93514038 | | UNITED ST3 | UNITED ST3 | 1992 | 90174432 | | UNITED ST8 | UNITED ST0 | 1992 | 88737678 | | UNITED ST0 | UNITED ST6 | 1992 | 84943612 | | UNITED ST6 | UNITED ST8 | 1992 | 84927380 | | UNITED ST8 | UNITED ST7 | 1992 | 83795802 | | UNITED ST3 | UNITED ST8 | 1992 | 82551528 | | UNITED ST6 | UNITED ST9 | 1992 | 81183442 | | UNITED ST0 | UNITED ST5 | 1992 | 80241772 | | UNITED ST1 | UNITED ST4 | 1992 | 78652692 | | UNITED ST3 | UNITED ST7 | 1992 | 78057158 | | UNITED ST3 | UNITED ST6 | 1992 | 77597430 | | UNITED ST9 | UNITED ST9 | 1992 | 72096686 | | UNITED ST2 | UNITED ST8 | 1992 | 72092898 | | UNITED ST2 | UNITED ST3 | 1992 | 71963926 | | UNITED ST8 | UNITED ST1 | 1992 | 71361504 | | UNITED ST1 | UNITED ST6 | 1992 | 70809980 | | UNITED ST8 | UNITED ST5 | 1992 | 70375220 | | UNITED ST1 | UNITED ST5 | 1992 | 67942502 | | UNITED ST5 | UNITED ST8 | 1992 | 67756106 | | UNITED ST2 | UNITED ST7 | 1992 | 67405558 | | UNITED ST8 | UNITED ST3 | 1992 | 61898648 | | UNITED ST8 | UNITED ST8 | 1992 | 58618216 | | UNITED ST5 | UNITED ST5 | 1992 | 58559136 | | UNITED ST1 | UNITED ST8 | 1992 | 57131158 | | UNITED ST9 | UNITED ST5 | 1992 | 56150008 | | UNITED ST2 | UNITED ST6 | 1992 | 55627478 | | UNITED ST0 | UNITED ST2 | 1992 | 55437466 | | UNITED ST2 | UNITED ST2 | 1992 | 51487308 | | UNITED ST8 | UNITED ST9 | 1992 | 45368942 | | UNITED ST4 | UNITED ST8 | 1992 | 43856884 | | UNITED ST9 | UNITED ST8 | 1992 | 42772200 | | UNITED ST5 | UNITED ST2 | 1992 | 40991634 | | UNITED ST6 | UNITED ST6 | 1992 | 36274210 | | UNITED ST9 | UNITED ST6 | 1992 | 31759136 | | UNITED ST4 | UNITED ST2 | 1992 | 24123690 | | UNITED ST7 | UNITED ST8 | 1992 | 23791404 | | UNITED ST6 | UNITED ST2 | 1992 | 23641396 | | UNITED ST9 | UNITED ST2 | 1992 | 23246354 | | UNITED ST8 | UNITED ST2 | 1992 | 21943122 | | UNITED ST1 | UNITED ST2 | 1992 | 15413456 | | UNITED ST7 | UNITED ST2 | 1992 | 9886408 | | UNITED ST3 | UNITED ST2 | 1992 | 2194416 | | UNITED ST0 | UNITED ST9 | 1993 | 219668080 | | UNITED ST7 | UNITED ST0 | 1993 | 219576048 | | UNITED ST5 | UNITED ST0 | 1993 | 213645194 | | UNITED ST0 | UNITED ST0 | 1993 | 213485096 | | UNITED ST1 | UNITED ST0 | 1993 | 198611904 | | UNITED ST4 | UNITED ST4 | 1993 | 196300930 | | UNITED ST3 | UNITED ST4 | 1993 | 184987840 | | UNITED ST0 | UNITED ST1 | 1993 | 182393186 | | UNITED ST4 | UNITED ST1 | 1993 | 177042846 | | UNITED ST8 | UNITED ST0 | 1993 | 176712742 | | UNITED ST4 | UNITED ST7 | 1993 | 176344396 | | UNITED ST4 | UNITED ST0 | 1993 | 173836916 | | UNITED ST6 | UNITED ST3 | 1993 | 166834322 | | UNITED ST6 | UNITED ST1 | 1993 | 166691878 | | UNITED ST7 | UNITED ST9 | 1993 | 160621402 | | UNITED ST3 | UNITED ST1 | 1993 | 156460556 | | UNITED ST6 | UNITED ST7 | 1993 | 156394588 | | UNITED ST5 | UNITED ST9 | 1993 | 152573078 | | UNITED ST0 | UNITED ST3 | 1993 | 152342566 | | UNITED ST5 | UNITED ST8 | 1993 | 148718558 | | UNITED ST9 | UNITED ST1 | 1993 | 148118838 | | UNITED ST4 | UNITED ST9 | 1993 | 146593918 | | UNITED ST5 | UNITED ST1 | 1993 | 142909246 | | UNITED ST6 | UNITED ST4 | 1993 | 139293826 | | UNITED ST2 | UNITED ST1 | 1993 | 139263402 | | UNITED ST6 | UNITED ST0 | 1993 | 136495078 | | UNITED ST7 | UNITED ST7 | 1993 | 136219640 | | UNITED ST2 | UNITED ST3 | 1993 | 133944876 | | UNITED ST3 | UNITED ST0 | 1993 | 133253852 | | UNITED ST9 | UNITED ST7 | 1993 | 133250966 | | UNITED ST1 | UNITED ST8 | 1993 | 132292396 | | UNITED ST2 | UNITED ST7 | 1993 | 128370028 | | UNITED ST5 | UNITED ST4 | 1993 | 126831278 | | UNITED ST9 | UNITED ST9 | 1993 | 126521526 | | UNITED ST1 | UNITED ST4 | 1993 | 125768694 | | UNITED ST7 | UNITED ST4 | 1993 | 123313226 | | UNITED ST3 | UNITED ST6 | 1993 | 117169616 | | UNITED ST2 | UNITED ST4 | 1993 | 113300782 | | UNITED ST3 | UNITED ST5 | 1993 | 111814610 | | UNITED ST6 | UNITED ST9 | 1993 | 109801884 | | UNITED ST1 | UNITED ST7 | 1993 | 109702366 | | UNITED ST3 | UNITED ST9 | 1993 | 109525192 | | UNITED ST8 | UNITED ST6 | 1993 | 109266124 | | UNITED ST8 | UNITED ST3 | 1993 | 108099748 | | UNITED ST5 | UNITED ST7 | 1993 | 105491076 | | UNITED ST0 | UNITED ST5 | 1993 | 105402104 | | UNITED ST1 | UNITED ST9 | 1993 | 105029804 | | UNITED ST8 | UNITED ST5 | 1993 | 104475674 | | UNITED ST1 | UNITED ST3 | 1993 | 104195892 | | UNITED ST8 | UNITED ST4 | 1993 | 102838712 | | UNITED ST0 | UNITED ST6 | 1993 | 100864564 | | UNITED ST5 | UNITED ST5 | 1993 | 100714378 | | UNITED ST3 | UNITED ST7 | 1993 | 100270896 | | UNITED ST0 | UNITED ST4 | 1993 | 98520134 | | UNITED ST0 | UNITED ST7 | 1993 | 97592720 | | UNITED ST2 | UNITED ST9 | 1993 | 96377014 | | UNITED ST1 | UNITED ST1 | 1993 | 95077220 | | UNITED ST9 | UNITED ST3 | 1993 | 93887294 | | UNITED ST7 | UNITED ST5 | 1993 | 89527384 | | UNITED ST1 | UNITED ST6 | 1993 | 89457080 | | UNITED ST8 | UNITED ST1 | 1993 | 88830868 | | UNITED ST7 | UNITED ST8 | 1993 | 87805256 | | UNITED ST9 | UNITED ST6 | 1993 | 87734320 | | UNITED ST2 | UNITED ST0 | 1993 | 85690970 | | UNITED ST3 | UNITED ST8 | 1993 | 84503696 | | UNITED ST0 | UNITED ST8 | 1993 | 84005364 | | UNITED ST4 | UNITED ST8 | 1993 | 83315164 | | UNITED ST1 | UNITED ST5 | 1993 | 81387026 | | UNITED ST9 | UNITED ST5 | 1993 | 79370538 | | UNITED ST7 | UNITED ST3 | 1993 | 79047722 | | UNITED ST8 | UNITED ST8 | 1993 | 77580470 | | UNITED ST8 | UNITED ST9 | 1993 | 77032722 | | UNITED ST2 | UNITED ST5 | 1993 | 74813690 | | UNITED ST9 | UNITED ST8 | 1993 | 74369392 | | UNITED ST8 | UNITED ST7 | 1993 | 73804436 | | UNITED ST6 | UNITED ST8 | 1993 | 72913482 | | UNITED ST7 | UNITED ST1 | 1993 | 68782318 | | UNITED ST6 | UNITED ST5 | 1993 | 68458164 | | UNITED ST5 | UNITED ST3 | 1993 | 68063622 | | UNITED ST2 | UNITED ST8 | 1993 | 66890892 | | UNITED ST4 | UNITED ST3 | 1993 | 66258824 | | UNITED ST6 | UNITED ST6 | 1993 | 66101326 | | UNITED ST9 | UNITED ST0 | 1993 | 65306610 | | UNITED ST4 | UNITED ST6 | 1993 | 61398510 | | UNITED ST9 | UNITED ST4 | 1993 | 61289374 | | UNITED ST4 | UNITED ST5 | 1993 | 58239188 | | UNITED ST7 | UNITED ST6 | 1993 | 54201004 | | UNITED ST4 | UNITED ST2 | 1993 | 54025356 | | UNITED ST2 | UNITED ST6 | 1993 | 52964452 | | UNITED ST5 | UNITED ST6 | 1993 | 50715358 | | UNITED ST3 | UNITED ST3 | 1993 | 43554288 | | UNITED ST3 | UNITED ST2 | 1993 | 43118146 | | UNITED ST5 | UNITED ST2 | 1993 | 41220484 | | UNITED ST7 | UNITED ST2 | 1993 | 40438608 | | UNITED ST6 | UNITED ST2 | 1993 | 37628734 | | UNITED ST9 | UNITED ST2 | 1993 | 35436780 | | UNITED ST1 | UNITED ST2 | 1993 | 33689076 | | UNITED ST0 | UNITED ST2 | 1993 | 30084290 | | UNITED ST2 | UNITED ST2 | 1993 | 29043990 | | UNITED ST8 | UNITED ST2 | 1993 | 19968732 | | UNITED ST8 | UNITED ST0 | 1994 | 198441578 | | UNITED ST3 | UNITED ST9 | 1994 | 194952370 | | UNITED ST6 | UNITED ST1 | 1994 | 193874294 | | UNITED ST6 | UNITED ST9 | 1994 | 189366618 | | UNITED ST9 | UNITED ST1 | 1994 | 180881896 | | UNITED ST0 | UNITED ST9 | 1994 | 179730404 | | UNITED ST5 | UNITED ST7 | 1994 | 178179922 | | UNITED ST9 | UNITED ST0 | 1994 | 175341146 | | UNITED ST3 | UNITED ST1 | 1994 | 171047306 | | UNITED ST4 | UNITED ST9 | 1994 | 167644786 | | UNITED ST0 | UNITED ST0 | 1994 | 167053754 | | UNITED ST7 | UNITED ST0 | 1994 | 164531072 | | UNITED ST2 | UNITED ST1 | 1994 | 162600178 | | UNITED ST5 | UNITED ST0 | 1994 | 157296114 | | UNITED ST4 | UNITED ST7 | 1994 | 153908280 | | UNITED ST4 | UNITED ST4 | 1994 | 153674762 | | UNITED ST0 | UNITED ST1 | 1994 | 153226758 | | UNITED ST1 | UNITED ST3 | 1994 | 151984918 | | UNITED ST7 | UNITED ST1 | 1994 | 150641598 | | UNITED ST4 | UNITED ST0 | 1994 | 147438680 | | UNITED ST5 | UNITED ST1 | 1994 | 147016836 | | UNITED ST4 | UNITED ST1 | 1994 | 144439114 | | UNITED ST2 | UNITED ST9 | 1994 | 139342108 | | UNITED ST6 | UNITED ST5 | 1994 | 132923068 | | UNITED ST2 | UNITED ST3 | 1994 | 131241520 | | UNITED ST3 | UNITED ST0 | 1994 | 131045454 | | UNITED ST5 | UNITED ST3 | 1994 | 130669822 | | UNITED ST7 | UNITED ST4 | 1994 | 129557430 | | UNITED ST3 | UNITED ST4 | 1994 | 126824730 | | UNITED ST8 | UNITED ST4 | 1994 | 124283362 | | UNITED ST0 | UNITED ST4 | 1994 | 123039488 | | UNITED ST0 | UNITED ST7 | 1994 | 122961640 | | UNITED ST0 | UNITED ST6 | 1994 | 122577556 | | UNITED ST2 | UNITED ST0 | 1994 | 120364306 | | UNITED ST6 | UNITED ST4 | 1994 | 119659978 | | UNITED ST4 | UNITED ST5 | 1994 | 118794056 | | UNITED ST8 | UNITED ST9 | 1994 | 117333812 | | UNITED ST4 | UNITED ST6 | 1994 | 117266964 | | UNITED ST5 | UNITED ST5 | 1994 | 112470426 | | UNITED ST6 | UNITED ST3 | 1994 | 112246476 | | UNITED ST2 | UNITED ST4 | 1994 | 111358754 | | UNITED ST8 | UNITED ST3 | 1994 | 110407682 | | UNITED ST1 | UNITED ST1 | 1994 | 108766348 | | UNITED ST1 | UNITED ST7 | 1994 | 107706212 | | UNITED ST6 | UNITED ST0 | 1994 | 107457706 | | UNITED ST5 | UNITED ST9 | 1994 | 106734662 | | UNITED ST9 | UNITED ST9 | 1994 | 103961698 | | UNITED ST5 | UNITED ST4 | 1994 | 103599186 | | UNITED ST7 | UNITED ST9 | 1994 | 100288170 | | UNITED ST7 | UNITED ST7 | 1994 | 92892884 | | UNITED ST6 | UNITED ST6 | 1994 | 92399444 | | UNITED ST7 | UNITED ST5 | 1994 | 91790728 | | UNITED ST3 | UNITED ST3 | 1994 | 91254306 | | UNITED ST8 | UNITED ST5 | 1994 | 89106112 | | UNITED ST9 | UNITED ST4 | 1994 | 87821522 | | UNITED ST1 | UNITED ST0 | 1994 | 86450402 | | UNITED ST1 | UNITED ST9 | 1994 | 86000074 | | UNITED ST7 | UNITED ST8 | 1994 | 85552934 | | UNITED ST0 | UNITED ST5 | 1994 | 83616602 | | UNITED ST2 | UNITED ST6 | 1994 | 83052210 | | UNITED ST1 | UNITED ST4 | 1994 | 82763116 | | UNITED ST3 | UNITED ST7 | 1994 | 81870262 | | UNITED ST8 | UNITED ST1 | 1994 | 80304192 | | UNITED ST9 | UNITED ST8 | 1994 | 78557616 | | UNITED ST5 | UNITED ST6 | 1994 | 77316902 | | UNITED ST2 | UNITED ST5 | 1994 | 75280634 | | UNITED ST8 | UNITED ST7 | 1994 | 75201374 | | UNITED ST9 | UNITED ST5 | 1994 | 74293452 | | UNITED ST6 | UNITED ST7 | 1994 | 74115616 | | UNITED ST8 | UNITED ST6 | 1994 | 73553138 | | UNITED ST3 | UNITED ST6 | 1994 | 72580514 | | UNITED ST9 | UNITED ST3 | 1994 | 71693000 | | UNITED ST2 | UNITED ST8 | 1994 | 67535548 | | UNITED ST0 | UNITED ST8 | 1994 | 63690866 | | UNITED ST4 | UNITED ST3 | 1994 | 63198866 | | UNITED ST9 | UNITED ST7 | 1994 | 63172346 | | UNITED ST1 | UNITED ST6 | 1994 | 62574652 | | UNITED ST1 | UNITED ST8 | 1994 | 60490306 | | UNITED ST7 | UNITED ST3 | 1994 | 58849680 | | UNITED ST9 | UNITED ST6 | 1994 | 58425854 | | UNITED ST0 | UNITED ST3 | 1994 | 54655658 | | UNITED ST6 | UNITED ST8 | 1994 | 53185992 | | UNITED ST3 | UNITED ST5 | 1994 | 52395750 | | UNITED ST6 | UNITED ST2 | 1994 | 51618000 | | UNITED ST1 | UNITED ST5 | 1994 | 49878276 | | UNITED ST7 | UNITED ST6 | 1994 | 49263874 | | UNITED ST1 | UNITED ST2 | 1994 | 47113172 | | UNITED ST4 | UNITED ST2 | 1994 | 46071784 | | UNITED ST2 | UNITED ST7 | 1994 | 44365516 | | UNITED ST0 | UNITED ST2 | 1994 | 44035908 | | UNITED ST4 | UNITED ST8 | 1994 | 41370704 | | UNITED ST7 | UNITED ST2 | 1994 | 39310162 | | UNITED ST5 | UNITED ST8 | 1994 | 37863782 | | UNITED ST2 | UNITED ST2 | 1994 | 36137314 | | UNITED ST3 | UNITED ST8 | 1994 | 31872102 | | UNITED ST8 | UNITED ST8 | 1994 | 20046824 | | UNITED ST3 | UNITED ST2 | 1994 | 19990468 | | UNITED ST9 | UNITED ST2 | 1994 | 19401978 | | UNITED ST5 | UNITED ST2 | 1994 | 14325592 | | UNITED ST8 | UNITED ST2 | 1994 | 7579252 | | UNITED ST5 | UNITED ST1 | 1995 | 239587338 | | UNITED ST4 | UNITED ST9 | 1995 | 198980136 | | UNITED ST7 | UNITED ST0 | 1995 | 196062590 | | UNITED ST6 | UNITED ST0 | 1995 | 183436942 | | UNITED ST4 | UNITED ST1 | 1995 | 181757306 | | UNITED ST0 | UNITED ST1 | 1995 | 181527198 | | UNITED ST8 | UNITED ST9 | 1995 | 177710178 | | UNITED ST7 | UNITED ST7 | 1995 | 173143248 | | UNITED ST3 | UNITED ST0 | 1995 | 168925466 | | UNITED ST9 | UNITED ST1 | 1995 | 165877934 | | UNITED ST2 | UNITED ST4 | 1995 | 164864610 | | UNITED ST1 | UNITED ST0 | 1995 | 163353246 | | UNITED ST5 | UNITED ST4 | 1995 | 162033522 | | UNITED ST7 | UNITED ST1 | 1995 | 159928724 | | UNITED ST5 | UNITED ST3 | 1995 | 156198260 | | UNITED ST5 | UNITED ST0 | 1995 | 155231492 | | UNITED ST9 | UNITED ST9 | 1995 | 153031916 | | UNITED ST7 | UNITED ST9 | 1995 | 150635418 | | UNITED ST4 | UNITED ST4 | 1995 | 149174142 | | UNITED ST9 | UNITED ST4 | 1995 | 145051372 | | UNITED ST1 | UNITED ST9 | 1995 | 144941740 | | UNITED ST4 | UNITED ST7 | 1995 | 138528814 | | UNITED ST6 | UNITED ST3 | 1995 | 135026124 | | UNITED ST2 | UNITED ST3 | 1995 | 130436258 | | UNITED ST2 | UNITED ST9 | 1995 | 130110356 | | UNITED ST7 | UNITED ST6 | 1995 | 130041342 | | UNITED ST3 | UNITED ST1 | 1995 | 129525630 | | UNITED ST1 | UNITED ST1 | 1995 | 128398664 | | UNITED ST6 | UNITED ST9 | 1995 | 126914210 | | UNITED ST0 | UNITED ST9 | 1995 | 126506998 | | UNITED ST5 | UNITED ST9 | 1995 | 124729794 | | UNITED ST4 | UNITED ST5 | 1995 | 124163010 | | UNITED ST1 | UNITED ST7 | 1995 | 123031482 | | UNITED ST2 | UNITED ST7 | 1995 | 120000416 | | UNITED ST8 | UNITED ST6 | 1995 | 117980808 | | UNITED ST1 | UNITED ST4 | 1995 | 115071198 | | UNITED ST0 | UNITED ST3 | 1995 | 112721416 | | UNITED ST8 | UNITED ST0 | 1995 | 110463328 | | UNITED ST5 | UNITED ST7 | 1995 | 107481518 | | UNITED ST2 | UNITED ST0 | 1995 | 105121676 | | UNITED ST3 | UNITED ST7 | 1995 | 103159096 | | UNITED ST9 | UNITED ST0 | 1995 | 103097242 | | UNITED ST6 | UNITED ST6 | 1995 | 101909354 | | UNITED ST5 | UNITED ST5 | 1995 | 100788014 | | UNITED ST7 | UNITED ST4 | 1995 | 99799090 | | UNITED ST3 | UNITED ST3 | 1995 | 96316178 | | UNITED ST6 | UNITED ST4 | 1995 | 95394482 | | UNITED ST9 | UNITED ST7 | 1995 | 92929178 | | UNITED ST4 | UNITED ST0 | 1995 | 92285798 | | UNITED ST1 | UNITED ST3 | 1995 | 91646112 | | UNITED ST2 | UNITED ST1 | 1995 | 90874680 | | UNITED ST6 | UNITED ST5 | 1995 | 90856304 | | UNITED ST8 | UNITED ST5 | 1995 | 89989726 | | UNITED ST7 | UNITED ST3 | 1995 | 87399468 | | UNITED ST9 | UNITED ST6 | 1995 | 86964988 | | UNITED ST2 | UNITED ST5 | 1995 | 86764834 | | UNITED ST6 | UNITED ST8 | 1995 | 83947840 | | UNITED ST0 | UNITED ST6 | 1995 | 81437884 | | UNITED ST3 | UNITED ST5 | 1995 | 80115630 | | UNITED ST7 | UNITED ST5 | 1995 | 78030586 | | UNITED ST0 | UNITED ST0 | 1995 | 77969004 | | UNITED ST6 | UNITED ST1 | 1995 | 76656704 | | UNITED ST4 | UNITED ST6 | 1995 | 76219048 | | UNITED ST3 | UNITED ST9 | 1995 | 74729246 | | UNITED ST4 | UNITED ST3 | 1995 | 74712792 | | UNITED ST2 | UNITED ST6 | 1995 | 74292576 | | UNITED ST9 | UNITED ST5 | 1995 | 72019848 | | UNITED ST1 | UNITED ST8 | 1995 | 69837586 | | UNITED ST8 | UNITED ST1 | 1995 | 68435560 | | UNITED ST0 | UNITED ST7 | 1995 | 66790626 | | UNITED ST1 | UNITED ST5 | 1995 | 63714904 | | UNITED ST8 | UNITED ST7 | 1995 | 61836404 | | UNITED ST2 | UNITED ST8 | 1995 | 61008378 | | UNITED ST3 | UNITED ST4 | 1995 | 60844692 | | UNITED ST5 | UNITED ST6 | 1995 | 60409474 | | UNITED ST8 | UNITED ST3 | 1995 | 58699876 | | UNITED ST0 | UNITED ST4 | 1995 | 58340076 | | UNITED ST1 | UNITED ST6 | 1995 | 54278806 | | UNITED ST7 | UNITED ST8 | 1995 | 52888980 | | UNITED ST6 | UNITED ST7 | 1995 | 47667954 | | UNITED ST4 | UNITED ST8 | 1995 | 46106472 | | UNITED ST4 | UNITED ST2 | 1995 | 45574006 | | UNITED ST3 | UNITED ST8 | 1995 | 45010478 | | UNITED ST9 | UNITED ST8 | 1995 | 42585054 | | UNITED ST8 | UNITED ST4 | 1995 | 38574622 | | UNITED ST8 | UNITED ST2 | 1995 | 36565980 | | UNITED ST9 | UNITED ST3 | 1995 | 35078204 | | UNITED ST3 | UNITED ST6 | 1995 | 33477060 | | UNITED ST0 | UNITED ST8 | 1995 | 32786498 | | UNITED ST5 | UNITED ST2 | 1995 | 29902046 | | UNITED ST2 | UNITED ST2 | 1995 | 26910062 | | UNITED ST5 | UNITED ST8 | 1995 | 26693864 | | UNITED ST3 | UNITED ST2 | 1995 | 25773658 | | UNITED ST9 | UNITED ST2 | 1995 | 25306724 | | UNITED ST0 | UNITED ST5 | 1995 | 22907418 | | UNITED ST6 | UNITED ST2 | 1995 | 22727102 | | UNITED ST8 | UNITED ST8 | 1995 | 22571734 | | UNITED ST1 | UNITED ST2 | 1995 | 15983352 | | UNITED ST0 | UNITED ST2 | 1995 | 9552920 | | UNITED ST7 | UNITED ST2 | 1995 | 7947130 | | UNITED ST6 | UNITED ST0 | 1996 | 264573526 | | UNITED ST4 | UNITED ST0 | 1996 | 213795126 | | UNITED ST5 | UNITED ST0 | 1996 | 209003958 | | UNITED ST0 | UNITED ST4 | 1996 | 206457498 | | UNITED ST9 | UNITED ST1 | 1996 | 203967654 | | UNITED ST1 | UNITED ST0 | 1996 | 189723108 | | UNITED ST0 | UNITED ST1 | 1996 | 183897554 | | UNITED ST6 | UNITED ST1 | 1996 | 179411740 | | UNITED ST2 | UNITED ST1 | 1996 | 176512310 | | UNITED ST1 | UNITED ST1 | 1996 | 174531696 | | UNITED ST4 | UNITED ST7 | 1996 | 167355628 | | UNITED ST6 | UNITED ST3 | 1996 | 164336458 | | UNITED ST2 | UNITED ST7 | 1996 | 160936954 | | UNITED ST8 | UNITED ST1 | 1996 | 157943512 | | UNITED ST7 | UNITED ST4 | 1996 | 155882022 | | UNITED ST1 | UNITED ST3 | 1996 | 155221810 | | UNITED ST9 | UNITED ST9 | 1996 | 154603480 | | UNITED ST0 | UNITED ST9 | 1996 | 151870418 | | UNITED ST7 | UNITED ST0 | 1996 | 151204890 | | UNITED ST3 | UNITED ST1 | 1996 | 149493398 | | UNITED ST7 | UNITED ST7 | 1996 | 148081288 | | UNITED ST4 | UNITED ST1 | 1996 | 145639734 | | UNITED ST5 | UNITED ST9 | 1996 | 145228228 | | UNITED ST1 | UNITED ST9 | 1996 | 139647538 | | UNITED ST9 | UNITED ST4 | 1996 | 139233228 | | UNITED ST6 | UNITED ST4 | 1996 | 138592010 | | UNITED ST2 | UNITED ST0 | 1996 | 134190244 | | UNITED ST5 | UNITED ST1 | 1996 | 130692778 | | UNITED ST6 | UNITED ST9 | 1996 | 126512364 | | UNITED ST4 | UNITED ST6 | 1996 | 124378656 | | UNITED ST0 | UNITED ST0 | 1996 | 123057710 | | UNITED ST8 | UNITED ST9 | 1996 | 120933382 | | UNITED ST3 | UNITED ST0 | 1996 | 120453680 | | UNITED ST8 | UNITED ST6 | 1996 | 119493310 | | UNITED ST2 | UNITED ST3 | 1996 | 119297196 | | UNITED ST0 | UNITED ST5 | 1996 | 115525790 | | UNITED ST8 | UNITED ST7 | 1996 | 115047850 | | UNITED ST2 | UNITED ST4 | 1996 | 114974114 | | UNITED ST6 | UNITED ST7 | 1996 | 114181238 | | UNITED ST3 | UNITED ST4 | 1996 | 109676518 | | UNITED ST4 | UNITED ST9 | 1996 | 108269680 | | UNITED ST1 | UNITED ST6 | 1996 | 108112732 | | UNITED ST3 | UNITED ST7 | 1996 | 107974436 | | UNITED ST2 | UNITED ST9 | 1996 | 106982830 | | UNITED ST4 | UNITED ST8 | 1996 | 106071324 | | UNITED ST9 | UNITED ST5 | 1996 | 105651844 | | UNITED ST7 | UNITED ST3 | 1996 | 104713772 | | UNITED ST6 | UNITED ST8 | 1996 | 104273568 | | UNITED ST1 | UNITED ST5 | 1996 | 102379298 | | UNITED ST8 | UNITED ST4 | 1996 | 102066108 | | UNITED ST1 | UNITED ST4 | 1996 | 100271094 | | UNITED ST3 | UNITED ST9 | 1996 | 99224608 | | UNITED ST9 | UNITED ST0 | 1996 | 99181402 | | UNITED ST3 | UNITED ST3 | 1996 | 98527592 | | UNITED ST9 | UNITED ST7 | 1996 | 97597518 | | UNITED ST7 | UNITED ST1 | 1996 | 97568350 | | UNITED ST9 | UNITED ST6 | 1996 | 97370126 | | UNITED ST2 | UNITED ST5 | 1996 | 94057952 | | UNITED ST9 | UNITED ST3 | 1996 | 94042036 | | UNITED ST2 | UNITED ST8 | 1996 | 93730226 | | UNITED ST4 | UNITED ST3 | 1996 | 92921880 | | UNITED ST6 | UNITED ST5 | 1996 | 92060208 | | UNITED ST2 | UNITED ST6 | 1996 | 90833298 | | UNITED ST8 | UNITED ST5 | 1996 | 86960946 | | UNITED ST5 | UNITED ST5 | 1996 | 86041444 | | UNITED ST6 | UNITED ST6 | 1996 | 85846064 | | UNITED ST4 | UNITED ST5 | 1996 | 85616824 | | UNITED ST3 | UNITED ST6 | 1996 | 83763256 | | UNITED ST1 | UNITED ST7 | 1996 | 83443012 | | UNITED ST5 | UNITED ST7 | 1996 | 81892660 | | UNITED ST8 | UNITED ST0 | 1996 | 79690854 | | UNITED ST8 | UNITED ST3 | 1996 | 79071880 | | UNITED ST1 | UNITED ST8 | 1996 | 78861764 | | UNITED ST5 | UNITED ST6 | 1996 | 76664088 | | UNITED ST0 | UNITED ST6 | 1996 | 74464124 | | UNITED ST7 | UNITED ST6 | 1996 | 73071256 | | UNITED ST9 | UNITED ST8 | 1996 | 72224602 | | UNITED ST3 | UNITED ST8 | 1996 | 67849464 | | UNITED ST3 | UNITED ST5 | 1996 | 67434878 | | UNITED ST5 | UNITED ST4 | 1996 | 66849718 | | UNITED ST5 | UNITED ST3 | 1996 | 65839852 | | UNITED ST4 | UNITED ST4 | 1996 | 65575990 | | UNITED ST7 | UNITED ST5 | 1996 | 65568448 | | UNITED ST5 | UNITED ST8 | 1996 | 64831364 | | UNITED ST0 | UNITED ST7 | 1996 | 62782362 | | UNITED ST0 | UNITED ST3 | 1996 | 59591330 | | UNITED ST7 | UNITED ST9 | 1996 | 50056182 | | UNITED ST7 | UNITED ST8 | 1996 | 48697702 | | UNITED ST6 | UNITED ST2 | 1996 | 40895694 | | UNITED ST8 | UNITED ST8 | 1996 | 32681206 | | UNITED ST0 | UNITED ST8 | 1996 | 30336524 | | UNITED ST4 | UNITED ST2 | 1996 | 24903734 | | UNITED ST1 | UNITED ST2 | 1996 | 20165072 | | UNITED ST5 | UNITED ST2 | 1996 | 17088466 | | UNITED ST7 | UNITED ST2 | 1996 | 16780940 | | UNITED ST9 | UNITED ST2 | 1996 | 16216070 | | UNITED ST8 | UNITED ST2 | 1996 | 14056668 | | UNITED ST0 | UNITED ST2 | 1996 | 13814398 | | UNITED ST3 | UNITED ST2 | 1996 | 8623600 | | UNITED ST5 | UNITED ST0 | 1997 | 242915532 | | UNITED ST0 | UNITED ST9 | 1997 | 239712536 | | UNITED ST5 | UNITED ST1 | 1997 | 213800322 | | UNITED ST9 | UNITED ST9 | 1997 | 212445590 | | UNITED ST5 | UNITED ST4 | 1997 | 206865854 | | UNITED ST7 | UNITED ST1 | 1997 | 202653880 | | UNITED ST5 | UNITED ST9 | 1997 | 194785280 | | UNITED ST8 | UNITED ST0 | 1997 | 178869690 | | UNITED ST1 | UNITED ST3 | 1997 | 170351276 | | UNITED ST4 | UNITED ST1 | 1997 | 169222376 | | UNITED ST4 | UNITED ST7 | 1997 | 169213992 | | UNITED ST1 | UNITED ST4 | 1997 | 166185138 | | UNITED ST0 | UNITED ST1 | 1997 | 160334278 | | UNITED ST4 | UNITED ST9 | 1997 | 159395854 | | UNITED ST1 | UNITED ST0 | 1997 | 155335732 | | UNITED ST2 | UNITED ST0 | 1997 | 155182940 | | UNITED ST1 | UNITED ST7 | 1997 | 154091444 | | UNITED ST2 | UNITED ST7 | 1997 | 152967604 | | UNITED ST1 | UNITED ST1 | 1997 | 152680888 | | UNITED ST0 | UNITED ST7 | 1997 | 145154980 | | UNITED ST4 | UNITED ST0 | 1997 | 139751608 | | UNITED ST6 | UNITED ST3 | 1997 | 139451012 | | UNITED ST2 | UNITED ST9 | 1997 | 139087968 | | UNITED ST7 | UNITED ST0 | 1997 | 138708624 | | UNITED ST9 | UNITED ST7 | 1997 | 138105260 | | UNITED ST8 | UNITED ST3 | 1997 | 133836788 | | UNITED ST0 | UNITED ST0 | 1997 | 132617032 | | UNITED ST9 | UNITED ST0 | 1997 | 132133582 | | UNITED ST2 | UNITED ST3 | 1997 | 130858906 | | UNITED ST2 | UNITED ST1 | 1997 | 130792270 | | UNITED ST4 | UNITED ST4 | 1997 | 125064692 | | UNITED ST9 | UNITED ST1 | 1997 | 124836812 | | UNITED ST3 | UNITED ST7 | 1997 | 122190600 | | UNITED ST7 | UNITED ST4 | 1997 | 120246988 | | UNITED ST4 | UNITED ST3 | 1997 | 119268306 | | UNITED ST3 | UNITED ST4 | 1997 | 116712282 | | UNITED ST6 | UNITED ST9 | 1997 | 116462526 | | UNITED ST6 | UNITED ST4 | 1997 | 114430044 | | UNITED ST2 | UNITED ST4 | 1997 | 114025222 | | UNITED ST5 | UNITED ST3 | 1997 | 113579864 | | UNITED ST9 | UNITED ST5 | 1997 | 112183840 | | UNITED ST6 | UNITED ST0 | 1997 | 111649838 | | UNITED ST6 | UNITED ST1 | 1997 | 110235418 | | UNITED ST7 | UNITED ST9 | 1997 | 110079940 | | UNITED ST5 | UNITED ST7 | 1997 | 109068630 | | UNITED ST3 | UNITED ST1 | 1997 | 108301366 | | UNITED ST3 | UNITED ST0 | 1997 | 108100344 | | UNITED ST3 | UNITED ST9 | 1997 | 102740616 | | UNITED ST1 | UNITED ST5 | 1997 | 102104220 | | UNITED ST6 | UNITED ST7 | 1997 | 99591698 | | UNITED ST5 | UNITED ST6 | 1997 | 98060032 | | UNITED ST1 | UNITED ST9 | 1997 | 97888222 | | UNITED ST3 | UNITED ST3 | 1997 | 96770466 | | UNITED ST0 | UNITED ST5 | 1997 | 95976836 | | UNITED ST2 | UNITED ST8 | 1997 | 92783818 | | UNITED ST4 | UNITED ST6 | 1997 | 92473698 | | UNITED ST9 | UNITED ST3 | 1997 | 92243448 | | UNITED ST8 | UNITED ST9 | 1997 | 91705592 | | UNITED ST7 | UNITED ST8 | 1997 | 90952532 | | UNITED ST8 | UNITED ST1 | 1997 | 86568278 | | UNITED ST7 | UNITED ST7 | 1997 | 85133206 | | UNITED ST0 | UNITED ST4 | 1997 | 82387606 | | UNITED ST8 | UNITED ST7 | 1997 | 81756858 | | UNITED ST8 | UNITED ST8 | 1997 | 81498800 | | UNITED ST2 | UNITED ST5 | 1997 | 81325772 | | UNITED ST0 | UNITED ST3 | 1997 | 80157016 | | UNITED ST6 | UNITED ST8 | 1997 | 75976890 | | UNITED ST9 | UNITED ST6 | 1997 | 75193764 | | UNITED ST6 | UNITED ST5 | 1997 | 75143576 | | UNITED ST2 | UNITED ST2 | 1997 | 74068666 | | UNITED ST7 | UNITED ST5 | 1997 | 73779472 | | UNITED ST8 | UNITED ST4 | 1997 | 73201168 | | UNITED ST3 | UNITED ST6 | 1997 | 72151688 | | UNITED ST7 | UNITED ST3 | 1997 | 70337844 | | UNITED ST2 | UNITED ST6 | 1997 | 68548934 | | UNITED ST5 | UNITED ST8 | 1997 | 65821892 | | UNITED ST3 | UNITED ST5 | 1997 | 65623926 | | UNITED ST4 | UNITED ST8 | 1997 | 65199472 | | UNITED ST5 | UNITED ST5 | 1997 | 65137776 | | UNITED ST4 | UNITED ST5 | 1997 | 63991736 | | UNITED ST9 | UNITED ST4 | 1997 | 63530956 | | UNITED ST7 | UNITED ST2 | 1997 | 62819180 | | UNITED ST9 | UNITED ST8 | 1997 | 62544770 | | UNITED ST0 | UNITED ST8 | 1997 | 60482740 | | UNITED ST3 | UNITED ST8 | 1997 | 58204440 | | UNITED ST7 | UNITED ST6 | 1997 | 55079862 | | UNITED ST8 | UNITED ST5 | 1997 | 53347486 | | UNITED ST6 | UNITED ST6 | 1997 | 49966582 | | UNITED ST0 | UNITED ST2 | 1997 | 47168458 | | UNITED ST0 | UNITED ST6 | 1997 | 45848092 | | UNITED ST1 | UNITED ST2 | 1997 | 41198260 | | UNITED ST8 | UNITED ST6 | 1997 | 40146000 | | UNITED ST1 | UNITED ST6 | 1997 | 36410652 | | UNITED ST1 | UNITED ST8 | 1997 | 30750516 | | UNITED ST6 | UNITED ST2 | 1997 | 29493360 | | UNITED ST5 | UNITED ST2 | 1997 | 27726876 | | UNITED ST8 | UNITED ST2 | 1997 | 24107412 | | UNITED ST3 | UNITED ST2 | 1997 | 15783756 | | UNITED ST4 | UNITED ST2 | 1997 | 5696314 | | UNITED ST9 | UNITED ST2 | 1997 | 5323304 | +------------+------------+------+------------+ --Q3.3 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED KI1 | UNITED KI1 | 1992 | 93471990 | | UNITED KI5 | UNITED KI1 | 1992 | 72554110 | | UNITED KI5 | UNITED KI5 | 1992 | 50710534 | | UNITED KI1 | UNITED KI5 | 1992 | 43835692 | | UNITED KI5 | UNITED KI1 | 1993 | 122035214 | | UNITED KI1 | UNITED KI1 | 1993 | 91339070 | | UNITED KI5 | UNITED KI5 | 1993 | 68198784 | | UNITED KI1 | UNITED KI5 | 1993 | 42888412 | | UNITED KI5 | UNITED KI1 | 1994 | 72564326 | | UNITED KI1 | UNITED KI1 | 1994 | 69736882 | | UNITED KI5 | UNITED KI5 | 1994 | 69014568 | | UNITED KI1 | UNITED KI5 | 1994 | 42443560 | | UNITED KI5 | UNITED KI1 | 1995 | 165911792 | | UNITED KI1 | UNITED KI1 | 1995 | 71762372 | | UNITED KI5 | UNITED KI5 | 1995 | 41079610 | | UNITED KI1 | UNITED KI5 | 1995 | 34353020 | | UNITED KI5 | UNITED KI1 | 1996 | 131534098 | | UNITED KI1 | UNITED KI1 | 1996 | 119846074 | | UNITED KI5 | UNITED KI5 | 1996 | 92154684 | | UNITED KI1 | UNITED KI5 | 1996 | 27400508 | | UNITED KI1 | UNITED KI1 | 1997 | 140686266 | | UNITED KI5 | UNITED KI1 | 1997 | 129956718 | | UNITED KI5 | UNITED KI5 | 1997 | 54664054 | | UNITED KI1 | UNITED KI5 | 1997 | 32821336 | +------------+------------+------+------------+ --Q3.4 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED KI5 | UNITED KI1 | 1997 | 18235692 | | UNITED KI5 | UNITED KI5 | 1997 | 12407602 | | UNITED KI1 | UNITED KI5 | 1997 | 3740140 | +------------+------------+------+------------+ --Q4.1 +------+---------------+-------------+ | year | c_nation | profit | +------+---------------+-------------+ | 1992 | ARGENTINA | 19317928938 | | 1992 | BRAZIL | 18453966110 | | 1992 | CANADA | 19286353574 | | 1992 | PERU | 18821353194 | | 1992 | UNITED STATES | 19698855306 | | 1993 | ARGENTINA | 19952665706 | | 1993 | BRAZIL | 18937598458 | | 1993 | CANADA | 19794604840 | | 1993 | PERU | 18618891672 | | 1993 | UNITED STATES | 20007970172 | | 1994 | ARGENTINA | 19880610430 | | 1994 | BRAZIL | 18697303354 | | 1994 | CANADA | 19165295192 | | 1994 | PERU | 18590530026 | | 1994 | UNITED STATES | 19039760850 | | 1995 | ARGENTINA | 20287682760 | | 1995 | BRAZIL | 18312154700 | | 1995 | CANADA | 19125224320 | | 1995 | PERU | 19556174422 | | 1995 | UNITED STATES | 18621130488 | | 1996 | ARGENTINA | 20003855790 | | 1996 | BRAZIL | 18336970302 | | 1996 | CANADA | 20123208406 | | 1996 | PERU | 18710271348 | | 1996 | UNITED STATES | 19539424348 | | 1997 | ARGENTINA | 19709120522 | | 1997 | BRAZIL | 18243142094 | | 1997 | CANADA | 20194743556 | | 1997 | PERU | 18631051834 | | 1997 | UNITED STATES | 21013447758 | | 1998 | ARGENTINA | 11668480814 | | 1998 | BRAZIL | 10712796190 | | 1998 | CANADA | 10846422392 | | 1998 | PERU | 11452371940 | | 1998 | UNITED STATES | 12018924038 | +------+---------------+-------------+ --Q4.2 +------+---------------+------------+------------+ | year | s_nation | p_category | profit | +------+---------------+------------+------------+ | 1997 | ARGENTINA | MFGR#11 | 1814143132 | | 1997 | ARGENTINA | MFGR#12 | 1848231124 | | 1997 | ARGENTINA | MFGR#13 | 1945723642 | | 1997 | ARGENTINA | MFGR#14 | 1950820690 | | 1997 | ARGENTINA | MFGR#15 | 1877734750 | | 1997 | ARGENTINA | MFGR#21 | 2029565148 | | 1997 | ARGENTINA | MFGR#22 | 1746033566 | | 1997 | ARGENTINA | MFGR#23 | 2060714604 | | 1997 | ARGENTINA | MFGR#24 | 1786921158 | | 1997 | ARGENTINA | MFGR#25 | 2012622806 | | 1997 | BRAZIL | MFGR#11 | 2146438656 | | 1997 | BRAZIL | MFGR#12 | 1979717666 | | 1997 | BRAZIL | MFGR#13 | 2256960758 | | 1997 | BRAZIL | MFGR#14 | 2388513444 | | 1997 | BRAZIL | MFGR#15 | 2188838248 | | 1997 | BRAZIL | MFGR#21 | 1820053664 | | 1997 | BRAZIL | MFGR#22 | 1986284096 | | 1997 | BRAZIL | MFGR#23 | 2215345748 | | 1997 | BRAZIL | MFGR#24 | 2116027298 | | 1997 | BRAZIL | MFGR#25 | 1989467528 | | 1997 | CANADA | MFGR#11 | 1709450040 | | 1997 | CANADA | MFGR#12 | 1877436328 | | 1997 | CANADA | MFGR#13 | 1918531780 | | 1997 | CANADA | MFGR#14 | 2005624900 | | 1997 | CANADA | MFGR#15 | 1696366026 | | 1997 | CANADA | MFGR#21 | 1999610544 | | 1997 | CANADA | MFGR#22 | 1556839526 | | 1997 | CANADA | MFGR#23 | 1856719290 | | 1997 | CANADA | MFGR#24 | 1699790256 | | 1997 | CANADA | MFGR#25 | 1809175930 | | 1997 | PERU | MFGR#11 | 2200485754 | | 1997 | PERU | MFGR#12 | 1988730700 | | 1997 | PERU | MFGR#13 | 1694972210 | | 1997 | PERU | MFGR#14 | 1895539366 | | 1997 | PERU | MFGR#15 | 1998791356 | | 1997 | PERU | MFGR#21 | 1735846788 | | 1997 | PERU | MFGR#22 | 1977494918 | | 1997 | PERU | MFGR#23 | 2133290172 | | 1997 | PERU | MFGR#24 | 1871331450 | | 1997 | PERU | MFGR#25 | 1962908258 | | 1997 | UNITED STATES | MFGR#11 | 2093412096 | | 1997 | UNITED STATES | MFGR#12 | 1818427418 | | 1997 | UNITED STATES | MFGR#13 | 2192557812 | | 1997 | UNITED STATES | MFGR#14 | 1868564222 | | 1997 | UNITED STATES | MFGR#15 | 1925521686 | | 1997 | UNITED STATES | MFGR#21 | 2001352948 | | 1997 | UNITED STATES | MFGR#22 | 2153895230 | | 1997 | UNITED STATES | MFGR#23 | 1874576204 | | 1997 | UNITED STATES | MFGR#24 | 2006772726 | | 1997 | UNITED STATES | MFGR#25 | 2107332104 | | 1998 | ARGENTINA | MFGR#11 | 1135224454 | | 1998 | ARGENTINA | MFGR#12 | 1054050084 | | 1998 | ARGENTINA | MFGR#13 | 1165583584 | | 1998 | ARGENTINA | MFGR#14 | 1047452736 | | 1998 | ARGENTINA | MFGR#15 | 1044156534 | | 1998 | ARGENTINA | MFGR#21 | 1009425370 | | 1998 | ARGENTINA | MFGR#22 | 1012123472 | | 1998 | ARGENTINA | MFGR#23 | 1120959602 | | 1998 | ARGENTINA | MFGR#24 | 1049158236 | | 1998 | ARGENTINA | MFGR#25 | 1095680422 | | 1998 | BRAZIL | MFGR#11 | 1277156976 | | 1998 | BRAZIL | MFGR#12 | 1292625362 | | 1998 | BRAZIL | MFGR#13 | 1310323544 | | 1998 | BRAZIL | MFGR#14 | 1105352340 | | 1998 | BRAZIL | MFGR#15 | 1327625418 | | 1998 | BRAZIL | MFGR#21 | 1337644896 | | 1998 | BRAZIL | MFGR#22 | 1183583836 | | 1998 | BRAZIL | MFGR#23 | 1381297754 | | 1998 | BRAZIL | MFGR#24 | 1124724440 | | 1998 | BRAZIL | MFGR#25 | 1408364752 | | 1998 | CANADA | MFGR#11 | 1018172250 | | 1998 | CANADA | MFGR#12 | 976179544 | | 1998 | CANADA | MFGR#13 | 973066594 | | 1998 | CANADA | MFGR#14 | 1055674454 | | 1998 | CANADA | MFGR#15 | 1071738598 | | 1998 | CANADA | MFGR#21 | 911737302 | | 1998 | CANADA | MFGR#22 | 1188554616 | | 1998 | CANADA | MFGR#23 | 1148250140 | | 1998 | CANADA | MFGR#24 | 1017060848 | | 1998 | CANADA | MFGR#25 | 1095515984 | | 1998 | PERU | MFGR#11 | 1135677094 | | 1998 | PERU | MFGR#12 | 1081089514 | | 1998 | PERU | MFGR#13 | 1182663766 | | 1998 | PERU | MFGR#14 | 962670128 | | 1998 | PERU | MFGR#15 | 1140492276 | | 1998 | PERU | MFGR#21 | 1067466660 | | 1998 | PERU | MFGR#22 | 1055581312 | | 1998 | PERU | MFGR#23 | 1272786442 | | 1998 | PERU | MFGR#24 | 1178150524 | | 1998 | PERU | MFGR#25 | 1086502230 | | 1998 | UNITED STATES | MFGR#11 | 1112552464 | | 1998 | UNITED STATES | MFGR#12 | 1224771964 | | 1998 | UNITED STATES | MFGR#13 | 1244827854 | | 1998 | UNITED STATES | MFGR#14 | 1110013774 | | 1998 | UNITED STATES | MFGR#15 | 1050239138 | | 1998 | UNITED STATES | MFGR#21 | 1126813672 | | 1998 | UNITED STATES | MFGR#22 | 1160957470 | | 1998 | UNITED STATES | MFGR#23 | 1312160930 | | 1998 | UNITED STATES | MFGR#24 | 1076890116 | | 1998 | UNITED STATES | MFGR#25 | 1178223904 | +------+---------------+------------+------------+ --Q4.3 +------+------------+-----------+----------+-------------+----------+------------+ | year | s_city | p_brand | profit | c_region | s_nation | p_category | +------+------------+-----------+----------+-------------+----------+------------+ | 1997 | ALGERIA 0 | MFGR#111 | 1845848 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#111 | 10847138 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1110 | 6035219 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1110 | 432257 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 2107179 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 4071438 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 3057167 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1112 | 2311386 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1112 | 948054 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 1602699 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 1829091 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 3219216 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1114 | 4755426 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1114 | 5240408 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1115 | 4338301 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1115 | 6297251 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 4030507 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 1375765 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 7716780 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1117 | 7095003 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1117 | 4806253 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 3020204 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 3898889 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 636154 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#112 | 6913968 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#112 | 4635551 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1120 | 3789881 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1120 | 5375347 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 2962488 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 546333 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 12922204 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1122 | 9912733 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1122 | 5158697 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1123 | 3024512 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1123 | 2393758 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1124 | 2049203 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1125 | 10168898 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1125 | 3169896 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 364696 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 3089145 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 695856 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1127 | 6379893 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 356710 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 4804429 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 10020597 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1129 | 4396845 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1129 | 577228 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#113 | 6419788 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1130 | 3840822 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1130 | 6045720 | MIDDLE EAST | ALGERIA | MFGR#11 | +------+------------+-----------+----------+-------------+----------+------------+","title":"SSB Test with MatrixOne"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#complete-a-ssb-test-with-matrixone","text":"The Star Schema Benchmark\uff08SSB\uff09Test is a popular scenario for OLAP database performance test. By going through this tutorial, you\u2019ll learn how to complete a SSB Test with MatrixOne.","title":"Complete a SSB Test with MatrixOne"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#before-you-start","text":"Make sure you have already installed MatrixOne and connected to MatrixOne Server .","title":"Before you start"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#1-compile-dbgen","text":"git clone git@github.com:vadimtk/ssb-dbgen.git cd ssb-dbgen make Note Compile dbgen on a PC with M1 chip. See Deployment FAQs .","title":"1. Compile dbgen"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#2-generate-data","text":"","title":"2. Generate data"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#option-1-generate-the-single-table-dataset","text":"With -s 1 dbgen generates 6 million rows (670MB), while while -s 10 it generates 60 million rows (which takes some time) ./dbgen -s 1 -T c ./dbgen -s 1 -T l ./dbgen -s 1 -T p ./dbgen -s 1 -T s ./dbgen -s 1 -T d","title":"Option 1: Generate the single table dataset"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#option-2-download-the-large-wide-table-dataset","text":"We have also prepared a 1GB large wide table dataset for downloading. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/lineorder_flat.tar.bz2","title":"Option 2: Download the large wide table dataset"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#3-create-tables-in-matrixone","text":"create database if not exists ssb; use ssb; drop table if exists lineorder; drop table if exists part; drop table if exists supplier; drop table if exists customer; drop table if exists dates; drop table if exists lineorder_flat; create table lineorder ( lo_orderkey bigint, lo_linenumber int, lo_custkey int, lo_partkey int, lo_suppkey int, lo_orderdate date, lo_orderpriority char (15), lo_shippriority tinyint, lo_quantity double, lo_extendedprice double, lo_ordtotalprice double, lo_discount double, lo_revenue double, lo_supplycost double, lo_tax double, lo_commitdate date, lo_shipmode char (10) ) ; create table part ( p_partkey int, p_name varchar (22), p_mfgr char (6), p_category char (7), p_brand char (9), p_color varchar (11), p_type varchar (25), p_size int, p_container char (10) ) ; create table supplier ( s_suppkey int, s_name char (25), s_address varchar (25), s_city char (10), s_nation char (15), s_region char (12), s_phone char (15) ) ; create table customer ( c_custkey int, c_name varchar (25), c_address varchar (25), c_city char (10), c_nation char (15), c_region char (12), c_phone char (15), c_mktsegment char (10) ) ; create table dates ( d_datekey date, d_date char (18), d_dayofweek char (9), d_month char (9), d_yearmonthnum int, d_yearmonth char (7), d_daynuminweek varchar(12), d_daynuminmonth int, d_daynuminyear int, d_monthnuminyear int, d_weeknuminyear int, d_sellingseason varchar (12), d_lastdayinweekfl varchar (1), d_lastdayinmonthfl varchar (1), d_holidayfl varchar (1), d_weekdayfl varchar (1) ) ; CREATE TABLE lineorder_flat( LO_ORDERKEY bigint key, LO_LINENUMBER int, LO_CUSTKEY int, LO_PARTKEY int, LO_SUPPKEY int, LO_ORDERDATE date, LO_ORDERPRIORITY char(15), LO_SHIPPRIORITY tinyint, LO_QUANTITY double, LO_EXTENDEDPRICE double, LO_ORDTOTALPRICE double, LO_DISCOUNT double, LO_REVENUE int unsigned, LO_SUPPLYCOST int unsigned, LO_TAX double, LO_COMMITDATE date, LO_SHIPMODE char(10), C_NAME varchar(25), C_ADDRESS varchar(25), C_CITY char(10), C_NATION char(15), C_REGION char(12), C_PHONE char(15), C_MKTSEGMENT char(10), S_NAME char(25), S_ADDRESS varchar(25), S_CITY char(10), S_NATION char(15), S_REGION char(12), S_PHONE char(15), P_NAME varchar(22), P_MFGR char(6), P_CATEGORY char(7), P_BRAND char(9), P_COLOR varchar(11), P_TYPE varchar(25), P_SIZE int, P_CONTAINER char(10) );","title":"3. Create tables in MatrixOne"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#4-load-data-into-the-created-tables","text":"","title":"4. Load data into the created tables"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#option-1-load-the-sigle-table-dataset-into-related-tables-with-this-command-in-matrixone","text":"load data infile '/ssb-dbgen-path/supplier.tbl' into table supplier FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/customer.tbl' into table customer FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/date.tbl' into table dates FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/part.tbl' into table part FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/ssb-dbgen-path/lineorder.tbl' into table lineorder FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table.","title":"Option 1: Load the sigle table dataset into related tables with this command in MatrixOne"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#option-2-load-the-large-wide-table-dataset-into-the-lineorder_flat","text":"load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n';","title":"Option 2: Load the large wide table dataset into the lineorder_flat"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#5-run-ssb-queries","text":"Note GROUP BY does not support using the alias name for now\u3002","title":"5. Run SSB Queries"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#flat-table-queries","text":"--Q1.1 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1993 AND LO_DISCOUNT BETWEEN 1 AND 3 AND LO_QUANTITY < 25 ; --Q1.2 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1994 AND LO_DISCOUNT BETWEEN 4 AND 6 AND LO_QUANTITY BETWEEN 26 AND 35 ; --Q1.3 SELECT sum ( LO_EXTENDEDPRICE * LO_DISCOUNT ) AS revenue FROM lineorder_flat WHERE year ( LO_ORDERDATE ) = 1994 AND LO_DISCOUNT BETWEEN 5 AND 7 AND LO_QUANTITY BETWEEN 26 AND 35 ; --Q2.1 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_CATEGORY = 'MFGR#12' AND S_REGION = 'AMERICA' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q2.2 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_BRAND BETWEEN 'MFGR#2221' AND 'MFGR#2228' AND S_REGION = 'ASIA' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q2.3 SELECT sum ( LO_REVENUE ), year ( LO_ORDERDATE ) AS year , P_BRAND FROM lineorder_flat WHERE P_BRAND = 'MFGR#2239' AND S_REGION = 'EUROPE' GROUP BY year ( LO_ORDERDATE ), P_BRAND ORDER BY year , P_BRAND ; --Q3.1 SELECT C_NATION , S_NATION , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE C_REGION = 'ASIA' AND S_REGION = 'ASIA' AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_NATION , S_NATION , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.2 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE C_NATION = 'CHINA' AND S_NATION = 'CHINA' AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.3 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE ( C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7' ) AND ( S_CITY = 'UNITED KI0' OR S_CITY = 'UNITED KI7' ) AND year ( LO_ORDERDATE ) between 1992 AND 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q3.4 SELECT C_CITY , S_CITY , year ( LO_ORDERDATE ) AS year , sum ( LO_REVENUE ) AS revenue FROM lineorder_flat WHERE ( C_CITY = 'UNITED KI0' OR C_CITY = 'UNITED KI7' ) AND ( S_CITY = 'MOZAMBIQU1' OR S_CITY = 'KENYA 4' ) AND year ( LO_ORDERDATE ) = 1997 GROUP BY C_CITY , S_CITY , year ( LO_ORDERDATE ) ORDER BY year asc , revenue desc ; --Q4.1 SELECT year ( LO_ORDERDATE ) AS year , C_NATION , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND ( P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2' ) GROUP BY year ( LO_ORDERDATE ), C_NATION ORDER BY year , C_NATION ; --Q4.2 SELECT year ( LO_ORDERDATE ) AS year , S_NATION , P_CATEGORY , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE C_REGION = 'AMERICA' AND S_REGION = 'AMERICA' AND ( year ( LO_ORDERDATE ) = 1997 OR year ( LO_ORDERDATE ) = 1998 ) AND ( P_MFGR = 'MFGR#1' OR P_MFGR = 'MFGR#2' ) GROUP BY year ( LO_ORDERDATE ), S_NATION , P_CATEGORY ORDER BY year , S_NATION , P_CATEGORY ; --Q4.3 SELECT year ( LO_ORDERDATE ) AS year , S_CITY , P_BRAND , sum ( LO_REVENUE - LO_SUPPLYCOST ) AS profit FROM lineorder_flat WHERE S_NATION = 'UNITED STATES' AND ( year ( LO_ORDERDATE ) = 1997 OR year ( LO_ORDERDATE ) = 1998 ) AND P_CATEGORY = 'MFGR#14' GROUP BY year ( LO_ORDERDATE ), S_CITY , P_BRAND ORDER BY year , S_CITY , P_BRAND ;","title":"Flat table queries"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#multiple-tables-queries","text":"--Q1.1 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where year ( d_datekey ) = 1993 and lo_discount between 1 and 3 and lo_quantity < 25 ; --Q1.2 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where d_yearmonthnum = 199401 and lo_discount between 4 and 6 and lo_quantity between 26 and 35 ; --Q1.3 select sum ( lo_revenue ) as revenue from lineorder join dates on lo_orderdate = d_datekey where d_weeknuminyear = 6 and year ( d_datekey ) = 1994 and lo_discount between 5 and 7 and lo_quantity between 26 and 35 ; --Q2.1 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_category = 'MFGR#12' and s_region = 'AMERICA' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q2.2 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_brand between 'MFGR#2221' and 'MFGR#2228' and s_region = 'ASIA' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q2.3 select sum ( lo_revenue ) as lo_revenue , year ( d_datekey ) as year , p_brand from lineorder join dates on lo_orderdate = d_datekey join part on lo_partkey = p_partkey join supplier on lo_suppkey = s_suppkey where p_brand = 'MFGR#2239' and s_region = 'EUROPE' group by year ( d_datekey ), p_brand order by year , p_brand ; --Q3.1 select c_nation , s_nation , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where c_region = 'ASIA' and s_region = 'ASIA' and year ( d_datekey ) between 1992 and 1997 group by c_nation , s_nation , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.2 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where c_nation = 'UNITED STATES' and s_nation = 'UNITED STATES' and year ( d_datekey ) between 1992 and 1997 group by c_city , s_city , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.3 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where ( c_city = 'UNITED KI1' or c_city = 'UNITED KI5' ) and ( s_city = 'UNITED KI1' or s_city = 'UNITED KI5' ) and year ( d_datekey ) between 1992 and 1997 group by c_city , s_city , year ( d_datekey ) order by year asc , lo_revenue desc ; --Q3.4 select c_city , s_city , year ( d_datekey ) as year , sum ( lo_revenue ) as lo_revenue from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey where ( c_city = 'UNITED KI1' or c_city = 'UNITED KI5' ) and ( s_city = 'UNITED KI1' or s_city = 'UNITED KI5' ) and d_yearmonth = '199712' group by c_city , s_city , year ( d_datekey ) order by year ( d_datekey ) asc , lo_revenue desc ; --Q4.1 select year ( d_datekey ) as year , c_nation , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where c_region = 'AMERICA' and s_region = 'AMERICA' and ( p_mfgr = 'MFGR#1' or p_mfgr = 'MFGR#2' ) group by year ( d_datekey ), c_nation order by year , c_nation ; --Q4.2 select year ( d_datekey ) as year , s_nation , p_category , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where c_region = 'AMERICA' and s_region = 'AMERICA' and ( year ( d_datekey ) = 1997 or year ( d_datekey ) = 1998 ) and ( p_mfgr = 'MFGR#1' or p_mfgr = 'MFGR#2' ) group by year ( d_datekey ), s_nation , p_category order by year , s_nation , p_category ; --Q4.3 select year ( d_datekey ) as year , s_city , p_brand , sum ( lo_revenue ) - sum ( lo_supplycost ) as profit , c_region , s_nation , p_category from lineorder join dates on lo_orderdate = d_datekey join customer on lo_custkey = c_custkey join supplier on lo_suppkey = s_suppkey join part on lo_partkey = p_partkey where ( year ( d_datekey ) = 1997 or year ( d_datekey ) = 1998 ) and s_nation = 'ALGERIA' group by year ( d_datekey ), s_city , p_brand , c_region , s_nation , p_category order by year , s_city , p_brand ;","title":"Multiple tables queries"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#6-expected-results","text":"","title":"6. Expected Results"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#flat-table-queries-expected-results","text":"--Q1.1 +--------------+ | revenue | +--------------+ | 702223464659 | +--------------+ --Q1.2 +---------------+ | revenue | +---------------+ | 1842875090496 | +---------------+ --Q1.3 +---------------+ | revenue | +---------------+ | 2208738861324 | +---------------+ --Q2.1 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 283684289 | 1992 | MFGR#121 | | 1344702529 | 1992 | MFGR#1210 | | 757158682 | 1992 | MFGR#1211 | | 1156022815 | 1992 | MFGR#1212 | | 676164367 | 1992 | MFGR#1213 | | 522779256 | 1992 | MFGR#1214 | | 233507213 | 1992 | MFGR#1215 | | 726755819 | 1992 | MFGR#1216 | | 1865504710 | 1992 | MFGR#1217 | | 685600451 | 1992 | MFGR#1218 | | 814671470 | 1992 | MFGR#1219 | | 655405800 | 1992 | MFGR#122 | | 962120553 | 1992 | MFGR#1220 | | 961393626 | 1992 | MFGR#1221 | | 922110830 | 1992 | MFGR#1222 | | 814842712 | 1992 | MFGR#1223 | | 1402773165 | 1992 | MFGR#1224 | | 977517439 | 1992 | MFGR#1225 | | 1392114944 | 1992 | MFGR#1226 | | 658922951 | 1992 | MFGR#1227 | | 892495927 | 1992 | MFGR#1228 | | 806609100 | 1992 | MFGR#1229 | | 578875657 | 1992 | MFGR#123 | | 691236902 | 1992 | MFGR#1230 | | 482715249 | 1992 | MFGR#1231 | | 618556590 | 1992 | MFGR#1232 | | 981657009 | 1992 | MFGR#1233 | | 1050794669 | 1992 | MFGR#1234 | | 1335217991 | 1992 | MFGR#1235 | | 686009527 | 1992 | MFGR#1236 | | 605242584 | 1992 | MFGR#1237 | | 430455641 | 1992 | MFGR#1238 | | 359654993 | 1992 | MFGR#1239 | | 818818457 | 1992 | MFGR#124 | | 1388502581 | 1992 | MFGR#1240 | | 711566198 | 1992 | MFGR#125 | | 893045647 | 1992 | MFGR#126 | | 1240534333 | 1992 | MFGR#127 | | 871966127 | 1992 | MFGR#128 | | 719176622 | 1992 | MFGR#129 | | 245880758 | 1993 | MFGR#121 | | 1480662753 | 1993 | MFGR#1210 | | 982292725 | 1993 | MFGR#1211 | | 1001136766 | 1993 | MFGR#1212 | | 227144072 | 1993 | MFGR#1213 | | 291611370 | 1993 | MFGR#1214 | | 454576668 | 1993 | MFGR#1215 | | 772027256 | 1993 | MFGR#1216 | | 1155751851 | 1993 | MFGR#1217 | | 897883050 | 1993 | MFGR#1218 | | 1209508962 | 1993 | MFGR#1219 | | 530577973 | 1993 | MFGR#122 | | 901650471 | 1993 | MFGR#1220 | | 739540494 | 1993 | MFGR#1221 | | 698751459 | 1993 | MFGR#1222 | | 1327979157 | 1993 | MFGR#1223 | | 1476697469 | 1993 | MFGR#1224 | | 792103134 | 1993 | MFGR#1225 | | 1420277376 | 1993 | MFGR#1226 | | 1446032835 | 1993 | MFGR#1227 | | 884375309 | 1993 | MFGR#1228 | | 522705868 | 1993 | MFGR#1229 | | 601685233 | 1993 | MFGR#123 | | 806727248 | 1993 | MFGR#1230 | | 399477390 | 1993 | MFGR#1231 | | 894047578 | 1993 | MFGR#1232 | | 496067089 | 1993 | MFGR#1233 | | 1050223756 | 1993 | MFGR#1234 | | 891681399 | 1993 | MFGR#1235 | | 1402903631 | 1993 | MFGR#1236 | | 347380448 | 1993 | MFGR#1237 | | 514853194 | 1993 | MFGR#1238 | | 410543863 | 1993 | MFGR#1239 | | 673483594 | 1993 | MFGR#124 | | 713343630 | 1993 | MFGR#1240 | | 512610707 | 1993 | MFGR#125 | | 1228110634 | 1993 | MFGR#126 | | 936958961 | 1993 | MFGR#127 | | 579067515 | 1993 | MFGR#128 | | 636174833 | 1993 | MFGR#129 | | 370347074 | 1994 | MFGR#121 | | 483900410 | 1994 | MFGR#1210 | | 1240306281 | 1994 | MFGR#1211 | | 1003345253 | 1994 | MFGR#1212 | | 557310864 | 1994 | MFGR#1213 | | 314972328 | 1994 | MFGR#1214 | | 1130260810 | 1994 | MFGR#1215 | | 401618319 | 1994 | MFGR#1216 | | 652173601 | 1994 | MFGR#1217 | | 923612074 | 1994 | MFGR#1218 | | 469711377 | 1994 | MFGR#1219 | | 580152115 | 1994 | MFGR#122 | | 433134653 | 1994 | MFGR#1220 | | 730569849 | 1994 | MFGR#1221 | | 607609104 | 1994 | MFGR#1222 | | 949877669 | 1994 | MFGR#1223 | | 1644687916 | 1994 | MFGR#1224 | | 492974194 | 1994 | MFGR#1225 | | 921499688 | 1994 | MFGR#1226 | | 719059761 | 1994 | MFGR#1227 | | 1000497056 | 1994 | MFGR#1228 | | 486968927 | 1994 | MFGR#1229 | | 734124906 | 1994 | MFGR#123 | | 645016873 | 1994 | MFGR#1230 | | 526638240 | 1994 | MFGR#1231 | | 1358112405 | 1994 | MFGR#1232 | | 1167074905 | 1994 | MFGR#1233 | | 1102915239 | 1994 | MFGR#1234 | | 693058125 | 1994 | MFGR#1235 | | 1673392892 | 1994 | MFGR#1236 | | 849630029 | 1994 | MFGR#1237 | | 721392705 | 1994 | MFGR#1238 | | 1237195774 | 1994 | MFGR#1239 | | 1107832795 | 1994 | MFGR#124 | | 827906290 | 1994 | MFGR#1240 | | 682827304 | 1994 | MFGR#125 | | 1198768141 | 1994 | MFGR#126 | | 1274148181 | 1994 | MFGR#127 | | 738849138 | 1994 | MFGR#128 | | 751136619 | 1994 | MFGR#129 | | 318978803 | 1995 | MFGR#121 | | 383199448 | 1995 | MFGR#1210 | | 1300165814 | 1995 | MFGR#1211 | | 1550400731 | 1995 | MFGR#1212 | | 451958158 | 1995 | MFGR#1213 | | 431434279 | 1995 | MFGR#1214 | | 713735582 | 1995 | MFGR#1215 | | 919323722 | 1995 | MFGR#1216 | | 1542358864 | 1995 | MFGR#1217 | | 500930092 | 1995 | MFGR#1218 | | 1208162086 | 1995 | MFGR#1219 | | 785707989 | 1995 | MFGR#122 | | 993828211 | 1995 | MFGR#1220 | | 667253893 | 1995 | MFGR#1221 | | 1654114297 | 1995 | MFGR#1222 | | 986528377 | 1995 | MFGR#1223 | | 755014642 | 1995 | MFGR#1224 | | 1090300100 | 1995 | MFGR#1225 | | 1063626454 | 1995 | MFGR#1226 | | 1382528859 | 1995 | MFGR#1227 | | 919953351 | 1995 | MFGR#1228 | | 457795295 | 1995 | MFGR#1229 | | 953851827 | 1995 | MFGR#123 | | 807209283 | 1995 | MFGR#1230 | | 236304454 | 1995 | MFGR#1231 | | 668449537 | 1995 | MFGR#1232 | | 240657083 | 1995 | MFGR#1233 | | 920389826 | 1995 | MFGR#1234 | | 684096065 | 1995 | MFGR#1235 | | 1005844219 | 1995 | MFGR#1236 | | 626170996 | 1995 | MFGR#1237 | | 984581826 | 1995 | MFGR#1238 | | 602850634 | 1995 | MFGR#1239 | | 1172025628 | 1995 | MFGR#124 | | 489788581 | 1995 | MFGR#1240 | | 643100327 | 1995 | MFGR#125 | | 894596661 | 1995 | MFGR#126 | | 706917239 | 1995 | MFGR#127 | | 428671983 | 1995 | MFGR#128 | | 971611472 | 1995 | MFGR#129 | | 306497573 | 1996 | MFGR#121 | | 890719726 | 1996 | MFGR#1210 | | 1761977172 | 1996 | MFGR#1211 | | 633845765 | 1996 | MFGR#1212 | | 475801202 | 1996 | MFGR#1213 | | 271930385 | 1996 | MFGR#1214 | | 366399844 | 1996 | MFGR#1215 | | 877472476 | 1996 | MFGR#1216 | | 970366290 | 1996 | MFGR#1217 | | 537175690 | 1996 | MFGR#1218 | | 956970528 | 1996 | MFGR#1219 | | 711962074 | 1996 | MFGR#122 | | 1062161683 | 1996 | MFGR#1220 | | 406293744 | 1996 | MFGR#1221 | | 785404335 | 1996 | MFGR#1222 | | 579267044 | 1996 | MFGR#1223 | | 1220640256 | 1996 | MFGR#1224 | | 490130196 | 1996 | MFGR#1225 | | 1603805636 | 1996 | MFGR#1226 | | 1530646510 | 1996 | MFGR#1227 | | 1093328922 | 1996 | MFGR#1228 | | 596520140 | 1996 | MFGR#1229 | | 450815571 | 1996 | MFGR#123 | | 315053350 | 1996 | MFGR#1230 | | 198951017 | 1996 | MFGR#1231 | | 579778438 | 1996 | MFGR#1232 | | 480905486 | 1996 | MFGR#1233 | | 1433336215 | 1996 | MFGR#1234 | | 560925251 | 1996 | MFGR#1235 | | 1038766181 | 1996 | MFGR#1236 | | 783697960 | 1996 | MFGR#1237 | | 972656445 | 1996 | MFGR#1238 | | 614528801 | 1996 | MFGR#1239 | | 1418931894 | 1996 | MFGR#124 | | 995139591 | 1996 | MFGR#1240 | | 824028471 | 1996 | MFGR#125 | | 669475113 | 1996 | MFGR#126 | | 831704651 | 1996 | MFGR#127 | | 920514555 | 1996 | MFGR#128 | | 436162421 | 1996 | MFGR#129 | | 553684594 | 1997 | MFGR#121 | | 1317368046 | 1997 | MFGR#1210 | | 1617056983 | 1997 | MFGR#1211 | | 1196031005 | 1997 | MFGR#1212 | | 1056458336 | 1997 | MFGR#1213 | | 352179650 | 1997 | MFGR#1214 | | 511058114 | 1997 | MFGR#1215 | | 658259312 | 1997 | MFGR#1216 | | 1238450697 | 1997 | MFGR#1217 | | 376245955 | 1997 | MFGR#1218 | | 913437812 | 1997 | MFGR#1219 | | 1114996000 | 1997 | MFGR#122 | | 814059433 | 1997 | MFGR#1220 | | 817328516 | 1997 | MFGR#1221 | | 541428597 | 1997 | MFGR#1222 | | 1260539052 | 1997 | MFGR#1223 | | 1766426582 | 1997 | MFGR#1224 | | 1221271245 | 1997 | MFGR#1225 | | 1499152922 | 1997 | MFGR#1226 | | 491586909 | 1997 | MFGR#1227 | | 911517084 | 1997 | MFGR#1228 | | 728186585 | 1997 | MFGR#1229 | | 904363416 | 1997 | MFGR#123 | | 605369014 | 1997 | MFGR#1230 | | 290370455 | 1997 | MFGR#1231 | | 602414397 | 1997 | MFGR#1232 | | 765339065 | 1997 | MFGR#1233 | | 1170973957 | 1997 | MFGR#1234 | | 860319765 | 1997 | MFGR#1235 | | 1031080311 | 1997 | MFGR#1236 | | 736404810 | 1997 | MFGR#1237 | | 1012330790 | 1997 | MFGR#1238 | | 681055343 | 1997 | MFGR#1239 | | 601626600 | 1997 | MFGR#124 | | 920404157 | 1997 | MFGR#1240 | | 1007678757 | 1997 | MFGR#125 | | 622347203 | 1997 | MFGR#126 | | 1215295592 | 1997 | MFGR#127 | | 822274972 | 1997 | MFGR#128 | | 643903475 | 1997 | MFGR#129 | | 470008435 | 1998 | MFGR#121 | | 568508492 | 1998 | MFGR#1210 | | 323759101 | 1998 | MFGR#1211 | | 572013331 | 1998 | MFGR#1212 | | 448137748 | 1998 | MFGR#1213 | | 137422458 | 1998 | MFGR#1214 | | 346491756 | 1998 | MFGR#1215 | | 454542243 | 1998 | MFGR#1216 | | 759205210 | 1998 | MFGR#1217 | | 674544462 | 1998 | MFGR#1218 | | 735952270 | 1998 | MFGR#1219 | | 490186568 | 1998 | MFGR#122 | | 769456686 | 1998 | MFGR#1220 | | 654540341 | 1998 | MFGR#1221 | | 800329859 | 1998 | MFGR#1222 | | 263849231 | 1998 | MFGR#1223 | | 445461642 | 1998 | MFGR#1224 | | 387808862 | 1998 | MFGR#1225 | | 675424382 | 1998 | MFGR#1226 | | 265906673 | 1998 | MFGR#1227 | | 585938371 | 1998 | MFGR#1228 | | 683188537 | 1998 | MFGR#1229 | | 304403717 | 1998 | MFGR#123 | | 533781674 | 1998 | MFGR#1230 | | 304060011 | 1998 | MFGR#1231 | | 635275907 | 1998 | MFGR#1232 | | 658295080 | 1998 | MFGR#1233 | | 524133341 | 1998 | MFGR#1234 | | 363911877 | 1998 | MFGR#1235 | | 300885635 | 1998 | MFGR#1236 | | 532608453 | 1998 | MFGR#1237 | | 484291410 | 1998 | MFGR#1238 | | 445336624 | 1998 | MFGR#1239 | | 719027801 | 1998 | MFGR#124 | | 518860961 | 1998 | MFGR#1240 | | 491235383 | 1998 | MFGR#125 | | 520917638 | 1998 | MFGR#126 | | 1158787745 | 1998 | MFGR#127 | | 401190922 | 1998 | MFGR#128 | | 406656337 | 1998 | MFGR#129 | +-----------------+------+-----------+ --Q2.2 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 1259802358 | 1992 | MFGR#2221 | | 1728549344 | 1992 | MFGR#2222 | | 1375260024 | 1992 | MFGR#2223 | | 1299982475 | 1992 | MFGR#2224 | | 1541960331 | 1992 | MFGR#2225 | | 1151853513 | 1992 | MFGR#2226 | | 1271175264 | 1992 | MFGR#2227 | | 1726441695 | 1992 | MFGR#2228 | | 1251460032 | 1993 | MFGR#2221 | | 1331062515 | 1993 | MFGR#2222 | | 902809293 | 1993 | MFGR#2223 | | 980512417 | 1993 | MFGR#2224 | | 1253088003 | 1993 | MFGR#2225 | | 959195148 | 1993 | MFGR#2226 | | 555593932 | 1993 | MFGR#2227 | | 2186479174 | 1993 | MFGR#2228 | | 1094092222 | 1994 | MFGR#2221 | | 1491699323 | 1994 | MFGR#2222 | | 1501160826 | 1994 | MFGR#2223 | | 1387107418 | 1994 | MFGR#2224 | | 1641588884 | 1994 | MFGR#2225 | | 1387296390 | 1994 | MFGR#2226 | | 1038341470 | 1994 | MFGR#2227 | | 1565763138 | 1994 | MFGR#2228 | | 1412945650 | 1995 | MFGR#2221 | | 1546178356 | 1995 | MFGR#2222 | | 1218352073 | 1995 | MFGR#2223 | | 1052197762 | 1995 | MFGR#2224 | | 1822921900 | 1995 | MFGR#2225 | | 728142181 | 1995 | MFGR#2226 | | 966131607 | 1995 | MFGR#2227 | | 1379320517 | 1995 | MFGR#2228 | | 1042767284 | 1996 | MFGR#2221 | | 994733835 | 1996 | MFGR#2222 | | 1615788545 | 1996 | MFGR#2223 | | 1113980216 | 1996 | MFGR#2224 | | 1622570253 | 1996 | MFGR#2225 | | 1540226758 | 1996 | MFGR#2226 | | 1115687883 | 1996 | MFGR#2227 | | 1716355343 | 1996 | MFGR#2228 | | 867705636 | 1997 | MFGR#2221 | | 1529877498 | 1997 | MFGR#2222 | | 1594444450 | 1997 | MFGR#2223 | | 587421043 | 1997 | MFGR#2224 | | 1112274470 | 1997 | MFGR#2225 | | 1327884722 | 1997 | MFGR#2226 | | 884180880 | 1997 | MFGR#2227 | | 1664207656 | 1997 | MFGR#2228 | | 827743515 | 1998 | MFGR#2221 | | 662242310 | 1998 | MFGR#2222 | | 861445539 | 1998 | MFGR#2223 | | 694538672 | 1998 | MFGR#2224 | | 675179021 | 1998 | MFGR#2225 | | 480728720 | 1998 | MFGR#2226 | | 643763072 | 1998 | MFGR#2227 | | 994499201 | 1998 | MFGR#2228 | +-----------------+------+-----------+ --Q2.3 +-----------------+------+-----------+ | sum(lo_revenue) | year | p_brand | +-----------------+------+-----------+ | 1428843284 | 1992 | MFGR#2239 | | 1865666054 | 1993 | MFGR#2239 | | 2242753254 | 1994 | MFGR#2239 | | 1446677305 | 1995 | MFGR#2239 | | 921681503 | 1996 | MFGR#2239 | | 1549990572 | 1997 | MFGR#2239 | | 926327433 | 1998 | MFGR#2239 | +-----------------+------+-----------+ --Q3.1 +-----------+-----------+------+-------------+ | c_nation | s_nation | year | revenue | +-----------+-----------+------+-------------+ | VIETNAM | CHINA | 1992 | 17194479086 | | JAPAN | CHINA | 1992 | 15572594510 | | JAPAN | JAPAN | 1992 | 13861682954 | | INDONESIA | CHINA | 1992 | 13499663933 | | VIETNAM | INDONESIA | 1992 | 13163103649 | | JAPAN | INDONESIA | 1992 | 13035158590 | | INDIA | CHINA | 1992 | 12987688902 | | INDONESIA | JAPAN | 1992 | 12939737918 | | VIETNAM | JAPAN | 1992 | 12174715858 | | JAPAN | VIETNAM | 1992 | 11669093753 | | INDIA | INDONESIA | 1992 | 11452602145 | | INDONESIA | INDONESIA | 1992 | 10394407561 | | INDIA | JAPAN | 1992 | 10313084900 | | JAPAN | INDIA | 1992 | 10035511089 | | CHINA | CHINA | 1992 | 9828744666 | | VIETNAM | VIETNAM | 1992 | 9701522505 | | INDONESIA | INDIA | 1992 | 9271105764 | | INDIA | INDIA | 1992 | 8879645522 | | CHINA | INDONESIA | 1992 | 8373693838 | | CHINA | JAPAN | 1992 | 8051248951 | | VIETNAM | INDIA | 1992 | 7804539029 | | INDONESIA | VIETNAM | 1992 | 7615465790 | | CHINA | INDIA | 1992 | 7344868842 | | INDIA | VIETNAM | 1992 | 6830508508 | | CHINA | VIETNAM | 1992 | 6529888238 | | JAPAN | CHINA | 1993 | 18839180326 | | VIETNAM | CHINA | 1993 | 14761890330 | | JAPAN | INDONESIA | 1993 | 13648082171 | | INDONESIA | CHINA | 1993 | 13518181805 | | INDIA | CHINA | 1993 | 13249555999 | | JAPAN | JAPAN | 1993 | 12667833152 | | JAPAN | VIETNAM | 1993 | 11529854580 | | CHINA | CHINA | 1993 | 11216468573 | | INDONESIA | INDONESIA | 1993 | 10953284722 | | VIETNAM | INDONESIA | 1993 | 10582912267 | | INDIA | JAPAN | 1993 | 10482950584 | | VIETNAM | JAPAN | 1993 | 10370811002 | | INDIA | INDONESIA | 1993 | 10145286112 | | INDONESIA | JAPAN | 1993 | 9850020303 | | VIETNAM | VIETNAM | 1993 | 9591468153 | | CHINA | INDONESIA | 1993 | 9015864524 | | CHINA | JAPAN | 1993 | 8972996729 | | INDONESIA | INDIA | 1993 | 8903638786 | | JAPAN | INDIA | 1993 | 8848048514 | | INDONESIA | VIETNAM | 1993 | 8024464882 | | VIETNAM | INDIA | 1993 | 7806575746 | | INDIA | VIETNAM | 1993 | 7537331106 | | INDIA | INDIA | 1993 | 7211053846 | | CHINA | VIETNAM | 1993 | 6700022269 | | CHINA | INDIA | 1993 | 6327331541 | | JAPAN | CHINA | 1994 | 15661051644 | | VIETNAM | CHINA | 1994 | 13958591931 | | JAPAN | JAPAN | 1994 | 13566252348 | | CHINA | CHINA | 1994 | 12870010072 | | VIETNAM | JAPAN | 1994 | 12728320716 | | INDONESIA | CHINA | 1994 | 12295790872 | | INDIA | CHINA | 1994 | 12166419121 | | JAPAN | INDONESIA | 1994 | 11358955025 | | INDIA | INDONESIA | 1994 | 11111248365 | | JAPAN | INDIA | 1994 | 10078806371 | | VIETNAM | INDONESIA | 1994 | 9923852578 | | INDIA | JAPAN | 1994 | 9839136767 | | CHINA | JAPAN | 1994 | 9836586308 | | INDONESIA | JAPAN | 1994 | 9786694572 | | INDIA | VIETNAM | 1994 | 9551081406 | | JAPAN | VIETNAM | 1994 | 9035431932 | | VIETNAM | INDIA | 1994 | 9032319402 | | INDONESIA | INDONESIA | 1994 | 8876012426 | | CHINA | INDONESIA | 1994 | 8375581981 | | VIETNAM | VIETNAM | 1994 | 8095638136 | | INDONESIA | INDIA | 1994 | 7943993512 | | INDONESIA | VIETNAM | 1994 | 7927236697 | | INDIA | INDIA | 1994 | 7534915457 | | CHINA | VIETNAM | 1994 | 6062387221 | | CHINA | INDIA | 1994 | 5816794324 | | VIETNAM | CHINA | 1995 | 15128423080 | | INDONESIA | CHINA | 1995 | 14794647970 | | INDIA | CHINA | 1995 | 14724240804 | | JAPAN | CHINA | 1995 | 14579848516 | | CHINA | CHINA | 1995 | 14296657586 | | INDIA | JAPAN | 1995 | 13511381754 | | JAPAN | JAPAN | 1995 | 12015968288 | | VIETNAM | INDONESIA | 1995 | 11290647784 | | JAPAN | INDONESIA | 1995 | 10968840402 | | INDIA | INDONESIA | 1995 | 10879296370 | | CHINA | INDONESIA | 1995 | 10611767914 | | VIETNAM | JAPAN | 1995 | 10493043807 | | INDONESIA | INDONESIA | 1995 | 10350165199 | | VIETNAM | INDIA | 1995 | 10147175135 | | CHINA | JAPAN | 1995 | 9967113498 | | JAPAN | VIETNAM | 1995 | 9871240910 | | INDONESIA | JAPAN | 1995 | 9554798320 | | JAPAN | INDIA | 1995 | 9224478715 | | INDIA | INDIA | 1995 | 8880501531 | | VIETNAM | VIETNAM | 1995 | 8530802028 | | INDIA | VIETNAM | 1995 | 8470249830 | | CHINA | INDIA | 1995 | 8460557790 | | INDONESIA | VIETNAM | 1995 | 8393411088 | | CHINA | VIETNAM | 1995 | 7838238263 | | INDONESIA | INDIA | 1995 | 7001659338 | | JAPAN | CHINA | 1996 | 14974943391 | | INDIA | CHINA | 1996 | 14236197987 | | VIETNAM | CHINA | 1996 | 13723231674 | | JAPAN | INDONESIA | 1996 | 13304501801 | | INDONESIA | CHINA | 1996 | 12444022202 | | CHINA | CHINA | 1996 | 12120893189 | | INDIA | JAPAN | 1996 | 11649117519 | | INDONESIA | JAPAN | 1996 | 11345350775 | | VIETNAM | JAPAN | 1996 | 11294284203 | | INDONESIA | INDONESIA | 1996 | 11111201530 | | JAPAN | INDIA | 1996 | 10871364136 | | JAPAN | JAPAN | 1996 | 10836947449 | | INDIA | INDONESIA | 1996 | 10568008435 | | JAPAN | VIETNAM | 1996 | 10503890555 | | VIETNAM | INDONESIA | 1996 | 10494783196 | | INDONESIA | VIETNAM | 1996 | 9940440124 | | INDONESIA | INDIA | 1996 | 9864980677 | | VIETNAM | VIETNAM | 1996 | 9560258720 | | INDIA | VIETNAM | 1996 | 9324764214 | | INDIA | INDIA | 1996 | 9023346020 | | VIETNAM | INDIA | 1996 | 8968179949 | | CHINA | INDONESIA | 1996 | 8877441837 | | CHINA | JAPAN | 1996 | 8749420872 | | CHINA | VIETNAM | 1996 | 6973983457 | | CHINA | INDIA | 1996 | 6515658476 | | JAPAN | CHINA | 1997 | 15365039212 | | INDONESIA | CHINA | 1997 | 14159930904 | | VIETNAM | CHINA | 1997 | 13678288757 | | INDIA | CHINA | 1997 | 13599028484 | | JAPAN | JAPAN | 1997 | 12921870544 | | CHINA | CHINA | 1997 | 12720975220 | | VIETNAM | JAPAN | 1997 | 11929000810 | | VIETNAM | INDONESIA | 1997 | 11325447090 | | JAPAN | INDONESIA | 1997 | 10764312416 | | INDONESIA | JAPAN | 1997 | 10555558162 | | INDONESIA | INDONESIA | 1997 | 10416928126 | | CHINA | INDONESIA | 1997 | 10317902565 | | INDIA | JAPAN | 1997 | 10272590051 | | JAPAN | VIETNAM | 1997 | 9940032294 | | CHINA | JAPAN | 1997 | 9519485461 | | JAPAN | INDIA | 1997 | 9465935835 | | INDIA | INDONESIA | 1997 | 9405085270 | | INDONESIA | INDIA | 1997 | 8930955270 | | INDIA | INDIA | 1997 | 8295504178 | | VIETNAM | VIETNAM | 1997 | 8293412532 | | INDONESIA | VIETNAM | 1997 | 8116443059 | | INDIA | VIETNAM | 1997 | 7960292262 | | VIETNAM | INDIA | 1997 | 7529455873 | | CHINA | VIETNAM | 1997 | 7038413355 | | CHINA | INDIA | 1997 | 6530770558 | +-----------+-----------+------+-------------+ --Q3.2 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | CHINA 3 | CHINA 0 | 1992 | 539864249 | | CHINA 0 | CHINA 6 | 1992 | 471363128 | | CHINA 8 | CHINA 1 | 1992 | 421384110 | | CHINA 6 | CHINA 1 | 1992 | 382204882 | | CHINA 6 | CHINA 7 | 1992 | 355755835 | | CHINA 8 | CHINA 9 | 1992 | 349006417 | | CHINA 7 | CHINA 7 | 1992 | 320232842 | | CHINA 8 | CHINA 3 | 1992 | 296105733 | | CHINA 5 | CHINA 3 | 1992 | 277283951 | | CHINA 6 | CHINA 6 | 1992 | 265527771 | | CHINA 4 | CHINA 1 | 1992 | 237402078 | | CHINA 8 | CHINA 6 | 1992 | 234720401 | | CHINA 4 | CHINA 6 | 1992 | 230169075 | | CHINA 9 | CHINA 1 | 1992 | 223815249 | | CHINA 1 | CHINA 1 | 1992 | 223467947 | | CHINA 2 | CHINA 1 | 1992 | 219559691 | | CHINA 9 | CHINA 6 | 1992 | 205915890 | | CHINA 7 | CHINA 9 | 1992 | 201288909 | | CHINA 1 | CHINA 6 | 1992 | 195622902 | | CHINA 9 | CHINA 7 | 1992 | 190345063 | | CHINA 8 | CHINA 4 | 1992 | 174478626 | | CHINA 1 | CHINA 7 | 1992 | 173803257 | | CHINA 9 | CHINA 9 | 1992 | 162458028 | | CHINA 6 | CHINA 0 | 1992 | 154260702 | | CHINA 8 | CHINA 0 | 1992 | 149794069 | | CHINA 5 | CHINA 9 | 1992 | 149369922 | | CHINA 8 | CHINA 8 | 1992 | 147607252 | | CHINA 6 | CHINA 4 | 1992 | 147137516 | | CHINA 7 | CHINA 8 | 1992 | 139974858 | | CHINA 5 | CHINA 6 | 1992 | 138467127 | | CHINA 3 | CHINA 6 | 1992 | 119521008 | | CHINA 8 | CHINA 7 | 1992 | 109887269 | | CHINA 6 | CHINA 3 | 1992 | 107201214 | | CHINA 9 | CHINA 4 | 1992 | 101504450 | | CHINA 1 | CHINA 3 | 1992 | 101388208 | | CHINA 7 | CHINA 0 | 1992 | 98475237 | | CHINA 5 | CHINA 8 | 1992 | 98370738 | | CHINA 2 | CHINA 6 | 1992 | 93254616 | | CHINA 2 | CHINA 4 | 1992 | 86394644 | | CHINA 3 | CHINA 7 | 1992 | 81027008 | | CHINA 5 | CHINA 4 | 1992 | 78587418 | | CHINA 3 | CHINA 9 | 1992 | 78114762 | | CHINA 2 | CHINA 0 | 1992 | 77786892 | | CHINA 2 | CHINA 8 | 1992 | 75605732 | | CHINA 4 | CHINA 3 | 1992 | 75101512 | | CHINA 7 | CHINA 4 | 1992 | 74119240 | | CHINA 2 | CHINA 9 | 1992 | 73413108 | | CHINA 5 | CHINA 7 | 1992 | 73199718 | | CHINA 4 | CHINA 4 | 1992 | 72839118 | | CHINA 1 | CHINA 9 | 1992 | 68538220 | | CHINA 0 | CHINA 8 | 1992 | 65856888 | | CHINA 0 | CHINA 9 | 1992 | 65590624 | | CHINA 3 | CHINA 8 | 1992 | 64556586 | | CHINA 2 | CHINA 7 | 1992 | 63336330 | | CHINA 4 | CHINA 9 | 1992 | 57645963 | | CHINA 0 | CHINA 7 | 1992 | 55251918 | | CHINA 0 | CHINA 1 | 1992 | 51774462 | | CHINA 6 | CHINA 8 | 1992 | 45676858 | | CHINA 3 | CHINA 3 | 1992 | 41147560 | | CHINA 3 | CHINA 4 | 1992 | 36838082 | | CHINA 5 | CHINA 0 | 1992 | 36554488 | | CHINA 3 | CHINA 1 | 1992 | 32036313 | | CHINA 4 | CHINA 8 | 1992 | 31517575 | | CHINA 0 | CHINA 3 | 1992 | 25524054 | | CHINA 1 | CHINA 4 | 1992 | 12681846 | | CHINA 7 | CHINA 3 | 1992 | 11395152 | | CHINA 6 | CHINA 9 | 1992 | 8642375 | | CHINA 8 | CHINA 6 | 1993 | 638396852 | | CHINA 7 | CHINA 6 | 1993 | 576731239 | | CHINA 2 | CHINA 6 | 1993 | 528008729 | | CHINA 8 | CHINA 9 | 1993 | 522412584 | | CHINA 8 | CHINA 7 | 1993 | 475478848 | | CHINA 8 | CHINA 1 | 1993 | 452064153 | | CHINA 0 | CHINA 1 | 1993 | 425902649 | | CHINA 9 | CHINA 1 | 1993 | 405252987 | | CHINA 6 | CHINA 9 | 1993 | 385005953 | | CHINA 8 | CHINA 8 | 1993 | 382884778 | | CHINA 0 | CHINA 6 | 1993 | 344911487 | | CHINA 6 | CHINA 7 | 1993 | 341436211 | | CHINA 3 | CHINA 6 | 1993 | 291652051 | | CHINA 7 | CHINA 1 | 1993 | 257769861 | | CHINA 8 | CHINA 0 | 1993 | 231981252 | | CHINA 4 | CHINA 6 | 1993 | 215180968 | | CHINA 3 | CHINA 0 | 1993 | 213320777 | | CHINA 9 | CHINA 6 | 1993 | 207281000 | | CHINA 5 | CHINA 9 | 1993 | 206555882 | | CHINA 6 | CHINA 1 | 1993 | 205665388 | | CHINA 5 | CHINA 1 | 1993 | 193491875 | | CHINA 2 | CHINA 9 | 1993 | 193324425 | | CHINA 5 | CHINA 8 | 1993 | 190521023 | | CHINA 7 | CHINA 0 | 1993 | 183487919 | | CHINA 0 | CHINA 9 | 1993 | 170223958 | | CHINA 6 | CHINA 8 | 1993 | 166821272 | | CHINA 3 | CHINA 8 | 1993 | 163053528 | | CHINA 2 | CHINA 0 | 1993 | 158276154 | | CHINA 3 | CHINA 1 | 1993 | 153652018 | | CHINA 5 | CHINA 6 | 1993 | 151359347 | | CHINA 6 | CHINA 0 | 1993 | 140494698 | | CHINA 8 | CHINA 4 | 1993 | 139857147 | | CHINA 2 | CHINA 7 | 1993 | 136009418 | | CHINA 5 | CHINA 7 | 1993 | 133892119 | | CHINA 9 | CHINA 9 | 1993 | 118965507 | | CHINA 1 | CHINA 1 | 1993 | 108898379 | | CHINA 6 | CHINA 6 | 1993 | 100311475 | | CHINA 0 | CHINA 4 | 1993 | 93483068 | | CHINA 1 | CHINA 4 | 1993 | 87714152 | | CHINA 4 | CHINA 1 | 1993 | 87690658 | | CHINA 4 | CHINA 7 | 1993 | 83701574 | | CHINA 1 | CHINA 0 | 1993 | 82670983 | | CHINA 7 | CHINA 4 | 1993 | 77396461 | | CHINA 5 | CHINA 4 | 1993 | 73556161 | | CHINA 4 | CHINA 8 | 1993 | 72203335 | | CHINA 0 | CHINA 7 | 1993 | 70395334 | | CHINA 3 | CHINA 4 | 1993 | 64771003 | | CHINA 7 | CHINA 8 | 1993 | 64514099 | | CHINA 3 | CHINA 7 | 1993 | 62868516 | | CHINA 8 | CHINA 3 | 1993 | 56504804 | | CHINA 2 | CHINA 4 | 1993 | 56031779 | | CHINA 1 | CHINA 7 | 1993 | 48951262 | | CHINA 7 | CHINA 3 | 1993 | 45962220 | | CHINA 4 | CHINA 9 | 1993 | 43158138 | | CHINA 7 | CHINA 9 | 1993 | 42611979 | | CHINA 2 | CHINA 8 | 1993 | 38092546 | | CHINA 1 | CHINA 9 | 1993 | 29665374 | | CHINA 1 | CHINA 3 | 1993 | 23991216 | | CHINA 6 | CHINA 6 | 1994 | 596294890 | | CHINA 8 | CHINA 6 | 1994 | 542104721 | | CHINA 6 | CHINA 1 | 1994 | 504359553 | | CHINA 3 | CHINA 7 | 1994 | 476727294 | | CHINA 3 | CHINA 6 | 1994 | 476349724 | | CHINA 8 | CHINA 9 | 1994 | 427241348 | | CHINA 6 | CHINA 9 | 1994 | 358191581 | | CHINA 9 | CHINA 6 | 1994 | 352344057 | | CHINA 3 | CHINA 0 | 1994 | 351708546 | | CHINA 8 | CHINA 0 | 1994 | 351131413 | | CHINA 3 | CHINA 3 | 1994 | 339279574 | | CHINA 0 | CHINA 1 | 1994 | 298307857 | | CHINA 0 | CHINA 7 | 1994 | 289536010 | | CHINA 0 | CHINA 6 | 1994 | 285639032 | | CHINA 7 | CHINA 6 | 1994 | 263170455 | | CHINA 2 | CHINA 8 | 1994 | 250332990 | | CHINA 6 | CHINA 4 | 1994 | 235897763 | | CHINA 5 | CHINA 1 | 1994 | 234681515 | | CHINA 8 | CHINA 7 | 1994 | 234390101 | | CHINA 1 | CHINA 6 | 1994 | 232792764 | | CHINA 8 | CHINA 1 | 1994 | 223808842 | | CHINA 4 | CHINA 6 | 1994 | 209522926 | | CHINA 8 | CHINA 4 | 1994 | 208632636 | | CHINA 7 | CHINA 3 | 1994 | 202424117 | | CHINA 4 | CHINA 7 | 1994 | 185487544 | | CHINA 2 | CHINA 7 | 1994 | 183551771 | | CHINA 7 | CHINA 1 | 1994 | 178421732 | | CHINA 4 | CHINA 1 | 1994 | 176262868 | | CHINA 5 | CHINA 6 | 1994 | 173651872 | | CHINA 0 | CHINA 4 | 1994 | 173584501 | | CHINA 8 | CHINA 8 | 1994 | 172179808 | | CHINA 9 | CHINA 1 | 1994 | 169617585 | | CHINA 0 | CHINA 9 | 1994 | 167569085 | | CHINA 5 | CHINA 8 | 1994 | 162066559 | | CHINA 7 | CHINA 9 | 1994 | 161041255 | | CHINA 5 | CHINA 4 | 1994 | 154820955 | | CHINA 7 | CHINA 0 | 1994 | 152844960 | | CHINA 2 | CHINA 6 | 1994 | 149839190 | | CHINA 7 | CHINA 8 | 1994 | 149536114 | | CHINA 1 | CHINA 4 | 1994 | 142403628 | | CHINA 9 | CHINA 9 | 1994 | 131064832 | | CHINA 2 | CHINA 1 | 1994 | 124489283 | | CHINA 2 | CHINA 0 | 1994 | 114263273 | | CHINA 5 | CHINA 7 | 1994 | 113311766 | | CHINA 8 | CHINA 3 | 1994 | 112573609 | | CHINA 3 | CHINA 4 | 1994 | 104903651 | | CHINA 4 | CHINA 0 | 1994 | 101914439 | | CHINA 3 | CHINA 1 | 1994 | 98253251 | | CHINA 1 | CHINA 7 | 1994 | 94582288 | | CHINA 4 | CHINA 4 | 1994 | 92818317 | | CHINA 1 | CHINA 9 | 1994 | 85220541 | | CHINA 6 | CHINA 3 | 1994 | 84604801 | | CHINA 0 | CHINA 3 | 1994 | 77574978 | | CHINA 1 | CHINA 3 | 1994 | 74435316 | | CHINA 4 | CHINA 9 | 1994 | 72622300 | | CHINA 3 | CHINA 8 | 1994 | 72559366 | | CHINA 9 | CHINA 0 | 1994 | 69298222 | | CHINA 3 | CHINA 9 | 1994 | 67472592 | | CHINA 6 | CHINA 8 | 1994 | 66271372 | | CHINA 7 | CHINA 4 | 1994 | 59634606 | | CHINA 2 | CHINA 9 | 1994 | 56882136 | | CHINA 1 | CHINA 1 | 1994 | 56592337 | | CHINA 5 | CHINA 9 | 1994 | 52879724 | | CHINA 9 | CHINA 4 | 1994 | 49324497 | | CHINA 2 | CHINA 3 | 1994 | 45042384 | | CHINA 7 | CHINA 7 | 1994 | 44458451 | | CHINA 5 | CHINA 0 | 1994 | 39091925 | | CHINA 9 | CHINA 3 | 1994 | 39082405 | | CHINA 0 | CHINA 8 | 1994 | 28203459 | | CHINA 6 | CHINA 7 | 1994 | 27243775 | | CHINA 0 | CHINA 0 | 1994 | 15591040 | | CHINA 2 | CHINA 6 | 1995 | 832176707 | | CHINA 8 | CHINA 6 | 1995 | 793322102 | | CHINA 3 | CHINA 7 | 1995 | 505446788 | | CHINA 7 | CHINA 9 | 1995 | 483519933 | | CHINA 4 | CHINA 6 | 1995 | 440320366 | | CHINA 8 | CHINA 1 | 1995 | 394522570 | | CHINA 7 | CHINA 1 | 1995 | 393861389 | | CHINA 5 | CHINA 1 | 1995 | 343166828 | | CHINA 1 | CHINA 7 | 1995 | 341736584 | | CHINA 8 | CHINA 7 | 1995 | 323623203 | | CHINA 6 | CHINA 6 | 1995 | 312876143 | | CHINA 3 | CHINA 6 | 1995 | 306516324 | | CHINA 7 | CHINA 6 | 1995 | 294840537 | | CHINA 3 | CHINA 3 | 1995 | 290066240 | | CHINA 8 | CHINA 3 | 1995 | 289182495 | | CHINA 3 | CHINA 1 | 1995 | 288853766 | | CHINA 0 | CHINA 1 | 1995 | 279082523 | | CHINA 0 | CHINA 8 | 1995 | 265291443 | | CHINA 1 | CHINA 6 | 1995 | 262283412 | | CHINA 4 | CHINA 1 | 1995 | 246559891 | | CHINA 2 | CHINA 8 | 1995 | 246465167 | | CHINA 6 | CHINA 7 | 1995 | 246385862 | | CHINA 9 | CHINA 6 | 1995 | 231314393 | | CHINA 2 | CHINA 7 | 1995 | 224354491 | | CHINA 4 | CHINA 7 | 1995 | 222368398 | | CHINA 0 | CHINA 7 | 1995 | 221334917 | | CHINA 6 | CHINA 3 | 1995 | 217756587 | | CHINA 6 | CHINA 9 | 1995 | 215736018 | | CHINA 4 | CHINA 9 | 1995 | 210496516 | | CHINA 0 | CHINA 6 | 1995 | 197891458 | | CHINA 8 | CHINA 9 | 1995 | 192018213 | | CHINA 7 | CHINA 0 | 1995 | 188804482 | | CHINA 5 | CHINA 6 | 1995 | 186378531 | | CHINA 6 | CHINA 1 | 1995 | 165831073 | | CHINA 1 | CHINA 3 | 1995 | 165118263 | | CHINA 6 | CHINA 8 | 1995 | 157640218 | | CHINA 1 | CHINA 1 | 1995 | 150838433 | | CHINA 1 | CHINA 4 | 1995 | 147632879 | | CHINA 6 | CHINA 0 | 1995 | 147314401 | | CHINA 5 | CHINA 4 | 1995 | 142820978 | | CHINA 5 | CHINA 9 | 1995 | 141416829 | | CHINA 2 | CHINA 0 | 1995 | 135608473 | | CHINA 5 | CHINA 7 | 1995 | 131596218 | | CHINA 0 | CHINA 4 | 1995 | 129159370 | | CHINA 3 | CHINA 9 | 1995 | 126837748 | | CHINA 8 | CHINA 0 | 1995 | 126564932 | | CHINA 0 | CHINA 3 | 1995 | 121337041 | | CHINA 7 | CHINA 7 | 1995 | 118697587 | | CHINA 5 | CHINA 8 | 1995 | 116538842 | | CHINA 8 | CHINA 8 | 1995 | 110161904 | | CHINA 9 | CHINA 0 | 1995 | 109582187 | | CHINA 9 | CHINA 1 | 1995 | 103455098 | | CHINA 2 | CHINA 1 | 1995 | 100264691 | | CHINA 7 | CHINA 3 | 1995 | 99011859 | | CHINA 3 | CHINA 0 | 1995 | 90383390 | | CHINA 4 | CHINA 3 | 1995 | 89908903 | | CHINA 7 | CHINA 8 | 1995 | 81425699 | | CHINA 3 | CHINA 4 | 1995 | 77577579 | | CHINA 4 | CHINA 8 | 1995 | 74805746 | | CHINA 9 | CHINA 7 | 1995 | 74597020 | | CHINA 9 | CHINA 9 | 1995 | 73514511 | | CHINA 5 | CHINA 0 | 1995 | 73274726 | | CHINA 8 | CHINA 4 | 1995 | 61708487 | | CHINA 1 | CHINA 0 | 1995 | 58753734 | | CHINA 3 | CHINA 8 | 1995 | 57133566 | | CHINA 9 | CHINA 4 | 1995 | 53259334 | | CHINA 1 | CHINA 9 | 1995 | 46177797 | | CHINA 2 | CHINA 4 | 1995 | 45147325 | | CHINA 0 | CHINA 0 | 1995 | 43963173 | | CHINA 0 | CHINA 9 | 1995 | 40184107 | | CHINA 1 | CHINA 8 | 1995 | 18859188 | | CHINA 8 | CHINA 7 | 1996 | 621957444 | | CHINA 3 | CHINA 9 | 1996 | 530082848 | | CHINA 8 | CHINA 6 | 1996 | 525755549 | | CHINA 8 | CHINA 1 | 1996 | 399229343 | | CHINA 6 | CHINA 7 | 1996 | 365540749 | | CHINA 8 | CHINA 8 | 1996 | 351864283 | | CHINA 1 | CHINA 6 | 1996 | 329186504 | | CHINA 9 | CHINA 6 | 1996 | 321113085 | | CHINA 3 | CHINA 6 | 1996 | 318264871 | | CHINA 2 | CHINA 6 | 1996 | 315233397 | | CHINA 2 | CHINA 9 | 1996 | 285852841 | | CHINA 9 | CHINA 9 | 1996 | 264510548 | | CHINA 5 | CHINA 6 | 1996 | 261385523 | | CHINA 8 | CHINA 9 | 1996 | 259497265 | | CHINA 6 | CHINA 6 | 1996 | 258200131 | | CHINA 4 | CHINA 9 | 1996 | 257345949 | | CHINA 6 | CHINA 9 | 1996 | 247667288 | | CHINA 2 | CHINA 7 | 1996 | 234569026 | | CHINA 2 | CHINA 1 | 1996 | 218568966 | | CHINA 4 | CHINA 1 | 1996 | 207383476 | | CHINA 0 | CHINA 1 | 1996 | 204596428 | | CHINA 3 | CHINA 0 | 1996 | 204375870 | | CHINA 4 | CHINA 0 | 1996 | 202299286 | | CHINA 4 | CHINA 4 | 1996 | 191983261 | | CHINA 4 | CHINA 8 | 1996 | 183961012 | | CHINA 4 | CHINA 6 | 1996 | 183872085 | | CHINA 6 | CHINA 8 | 1996 | 182132356 | | CHINA 7 | CHINA 9 | 1996 | 170941341 | | CHINA 0 | CHINA 6 | 1996 | 168082672 | | CHINA 1 | CHINA 7 | 1996 | 165942066 | | CHINA 1 | CHINA 9 | 1996 | 165878775 | | CHINA 9 | CHINA 8 | 1996 | 156009357 | | CHINA 7 | CHINA 7 | 1996 | 155842944 | | CHINA 2 | CHINA 0 | 1996 | 147709906 | | CHINA 5 | CHINA 7 | 1996 | 147257366 | | CHINA 1 | CHINA 8 | 1996 | 141840928 | | CHINA 2 | CHINA 4 | 1996 | 136244052 | | CHINA 9 | CHINA 0 | 1996 | 130997019 | | CHINA 1 | CHINA 0 | 1996 | 124362038 | | CHINA 0 | CHINA 9 | 1996 | 114011231 | | CHINA 7 | CHINA 3 | 1996 | 112398764 | | CHINA 4 | CHINA 7 | 1996 | 110567337 | | CHINA 3 | CHINA 4 | 1996 | 109269982 | | CHINA 5 | CHINA 1 | 1996 | 107482704 | | CHINA 6 | CHINA 4 | 1996 | 105485170 | | CHINA 1 | CHINA 4 | 1996 | 105320270 | | CHINA 0 | CHINA 7 | 1996 | 102545071 | | CHINA 2 | CHINA 3 | 1996 | 100407151 | | CHINA 0 | CHINA 4 | 1996 | 95913303 | | CHINA 7 | CHINA 0 | 1996 | 94706269 | | CHINA 6 | CHINA 1 | 1996 | 86949951 | | CHINA 8 | CHINA 3 | 1996 | 84157344 | | CHINA 2 | CHINA 8 | 1996 | 83176903 | | CHINA 5 | CHINA 9 | 1996 | 83104330 | | CHINA 7 | CHINA 8 | 1996 | 81490639 | | CHINA 9 | CHINA 3 | 1996 | 79655829 | | CHINA 5 | CHINA 0 | 1996 | 77489995 | | CHINA 8 | CHINA 0 | 1996 | 76989056 | | CHINA 9 | CHINA 1 | 1996 | 72011031 | | CHINA 7 | CHINA 4 | 1996 | 64764322 | | CHINA 5 | CHINA 4 | 1996 | 62827767 | | CHINA 5 | CHINA 8 | 1996 | 62673237 | | CHINA 7 | CHINA 6 | 1996 | 61880459 | | CHINA 3 | CHINA 7 | 1996 | 56642844 | | CHINA 3 | CHINA 1 | 1996 | 50799366 | | CHINA 3 | CHINA 3 | 1996 | 42601269 | | CHINA 4 | CHINA 3 | 1996 | 38290290 | | CHINA 3 | CHINA 8 | 1996 | 21263056 | | CHINA 7 | CHINA 1 | 1996 | 14836937 | | CHINA 5 | CHINA 3 | 1996 | 13611339 | | CHINA 1 | CHINA 3 | 1996 | 8430793 | | CHINA 1 | CHINA 1 | 1996 | 1601332 | | CHINA 1 | CHINA 7 | 1997 | 664436721 | | CHINA 8 | CHINA 9 | 1997 | 585552148 | | CHINA 8 | CHINA 6 | 1997 | 543571889 | | CHINA 8 | CHINA 7 | 1997 | 516131917 | | CHINA 6 | CHINA 7 | 1997 | 467477883 | | CHINA 3 | CHINA 9 | 1997 | 444914344 | | CHINA 5 | CHINA 6 | 1997 | 353316321 | | CHINA 6 | CHINA 4 | 1997 | 338136205 | | CHINA 0 | CHINA 7 | 1997 | 329137493 | | CHINA 5 | CHINA 1 | 1997 | 328142466 | | CHINA 8 | CHINA 4 | 1997 | 308276385 | | CHINA 6 | CHINA 9 | 1997 | 306814317 | | CHINA 5 | CHINA 9 | 1997 | 301145803 | | CHINA 7 | CHINA 1 | 1997 | 299575802 | | CHINA 8 | CHINA 8 | 1997 | 282083295 | | CHINA 4 | CHINA 9 | 1997 | 280242025 | | CHINA 9 | CHINA 1 | 1997 | 253155313 | | CHINA 4 | CHINA 6 | 1997 | 234247182 | | CHINA 5 | CHINA 0 | 1997 | 217246162 | | CHINA 9 | CHINA 4 | 1997 | 215424663 | | CHINA 0 | CHINA 6 | 1997 | 211152240 | | CHINA 3 | CHINA 6 | 1997 | 205982217 | | CHINA 7 | CHINA 6 | 1997 | 196440117 | | CHINA 1 | CHINA 6 | 1997 | 195757737 | | CHINA 2 | CHINA 3 | 1997 | 189836909 | | CHINA 7 | CHINA 8 | 1997 | 189291379 | | CHINA 9 | CHINA 6 | 1997 | 189236146 | | CHINA 3 | CHINA 1 | 1997 | 188537684 | | CHINA 9 | CHINA 7 | 1997 | 182516267 | | CHINA 0 | CHINA 0 | 1997 | 182459980 | | CHINA 5 | CHINA 8 | 1997 | 177077882 | | CHINA 2 | CHINA 6 | 1997 | 176030529 | | CHINA 2 | CHINA 1 | 1997 | 168770050 | | CHINA 8 | CHINA 0 | 1997 | 167294093 | | CHINA 4 | CHINA 3 | 1997 | 161980658 | | CHINA 3 | CHINA 4 | 1997 | 154433882 | | CHINA 6 | CHINA 6 | 1997 | 153336736 | | CHINA 6 | CHINA 3 | 1997 | 151596497 | | CHINA 8 | CHINA 1 | 1997 | 145432603 | | CHINA 1 | CHINA 4 | 1997 | 126773981 | | CHINA 1 | CHINA 0 | 1997 | 120594770 | | CHINA 7 | CHINA 3 | 1997 | 119618460 | | CHINA 6 | CHINA 1 | 1997 | 119529805 | | CHINA 2 | CHINA 9 | 1997 | 114591288 | | CHINA 7 | CHINA 7 | 1997 | 111335941 | | CHINA 5 | CHINA 3 | 1997 | 111044153 | | CHINA 6 | CHINA 0 | 1997 | 104404276 | | CHINA 1 | CHINA 1 | 1997 | 98869501 | | CHINA 7 | CHINA 0 | 1997 | 97198605 | | CHINA 7 | CHINA 9 | 1997 | 92872632 | | CHINA 0 | CHINA 9 | 1997 | 91097832 | | CHINA 9 | CHINA 9 | 1997 | 86479272 | | CHINA 2 | CHINA 7 | 1997 | 79380820 | | CHINA 9 | CHINA 0 | 1997 | 78499693 | | CHINA 1 | CHINA 9 | 1997 | 73589328 | | CHINA 2 | CHINA 8 | 1997 | 71633835 | | CHINA 8 | CHINA 3 | 1997 | 70505885 | | CHINA 3 | CHINA 0 | 1997 | 61039282 | | CHINA 0 | CHINA 3 | 1997 | 58325113 | | CHINA 5 | CHINA 7 | 1997 | 55476389 | | CHINA 4 | CHINA 7 | 1997 | 46480159 | | CHINA 0 | CHINA 1 | 1997 | 38223038 | | CHINA 4 | CHINA 1 | 1997 | 21636342 | | CHINA 9 | CHINA 3 | 1997 | 13092788 | | CHINA 6 | CHINA 8 | 1997 | 2490092 | +------------+------------+------+-----------+ --Q3.3 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | UNITED KI0 | UNITED KI7 | 1992 | 251282102 | | UNITED KI0 | UNITED KI0 | 1992 | 170005406 | | UNITED KI7 | UNITED KI7 | 1992 | 36835396 | | UNITED KI0 | UNITED KI7 | 1993 | 560335810 | | UNITED KI0 | UNITED KI0 | 1993 | 294257692 | | UNITED KI7 | UNITED KI0 | 1993 | 159005896 | | UNITED KI7 | UNITED KI7 | 1993 | 139029264 | | UNITED KI0 | UNITED KI7 | 1994 | 739847089 | | UNITED KI0 | UNITED KI0 | 1994 | 302339390 | | UNITED KI7 | UNITED KI7 | 1994 | 275609814 | | UNITED KI7 | UNITED KI0 | 1994 | 117654093 | | UNITED KI0 | UNITED KI7 | 1995 | 540994655 | | UNITED KI0 | UNITED KI0 | 1995 | 230825439 | | UNITED KI7 | UNITED KI0 | 1995 | 197347696 | | UNITED KI7 | UNITED KI7 | 1995 | 136620517 | | UNITED KI0 | UNITED KI7 | 1996 | 448412094 | | UNITED KI0 | UNITED KI0 | 1996 | 203511607 | | UNITED KI7 | UNITED KI7 | 1996 | 94528075 | | UNITED KI7 | UNITED KI0 | 1996 | 35448536 | | UNITED KI7 | UNITED KI0 | 1997 | 289323850 | | UNITED KI7 | UNITED KI7 | 1997 | 214791175 | | UNITED KI0 | UNITED KI7 | 1997 | 196510174 | | UNITED KI0 | UNITED KI0 | 1997 | 125066127 | +------------+------------+------+-----------+ --Q3.4 +------------+------------+------+-----------+ | c_city | s_city | year | revenue | +------------+------------+------+-----------+ | UNITED KI7 | KENYA 4 | 1997 | 170083300 | | UNITED KI0 | MOZAMBIQU1 | 1997 | 155234463 | | UNITED KI0 | KENYA 4 | 1997 | 87283610 | +------------+------------+------+-----------+ --Q4.1 +------+---------------+-------------+ | year | c_nation | profit | +------+---------------+-------------+ | 1992 | ARGENTINA | 13746243380 | | 1992 | BRAZIL | 15762831144 | | 1992 | CANADA | 17477043721 | | 1992 | PERU | 14698567030 | | 1992 | UNITED STATES | 14043501956 | | 1993 | ARGENTINA | 13992888207 | | 1993 | BRAZIL | 15146262693 | | 1993 | CANADA | 12463985574 | | 1993 | PERU | 11385007831 | | 1993 | UNITED STATES | 10651361815 | | 1994 | ARGENTINA | 13128610315 | | 1994 | BRAZIL | 13764866493 | | 1994 | CANADA | 13723188154 | | 1994 | PERU | 12784683808 | | 1994 | UNITED STATES | 12554422837 | | 1995 | ARGENTINA | 14337205612 | | 1995 | BRAZIL | 15068918320 | | 1995 | CANADA | 14529005783 | | 1995 | PERU | 13086675480 | | 1995 | UNITED STATES | 11330297649 | | 1996 | ARGENTINA | 13659108915 | | 1996 | BRAZIL | 12660837584 | | 1996 | CANADA | 14558903190 | | 1996 | PERU | 14162285166 | | 1996 | UNITED STATES | 11117076866 | | 1997 | ARGENTINA | 12556399750 | | 1997 | BRAZIL | 13961587144 | | 1997 | CANADA | 15567856947 | | 1997 | PERU | 13595325340 | | 1997 | UNITED STATES | 10779073839 | | 1998 | ARGENTINA | 7843424759 | | 1998 | BRAZIL | 8853904827 | | 1998 | CANADA | 8286104334 | | 1998 | PERU | 5822590950 | | 1998 | UNITED STATES | 8526236814 | +------+---------------+-------------+ --Q4.2 +------+---------------+------------+------------+ | year | s_nation | p_category | profit | +------+---------------+------------+------------+ | 1997 | ARGENTINA | MFGR#11 | 1636950553 | | 1997 | ARGENTINA | MFGR#12 | 1265547847 | | 1997 | ARGENTINA | MFGR#13 | 1505131346 | | 1997 | ARGENTINA | MFGR#14 | 1405447137 | | 1997 | ARGENTINA | MFGR#15 | 1564085340 | | 1997 | ARGENTINA | MFGR#21 | 1335009490 | | 1997 | ARGENTINA | MFGR#22 | 1309054179 | | 1997 | ARGENTINA | MFGR#23 | 1305213794 | | 1997 | ARGENTINA | MFGR#24 | 1089725126 | | 1997 | ARGENTINA | MFGR#25 | 1291995512 | | 1997 | BRAZIL | MFGR#11 | 721240147 | | 1997 | BRAZIL | MFGR#12 | 928318830 | | 1997 | BRAZIL | MFGR#13 | 1164674879 | | 1997 | BRAZIL | MFGR#14 | 1215622587 | | 1997 | BRAZIL | MFGR#15 | 940971658 | | 1997 | BRAZIL | MFGR#21 | 1158909618 | | 1997 | BRAZIL | MFGR#22 | 1251221641 | | 1997 | BRAZIL | MFGR#23 | 1552552455 | | 1997 | BRAZIL | MFGR#24 | 929057361 | | 1997 | BRAZIL | MFGR#25 | 574645288 | | 1997 | CANADA | MFGR#11 | 1170341370 | | 1997 | CANADA | MFGR#12 | 1220238121 | | 1997 | CANADA | MFGR#13 | 1245774025 | | 1997 | CANADA | MFGR#14 | 1032046642 | | 1997 | CANADA | MFGR#15 | 738650612 | | 1997 | CANADA | MFGR#21 | 1476055209 | | 1997 | CANADA | MFGR#22 | 1239005798 | | 1997 | CANADA | MFGR#23 | 869393804 | | 1997 | CANADA | MFGR#24 | 1466964051 | | 1997 | CANADA | MFGR#25 | 1358922727 | | 1997 | PERU | MFGR#11 | 1031023174 | | 1997 | PERU | MFGR#12 | 731821491 | | 1997 | PERU | MFGR#13 | 1044642877 | | 1997 | PERU | MFGR#14 | 654877417 | | 1997 | PERU | MFGR#15 | 1201769474 | | 1997 | PERU | MFGR#21 | 1275496672 | | 1997 | PERU | MFGR#22 | 599324545 | | 1997 | PERU | MFGR#23 | 1200754744 | | 1997 | PERU | MFGR#24 | 942152801 | | 1997 | PERU | MFGR#25 | 1064322995 | | 1997 | UNITED STATES | MFGR#11 | 2365218925 | | 1997 | UNITED STATES | MFGR#12 | 1132346574 | | 1997 | UNITED STATES | MFGR#13 | 2460882362 | | 1997 | UNITED STATES | MFGR#14 | 2190816877 | | 1997 | UNITED STATES | MFGR#15 | 1687829921 | | 1997 | UNITED STATES | MFGR#21 | 2125880770 | | 1997 | UNITED STATES | MFGR#22 | 2013348097 | | 1997 | UNITED STATES | MFGR#23 | 2570581084 | | 1997 | UNITED STATES | MFGR#24 | 2724372315 | | 1997 | UNITED STATES | MFGR#25 | 1480012758 | | 1998 | ARGENTINA | MFGR#11 | 783662770 | | 1998 | ARGENTINA | MFGR#12 | 472818450 | | 1998 | ARGENTINA | MFGR#13 | 585091533 | | 1998 | ARGENTINA | MFGR#14 | 507297527 | | 1998 | ARGENTINA | MFGR#15 | 549185408 | | 1998 | ARGENTINA | MFGR#21 | 972928972 | | 1998 | ARGENTINA | MFGR#22 | 1508294213 | | 1998 | ARGENTINA | MFGR#23 | 517896738 | | 1998 | ARGENTINA | MFGR#24 | 240754731 | | 1998 | ARGENTINA | MFGR#25 | 757030162 | | 1998 | BRAZIL | MFGR#11 | 826283793 | | 1998 | BRAZIL | MFGR#12 | 482293349 | | 1998 | BRAZIL | MFGR#13 | 1037202334 | | 1998 | BRAZIL | MFGR#14 | 743598666 | | 1998 | BRAZIL | MFGR#15 | 584176304 | | 1998 | BRAZIL | MFGR#21 | 557259779 | | 1998 | BRAZIL | MFGR#22 | 535654445 | | 1998 | BRAZIL | MFGR#23 | 403656721 | | 1998 | BRAZIL | MFGR#24 | 1305217551 | | 1998 | BRAZIL | MFGR#25 | 1109801463 | | 1998 | CANADA | MFGR#11 | 936169617 | | 1998 | CANADA | MFGR#12 | 1017751308 | | 1998 | CANADA | MFGR#13 | 850046376 | | 1998 | CANADA | MFGR#14 | 808138010 | | 1998 | CANADA | MFGR#15 | 701990010 | | 1998 | CANADA | MFGR#21 | 402611051 | | 1998 | CANADA | MFGR#22 | 382705122 | | 1998 | CANADA | MFGR#23 | 509674722 | | 1998 | CANADA | MFGR#24 | 1003021250 | | 1998 | CANADA | MFGR#25 | 574602788 | | 1998 | PERU | MFGR#11 | 552608732 | | 1998 | PERU | MFGR#12 | 500581456 | | 1998 | PERU | MFGR#13 | 894607711 | | 1998 | PERU | MFGR#14 | 386487826 | | 1998 | PERU | MFGR#15 | 1044780577 | | 1998 | PERU | MFGR#21 | 184346232 | | 1998 | PERU | MFGR#22 | 674942976 | | 1998 | PERU | MFGR#23 | 665523956 | | 1998 | PERU | MFGR#24 | 631374203 | | 1998 | PERU | MFGR#25 | 602609608 | | 1998 | UNITED STATES | MFGR#11 | 1230069867 | | 1998 | UNITED STATES | MFGR#12 | 1557720319 | | 1998 | UNITED STATES | MFGR#13 | 999206739 | | 1998 | UNITED STATES | MFGR#14 | 605040268 | | 1998 | UNITED STATES | MFGR#15 | 850219215 | | 1998 | UNITED STATES | MFGR#21 | 1032550760 | | 1998 | UNITED STATES | MFGR#22 | 1370141401 | | 1998 | UNITED STATES | MFGR#23 | 1226632297 | | 1998 | UNITED STATES | MFGR#24 | 1528135100 | | 1998 | UNITED STATES | MFGR#25 | 1127867278 | +------+---------------+------------+------------+ --Q4.3 +------+------------+-----------+-----------+ | year | s_city | p_brand | profit | +------+------------+-----------+-----------+ | 1997 | UNITED ST0 | MFGR#1410 | 58481513 | | 1997 | UNITED ST0 | MFGR#1412 | 33582225 | | 1997 | UNITED ST0 | MFGR#1413 | 135625490 | | 1997 | UNITED ST0 | MFGR#1414 | 18581969 | | 1997 | UNITED ST0 | MFGR#142 | 164080005 | | 1997 | UNITED ST0 | MFGR#1420 | 30831591 | | 1997 | UNITED ST0 | MFGR#1424 | 4085253 | | 1997 | UNITED ST0 | MFGR#1425 | 163183170 | | 1997 | UNITED ST0 | MFGR#1427 | 87578288 | | 1997 | UNITED ST0 | MFGR#1428 | 109488143 | | 1997 | UNITED ST0 | MFGR#143 | 198055627 | | 1997 | UNITED ST0 | MFGR#1430 | 52544552 | | 1997 | UNITED ST0 | MFGR#1432 | 158742311 | | 1997 | UNITED ST0 | MFGR#144 | 43479982 | | 1997 | UNITED ST0 | MFGR#1440 | 40412893 | | 1997 | UNITED ST0 | MFGR#145 | 175568435 | | 1997 | UNITED ST1 | MFGR#141 | 11932912 | | 1997 | UNITED ST1 | MFGR#1411 | 40637463 | | 1997 | UNITED ST1 | MFGR#1415 | 27562355 | | 1997 | UNITED ST1 | MFGR#1421 | 100271780 | | 1997 | UNITED ST1 | MFGR#1422 | 103286764 | | 1997 | UNITED ST1 | MFGR#1423 | 106114459 | | 1997 | UNITED ST1 | MFGR#1427 | 157715681 | | 1997 | UNITED ST1 | MFGR#1428 | 91550168 | | 1997 | UNITED ST1 | MFGR#1430 | 56560173 | | 1997 | UNITED ST1 | MFGR#1431 | 248448914 | | 1997 | UNITED ST1 | MFGR#1435 | 994228 | | 1997 | UNITED ST1 | MFGR#144 | 55729825 | | 1997 | UNITED ST1 | MFGR#145 | 118034196 | | 1997 | UNITED ST1 | MFGR#146 | 99170724 | | 1997 | UNITED ST1 | MFGR#147 | 5123001 | | 1997 | UNITED ST2 | MFGR#141 | 111908637 | | 1997 | UNITED ST2 | MFGR#1414 | 96864725 | | 1997 | UNITED ST2 | MFGR#1415 | 123601050 | | 1997 | UNITED ST2 | MFGR#1421 | 21014618 | | 1997 | UNITED ST2 | MFGR#1427 | 46524767 | | 1997 | UNITED ST2 | MFGR#1429 | 18800062 | | 1997 | UNITED ST2 | MFGR#1431 | 79199532 | | 1997 | UNITED ST2 | MFGR#1432 | 53841788 | | 1997 | UNITED ST2 | MFGR#1433 | 133842836 | | 1997 | UNITED ST2 | MFGR#1434 | 96443006 | | 1997 | UNITED ST2 | MFGR#1435 | 50858424 | | 1997 | UNITED ST2 | MFGR#1438 | 64571457 | | 1997 | UNITED ST2 | MFGR#144 | 61319000 | | 1997 | UNITED ST2 | MFGR#146 | 69558050 | | 1997 | UNITED ST2 | MFGR#147 | 41160961 | | 1997 | UNITED ST2 | MFGR#149 | 31735872 | | 1997 | UNITED ST3 | MFGR#1410 | 306449140 | | 1997 | UNITED ST3 | MFGR#1411 | 114677189 | | 1997 | UNITED ST3 | MFGR#1412 | 49229127 | | 1997 | UNITED ST3 | MFGR#1413 | 174911640 | | 1997 | UNITED ST3 | MFGR#1415 | 134932298 | | 1997 | UNITED ST3 | MFGR#1416 | 97111854 | | 1997 | UNITED ST3 | MFGR#1417 | 176279103 | | 1997 | UNITED ST3 | MFGR#1418 | 70684147 | | 1997 | UNITED ST3 | MFGR#1420 | 27591782 | | 1997 | UNITED ST3 | MFGR#1422 | 39411253 | | 1997 | UNITED ST3 | MFGR#1424 | 226736650 | | 1997 | UNITED ST3 | MFGR#1426 | 63997112 | | 1997 | UNITED ST3 | MFGR#1429 | 556053 | | 1997 | UNITED ST3 | MFGR#143 | 73550925 | | 1997 | UNITED ST3 | MFGR#1430 | 218807697 | | 1997 | UNITED ST3 | MFGR#1431 | 39936281 | | 1997 | UNITED ST3 | MFGR#1432 | 44356689 | | 1997 | UNITED ST3 | MFGR#1435 | 49225455 | | 1997 | UNITED ST3 | MFGR#1436 | 90326644 | | 1997 | UNITED ST3 | MFGR#1439 | 84615817 | | 1997 | UNITED ST3 | MFGR#144 | 59081596 | | 1997 | UNITED ST3 | MFGR#1440 | 59601014 | | 1997 | UNITED ST3 | MFGR#145 | 100692258 | | 1997 | UNITED ST3 | MFGR#147 | 142417874 | | 1997 | UNITED ST3 | MFGR#148 | 38233221 | | 1997 | UNITED ST5 | MFGR#1416 | 62387773 | | 1997 | UNITED ST5 | MFGR#1417 | 54974702 | | 1997 | UNITED ST5 | MFGR#1418 | 87301086 | | 1997 | UNITED ST5 | MFGR#1421 | 9869673 | | 1997 | UNITED ST5 | MFGR#1422 | 58912225 | | 1997 | UNITED ST5 | MFGR#1424 | 80038584 | | 1997 | UNITED ST5 | MFGR#1428 | 44422717 | | 1997 | UNITED ST5 | MFGR#1430 | 67186074 | | 1997 | UNITED ST5 | MFGR#1433 | 105646942 | | 1997 | UNITED ST5 | MFGR#1434 | 13923867 | | 1997 | UNITED ST5 | MFGR#145 | 104286534 | | 1997 | UNITED ST5 | MFGR#146 | 20965182 | | 1997 | UNITED ST5 | MFGR#148 | 170596496 | | 1997 | UNITED ST5 | MFGR#149 | 42639213 | | 1997 | UNITED ST6 | MFGR#1411 | 48199726 | | 1997 | UNITED ST6 | MFGR#1413 | 28825982 | | 1997 | UNITED ST6 | MFGR#1414 | 107783723 | | 1997 | UNITED ST6 | MFGR#1415 | 92119787 | | 1997 | UNITED ST6 | MFGR#1416 | 35390328 | | 1997 | UNITED ST6 | MFGR#1417 | 92594053 | | 1997 | UNITED ST6 | MFGR#1418 | 67638716 | | 1997 | UNITED ST6 | MFGR#1421 | 98608466 | | 1997 | UNITED ST6 | MFGR#143 | 23938737 | | 1997 | UNITED ST6 | MFGR#1432 | 104846191 | | 1997 | UNITED ST6 | MFGR#1435 | 185809031 | | 1997 | UNITED ST6 | MFGR#1436 | 82920407 | | 1997 | UNITED ST6 | MFGR#1438 | 137524730 | | 1997 | UNITED ST6 | MFGR#146 | 28124052 | | 1997 | UNITED ST7 | MFGR#141 | 65266383 | | 1997 | UNITED ST7 | MFGR#1411 | 78295166 | | 1997 | UNITED ST7 | MFGR#1413 | 37554700 | | 1997 | UNITED ST7 | MFGR#1414 | 20428356 | | 1997 | UNITED ST7 | MFGR#1416 | 92381468 | | 1997 | UNITED ST7 | MFGR#1418 | 105276410 | | 1997 | UNITED ST7 | MFGR#1419 | 116086880 | | 1997 | UNITED ST7 | MFGR#1420 | 62010492 | | 1997 | UNITED ST7 | MFGR#1428 | 50904528 | | 1997 | UNITED ST7 | MFGR#1430 | 103558679 | | 1997 | UNITED ST7 | MFGR#1431 | 38342548 | | 1997 | UNITED ST7 | MFGR#1436 | 59859992 | | 1997 | UNITED ST7 | MFGR#1437 | 90701341 | | 1997 | UNITED ST7 | MFGR#147 | 133840269 | | 1997 | UNITED ST7 | MFGR#148 | 175852097 | | 1997 | UNITED ST9 | MFGR#1411 | 62786695 | | 1997 | UNITED ST9 | MFGR#1416 | 25354497 | | 1997 | UNITED ST9 | MFGR#1417 | 47367797 | | 1997 | UNITED ST9 | MFGR#1418 | 27220077 | | 1997 | UNITED ST9 | MFGR#142 | 41015203 | | 1997 | UNITED ST9 | MFGR#1423 | 41473506 | | 1997 | UNITED ST9 | MFGR#1424 | 10735092 | | 1997 | UNITED ST9 | MFGR#1425 | 27926087 | | 1997 | UNITED ST9 | MFGR#1426 | 136645966 | | 1997 | UNITED ST9 | MFGR#1430 | 41283531 | | 1997 | UNITED ST9 | MFGR#1433 | 497505 | | 1997 | UNITED ST9 | MFGR#1434 | 101147110 | | 1997 | UNITED ST9 | MFGR#1436 | 30923170 | | 1997 | UNITED ST9 | MFGR#145 | 18049495 | | 1997 | UNITED ST9 | MFGR#146 | 43726737 | | 1998 | UNITED ST0 | MFGR#1413 | 131487843 | | 1998 | UNITED ST0 | MFGR#1426 | 52942692 | | 1998 | UNITED ST0 | MFGR#146 | 13567224 | | 1998 | UNITED ST1 | MFGR#1410 | 65992198 | | 1998 | UNITED ST1 | MFGR#1416 | 115552383 | | 1998 | UNITED ST1 | MFGR#1418 | 15646035 | | 1998 | UNITED ST1 | MFGR#1419 | 129708776 | | 1998 | UNITED ST1 | MFGR#1428 | 18176281 | | 1998 | UNITED ST1 | MFGR#1431 | 17985830 | | 1998 | UNITED ST1 | MFGR#1436 | 16714417 | | 1998 | UNITED ST1 | MFGR#145 | 48297153 | | 1998 | UNITED ST2 | MFGR#1418 | 9240384 | | 1998 | UNITED ST2 | MFGR#1419 | 40909344 | | 1998 | UNITED ST2 | MFGR#1420 | 78625306 | | 1998 | UNITED ST2 | MFGR#1426 | 67161050 | | 1998 | UNITED ST2 | MFGR#1430 | 19028508 | | 1998 | UNITED ST2 | MFGR#1434 | 127804385 | | 1998 | UNITED ST2 | MFGR#1435 | 75092689 | | 1998 | UNITED ST2 | MFGR#1436 | 54579894 | | 1998 | UNITED ST2 | MFGR#1440 | 29067722 | | 1998 | UNITED ST2 | MFGR#148 | 78886426 | | 1998 | UNITED ST3 | MFGR#141 | 4311846 | | 1998 | UNITED ST3 | MFGR#1412 | 98979253 | | 1998 | UNITED ST3 | MFGR#1415 | 102275672 | | 1998 | UNITED ST3 | MFGR#1416 | 50781431 | | 1998 | UNITED ST3 | MFGR#1419 | 37451476 | | 1998 | UNITED ST3 | MFGR#1420 | 24660608 | | 1998 | UNITED ST3 | MFGR#1422 | 98548762 | | 1998 | UNITED ST3 | MFGR#1424 | 96601854 | | 1998 | UNITED ST3 | MFGR#1425 | 74508450 | | 1998 | UNITED ST3 | MFGR#1426 | 330583054 | | 1998 | UNITED ST3 | MFGR#1427 | 41352585 | | 1998 | UNITED ST3 | MFGR#1428 | 61979722 | | 1998 | UNITED ST3 | MFGR#1429 | 869295 | | 1998 | UNITED ST3 | MFGR#1432 | 66991135 | | 1998 | UNITED ST3 | MFGR#146 | 35929398 | | 1998 | UNITED ST3 | MFGR#147 | 8484972 | | 1998 | UNITED ST3 | MFGR#149 | 11793257 | | 1998 | UNITED ST5 | MFGR#1410 | 55951811 | | 1998 | UNITED ST5 | MFGR#1413 | 13403140 | | 1998 | UNITED ST5 | MFGR#142 | 24156762 | | 1998 | UNITED ST5 | MFGR#1422 | 105826683 | | 1998 | UNITED ST5 | MFGR#1430 | 67851607 | | 1998 | UNITED ST5 | MFGR#1431 | 84833774 | | 1998 | UNITED ST5 | MFGR#1434 | 45541810 | | 1998 | UNITED ST5 | MFGR#1437 | 33353745 | | 1998 | UNITED ST5 | MFGR#146 | 19891496 | | 1998 | UNITED ST6 | MFGR#1413 | 135522572 | | 1998 | UNITED ST6 | MFGR#1416 | 185707286 | | 1998 | UNITED ST6 | MFGR#1417 | 80511133 | | 1998 | UNITED ST6 | MFGR#1419 | 127132766 | | 1998 | UNITED ST6 | MFGR#142 | 72629474 | | 1998 | UNITED ST6 | MFGR#1435 | 158543190 | | 1998 | UNITED ST7 | MFGR#1412 | 56750777 | | 1998 | UNITED ST7 | MFGR#1424 | 89508621 | | 1998 | UNITED ST7 | MFGR#1425 | 160377031 | | 1998 | UNITED ST7 | MFGR#1434 | 20882477 | | 1998 | UNITED ST7 | MFGR#146 | 100783548 | | 1998 | UNITED ST7 | MFGR#147 | 61595522 | | 1998 | UNITED ST9 | MFGR#1412 | 5049765 | | 1998 | UNITED ST9 | MFGR#142 | 69919113 | | 1998 | UNITED ST9 | MFGR#1425 | 11003199 | | 1998 | UNITED ST9 | MFGR#1426 | 103616972 | | 1998 | UNITED ST9 | MFGR#1435 | 18879758 | | 1998 | UNITED ST9 | MFGR#1438 | 101903219 | +------+------------+-----------+-----------+","title":"Flat table queries expected results"},{"location":"MatrixOne/Tutorial/SSB-test-with-matrixone/#multiple-tables-queries-expected-results","text":"--Q1.1 +--------------+ | revenue | +--------------+ | 218453880421 | +--------------+ --Q1.2 +---------+ | revenue | +---------+ | NULL | +---------+ --Q1.3 +-------------+ | revenue | +-------------+ | 17527575453 | +-------------+ --Q2.1 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1135676414 | 1992 | MFGR#121 | | 1221327580 | 1992 | MFGR#1210 | | 1101539324 | 1992 | MFGR#1211 | | 1298411712 | 1992 | MFGR#1212 | | 1248062482 | 1992 | MFGR#1213 | | 1340976936 | 1992 | MFGR#1214 | | 1266304940 | 1992 | MFGR#1215 | | 1349693562 | 1992 | MFGR#1216 | | 1350186870 | 1992 | MFGR#1217 | | 1200404140 | 1992 | MFGR#1218 | | 1076087188 | 1992 | MFGR#1219 | | 1310653344 | 1992 | MFGR#122 | | 1080525764 | 1992 | MFGR#1220 | | 1112241266 | 1992 | MFGR#1221 | | 1181525554 | 1992 | MFGR#1222 | | 1070897302 | 1992 | MFGR#1223 | | 1407505222 | 1992 | MFGR#1224 | | 1141665736 | 1992 | MFGR#1225 | | 1228123186 | 1992 | MFGR#1226 | | 1163518776 | 1992 | MFGR#1227 | | 1289285184 | 1992 | MFGR#1228 | | 1281716860 | 1992 | MFGR#1229 | | 1579511670 | 1992 | MFGR#123 | | 937070174 | 1992 | MFGR#1230 | | 1184873312 | 1992 | MFGR#1231 | | 1328550304 | 1992 | MFGR#1232 | | 1227770200 | 1992 | MFGR#1233 | | 1334798562 | 1992 | MFGR#1234 | | 1280580140 | 1992 | MFGR#1235 | | 1003785122 | 1992 | MFGR#1236 | | 1182963006 | 1992 | MFGR#1237 | | 954847540 | 1992 | MFGR#1238 | | 1276518748 | 1992 | MFGR#1239 | | 1144708392 | 1992 | MFGR#124 | | 1480958496 | 1992 | MFGR#1240 | | 957554190 | 1992 | MFGR#125 | | 1184349232 | 1992 | MFGR#126 | | 1412303264 | 1992 | MFGR#127 | | 1084613292 | 1992 | MFGR#128 | | 1163974704 | 1992 | MFGR#129 | | 1646175404 | 1993 | MFGR#121 | | 1296321412 | 1993 | MFGR#1210 | | 1269487796 | 1993 | MFGR#1211 | | 1571278566 | 1993 | MFGR#1212 | | 1276510058 | 1993 | MFGR#1213 | | 1233674474 | 1993 | MFGR#1214 | | 1269375950 | 1993 | MFGR#1215 | | 1276707800 | 1993 | MFGR#1216 | | 1326745902 | 1993 | MFGR#1217 | | 1367971710 | 1993 | MFGR#1218 | | 1293900066 | 1993 | MFGR#1219 | | 1245065968 | 1993 | MFGR#122 | | 1061660254 | 1993 | MFGR#1220 | | 1086692674 | 1993 | MFGR#1221 | | 1513842406 | 1993 | MFGR#1222 | | 1067088700 | 1993 | MFGR#1223 | | 1831832170 | 1993 | MFGR#1224 | | 946014762 | 1993 | MFGR#1225 | | 1478072248 | 1993 | MFGR#1226 | | 1184357774 | 1993 | MFGR#1227 | | 1167014116 | 1993 | MFGR#1228 | | 1234906982 | 1993 | MFGR#1229 | | 1275727736 | 1993 | MFGR#123 | | 1251068620 | 1993 | MFGR#1230 | | 1160655270 | 1993 | MFGR#1231 | | 1394746196 | 1993 | MFGR#1232 | | 1031142832 | 1993 | MFGR#1233 | | 1303871516 | 1993 | MFGR#1234 | | 1151558960 | 1993 | MFGR#1235 | | 1183757334 | 1993 | MFGR#1236 | | 1219237152 | 1993 | MFGR#1237 | | 889228020 | 1993 | MFGR#1238 | | 1190512654 | 1993 | MFGR#1239 | | 1321172474 | 1993 | MFGR#124 | | 1577460118 | 1993 | MFGR#1240 | | 1232449078 | 1993 | MFGR#125 | | 1234253508 | 1993 | MFGR#126 | | 1308876648 | 1993 | MFGR#127 | | 1463314002 | 1993 | MFGR#128 | | 1096096790 | 1993 | MFGR#129 | | 1128811296 | 1994 | MFGR#121 | | 1290809698 | 1994 | MFGR#1210 | | 1263241270 | 1994 | MFGR#1211 | | 1136664696 | 1994 | MFGR#1212 | | 1357571714 | 1994 | MFGR#1213 | | 1068004660 | 1994 | MFGR#1214 | | 1308800484 | 1994 | MFGR#1215 | | 1117292682 | 1994 | MFGR#1216 | | 1375691282 | 1994 | MFGR#1217 | | 1093348694 | 1994 | MFGR#1218 | | 1134545884 | 1994 | MFGR#1219 | | 1319768124 | 1994 | MFGR#122 | | 1125164344 | 1994 | MFGR#1220 | | 1197237994 | 1994 | MFGR#1221 | | 1202032882 | 1994 | MFGR#1222 | | 1110268808 | 1994 | MFGR#1223 | | 1474844604 | 1994 | MFGR#1224 | | 1141491910 | 1994 | MFGR#1225 | | 1492604490 | 1994 | MFGR#1226 | | 1303414962 | 1994 | MFGR#1227 | | 1147387094 | 1994 | MFGR#1228 | | 1295836746 | 1994 | MFGR#1229 | | 1160899184 | 1994 | MFGR#123 | | 986540824 | 1994 | MFGR#1230 | | 1207092296 | 1994 | MFGR#1231 | | 1439730662 | 1994 | MFGR#1232 | | 1277964476 | 1994 | MFGR#1233 | | 1486495354 | 1994 | MFGR#1234 | | 1197361918 | 1994 | MFGR#1235 | | 1231452194 | 1994 | MFGR#1236 | | 1085139630 | 1994 | MFGR#1237 | | 1147021562 | 1994 | MFGR#1238 | | 1159711706 | 1994 | MFGR#1239 | | 1369146644 | 1994 | MFGR#124 | | 1747471474 | 1994 | MFGR#1240 | | 1120976608 | 1994 | MFGR#125 | | 1314073028 | 1994 | MFGR#126 | | 1245142366 | 1994 | MFGR#127 | | 1173691328 | 1994 | MFGR#128 | | 1069083050 | 1994 | MFGR#129 | | 1412939022 | 1995 | MFGR#121 | | 1205785606 | 1995 | MFGR#1210 | | 1290332184 | 1995 | MFGR#1211 | | 1226578566 | 1995 | MFGR#1212 | | 1199172958 | 1995 | MFGR#1213 | | 1125141608 | 1995 | MFGR#1214 | | 1345057510 | 1995 | MFGR#1215 | | 1338001944 | 1995 | MFGR#1216 | | 1450724898 | 1995 | MFGR#1217 | | 1314053270 | 1995 | MFGR#1218 | | 1039318006 | 1995 | MFGR#1219 | | 1449455482 | 1995 | MFGR#122 | | 1035912262 | 1995 | MFGR#1220 | | 1271482702 | 1995 | MFGR#1221 | | 1128736820 | 1995 | MFGR#1222 | | 1201330298 | 1995 | MFGR#1223 | | 1525400702 | 1995 | MFGR#1224 | | 1343339172 | 1995 | MFGR#1225 | | 1145137496 | 1995 | MFGR#1226 | | 1060722600 | 1995 | MFGR#1227 | | 1266714170 | 1995 | MFGR#1228 | | 1095920488 | 1995 | MFGR#1229 | | 1321422154 | 1995 | MFGR#123 | | 1205471716 | 1995 | MFGR#1230 | | 999704292 | 1995 | MFGR#1231 | | 1430601506 | 1995 | MFGR#1232 | | 1114299142 | 1995 | MFGR#1233 | | 1420046118 | 1995 | MFGR#1234 | | 1244850478 | 1995 | MFGR#1235 | | 1269131002 | 1995 | MFGR#1236 | | 1145694540 | 1995 | MFGR#1237 | | 1098637824 | 1995 | MFGR#1238 | | 1187703424 | 1995 | MFGR#1239 | | 1170843630 | 1995 | MFGR#124 | | 1414415776 | 1995 | MFGR#1240 | | 1076493744 | 1995 | MFGR#125 | | 1211598042 | 1995 | MFGR#126 | | 1331956224 | 1995 | MFGR#127 | | 1293921912 | 1995 | MFGR#128 | | 1017498802 | 1995 | MFGR#129 | | 1047758290 | 1996 | MFGR#121 | | 1287290106 | 1996 | MFGR#1210 | | 1190130678 | 1996 | MFGR#1211 | | 1349252880 | 1996 | MFGR#1212 | | 992594174 | 1996 | MFGR#1213 | | 1166499010 | 1996 | MFGR#1214 | | 1404369714 | 1996 | MFGR#1215 | | 1203618668 | 1996 | MFGR#1216 | | 1409796774 | 1996 | MFGR#1217 | | 1057686172 | 1996 | MFGR#1218 | | 1172492660 | 1996 | MFGR#1219 | | 1424220984 | 1996 | MFGR#122 | | 1036888430 | 1996 | MFGR#1220 | | 998638828 | 1996 | MFGR#1221 | | 1358938712 | 1996 | MFGR#1222 | | 1257525508 | 1996 | MFGR#1223 | | 1449689712 | 1996 | MFGR#1224 | | 1321241174 | 1996 | MFGR#1225 | | 1335349458 | 1996 | MFGR#1226 | | 967676170 | 1996 | MFGR#1227 | | 1219710782 | 1996 | MFGR#1228 | | 1317919114 | 1996 | MFGR#1229 | | 1132435704 | 1996 | MFGR#123 | | 1057759996 | 1996 | MFGR#1230 | | 1178962388 | 1996 | MFGR#1231 | | 1405611792 | 1996 | MFGR#1232 | | 1327359894 | 1996 | MFGR#1233 | | 1142298900 | 1996 | MFGR#1234 | | 957296148 | 1996 | MFGR#1235 | | 1136498730 | 1996 | MFGR#1236 | | 1185232334 | 1996 | MFGR#1237 | | 933352296 | 1996 | MFGR#1238 | | 1341387438 | 1996 | MFGR#1239 | | 1121335438 | 1996 | MFGR#124 | | 1642335900 | 1996 | MFGR#1240 | | 953728666 | 1996 | MFGR#125 | | 1116061768 | 1996 | MFGR#126 | | 1271747782 | 1996 | MFGR#127 | | 1102021236 | 1996 | MFGR#128 | | 1121141260 | 1996 | MFGR#129 | | 1174026414 | 1997 | MFGR#121 | | 1232575784 | 1997 | MFGR#1210 | | 1097177522 | 1997 | MFGR#1211 | | 1179187784 | 1997 | MFGR#1212 | | 848613340 | 1997 | MFGR#1213 | | 1023943820 | 1997 | MFGR#1214 | | 1263544492 | 1997 | MFGR#1215 | | 1384270280 | 1997 | MFGR#1216 | | 1555989914 | 1997 | MFGR#1217 | | 1414107440 | 1997 | MFGR#1218 | | 1122339054 | 1997 | MFGR#1219 | | 1329832490 | 1997 | MFGR#122 | | 1188932314 | 1997 | MFGR#1220 | | 1177696342 | 1997 | MFGR#1221 | | 1057977920 | 1997 | MFGR#1222 | | 1074196422 | 1997 | MFGR#1223 | | 1349526332 | 1997 | MFGR#1224 | | 900804584 | 1997 | MFGR#1225 | | 1402721444 | 1997 | MFGR#1226 | | 1012023140 | 1997 | MFGR#1227 | | 1171157474 | 1997 | MFGR#1228 | | 1245488032 | 1997 | MFGR#1229 | | 1293006336 | 1997 | MFGR#123 | | 1143601882 | 1997 | MFGR#1230 | | 1005203580 | 1997 | MFGR#1231 | | 1355849312 | 1997 | MFGR#1232 | | 1068911952 | 1997 | MFGR#1233 | | 1429869430 | 1997 | MFGR#1234 | | 1534302840 | 1997 | MFGR#1235 | | 1237754358 | 1997 | MFGR#1236 | | 1279276114 | 1997 | MFGR#1237 | | 803906838 | 1997 | MFGR#1238 | | 1221513428 | 1997 | MFGR#1239 | | 1086496174 | 1997 | MFGR#124 | | 1350265384 | 1997 | MFGR#1240 | | 958198730 | 1997 | MFGR#125 | | 1141393136 | 1997 | MFGR#126 | | 1166149184 | 1997 | MFGR#127 | | 1390266208 | 1997 | MFGR#128 | | 1311277552 | 1997 | MFGR#129 | | 689151850 | 1998 | MFGR#121 | | 834304832 | 1998 | MFGR#1210 | | 634136336 | 1998 | MFGR#1211 | | 748683032 | 1998 | MFGR#1212 | | 665481806 | 1998 | MFGR#1213 | | 609746004 | 1998 | MFGR#1214 | | 732202264 | 1998 | MFGR#1215 | | 758267796 | 1998 | MFGR#1216 | | 719016994 | 1998 | MFGR#1217 | | 641246668 | 1998 | MFGR#1218 | | 692365724 | 1998 | MFGR#1219 | | 624880054 | 1998 | MFGR#122 | | 696247922 | 1998 | MFGR#1220 | | 679690796 | 1998 | MFGR#1221 | | 710832322 | 1998 | MFGR#1222 | | 689779644 | 1998 | MFGR#1223 | | 793813382 | 1998 | MFGR#1224 | | 580417756 | 1998 | MFGR#1225 | | 838831414 | 1998 | MFGR#1226 | | 716932680 | 1998 | MFGR#1227 | | 503099910 | 1998 | MFGR#1228 | | 766277720 | 1998 | MFGR#1229 | | 592661122 | 1998 | MFGR#123 | | 874362486 | 1998 | MFGR#1230 | | 797888984 | 1998 | MFGR#1231 | | 848124910 | 1998 | MFGR#1232 | | 813934376 | 1998 | MFGR#1233 | | 857734480 | 1998 | MFGR#1234 | | 704555562 | 1998 | MFGR#1235 | | 723654172 | 1998 | MFGR#1236 | | 683237138 | 1998 | MFGR#1237 | | 489478462 | 1998 | MFGR#1238 | | 828303606 | 1998 | MFGR#1239 | | 660164742 | 1998 | MFGR#124 | | 830624906 | 1998 | MFGR#1240 | | 720579248 | 1998 | MFGR#125 | | 683315160 | 1998 | MFGR#126 | | 755014122 | 1998 | MFGR#127 | | 722832994 | 1998 | MFGR#128 | | 637539146 | 1998 | MFGR#129 | +------------+------+-----------+ --Q2.2 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1419049858 | 1992 | MFGR#2221 | | 1567692788 | 1992 | MFGR#2222 | | 1530104004 | 1992 | MFGR#2223 | | 1302977924 | 1992 | MFGR#2224 | | 1293057178 | 1992 | MFGR#2225 | | 1419301096 | 1992 | MFGR#2226 | | 1491112632 | 1992 | MFGR#2227 | | 1513803750 | 1992 | MFGR#2228 | | 1533042206 | 1993 | MFGR#2221 | | 1382951194 | 1993 | MFGR#2222 | | 1516441504 | 1993 | MFGR#2223 | | 1339325414 | 1993 | MFGR#2224 | | 1547708456 | 1993 | MFGR#2225 | | 1474175036 | 1993 | MFGR#2226 | | 1563935532 | 1993 | MFGR#2227 | | 1361760432 | 1993 | MFGR#2228 | | 1371555036 | 1994 | MFGR#2221 | | 1333049614 | 1994 | MFGR#2222 | | 1467987180 | 1994 | MFGR#2223 | | 1415738080 | 1994 | MFGR#2224 | | 1442503934 | 1994 | MFGR#2225 | | 1644991838 | 1994 | MFGR#2226 | | 1441674256 | 1994 | MFGR#2227 | | 1652450700 | 1994 | MFGR#2228 | | 1550874148 | 1995 | MFGR#2221 | | 1522709584 | 1995 | MFGR#2222 | | 1275665150 | 1995 | MFGR#2223 | | 1179531414 | 1995 | MFGR#2224 | | 1416580078 | 1995 | MFGR#2225 | | 1494712766 | 1995 | MFGR#2226 | | 1605005080 | 1995 | MFGR#2227 | | 1791873572 | 1995 | MFGR#2228 | | 1400020016 | 1996 | MFGR#2221 | | 1554620170 | 1996 | MFGR#2222 | | 1312190628 | 1996 | MFGR#2223 | | 1313719834 | 1996 | MFGR#2224 | | 1531641792 | 1996 | MFGR#2225 | | 1616355468 | 1996 | MFGR#2226 | | 1459126606 | 1996 | MFGR#2227 | | 1639331748 | 1996 | MFGR#2228 | | 1454684764 | 1997 | MFGR#2221 | | 1329067558 | 1997 | MFGR#2222 | | 1496576784 | 1997 | MFGR#2223 | | 1260844162 | 1997 | MFGR#2224 | | 1514782406 | 1997 | MFGR#2225 | | 1495778514 | 1997 | MFGR#2226 | | 1457715798 | 1997 | MFGR#2227 | | 1550625970 | 1997 | MFGR#2228 | | 670609008 | 1998 | MFGR#2221 | | 818694274 | 1998 | MFGR#2222 | | 918219154 | 1998 | MFGR#2223 | | 826636144 | 1998 | MFGR#2224 | | 820804190 | 1998 | MFGR#2225 | | 907030088 | 1998 | MFGR#2226 | | 781012810 | 1998 | MFGR#2227 | | 795878206 | 1998 | MFGR#2228 | +------------+------+-----------+ --Q2.3 +------------+------+-----------+ | lo_revenue | year | p_brand | +------------+------+-----------+ | 1452854972 | 1992 | MFGR#2239 | | 1410477918 | 1993 | MFGR#2239 | | 1328290268 | 1994 | MFGR#2239 | | 1427678672 | 1995 | MFGR#2239 | | 1456985730 | 1996 | MFGR#2239 | | 1467793064 | 1997 | MFGR#2239 | | 760511462 | 1998 | MFGR#2239 | +------------+------+-----------+ --Q3.1 +-----------+-----------+------+-------------+ | c_nation | s_nation | year | lo_revenue | +-----------+-----------+------+-------------+ | INDONESIA | INDONESIA | 1992 | 13811397976 | | CHINA | INDONESIA | 1992 | 13232157738 | | CHINA | CHINA | 1992 | 12912862954 | | VIETNAM | INDONESIA | 1992 | 12680363414 | | VIETNAM | CHINA | 1992 | 12665688780 | | INDONESIA | CHINA | 1992 | 12621419066 | | INDIA | INDONESIA | 1992 | 12477614708 | | JAPAN | INDONESIA | 1992 | 12445131276 | | CHINA | INDIA | 1992 | 12379662702 | | CHINA | JAPAN | 1992 | 12315357786 | | JAPAN | CHINA | 1992 | 12134201310 | | INDIA | CHINA | 1992 | 12132923622 | | VIETNAM | JAPAN | 1992 | 11727572698 | | JAPAN | INDIA | 1992 | 11605499970 | | INDONESIA | INDIA | 1992 | 11540406436 | | VIETNAM | INDIA | 1992 | 11397022802 | | INDONESIA | JAPAN | 1992 | 11327531220 | | JAPAN | JAPAN | 1992 | 11296069422 | | INDIA | JAPAN | 1992 | 10843918562 | | CHINA | VIETNAM | 1992 | 10824644052 | | JAPAN | VIETNAM | 1992 | 10803385110 | | INDIA | INDIA | 1992 | 10722487510 | | INDONESIA | VIETNAM | 1992 | 10605276744 | | INDIA | VIETNAM | 1992 | 10490661242 | | VIETNAM | VIETNAM | 1992 | 10223463556 | | INDONESIA | INDONESIA | 1993 | 13862726524 | | INDONESIA | CHINA | 1993 | 13225782498 | | CHINA | INDONESIA | 1993 | 13163026732 | | VIETNAM | INDONESIA | 1993 | 13023278704 | | CHINA | CHINA | 1993 | 12889027574 | | CHINA | INDIA | 1993 | 12843388242 | | VIETNAM | CHINA | 1993 | 12827159998 | | INDIA | INDONESIA | 1993 | 12662117188 | | JAPAN | CHINA | 1993 | 12584587990 | | INDIA | CHINA | 1993 | 12418707584 | | CHINA | JAPAN | 1993 | 12390933768 | | VIETNAM | INDIA | 1993 | 12322348954 | | INDONESIA | INDIA | 1993 | 12303328612 | | INDONESIA | JAPAN | 1993 | 12295210498 | | JAPAN | INDONESIA | 1993 | 12107892626 | | INDIA | JAPAN | 1993 | 11990417970 | | CHINA | VIETNAM | 1993 | 11770046456 | | VIETNAM | JAPAN | 1993 | 11748533734 | | INDONESIA | VIETNAM | 1993 | 11680575444 | | JAPAN | INDIA | 1993 | 11646686314 | | INDIA | INDIA | 1993 | 11143151598 | | VIETNAM | VIETNAM | 1993 | 11108322366 | | JAPAN | JAPAN | 1993 | 10860637166 | | JAPAN | VIETNAM | 1993 | 10813139306 | | INDIA | VIETNAM | 1993 | 10467742974 | | VIETNAM | CHINA | 1994 | 13419766884 | | CHINA | CHINA | 1994 | 13297885930 | | INDONESIA | CHINA | 1994 | 12967201820 | | CHINA | JAPAN | 1994 | 12698074042 | | VIETNAM | INDONESIA | 1994 | 12694883862 | | JAPAN | CHINA | 1994 | 12640018436 | | INDONESIA | INDONESIA | 1994 | 12630662172 | | CHINA | INDIA | 1994 | 12595165622 | | CHINA | INDONESIA | 1994 | 12469575792 | | VIETNAM | JAPAN | 1994 | 12463946094 | | INDONESIA | INDIA | 1994 | 12396824490 | | INDIA | INDONESIA | 1994 | 12336379718 | | INDONESIA | JAPAN | 1994 | 12282391938 | | JAPAN | INDONESIA | 1994 | 12026069236 | | CHINA | VIETNAM | 1994 | 11770637466 | | INDIA | CHINA | 1994 | 11630045428 | | VIETNAM | INDIA | 1994 | 11578797382 | | JAPAN | JAPAN | 1994 | 11507642964 | | JAPAN | INDIA | 1994 | 11291637744 | | INDONESIA | VIETNAM | 1994 | 11248692736 | | INDIA | INDIA | 1994 | 11169873030 | | VIETNAM | VIETNAM | 1994 | 10836996318 | | INDIA | JAPAN | 1994 | 10788269948 | | JAPAN | VIETNAM | 1994 | 10551643274 | | INDIA | VIETNAM | 1994 | 10502079630 | | CHINA | INDONESIA | 1995 | 14149078888 | | INDONESIA | CHINA | 1995 | 13857241240 | | CHINA | CHINA | 1995 | 13249333224 | | JAPAN | CHINA | 1995 | 13039778770 | | VIETNAM | CHINA | 1995 | 12665462536 | | INDONESIA | INDONESIA | 1995 | 12537062642 | | VIETNAM | JAPAN | 1995 | 12527914040 | | CHINA | INDIA | 1995 | 12493312748 | | VIETNAM | INDIA | 1995 | 12396883914 | | INDONESIA | INDIA | 1995 | 12347610366 | | VIETNAM | INDONESIA | 1995 | 12115640296 | | CHINA | JAPAN | 1995 | 12043708260 | | INDONESIA | JAPAN | 1995 | 12038187742 | | INDIA | CHINA | 1995 | 12021065586 | | INDIA | INDONESIA | 1995 | 11951037194 | | JAPAN | JAPAN | 1995 | 11904558258 | | JAPAN | INDONESIA | 1995 | 11894001470 | | VIETNAM | VIETNAM | 1995 | 11509455214 | | JAPAN | INDIA | 1995 | 11461486252 | | INDONESIA | VIETNAM | 1995 | 11149948132 | | INDIA | INDIA | 1995 | 11131991100 | | JAPAN | VIETNAM | 1995 | 11002627550 | | CHINA | VIETNAM | 1995 | 10979872126 | | INDIA | JAPAN | 1995 | 10938406854 | | INDIA | VIETNAM | 1995 | 10414126568 | | INDONESIA | INDONESIA | 1996 | 13500112566 | | CHINA | INDONESIA | 1996 | 13314250150 | | INDONESIA | CHINA | 1996 | 13226878224 | | CHINA | CHINA | 1996 | 13183395830 | | VIETNAM | CHINA | 1996 | 12857307780 | | VIETNAM | INDONESIA | 1996 | 12591253464 | | JAPAN | INDONESIA | 1996 | 12454895712 | | INDIA | CHINA | 1996 | 12397135638 | | INDIA | INDONESIA | 1996 | 12378484116 | | CHINA | INDIA | 1996 | 12307574730 | | INDONESIA | INDIA | 1996 | 12277621726 | | CHINA | JAPAN | 1996 | 12211132648 | | JAPAN | CHINA | 1996 | 12177971128 | | INDONESIA | JAPAN | 1996 | 12111276444 | | VIETNAM | JAPAN | 1996 | 11839994300 | | VIETNAM | VIETNAM | 1996 | 11721684604 | | INDIA | JAPAN | 1996 | 11683329610 | | VIETNAM | INDIA | 1996 | 11614973966 | | JAPAN | INDIA | 1996 | 11289159232 | | JAPAN | JAPAN | 1996 | 11132409590 | | INDIA | INDIA | 1996 | 11064146206 | | INDONESIA | VIETNAM | 1996 | 10877028774 | | CHINA | VIETNAM | 1996 | 10869545636 | | JAPAN | VIETNAM | 1996 | 10668555098 | | INDIA | VIETNAM | 1996 | 10587783062 | | CHINA | INDONESIA | 1997 | 13306469392 | | INDONESIA | CHINA | 1997 | 13154792628 | | CHINA | CHINA | 1997 | 12927589590 | | JAPAN | INDONESIA | 1997 | 12858540252 | | INDONESIA | INDONESIA | 1997 | 12796855642 | | VIETNAM | INDONESIA | 1997 | 12727166240 | | CHINA | JAPAN | 1997 | 12569467036 | | VIETNAM | CHINA | 1997 | 12328437446 | | INDIA | CHINA | 1997 | 12306564428 | | CHINA | INDIA | 1997 | 12168567966 | | INDONESIA | JAPAN | 1997 | 12002855912 | | INDIA | INDONESIA | 1997 | 11966878600 | | JAPAN | CHINA | 1997 | 11947699374 | | CHINA | VIETNAM | 1997 | 11816508352 | | JAPAN | INDIA | 1997 | 11593843984 | | JAPAN | JAPAN | 1997 | 11580900078 | | INDONESIA | INDIA | 1997 | 11578734210 | | VIETNAM | INDIA | 1997 | 11460243216 | | INDIA | INDIA | 1997 | 11386057814 | | VIETNAM | JAPAN | 1997 | 11378690460 | | INDONESIA | VIETNAM | 1997 | 11331356264 | | VIETNAM | VIETNAM | 1997 | 11240502648 | | INDIA | JAPAN | 1997 | 11175655826 | | JAPAN | VIETNAM | 1997 | 10499749228 | | INDIA | VIETNAM | 1997 | 10007249674 | +-----------+-----------+------+-------------+ --Q3.2 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED ST4 | UNITED ST1 | 1992 | 204054910 | | UNITED ST1 | UNITED ST0 | 1992 | 193978982 | | UNITED ST7 | UNITED ST0 | 1992 | 192156020 | | UNITED ST9 | UNITED ST0 | 1992 | 189626588 | | UNITED ST4 | UNITED ST0 | 1992 | 189288484 | | UNITED ST2 | UNITED ST4 | 1992 | 182361000 | | UNITED ST5 | UNITED ST0 | 1992 | 180864600 | | UNITED ST6 | UNITED ST7 | 1992 | 175316534 | | UNITED ST3 | UNITED ST9 | 1992 | 172284096 | | UNITED ST6 | UNITED ST5 | 1992 | 171765932 | | UNITED ST7 | UNITED ST3 | 1992 | 167531332 | | UNITED ST2 | UNITED ST9 | 1992 | 167411236 | | UNITED ST4 | UNITED ST6 | 1992 | 163772748 | | UNITED ST2 | UNITED ST1 | 1992 | 163678330 | | UNITED ST9 | UNITED ST1 | 1992 | 161590604 | | UNITED ST6 | UNITED ST3 | 1992 | 157556436 | | UNITED ST6 | UNITED ST0 | 1992 | 157393912 | | UNITED ST0 | UNITED ST1 | 1992 | 154534792 | | UNITED ST0 | UNITED ST0 | 1992 | 151244244 | | UNITED ST1 | UNITED ST9 | 1992 | 150734118 | | UNITED ST3 | UNITED ST1 | 1992 | 147274980 | | UNITED ST2 | UNITED ST0 | 1992 | 144420436 | | UNITED ST1 | UNITED ST7 | 1992 | 142945946 | | UNITED ST6 | UNITED ST4 | 1992 | 142173888 | | UNITED ST4 | UNITED ST4 | 1992 | 140222670 | | UNITED ST6 | UNITED ST1 | 1992 | 138817376 | | UNITED ST4 | UNITED ST3 | 1992 | 138003574 | | UNITED ST5 | UNITED ST7 | 1992 | 136667302 | | UNITED ST4 | UNITED ST9 | 1992 | 135675940 | | UNITED ST7 | UNITED ST6 | 1992 | 131026410 | | UNITED ST4 | UNITED ST5 | 1992 | 130115744 | | UNITED ST7 | UNITED ST4 | 1992 | 129801776 | | UNITED ST1 | UNITED ST1 | 1992 | 129338140 | | UNITED ST3 | UNITED ST5 | 1992 | 128478096 | | UNITED ST0 | UNITED ST9 | 1992 | 127959992 | | UNITED ST3 | UNITED ST4 | 1992 | 126289544 | | UNITED ST5 | UNITED ST6 | 1992 | 125256186 | | UNITED ST4 | UNITED ST7 | 1992 | 125058752 | | UNITED ST3 | UNITED ST0 | 1992 | 124883312 | | UNITED ST9 | UNITED ST4 | 1992 | 122979026 | | UNITED ST8 | UNITED ST6 | 1992 | 121080880 | | UNITED ST7 | UNITED ST9 | 1992 | 120652084 | | UNITED ST7 | UNITED ST7 | 1992 | 120242772 | | UNITED ST5 | UNITED ST1 | 1992 | 119890574 | | UNITED ST5 | UNITED ST4 | 1992 | 115251254 | | UNITED ST7 | UNITED ST5 | 1992 | 115133604 | | UNITED ST2 | UNITED ST5 | 1992 | 114042730 | | UNITED ST9 | UNITED ST7 | 1992 | 113766718 | | UNITED ST0 | UNITED ST3 | 1992 | 112718634 | | UNITED ST1 | UNITED ST3 | 1992 | 111454948 | | UNITED ST5 | UNITED ST3 | 1992 | 107927106 | | UNITED ST0 | UNITED ST7 | 1992 | 101166818 | | UNITED ST5 | UNITED ST9 | 1992 | 100382182 | | UNITED ST7 | UNITED ST1 | 1992 | 100334416 | | UNITED ST0 | UNITED ST8 | 1992 | 99465280 | | UNITED ST0 | UNITED ST4 | 1992 | 99353614 | | UNITED ST9 | UNITED ST3 | 1992 | 95362330 | | UNITED ST8 | UNITED ST4 | 1992 | 93514038 | | UNITED ST3 | UNITED ST3 | 1992 | 90174432 | | UNITED ST8 | UNITED ST0 | 1992 | 88737678 | | UNITED ST0 | UNITED ST6 | 1992 | 84943612 | | UNITED ST6 | UNITED ST8 | 1992 | 84927380 | | UNITED ST8 | UNITED ST7 | 1992 | 83795802 | | UNITED ST3 | UNITED ST8 | 1992 | 82551528 | | UNITED ST6 | UNITED ST9 | 1992 | 81183442 | | UNITED ST0 | UNITED ST5 | 1992 | 80241772 | | UNITED ST1 | UNITED ST4 | 1992 | 78652692 | | UNITED ST3 | UNITED ST7 | 1992 | 78057158 | | UNITED ST3 | UNITED ST6 | 1992 | 77597430 | | UNITED ST9 | UNITED ST9 | 1992 | 72096686 | | UNITED ST2 | UNITED ST8 | 1992 | 72092898 | | UNITED ST2 | UNITED ST3 | 1992 | 71963926 | | UNITED ST8 | UNITED ST1 | 1992 | 71361504 | | UNITED ST1 | UNITED ST6 | 1992 | 70809980 | | UNITED ST8 | UNITED ST5 | 1992 | 70375220 | | UNITED ST1 | UNITED ST5 | 1992 | 67942502 | | UNITED ST5 | UNITED ST8 | 1992 | 67756106 | | UNITED ST2 | UNITED ST7 | 1992 | 67405558 | | UNITED ST8 | UNITED ST3 | 1992 | 61898648 | | UNITED ST8 | UNITED ST8 | 1992 | 58618216 | | UNITED ST5 | UNITED ST5 | 1992 | 58559136 | | UNITED ST1 | UNITED ST8 | 1992 | 57131158 | | UNITED ST9 | UNITED ST5 | 1992 | 56150008 | | UNITED ST2 | UNITED ST6 | 1992 | 55627478 | | UNITED ST0 | UNITED ST2 | 1992 | 55437466 | | UNITED ST2 | UNITED ST2 | 1992 | 51487308 | | UNITED ST8 | UNITED ST9 | 1992 | 45368942 | | UNITED ST4 | UNITED ST8 | 1992 | 43856884 | | UNITED ST9 | UNITED ST8 | 1992 | 42772200 | | UNITED ST5 | UNITED ST2 | 1992 | 40991634 | | UNITED ST6 | UNITED ST6 | 1992 | 36274210 | | UNITED ST9 | UNITED ST6 | 1992 | 31759136 | | UNITED ST4 | UNITED ST2 | 1992 | 24123690 | | UNITED ST7 | UNITED ST8 | 1992 | 23791404 | | UNITED ST6 | UNITED ST2 | 1992 | 23641396 | | UNITED ST9 | UNITED ST2 | 1992 | 23246354 | | UNITED ST8 | UNITED ST2 | 1992 | 21943122 | | UNITED ST1 | UNITED ST2 | 1992 | 15413456 | | UNITED ST7 | UNITED ST2 | 1992 | 9886408 | | UNITED ST3 | UNITED ST2 | 1992 | 2194416 | | UNITED ST0 | UNITED ST9 | 1993 | 219668080 | | UNITED ST7 | UNITED ST0 | 1993 | 219576048 | | UNITED ST5 | UNITED ST0 | 1993 | 213645194 | | UNITED ST0 | UNITED ST0 | 1993 | 213485096 | | UNITED ST1 | UNITED ST0 | 1993 | 198611904 | | UNITED ST4 | UNITED ST4 | 1993 | 196300930 | | UNITED ST3 | UNITED ST4 | 1993 | 184987840 | | UNITED ST0 | UNITED ST1 | 1993 | 182393186 | | UNITED ST4 | UNITED ST1 | 1993 | 177042846 | | UNITED ST8 | UNITED ST0 | 1993 | 176712742 | | UNITED ST4 | UNITED ST7 | 1993 | 176344396 | | UNITED ST4 | UNITED ST0 | 1993 | 173836916 | | UNITED ST6 | UNITED ST3 | 1993 | 166834322 | | UNITED ST6 | UNITED ST1 | 1993 | 166691878 | | UNITED ST7 | UNITED ST9 | 1993 | 160621402 | | UNITED ST3 | UNITED ST1 | 1993 | 156460556 | | UNITED ST6 | UNITED ST7 | 1993 | 156394588 | | UNITED ST5 | UNITED ST9 | 1993 | 152573078 | | UNITED ST0 | UNITED ST3 | 1993 | 152342566 | | UNITED ST5 | UNITED ST8 | 1993 | 148718558 | | UNITED ST9 | UNITED ST1 | 1993 | 148118838 | | UNITED ST4 | UNITED ST9 | 1993 | 146593918 | | UNITED ST5 | UNITED ST1 | 1993 | 142909246 | | UNITED ST6 | UNITED ST4 | 1993 | 139293826 | | UNITED ST2 | UNITED ST1 | 1993 | 139263402 | | UNITED ST6 | UNITED ST0 | 1993 | 136495078 | | UNITED ST7 | UNITED ST7 | 1993 | 136219640 | | UNITED ST2 | UNITED ST3 | 1993 | 133944876 | | UNITED ST3 | UNITED ST0 | 1993 | 133253852 | | UNITED ST9 | UNITED ST7 | 1993 | 133250966 | | UNITED ST1 | UNITED ST8 | 1993 | 132292396 | | UNITED ST2 | UNITED ST7 | 1993 | 128370028 | | UNITED ST5 | UNITED ST4 | 1993 | 126831278 | | UNITED ST9 | UNITED ST9 | 1993 | 126521526 | | UNITED ST1 | UNITED ST4 | 1993 | 125768694 | | UNITED ST7 | UNITED ST4 | 1993 | 123313226 | | UNITED ST3 | UNITED ST6 | 1993 | 117169616 | | UNITED ST2 | UNITED ST4 | 1993 | 113300782 | | UNITED ST3 | UNITED ST5 | 1993 | 111814610 | | UNITED ST6 | UNITED ST9 | 1993 | 109801884 | | UNITED ST1 | UNITED ST7 | 1993 | 109702366 | | UNITED ST3 | UNITED ST9 | 1993 | 109525192 | | UNITED ST8 | UNITED ST6 | 1993 | 109266124 | | UNITED ST8 | UNITED ST3 | 1993 | 108099748 | | UNITED ST5 | UNITED ST7 | 1993 | 105491076 | | UNITED ST0 | UNITED ST5 | 1993 | 105402104 | | UNITED ST1 | UNITED ST9 | 1993 | 105029804 | | UNITED ST8 | UNITED ST5 | 1993 | 104475674 | | UNITED ST1 | UNITED ST3 | 1993 | 104195892 | | UNITED ST8 | UNITED ST4 | 1993 | 102838712 | | UNITED ST0 | UNITED ST6 | 1993 | 100864564 | | UNITED ST5 | UNITED ST5 | 1993 | 100714378 | | UNITED ST3 | UNITED ST7 | 1993 | 100270896 | | UNITED ST0 | UNITED ST4 | 1993 | 98520134 | | UNITED ST0 | UNITED ST7 | 1993 | 97592720 | | UNITED ST2 | UNITED ST9 | 1993 | 96377014 | | UNITED ST1 | UNITED ST1 | 1993 | 95077220 | | UNITED ST9 | UNITED ST3 | 1993 | 93887294 | | UNITED ST7 | UNITED ST5 | 1993 | 89527384 | | UNITED ST1 | UNITED ST6 | 1993 | 89457080 | | UNITED ST8 | UNITED ST1 | 1993 | 88830868 | | UNITED ST7 | UNITED ST8 | 1993 | 87805256 | | UNITED ST9 | UNITED ST6 | 1993 | 87734320 | | UNITED ST2 | UNITED ST0 | 1993 | 85690970 | | UNITED ST3 | UNITED ST8 | 1993 | 84503696 | | UNITED ST0 | UNITED ST8 | 1993 | 84005364 | | UNITED ST4 | UNITED ST8 | 1993 | 83315164 | | UNITED ST1 | UNITED ST5 | 1993 | 81387026 | | UNITED ST9 | UNITED ST5 | 1993 | 79370538 | | UNITED ST7 | UNITED ST3 | 1993 | 79047722 | | UNITED ST8 | UNITED ST8 | 1993 | 77580470 | | UNITED ST8 | UNITED ST9 | 1993 | 77032722 | | UNITED ST2 | UNITED ST5 | 1993 | 74813690 | | UNITED ST9 | UNITED ST8 | 1993 | 74369392 | | UNITED ST8 | UNITED ST7 | 1993 | 73804436 | | UNITED ST6 | UNITED ST8 | 1993 | 72913482 | | UNITED ST7 | UNITED ST1 | 1993 | 68782318 | | UNITED ST6 | UNITED ST5 | 1993 | 68458164 | | UNITED ST5 | UNITED ST3 | 1993 | 68063622 | | UNITED ST2 | UNITED ST8 | 1993 | 66890892 | | UNITED ST4 | UNITED ST3 | 1993 | 66258824 | | UNITED ST6 | UNITED ST6 | 1993 | 66101326 | | UNITED ST9 | UNITED ST0 | 1993 | 65306610 | | UNITED ST4 | UNITED ST6 | 1993 | 61398510 | | UNITED ST9 | UNITED ST4 | 1993 | 61289374 | | UNITED ST4 | UNITED ST5 | 1993 | 58239188 | | UNITED ST7 | UNITED ST6 | 1993 | 54201004 | | UNITED ST4 | UNITED ST2 | 1993 | 54025356 | | UNITED ST2 | UNITED ST6 | 1993 | 52964452 | | UNITED ST5 | UNITED ST6 | 1993 | 50715358 | | UNITED ST3 | UNITED ST3 | 1993 | 43554288 | | UNITED ST3 | UNITED ST2 | 1993 | 43118146 | | UNITED ST5 | UNITED ST2 | 1993 | 41220484 | | UNITED ST7 | UNITED ST2 | 1993 | 40438608 | | UNITED ST6 | UNITED ST2 | 1993 | 37628734 | | UNITED ST9 | UNITED ST2 | 1993 | 35436780 | | UNITED ST1 | UNITED ST2 | 1993 | 33689076 | | UNITED ST0 | UNITED ST2 | 1993 | 30084290 | | UNITED ST2 | UNITED ST2 | 1993 | 29043990 | | UNITED ST8 | UNITED ST2 | 1993 | 19968732 | | UNITED ST8 | UNITED ST0 | 1994 | 198441578 | | UNITED ST3 | UNITED ST9 | 1994 | 194952370 | | UNITED ST6 | UNITED ST1 | 1994 | 193874294 | | UNITED ST6 | UNITED ST9 | 1994 | 189366618 | | UNITED ST9 | UNITED ST1 | 1994 | 180881896 | | UNITED ST0 | UNITED ST9 | 1994 | 179730404 | | UNITED ST5 | UNITED ST7 | 1994 | 178179922 | | UNITED ST9 | UNITED ST0 | 1994 | 175341146 | | UNITED ST3 | UNITED ST1 | 1994 | 171047306 | | UNITED ST4 | UNITED ST9 | 1994 | 167644786 | | UNITED ST0 | UNITED ST0 | 1994 | 167053754 | | UNITED ST7 | UNITED ST0 | 1994 | 164531072 | | UNITED ST2 | UNITED ST1 | 1994 | 162600178 | | UNITED ST5 | UNITED ST0 | 1994 | 157296114 | | UNITED ST4 | UNITED ST7 | 1994 | 153908280 | | UNITED ST4 | UNITED ST4 | 1994 | 153674762 | | UNITED ST0 | UNITED ST1 | 1994 | 153226758 | | UNITED ST1 | UNITED ST3 | 1994 | 151984918 | | UNITED ST7 | UNITED ST1 | 1994 | 150641598 | | UNITED ST4 | UNITED ST0 | 1994 | 147438680 | | UNITED ST5 | UNITED ST1 | 1994 | 147016836 | | UNITED ST4 | UNITED ST1 | 1994 | 144439114 | | UNITED ST2 | UNITED ST9 | 1994 | 139342108 | | UNITED ST6 | UNITED ST5 | 1994 | 132923068 | | UNITED ST2 | UNITED ST3 | 1994 | 131241520 | | UNITED ST3 | UNITED ST0 | 1994 | 131045454 | | UNITED ST5 | UNITED ST3 | 1994 | 130669822 | | UNITED ST7 | UNITED ST4 | 1994 | 129557430 | | UNITED ST3 | UNITED ST4 | 1994 | 126824730 | | UNITED ST8 | UNITED ST4 | 1994 | 124283362 | | UNITED ST0 | UNITED ST4 | 1994 | 123039488 | | UNITED ST0 | UNITED ST7 | 1994 | 122961640 | | UNITED ST0 | UNITED ST6 | 1994 | 122577556 | | UNITED ST2 | UNITED ST0 | 1994 | 120364306 | | UNITED ST6 | UNITED ST4 | 1994 | 119659978 | | UNITED ST4 | UNITED ST5 | 1994 | 118794056 | | UNITED ST8 | UNITED ST9 | 1994 | 117333812 | | UNITED ST4 | UNITED ST6 | 1994 | 117266964 | | UNITED ST5 | UNITED ST5 | 1994 | 112470426 | | UNITED ST6 | UNITED ST3 | 1994 | 112246476 | | UNITED ST2 | UNITED ST4 | 1994 | 111358754 | | UNITED ST8 | UNITED ST3 | 1994 | 110407682 | | UNITED ST1 | UNITED ST1 | 1994 | 108766348 | | UNITED ST1 | UNITED ST7 | 1994 | 107706212 | | UNITED ST6 | UNITED ST0 | 1994 | 107457706 | | UNITED ST5 | UNITED ST9 | 1994 | 106734662 | | UNITED ST9 | UNITED ST9 | 1994 | 103961698 | | UNITED ST5 | UNITED ST4 | 1994 | 103599186 | | UNITED ST7 | UNITED ST9 | 1994 | 100288170 | | UNITED ST7 | UNITED ST7 | 1994 | 92892884 | | UNITED ST6 | UNITED ST6 | 1994 | 92399444 | | UNITED ST7 | UNITED ST5 | 1994 | 91790728 | | UNITED ST3 | UNITED ST3 | 1994 | 91254306 | | UNITED ST8 | UNITED ST5 | 1994 | 89106112 | | UNITED ST9 | UNITED ST4 | 1994 | 87821522 | | UNITED ST1 | UNITED ST0 | 1994 | 86450402 | | UNITED ST1 | UNITED ST9 | 1994 | 86000074 | | UNITED ST7 | UNITED ST8 | 1994 | 85552934 | | UNITED ST0 | UNITED ST5 | 1994 | 83616602 | | UNITED ST2 | UNITED ST6 | 1994 | 83052210 | | UNITED ST1 | UNITED ST4 | 1994 | 82763116 | | UNITED ST3 | UNITED ST7 | 1994 | 81870262 | | UNITED ST8 | UNITED ST1 | 1994 | 80304192 | | UNITED ST9 | UNITED ST8 | 1994 | 78557616 | | UNITED ST5 | UNITED ST6 | 1994 | 77316902 | | UNITED ST2 | UNITED ST5 | 1994 | 75280634 | | UNITED ST8 | UNITED ST7 | 1994 | 75201374 | | UNITED ST9 | UNITED ST5 | 1994 | 74293452 | | UNITED ST6 | UNITED ST7 | 1994 | 74115616 | | UNITED ST8 | UNITED ST6 | 1994 | 73553138 | | UNITED ST3 | UNITED ST6 | 1994 | 72580514 | | UNITED ST9 | UNITED ST3 | 1994 | 71693000 | | UNITED ST2 | UNITED ST8 | 1994 | 67535548 | | UNITED ST0 | UNITED ST8 | 1994 | 63690866 | | UNITED ST4 | UNITED ST3 | 1994 | 63198866 | | UNITED ST9 | UNITED ST7 | 1994 | 63172346 | | UNITED ST1 | UNITED ST6 | 1994 | 62574652 | | UNITED ST1 | UNITED ST8 | 1994 | 60490306 | | UNITED ST7 | UNITED ST3 | 1994 | 58849680 | | UNITED ST9 | UNITED ST6 | 1994 | 58425854 | | UNITED ST0 | UNITED ST3 | 1994 | 54655658 | | UNITED ST6 | UNITED ST8 | 1994 | 53185992 | | UNITED ST3 | UNITED ST5 | 1994 | 52395750 | | UNITED ST6 | UNITED ST2 | 1994 | 51618000 | | UNITED ST1 | UNITED ST5 | 1994 | 49878276 | | UNITED ST7 | UNITED ST6 | 1994 | 49263874 | | UNITED ST1 | UNITED ST2 | 1994 | 47113172 | | UNITED ST4 | UNITED ST2 | 1994 | 46071784 | | UNITED ST2 | UNITED ST7 | 1994 | 44365516 | | UNITED ST0 | UNITED ST2 | 1994 | 44035908 | | UNITED ST4 | UNITED ST8 | 1994 | 41370704 | | UNITED ST7 | UNITED ST2 | 1994 | 39310162 | | UNITED ST5 | UNITED ST8 | 1994 | 37863782 | | UNITED ST2 | UNITED ST2 | 1994 | 36137314 | | UNITED ST3 | UNITED ST8 | 1994 | 31872102 | | UNITED ST8 | UNITED ST8 | 1994 | 20046824 | | UNITED ST3 | UNITED ST2 | 1994 | 19990468 | | UNITED ST9 | UNITED ST2 | 1994 | 19401978 | | UNITED ST5 | UNITED ST2 | 1994 | 14325592 | | UNITED ST8 | UNITED ST2 | 1994 | 7579252 | | UNITED ST5 | UNITED ST1 | 1995 | 239587338 | | UNITED ST4 | UNITED ST9 | 1995 | 198980136 | | UNITED ST7 | UNITED ST0 | 1995 | 196062590 | | UNITED ST6 | UNITED ST0 | 1995 | 183436942 | | UNITED ST4 | UNITED ST1 | 1995 | 181757306 | | UNITED ST0 | UNITED ST1 | 1995 | 181527198 | | UNITED ST8 | UNITED ST9 | 1995 | 177710178 | | UNITED ST7 | UNITED ST7 | 1995 | 173143248 | | UNITED ST3 | UNITED ST0 | 1995 | 168925466 | | UNITED ST9 | UNITED ST1 | 1995 | 165877934 | | UNITED ST2 | UNITED ST4 | 1995 | 164864610 | | UNITED ST1 | UNITED ST0 | 1995 | 163353246 | | UNITED ST5 | UNITED ST4 | 1995 | 162033522 | | UNITED ST7 | UNITED ST1 | 1995 | 159928724 | | UNITED ST5 | UNITED ST3 | 1995 | 156198260 | | UNITED ST5 | UNITED ST0 | 1995 | 155231492 | | UNITED ST9 | UNITED ST9 | 1995 | 153031916 | | UNITED ST7 | UNITED ST9 | 1995 | 150635418 | | UNITED ST4 | UNITED ST4 | 1995 | 149174142 | | UNITED ST9 | UNITED ST4 | 1995 | 145051372 | | UNITED ST1 | UNITED ST9 | 1995 | 144941740 | | UNITED ST4 | UNITED ST7 | 1995 | 138528814 | | UNITED ST6 | UNITED ST3 | 1995 | 135026124 | | UNITED ST2 | UNITED ST3 | 1995 | 130436258 | | UNITED ST2 | UNITED ST9 | 1995 | 130110356 | | UNITED ST7 | UNITED ST6 | 1995 | 130041342 | | UNITED ST3 | UNITED ST1 | 1995 | 129525630 | | UNITED ST1 | UNITED ST1 | 1995 | 128398664 | | UNITED ST6 | UNITED ST9 | 1995 | 126914210 | | UNITED ST0 | UNITED ST9 | 1995 | 126506998 | | UNITED ST5 | UNITED ST9 | 1995 | 124729794 | | UNITED ST4 | UNITED ST5 | 1995 | 124163010 | | UNITED ST1 | UNITED ST7 | 1995 | 123031482 | | UNITED ST2 | UNITED ST7 | 1995 | 120000416 | | UNITED ST8 | UNITED ST6 | 1995 | 117980808 | | UNITED ST1 | UNITED ST4 | 1995 | 115071198 | | UNITED ST0 | UNITED ST3 | 1995 | 112721416 | | UNITED ST8 | UNITED ST0 | 1995 | 110463328 | | UNITED ST5 | UNITED ST7 | 1995 | 107481518 | | UNITED ST2 | UNITED ST0 | 1995 | 105121676 | | UNITED ST3 | UNITED ST7 | 1995 | 103159096 | | UNITED ST9 | UNITED ST0 | 1995 | 103097242 | | UNITED ST6 | UNITED ST6 | 1995 | 101909354 | | UNITED ST5 | UNITED ST5 | 1995 | 100788014 | | UNITED ST7 | UNITED ST4 | 1995 | 99799090 | | UNITED ST3 | UNITED ST3 | 1995 | 96316178 | | UNITED ST6 | UNITED ST4 | 1995 | 95394482 | | UNITED ST9 | UNITED ST7 | 1995 | 92929178 | | UNITED ST4 | UNITED ST0 | 1995 | 92285798 | | UNITED ST1 | UNITED ST3 | 1995 | 91646112 | | UNITED ST2 | UNITED ST1 | 1995 | 90874680 | | UNITED ST6 | UNITED ST5 | 1995 | 90856304 | | UNITED ST8 | UNITED ST5 | 1995 | 89989726 | | UNITED ST7 | UNITED ST3 | 1995 | 87399468 | | UNITED ST9 | UNITED ST6 | 1995 | 86964988 | | UNITED ST2 | UNITED ST5 | 1995 | 86764834 | | UNITED ST6 | UNITED ST8 | 1995 | 83947840 | | UNITED ST0 | UNITED ST6 | 1995 | 81437884 | | UNITED ST3 | UNITED ST5 | 1995 | 80115630 | | UNITED ST7 | UNITED ST5 | 1995 | 78030586 | | UNITED ST0 | UNITED ST0 | 1995 | 77969004 | | UNITED ST6 | UNITED ST1 | 1995 | 76656704 | | UNITED ST4 | UNITED ST6 | 1995 | 76219048 | | UNITED ST3 | UNITED ST9 | 1995 | 74729246 | | UNITED ST4 | UNITED ST3 | 1995 | 74712792 | | UNITED ST2 | UNITED ST6 | 1995 | 74292576 | | UNITED ST9 | UNITED ST5 | 1995 | 72019848 | | UNITED ST1 | UNITED ST8 | 1995 | 69837586 | | UNITED ST8 | UNITED ST1 | 1995 | 68435560 | | UNITED ST0 | UNITED ST7 | 1995 | 66790626 | | UNITED ST1 | UNITED ST5 | 1995 | 63714904 | | UNITED ST8 | UNITED ST7 | 1995 | 61836404 | | UNITED ST2 | UNITED ST8 | 1995 | 61008378 | | UNITED ST3 | UNITED ST4 | 1995 | 60844692 | | UNITED ST5 | UNITED ST6 | 1995 | 60409474 | | UNITED ST8 | UNITED ST3 | 1995 | 58699876 | | UNITED ST0 | UNITED ST4 | 1995 | 58340076 | | UNITED ST1 | UNITED ST6 | 1995 | 54278806 | | UNITED ST7 | UNITED ST8 | 1995 | 52888980 | | UNITED ST6 | UNITED ST7 | 1995 | 47667954 | | UNITED ST4 | UNITED ST8 | 1995 | 46106472 | | UNITED ST4 | UNITED ST2 | 1995 | 45574006 | | UNITED ST3 | UNITED ST8 | 1995 | 45010478 | | UNITED ST9 | UNITED ST8 | 1995 | 42585054 | | UNITED ST8 | UNITED ST4 | 1995 | 38574622 | | UNITED ST8 | UNITED ST2 | 1995 | 36565980 | | UNITED ST9 | UNITED ST3 | 1995 | 35078204 | | UNITED ST3 | UNITED ST6 | 1995 | 33477060 | | UNITED ST0 | UNITED ST8 | 1995 | 32786498 | | UNITED ST5 | UNITED ST2 | 1995 | 29902046 | | UNITED ST2 | UNITED ST2 | 1995 | 26910062 | | UNITED ST5 | UNITED ST8 | 1995 | 26693864 | | UNITED ST3 | UNITED ST2 | 1995 | 25773658 | | UNITED ST9 | UNITED ST2 | 1995 | 25306724 | | UNITED ST0 | UNITED ST5 | 1995 | 22907418 | | UNITED ST6 | UNITED ST2 | 1995 | 22727102 | | UNITED ST8 | UNITED ST8 | 1995 | 22571734 | | UNITED ST1 | UNITED ST2 | 1995 | 15983352 | | UNITED ST0 | UNITED ST2 | 1995 | 9552920 | | UNITED ST7 | UNITED ST2 | 1995 | 7947130 | | UNITED ST6 | UNITED ST0 | 1996 | 264573526 | | UNITED ST4 | UNITED ST0 | 1996 | 213795126 | | UNITED ST5 | UNITED ST0 | 1996 | 209003958 | | UNITED ST0 | UNITED ST4 | 1996 | 206457498 | | UNITED ST9 | UNITED ST1 | 1996 | 203967654 | | UNITED ST1 | UNITED ST0 | 1996 | 189723108 | | UNITED ST0 | UNITED ST1 | 1996 | 183897554 | | UNITED ST6 | UNITED ST1 | 1996 | 179411740 | | UNITED ST2 | UNITED ST1 | 1996 | 176512310 | | UNITED ST1 | UNITED ST1 | 1996 | 174531696 | | UNITED ST4 | UNITED ST7 | 1996 | 167355628 | | UNITED ST6 | UNITED ST3 | 1996 | 164336458 | | UNITED ST2 | UNITED ST7 | 1996 | 160936954 | | UNITED ST8 | UNITED ST1 | 1996 | 157943512 | | UNITED ST7 | UNITED ST4 | 1996 | 155882022 | | UNITED ST1 | UNITED ST3 | 1996 | 155221810 | | UNITED ST9 | UNITED ST9 | 1996 | 154603480 | | UNITED ST0 | UNITED ST9 | 1996 | 151870418 | | UNITED ST7 | UNITED ST0 | 1996 | 151204890 | | UNITED ST3 | UNITED ST1 | 1996 | 149493398 | | UNITED ST7 | UNITED ST7 | 1996 | 148081288 | | UNITED ST4 | UNITED ST1 | 1996 | 145639734 | | UNITED ST5 | UNITED ST9 | 1996 | 145228228 | | UNITED ST1 | UNITED ST9 | 1996 | 139647538 | | UNITED ST9 | UNITED ST4 | 1996 | 139233228 | | UNITED ST6 | UNITED ST4 | 1996 | 138592010 | | UNITED ST2 | UNITED ST0 | 1996 | 134190244 | | UNITED ST5 | UNITED ST1 | 1996 | 130692778 | | UNITED ST6 | UNITED ST9 | 1996 | 126512364 | | UNITED ST4 | UNITED ST6 | 1996 | 124378656 | | UNITED ST0 | UNITED ST0 | 1996 | 123057710 | | UNITED ST8 | UNITED ST9 | 1996 | 120933382 | | UNITED ST3 | UNITED ST0 | 1996 | 120453680 | | UNITED ST8 | UNITED ST6 | 1996 | 119493310 | | UNITED ST2 | UNITED ST3 | 1996 | 119297196 | | UNITED ST0 | UNITED ST5 | 1996 | 115525790 | | UNITED ST8 | UNITED ST7 | 1996 | 115047850 | | UNITED ST2 | UNITED ST4 | 1996 | 114974114 | | UNITED ST6 | UNITED ST7 | 1996 | 114181238 | | UNITED ST3 | UNITED ST4 | 1996 | 109676518 | | UNITED ST4 | UNITED ST9 | 1996 | 108269680 | | UNITED ST1 | UNITED ST6 | 1996 | 108112732 | | UNITED ST3 | UNITED ST7 | 1996 | 107974436 | | UNITED ST2 | UNITED ST9 | 1996 | 106982830 | | UNITED ST4 | UNITED ST8 | 1996 | 106071324 | | UNITED ST9 | UNITED ST5 | 1996 | 105651844 | | UNITED ST7 | UNITED ST3 | 1996 | 104713772 | | UNITED ST6 | UNITED ST8 | 1996 | 104273568 | | UNITED ST1 | UNITED ST5 | 1996 | 102379298 | | UNITED ST8 | UNITED ST4 | 1996 | 102066108 | | UNITED ST1 | UNITED ST4 | 1996 | 100271094 | | UNITED ST3 | UNITED ST9 | 1996 | 99224608 | | UNITED ST9 | UNITED ST0 | 1996 | 99181402 | | UNITED ST3 | UNITED ST3 | 1996 | 98527592 | | UNITED ST9 | UNITED ST7 | 1996 | 97597518 | | UNITED ST7 | UNITED ST1 | 1996 | 97568350 | | UNITED ST9 | UNITED ST6 | 1996 | 97370126 | | UNITED ST2 | UNITED ST5 | 1996 | 94057952 | | UNITED ST9 | UNITED ST3 | 1996 | 94042036 | | UNITED ST2 | UNITED ST8 | 1996 | 93730226 | | UNITED ST4 | UNITED ST3 | 1996 | 92921880 | | UNITED ST6 | UNITED ST5 | 1996 | 92060208 | | UNITED ST2 | UNITED ST6 | 1996 | 90833298 | | UNITED ST8 | UNITED ST5 | 1996 | 86960946 | | UNITED ST5 | UNITED ST5 | 1996 | 86041444 | | UNITED ST6 | UNITED ST6 | 1996 | 85846064 | | UNITED ST4 | UNITED ST5 | 1996 | 85616824 | | UNITED ST3 | UNITED ST6 | 1996 | 83763256 | | UNITED ST1 | UNITED ST7 | 1996 | 83443012 | | UNITED ST5 | UNITED ST7 | 1996 | 81892660 | | UNITED ST8 | UNITED ST0 | 1996 | 79690854 | | UNITED ST8 | UNITED ST3 | 1996 | 79071880 | | UNITED ST1 | UNITED ST8 | 1996 | 78861764 | | UNITED ST5 | UNITED ST6 | 1996 | 76664088 | | UNITED ST0 | UNITED ST6 | 1996 | 74464124 | | UNITED ST7 | UNITED ST6 | 1996 | 73071256 | | UNITED ST9 | UNITED ST8 | 1996 | 72224602 | | UNITED ST3 | UNITED ST8 | 1996 | 67849464 | | UNITED ST3 | UNITED ST5 | 1996 | 67434878 | | UNITED ST5 | UNITED ST4 | 1996 | 66849718 | | UNITED ST5 | UNITED ST3 | 1996 | 65839852 | | UNITED ST4 | UNITED ST4 | 1996 | 65575990 | | UNITED ST7 | UNITED ST5 | 1996 | 65568448 | | UNITED ST5 | UNITED ST8 | 1996 | 64831364 | | UNITED ST0 | UNITED ST7 | 1996 | 62782362 | | UNITED ST0 | UNITED ST3 | 1996 | 59591330 | | UNITED ST7 | UNITED ST9 | 1996 | 50056182 | | UNITED ST7 | UNITED ST8 | 1996 | 48697702 | | UNITED ST6 | UNITED ST2 | 1996 | 40895694 | | UNITED ST8 | UNITED ST8 | 1996 | 32681206 | | UNITED ST0 | UNITED ST8 | 1996 | 30336524 | | UNITED ST4 | UNITED ST2 | 1996 | 24903734 | | UNITED ST1 | UNITED ST2 | 1996 | 20165072 | | UNITED ST5 | UNITED ST2 | 1996 | 17088466 | | UNITED ST7 | UNITED ST2 | 1996 | 16780940 | | UNITED ST9 | UNITED ST2 | 1996 | 16216070 | | UNITED ST8 | UNITED ST2 | 1996 | 14056668 | | UNITED ST0 | UNITED ST2 | 1996 | 13814398 | | UNITED ST3 | UNITED ST2 | 1996 | 8623600 | | UNITED ST5 | UNITED ST0 | 1997 | 242915532 | | UNITED ST0 | UNITED ST9 | 1997 | 239712536 | | UNITED ST5 | UNITED ST1 | 1997 | 213800322 | | UNITED ST9 | UNITED ST9 | 1997 | 212445590 | | UNITED ST5 | UNITED ST4 | 1997 | 206865854 | | UNITED ST7 | UNITED ST1 | 1997 | 202653880 | | UNITED ST5 | UNITED ST9 | 1997 | 194785280 | | UNITED ST8 | UNITED ST0 | 1997 | 178869690 | | UNITED ST1 | UNITED ST3 | 1997 | 170351276 | | UNITED ST4 | UNITED ST1 | 1997 | 169222376 | | UNITED ST4 | UNITED ST7 | 1997 | 169213992 | | UNITED ST1 | UNITED ST4 | 1997 | 166185138 | | UNITED ST0 | UNITED ST1 | 1997 | 160334278 | | UNITED ST4 | UNITED ST9 | 1997 | 159395854 | | UNITED ST1 | UNITED ST0 | 1997 | 155335732 | | UNITED ST2 | UNITED ST0 | 1997 | 155182940 | | UNITED ST1 | UNITED ST7 | 1997 | 154091444 | | UNITED ST2 | UNITED ST7 | 1997 | 152967604 | | UNITED ST1 | UNITED ST1 | 1997 | 152680888 | | UNITED ST0 | UNITED ST7 | 1997 | 145154980 | | UNITED ST4 | UNITED ST0 | 1997 | 139751608 | | UNITED ST6 | UNITED ST3 | 1997 | 139451012 | | UNITED ST2 | UNITED ST9 | 1997 | 139087968 | | UNITED ST7 | UNITED ST0 | 1997 | 138708624 | | UNITED ST9 | UNITED ST7 | 1997 | 138105260 | | UNITED ST8 | UNITED ST3 | 1997 | 133836788 | | UNITED ST0 | UNITED ST0 | 1997 | 132617032 | | UNITED ST9 | UNITED ST0 | 1997 | 132133582 | | UNITED ST2 | UNITED ST3 | 1997 | 130858906 | | UNITED ST2 | UNITED ST1 | 1997 | 130792270 | | UNITED ST4 | UNITED ST4 | 1997 | 125064692 | | UNITED ST9 | UNITED ST1 | 1997 | 124836812 | | UNITED ST3 | UNITED ST7 | 1997 | 122190600 | | UNITED ST7 | UNITED ST4 | 1997 | 120246988 | | UNITED ST4 | UNITED ST3 | 1997 | 119268306 | | UNITED ST3 | UNITED ST4 | 1997 | 116712282 | | UNITED ST6 | UNITED ST9 | 1997 | 116462526 | | UNITED ST6 | UNITED ST4 | 1997 | 114430044 | | UNITED ST2 | UNITED ST4 | 1997 | 114025222 | | UNITED ST5 | UNITED ST3 | 1997 | 113579864 | | UNITED ST9 | UNITED ST5 | 1997 | 112183840 | | UNITED ST6 | UNITED ST0 | 1997 | 111649838 | | UNITED ST6 | UNITED ST1 | 1997 | 110235418 | | UNITED ST7 | UNITED ST9 | 1997 | 110079940 | | UNITED ST5 | UNITED ST7 | 1997 | 109068630 | | UNITED ST3 | UNITED ST1 | 1997 | 108301366 | | UNITED ST3 | UNITED ST0 | 1997 | 108100344 | | UNITED ST3 | UNITED ST9 | 1997 | 102740616 | | UNITED ST1 | UNITED ST5 | 1997 | 102104220 | | UNITED ST6 | UNITED ST7 | 1997 | 99591698 | | UNITED ST5 | UNITED ST6 | 1997 | 98060032 | | UNITED ST1 | UNITED ST9 | 1997 | 97888222 | | UNITED ST3 | UNITED ST3 | 1997 | 96770466 | | UNITED ST0 | UNITED ST5 | 1997 | 95976836 | | UNITED ST2 | UNITED ST8 | 1997 | 92783818 | | UNITED ST4 | UNITED ST6 | 1997 | 92473698 | | UNITED ST9 | UNITED ST3 | 1997 | 92243448 | | UNITED ST8 | UNITED ST9 | 1997 | 91705592 | | UNITED ST7 | UNITED ST8 | 1997 | 90952532 | | UNITED ST8 | UNITED ST1 | 1997 | 86568278 | | UNITED ST7 | UNITED ST7 | 1997 | 85133206 | | UNITED ST0 | UNITED ST4 | 1997 | 82387606 | | UNITED ST8 | UNITED ST7 | 1997 | 81756858 | | UNITED ST8 | UNITED ST8 | 1997 | 81498800 | | UNITED ST2 | UNITED ST5 | 1997 | 81325772 | | UNITED ST0 | UNITED ST3 | 1997 | 80157016 | | UNITED ST6 | UNITED ST8 | 1997 | 75976890 | | UNITED ST9 | UNITED ST6 | 1997 | 75193764 | | UNITED ST6 | UNITED ST5 | 1997 | 75143576 | | UNITED ST2 | UNITED ST2 | 1997 | 74068666 | | UNITED ST7 | UNITED ST5 | 1997 | 73779472 | | UNITED ST8 | UNITED ST4 | 1997 | 73201168 | | UNITED ST3 | UNITED ST6 | 1997 | 72151688 | | UNITED ST7 | UNITED ST3 | 1997 | 70337844 | | UNITED ST2 | UNITED ST6 | 1997 | 68548934 | | UNITED ST5 | UNITED ST8 | 1997 | 65821892 | | UNITED ST3 | UNITED ST5 | 1997 | 65623926 | | UNITED ST4 | UNITED ST8 | 1997 | 65199472 | | UNITED ST5 | UNITED ST5 | 1997 | 65137776 | | UNITED ST4 | UNITED ST5 | 1997 | 63991736 | | UNITED ST9 | UNITED ST4 | 1997 | 63530956 | | UNITED ST7 | UNITED ST2 | 1997 | 62819180 | | UNITED ST9 | UNITED ST8 | 1997 | 62544770 | | UNITED ST0 | UNITED ST8 | 1997 | 60482740 | | UNITED ST3 | UNITED ST8 | 1997 | 58204440 | | UNITED ST7 | UNITED ST6 | 1997 | 55079862 | | UNITED ST8 | UNITED ST5 | 1997 | 53347486 | | UNITED ST6 | UNITED ST6 | 1997 | 49966582 | | UNITED ST0 | UNITED ST2 | 1997 | 47168458 | | UNITED ST0 | UNITED ST6 | 1997 | 45848092 | | UNITED ST1 | UNITED ST2 | 1997 | 41198260 | | UNITED ST8 | UNITED ST6 | 1997 | 40146000 | | UNITED ST1 | UNITED ST6 | 1997 | 36410652 | | UNITED ST1 | UNITED ST8 | 1997 | 30750516 | | UNITED ST6 | UNITED ST2 | 1997 | 29493360 | | UNITED ST5 | UNITED ST2 | 1997 | 27726876 | | UNITED ST8 | UNITED ST2 | 1997 | 24107412 | | UNITED ST3 | UNITED ST2 | 1997 | 15783756 | | UNITED ST4 | UNITED ST2 | 1997 | 5696314 | | UNITED ST9 | UNITED ST2 | 1997 | 5323304 | +------------+------------+------+------------+ --Q3.3 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED KI1 | UNITED KI1 | 1992 | 93471990 | | UNITED KI5 | UNITED KI1 | 1992 | 72554110 | | UNITED KI5 | UNITED KI5 | 1992 | 50710534 | | UNITED KI1 | UNITED KI5 | 1992 | 43835692 | | UNITED KI5 | UNITED KI1 | 1993 | 122035214 | | UNITED KI1 | UNITED KI1 | 1993 | 91339070 | | UNITED KI5 | UNITED KI5 | 1993 | 68198784 | | UNITED KI1 | UNITED KI5 | 1993 | 42888412 | | UNITED KI5 | UNITED KI1 | 1994 | 72564326 | | UNITED KI1 | UNITED KI1 | 1994 | 69736882 | | UNITED KI5 | UNITED KI5 | 1994 | 69014568 | | UNITED KI1 | UNITED KI5 | 1994 | 42443560 | | UNITED KI5 | UNITED KI1 | 1995 | 165911792 | | UNITED KI1 | UNITED KI1 | 1995 | 71762372 | | UNITED KI5 | UNITED KI5 | 1995 | 41079610 | | UNITED KI1 | UNITED KI5 | 1995 | 34353020 | | UNITED KI5 | UNITED KI1 | 1996 | 131534098 | | UNITED KI1 | UNITED KI1 | 1996 | 119846074 | | UNITED KI5 | UNITED KI5 | 1996 | 92154684 | | UNITED KI1 | UNITED KI5 | 1996 | 27400508 | | UNITED KI1 | UNITED KI1 | 1997 | 140686266 | | UNITED KI5 | UNITED KI1 | 1997 | 129956718 | | UNITED KI5 | UNITED KI5 | 1997 | 54664054 | | UNITED KI1 | UNITED KI5 | 1997 | 32821336 | +------------+------------+------+------------+ --Q3.4 +------------+------------+------+------------+ | c_city | s_city | year | lo_revenue | +------------+------------+------+------------+ | UNITED KI5 | UNITED KI1 | 1997 | 18235692 | | UNITED KI5 | UNITED KI5 | 1997 | 12407602 | | UNITED KI1 | UNITED KI5 | 1997 | 3740140 | +------------+------------+------+------------+ --Q4.1 +------+---------------+-------------+ | year | c_nation | profit | +------+---------------+-------------+ | 1992 | ARGENTINA | 19317928938 | | 1992 | BRAZIL | 18453966110 | | 1992 | CANADA | 19286353574 | | 1992 | PERU | 18821353194 | | 1992 | UNITED STATES | 19698855306 | | 1993 | ARGENTINA | 19952665706 | | 1993 | BRAZIL | 18937598458 | | 1993 | CANADA | 19794604840 | | 1993 | PERU | 18618891672 | | 1993 | UNITED STATES | 20007970172 | | 1994 | ARGENTINA | 19880610430 | | 1994 | BRAZIL | 18697303354 | | 1994 | CANADA | 19165295192 | | 1994 | PERU | 18590530026 | | 1994 | UNITED STATES | 19039760850 | | 1995 | ARGENTINA | 20287682760 | | 1995 | BRAZIL | 18312154700 | | 1995 | CANADA | 19125224320 | | 1995 | PERU | 19556174422 | | 1995 | UNITED STATES | 18621130488 | | 1996 | ARGENTINA | 20003855790 | | 1996 | BRAZIL | 18336970302 | | 1996 | CANADA | 20123208406 | | 1996 | PERU | 18710271348 | | 1996 | UNITED STATES | 19539424348 | | 1997 | ARGENTINA | 19709120522 | | 1997 | BRAZIL | 18243142094 | | 1997 | CANADA | 20194743556 | | 1997 | PERU | 18631051834 | | 1997 | UNITED STATES | 21013447758 | | 1998 | ARGENTINA | 11668480814 | | 1998 | BRAZIL | 10712796190 | | 1998 | CANADA | 10846422392 | | 1998 | PERU | 11452371940 | | 1998 | UNITED STATES | 12018924038 | +------+---------------+-------------+ --Q4.2 +------+---------------+------------+------------+ | year | s_nation | p_category | profit | +------+---------------+------------+------------+ | 1997 | ARGENTINA | MFGR#11 | 1814143132 | | 1997 | ARGENTINA | MFGR#12 | 1848231124 | | 1997 | ARGENTINA | MFGR#13 | 1945723642 | | 1997 | ARGENTINA | MFGR#14 | 1950820690 | | 1997 | ARGENTINA | MFGR#15 | 1877734750 | | 1997 | ARGENTINA | MFGR#21 | 2029565148 | | 1997 | ARGENTINA | MFGR#22 | 1746033566 | | 1997 | ARGENTINA | MFGR#23 | 2060714604 | | 1997 | ARGENTINA | MFGR#24 | 1786921158 | | 1997 | ARGENTINA | MFGR#25 | 2012622806 | | 1997 | BRAZIL | MFGR#11 | 2146438656 | | 1997 | BRAZIL | MFGR#12 | 1979717666 | | 1997 | BRAZIL | MFGR#13 | 2256960758 | | 1997 | BRAZIL | MFGR#14 | 2388513444 | | 1997 | BRAZIL | MFGR#15 | 2188838248 | | 1997 | BRAZIL | MFGR#21 | 1820053664 | | 1997 | BRAZIL | MFGR#22 | 1986284096 | | 1997 | BRAZIL | MFGR#23 | 2215345748 | | 1997 | BRAZIL | MFGR#24 | 2116027298 | | 1997 | BRAZIL | MFGR#25 | 1989467528 | | 1997 | CANADA | MFGR#11 | 1709450040 | | 1997 | CANADA | MFGR#12 | 1877436328 | | 1997 | CANADA | MFGR#13 | 1918531780 | | 1997 | CANADA | MFGR#14 | 2005624900 | | 1997 | CANADA | MFGR#15 | 1696366026 | | 1997 | CANADA | MFGR#21 | 1999610544 | | 1997 | CANADA | MFGR#22 | 1556839526 | | 1997 | CANADA | MFGR#23 | 1856719290 | | 1997 | CANADA | MFGR#24 | 1699790256 | | 1997 | CANADA | MFGR#25 | 1809175930 | | 1997 | PERU | MFGR#11 | 2200485754 | | 1997 | PERU | MFGR#12 | 1988730700 | | 1997 | PERU | MFGR#13 | 1694972210 | | 1997 | PERU | MFGR#14 | 1895539366 | | 1997 | PERU | MFGR#15 | 1998791356 | | 1997 | PERU | MFGR#21 | 1735846788 | | 1997 | PERU | MFGR#22 | 1977494918 | | 1997 | PERU | MFGR#23 | 2133290172 | | 1997 | PERU | MFGR#24 | 1871331450 | | 1997 | PERU | MFGR#25 | 1962908258 | | 1997 | UNITED STATES | MFGR#11 | 2093412096 | | 1997 | UNITED STATES | MFGR#12 | 1818427418 | | 1997 | UNITED STATES | MFGR#13 | 2192557812 | | 1997 | UNITED STATES | MFGR#14 | 1868564222 | | 1997 | UNITED STATES | MFGR#15 | 1925521686 | | 1997 | UNITED STATES | MFGR#21 | 2001352948 | | 1997 | UNITED STATES | MFGR#22 | 2153895230 | | 1997 | UNITED STATES | MFGR#23 | 1874576204 | | 1997 | UNITED STATES | MFGR#24 | 2006772726 | | 1997 | UNITED STATES | MFGR#25 | 2107332104 | | 1998 | ARGENTINA | MFGR#11 | 1135224454 | | 1998 | ARGENTINA | MFGR#12 | 1054050084 | | 1998 | ARGENTINA | MFGR#13 | 1165583584 | | 1998 | ARGENTINA | MFGR#14 | 1047452736 | | 1998 | ARGENTINA | MFGR#15 | 1044156534 | | 1998 | ARGENTINA | MFGR#21 | 1009425370 | | 1998 | ARGENTINA | MFGR#22 | 1012123472 | | 1998 | ARGENTINA | MFGR#23 | 1120959602 | | 1998 | ARGENTINA | MFGR#24 | 1049158236 | | 1998 | ARGENTINA | MFGR#25 | 1095680422 | | 1998 | BRAZIL | MFGR#11 | 1277156976 | | 1998 | BRAZIL | MFGR#12 | 1292625362 | | 1998 | BRAZIL | MFGR#13 | 1310323544 | | 1998 | BRAZIL | MFGR#14 | 1105352340 | | 1998 | BRAZIL | MFGR#15 | 1327625418 | | 1998 | BRAZIL | MFGR#21 | 1337644896 | | 1998 | BRAZIL | MFGR#22 | 1183583836 | | 1998 | BRAZIL | MFGR#23 | 1381297754 | | 1998 | BRAZIL | MFGR#24 | 1124724440 | | 1998 | BRAZIL | MFGR#25 | 1408364752 | | 1998 | CANADA | MFGR#11 | 1018172250 | | 1998 | CANADA | MFGR#12 | 976179544 | | 1998 | CANADA | MFGR#13 | 973066594 | | 1998 | CANADA | MFGR#14 | 1055674454 | | 1998 | CANADA | MFGR#15 | 1071738598 | | 1998 | CANADA | MFGR#21 | 911737302 | | 1998 | CANADA | MFGR#22 | 1188554616 | | 1998 | CANADA | MFGR#23 | 1148250140 | | 1998 | CANADA | MFGR#24 | 1017060848 | | 1998 | CANADA | MFGR#25 | 1095515984 | | 1998 | PERU | MFGR#11 | 1135677094 | | 1998 | PERU | MFGR#12 | 1081089514 | | 1998 | PERU | MFGR#13 | 1182663766 | | 1998 | PERU | MFGR#14 | 962670128 | | 1998 | PERU | MFGR#15 | 1140492276 | | 1998 | PERU | MFGR#21 | 1067466660 | | 1998 | PERU | MFGR#22 | 1055581312 | | 1998 | PERU | MFGR#23 | 1272786442 | | 1998 | PERU | MFGR#24 | 1178150524 | | 1998 | PERU | MFGR#25 | 1086502230 | | 1998 | UNITED STATES | MFGR#11 | 1112552464 | | 1998 | UNITED STATES | MFGR#12 | 1224771964 | | 1998 | UNITED STATES | MFGR#13 | 1244827854 | | 1998 | UNITED STATES | MFGR#14 | 1110013774 | | 1998 | UNITED STATES | MFGR#15 | 1050239138 | | 1998 | UNITED STATES | MFGR#21 | 1126813672 | | 1998 | UNITED STATES | MFGR#22 | 1160957470 | | 1998 | UNITED STATES | MFGR#23 | 1312160930 | | 1998 | UNITED STATES | MFGR#24 | 1076890116 | | 1998 | UNITED STATES | MFGR#25 | 1178223904 | +------+---------------+------------+------------+ --Q4.3 +------+------------+-----------+----------+-------------+----------+------------+ | year | s_city | p_brand | profit | c_region | s_nation | p_category | +------+------------+-----------+----------+-------------+----------+------------+ | 1997 | ALGERIA 0 | MFGR#111 | 1845848 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#111 | 10847138 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1110 | 6035219 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1110 | 432257 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 2107179 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 4071438 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1111 | 3057167 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1112 | 2311386 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1112 | 948054 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 1602699 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 1829091 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1113 | 3219216 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1114 | 4755426 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1114 | 5240408 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1115 | 4338301 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1115 | 6297251 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 4030507 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 1375765 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1116 | 7716780 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1117 | 7095003 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1117 | 4806253 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 3020204 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 3898889 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1119 | 636154 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#112 | 6913968 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#112 | 4635551 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1120 | 3789881 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1120 | 5375347 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 2962488 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 546333 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1121 | 12922204 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1122 | 9912733 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1122 | 5158697 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1123 | 3024512 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1123 | 2393758 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1124 | 2049203 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1125 | 10168898 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1125 | 3169896 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 364696 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 3089145 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1126 | 695856 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1127 | 6379893 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 356710 | AMERICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 4804429 | MIDDLE EAST | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1128 | 10020597 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1129 | 4396845 | ASIA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1129 | 577228 | AFRICA | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#113 | 6419788 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1130 | 3840822 | EUROPE | ALGERIA | MFGR#11 | | 1997 | ALGERIA 0 | MFGR#1130 | 6045720 | MIDDLE EAST | ALGERIA | MFGR#11 | +------+------------+-----------+----------+-------------+----------+------------+","title":"Multiple tables queries expected results"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/","text":"Complete a TPCH Test with MatrixOne The TPC-H is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions. TPC-H is a widely used benchmark for OLAP databases. By walking through this tutorial, you'll learn how to complete a TPC-H Test with MatrixOne. Before you start Make sure you have already installed MatrixOne and connected to MatrixOne Server . 1. Compile TPCH dbgen The tpch dbgen utility generates, by default, a set of flat files suitable for loading into the tpch schema with the size based on the \u201cScale Factor\u201d argument. A scale factor of 1 produces a complete data set of approximately 1 GB, a scale factor of 10 produces a data set of approximately 10 GB etc. git clone https://github.com/electrum/tpch-dbgen.git cd tpch-dbgen make 2. Generate data Run dbgen for the appropriate database size factor (1GB in the sample). ./dbgen -s 1 Generation may take a while. When completed, you can see the resulting files. total 2150000 -rw-r--r-- 1 deister staff 24346144 13 may 12:05 customer.tbl -rw-r--r-- 1 deister staff 759863287 13 may 12:05 lineitem.tbl -rw-r--r-- 1 deister staff 2224 13 may 12:05 nation.tbl -rw-r--r-- 1 deister staff 171952161 13 may 12:05 orders.tbl -rw-r--r-- 1 deister staff 24135125 13 may 12:05 part.tbl -rw-r--r-- 1 deister staff 118984616 13 may 12:05 partsupp.tbl -rw-r--r-- 1 deister staff 389 13 may 12:05 region.tbl -rw-r--r-- 1 deister staff 1409184 13 may 12:05 supplier.tbl We have also prepared a 1GB dataset for downloading. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip 3. Create tables in MatrixOne As MatrixOne doesn't support composite primary key nor partition yet, we slightly modified the PARTSUPP and LINEITEM table creation. The composite primary key of PARTSUPP and LINEITEM tables are removed. PARTITION BY KEY() is removed for LINEITEM table. drop database if exists TPCH; create database if not exists TPCH; use TPCH; CREATE TABLE NATION( N_NATIONKEY INTEGER NOT NULL, N_NAME CHAR(25) NOT NULL, N_REGIONKEY INTEGER NOT NULL, N_COMMENT VARCHAR(152), PRIMARY KEY (N_NATIONKEY) ); CREATE TABLE REGION( R_REGIONKEY INTEGER NOT NULL, R_NAME CHAR(25) NOT NULL, R_COMMENT VARCHAR(152), PRIMARY KEY (R_REGIONKEY) ); CREATE TABLE PART( P_PARTKEY INTEGER NOT NULL, P_NAME VARCHAR(55) NOT NULL, P_MFGR CHAR(25) NOT NULL, P_BRAND CHAR(10) NOT NULL, P_TYPE VARCHAR(25) NOT NULL, P_SIZE INTEGER NOT NULL, P_CONTAINER CHAR(10) NOT NULL, P_RETAILPRICE DECIMAL(15,2) NOT NULL, P_COMMENT VARCHAR(23) NOT NULL, PRIMARY KEY (P_PARTKEY) ); CREATE TABLE SUPPLIER( S_SUPPKEY INTEGER NOT NULL, S_NAME CHAR(25) NOT NULL, S_ADDRESS VARCHAR(40) NOT NULL, S_NATIONKEY INTEGER NOT NULL, S_PHONE CHAR(15) NOT NULL, S_ACCTBAL DECIMAL(15,2) NOT NULL, S_COMMENT VARCHAR(101) NOT NULL, PRIMARY KEY (S_SUPPKEY) ); CREATE TABLE PARTSUPP( PS_PARTKEY INTEGER NOT NULL, PS_SUPPKEY INTEGER NOT NULL, PS_AVAILQTY INTEGER NOT NULL, PS_SUPPLYCOST DECIMAL(15,2) NOT NULL, PS_COMMENT VARCHAR(199) NOT NULL ); CREATE TABLE CUSTOMER( C_CUSTKEY INTEGER NOT NULL, C_NAME VARCHAR(25) NOT NULL, C_ADDRESS VARCHAR(40) NOT NULL, C_NATIONKEY INTEGER NOT NULL, C_PHONE CHAR(15) NOT NULL, C_ACCTBAL DECIMAL(15,2) NOT NULL, C_MKTSEGMENT CHAR(10) NOT NULL, C_COMMENT VARCHAR(117) NOT NULL, PRIMARY KEY (C_CUSTKEY) ); CREATE TABLE ORDERS( O_ORDERKEY BIGINT NOT NULL, O_CUSTKEY INTEGER NOT NULL, O_ORDERSTATUS CHAR(1) NOT NULL, O_TOTALPRICE DECIMAL(15,2) NOT NULL, O_ORDERDATE DATE NOT NULL, O_ORDERPRIORITY CHAR(15) NOT NULL, O_CLERK CHAR(15) NOT NULL, O_SHIPPRIORITY INTEGER NOT NULL, O_COMMENT VARCHAR(79) NOT NULL, PRIMARY KEY (O_ORDERKEY) ); CREATE TABLE LINEITEM( L_ORDERKEY BIGINT NOT NULL, L_PARTKEY INTEGER NOT NULL, L_SUPPKEY INTEGER NOT NULL, L_LINENUMBER INTEGER NOT NULL, L_QUANTITY DECIMAL(15,2) NOT NULL, L_EXTENDEDPRICE DECIMAL(15,2) NOT NULL, L_DISCOUNT DECIMAL(15,2) NOT NULL, L_TAX DECIMAL(15,2) NOT NULL, L_RETURNFLAG VARCHAR(1) NOT NULL, L_LINESTATUS VARCHAR(1) NOT NULL, L_SHIPDATE DATE NOT NULL, L_COMMITDATE DATE NOT NULL, L_RECEIPTDATE DATE NOT NULL, L_SHIPINSTRUCT CHAR(25) NOT NULL, L_SHIPMODE CHAR(10) NOT NULL, L_COMMENT VARCHAR(44) NOT NULL ); 4. Load data into the created tables Option 1: Load the sigle table dataset into related tables with this command in MatrixOne Load data into related tables with this command in MatrixOne. load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table. Option 2: Load the large wide table dataset into the lineorder_flat load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; 5. Run TPCH Queries --Q1 select l_returnflag , l_linestatus , sum ( l_quantity ) as sum_qty , sum ( l_extendedprice ) as sum_base_price , sum ( l_extendedprice * ( 1 - l_discount )) as sum_disc_price , sum ( l_extendedprice * ( 1 - l_discount ) * ( 1 + l_tax )) as sum_charge , avg ( l_quantity ) as avg_qty , avg ( l_extendedprice ) as avg_price , avg ( l_discount ) as avg_disc , count ( * ) as count_order from lineitem where l_shipdate <= date '1998-12-01' - interval '112' day group by l_returnflag , l_linestatus order by l_returnflag , l_linestatus ; --Q2 select s_acctbal , s_name , n_name , p_partkey , p_mfgr , s_address , s_phone , s_comment from part , supplier , partsupp , nation , region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 48 and p_type like '%TIN' and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'MIDDLE EAST' and ps_supplycost = ( select min ( ps_supplycost ) from partsupp , supplier , nation , region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'MIDDLE EAST' ) order by s_acctbal desc , n_name , s_name , p_partkey limit 100 ; --Q3 select l_orderkey , sum ( l_extendedprice * ( 1 - l_discount )) as revenue , o_orderdate , o_shippriority from customer , orders , lineitem where c_mktsegment = 'HOUSEHOLD' and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate < date '1995-03-29' and l_shipdate > date '1995-03-29' group by l_orderkey , o_orderdate , o_shippriority order by revenue desc , o_orderdate limit 10 ; --Q4 select o_orderpriority , count ( * ) as order_count from orders where o_orderdate >= date '1997-07-01' and o_orderdate < date '1997-07-01' + interval '3' month and exists ( select * from lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority ; --Q5 select n_name , sum ( l_extendedprice * ( 1 - l_discount )) as revenue from customer , orders , lineitem , supplier , nation , region where c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'AMERICA' and o_orderdate >= date '1994-01-01' and o_orderdate < date '1994-01-01' + interval '1' year group by n_name order by revenue desc ; --Q6 select sum ( l_extendedprice * l_discount ) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year and l_discount between 0 . 03 - 0 . 01 and 0 . 03 + 0 . 01 and l_quantity < 24 ; --Q7 select supp_nation , cust_nation , l_year , sum ( volume ) as revenue from ( select n1 . n_name as supp_nation , n2 . n_name as cust_nation , extract ( year from l_shipdate ) as l_year , l_extendedprice * ( 1 - l_discount ) as volume from supplier , lineitem , orders , customer , nation n1 , nation n2 where s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1 . n_nationkey and c_nationkey = n2 . n_nationkey and ( ( n1 . n_name = 'FRANCE' and n2 . n_name = 'ARGENTINA' ) or ( n1 . n_name = 'ARGENTINA' and n2 . n_name = 'FRANCE' ) ) and l_shipdate between date '1995-01-01' and date '1996-12-31' ) as shipping group by supp_nation , cust_nation , l_year order by supp_nation , cust_nation , l_year ; --Q8 select o_year , ( sum ( case when nation = 'ARGENTINA' then volume else 0 end ) / sum ( volume )) as mkt_share from ( select extract ( year from o_orderdate ) as o_year , l_extendedprice * ( 1 - l_discount ) as volume , n2 . n_name as nation from part , supplier , lineitem , orders , customer , nation n1 , nation n2 , region where p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1 . n_nationkey and n1 . n_regionkey = r_regionkey and r_name = 'AMERICA' and s_nationkey = n2 . n_nationkey and o_orderdate between date '1995-01-01' and date '1996-12-31' and p_type = 'ECONOMY BURNISHED TIN' ) as all_nations group by o_year order by o_year ; --Q9 select nation , o_year , sum ( amount ) as sum_profit from ( select n_name as nation , extract ( year from o_orderdate ) as o_year , l_extendedprice * ( 1 - l_discount ) - ps_supplycost * l_quantity as amount from part , supplier , lineitem , partsupp , orders , nation where s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like '%pink%' ) as profit group by nation , o_year order by nation , o_year desc ; --Q10 select c_custkey , c_name , sum ( l_extendedprice * ( 1 - l_discount )) as revenue , c_acctbal , n_name , c_address , c_phone , c_comment from customer , orders , lineitem , nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1993-03-01' and o_orderdate < date '1993-03-01' + interval '3' month and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey , c_name , c_acctbal , c_phone , n_name , c_address , c_comment order by revenue desc limit 20 ; --Q11 select ps_partkey , sum ( ps_supplycost * ps_availqty ) as value from partsupp , supplier , nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'JAPAN' group by ps_partkey having sum ( ps_supplycost * ps_availqty ) > ( select sum ( ps_supplycost * ps_availqty ) * 0 . 0001000000 from partsupp , supplier , nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'JAPAN' ) order by value desc ; --Q12 select l_shipmode , sum ( case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end ) as high_line_count , sum ( case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end ) as low_line_count from orders , lineitem where o_orderkey = l_orderkey and l_shipmode in ( 'FOB' , 'TRUCK' ) and l_commitdate < l_receiptdate and l_shipdate < l_commitdate and l_receiptdate >= date '1996-01-01' and l_receiptdate < date '1996-01-01' + interval '1' year group by l_shipmode order by l_shipmode ; --Q13 select c_count , count ( * ) as custdist from ( select c_custkey , count ( o_orderkey ) from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%pending%accounts%' group by c_custkey ) as c_orders ( c_custkey , c_count ) group by c_count order by custdist desc , c_count desc ; --Q14 select 100 . 00 * sum ( case when p_type like 'PROMO%' then l_extendedprice * ( 1 - l_discount ) else 0 end ) / sum ( l_extendedprice * ( 1 - l_discount )) as promo_revenue from lineitem , part where l_partkey = p_partkey and l_shipdate >= date '1996-04-01' and l_shipdate < date '1996-04-01' + interval '1' month ; --Q15 with q15_revenue0 as ( select l_suppkey as supplier_no , sum ( l_extendedprice * ( 1 - l_discount )) as total_revenue from lineitem where l_shipdate >= date '1995-12-01' and l_shipdate < date '1995-12-01' + interval '3' month group by l_suppkey ) select s_suppkey , s_name , s_address , s_phone , total_revenue from supplier , q15_revenue0 where s_suppkey = supplier_no and total_revenue = ( select max ( total_revenue ) from q15_revenue0 ) order by s_suppkey ; --Q16 select p_brand , p_type , p_size , count ( distinct ps_suppkey ) as supplier_cnt from partsupp , part where p_partkey = ps_partkey and p_brand <> 'Brand#35' and p_type not like 'ECONOMY BURNISHED%' and p_size in ( 14 , 7 , 21 , 24 , 35 , 33 , 2 , 20 ) and ps_suppkey not in ( select s_suppkey from supplier where s_comment like '%Customer%Complaints%' ) group by p_brand , p_type , p_size order by supplier_cnt desc , p_brand , p_type , p_size ; --Q17 select sum ( l_extendedprice ) / 7 . 0 as avg_yearly from lineitem , part where p_partkey = l_partkey and p_brand = 'Brand#54' and p_container = 'LG BAG' and l_quantity < ( select 0 . 2 * avg ( l_quantity ) from lineitem where l_partkey = p_partkey ); --Q18 select c_name , c_custkey , o_orderkey , o_orderdate , o_totalprice , sum ( l_quantity ) from customer , orders , lineitem where o_orderkey in ( select l_orderkey from lineitem group by l_orderkey having sum ( l_quantity ) > 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name , c_custkey , o_orderkey , o_orderdate , o_totalprice order by o_totalprice desc , o_orderdate limit 100 ; --Q19 select sum ( l_extendedprice * ( 1 - l_discount )) as revenue from lineitem , part where ( p_partkey = l_partkey and p_brand = 'Brand#23' and p_container in ( 'SM CASE' , 'SM BOX' , 'SM PACK' , 'SM PKG' ) and l_quantity >= 5 and l_quantity <= 5 + 10 and p_size between 1 and 5 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#15' and p_container in ( 'MED BAG' , 'MED BOX' , 'MED PKG' , 'MED PACK' ) and l_quantity >= 14 and l_quantity <= 14 + 10 and p_size between 1 and 10 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#44' and p_container in ( 'LG CASE' , 'LG BOX' , 'LG PACK' , 'LG PKG' ) and l_quantity >= 28 and l_quantity <= 28 + 10 and p_size between 1 and 15 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ); --Q20 select s_name , s_address from supplier , nation where s_suppkey in ( select ps_suppkey from partsupp where ps_partkey in ( select p_partkey from part where p_name like 'lime%' ) and ps_availqty > ( select 0 . 5 * sum ( l_quantity ) from lineitem where l_partkey = ps_partkey and l_suppkey = ps_suppkey and l_shipdate >= date '1993-01-01' and l_shipdate < date '1993-01-01' + interval '1' year ) ) and s_nationkey = n_nationkey and n_name = 'VIETNAM' order by s_name ; --Q21 select s_name , count ( * ) as numwait from supplier , lineitem l1 , orders , nation where s_suppkey = l1 . l_suppkey and o_orderkey = l1 . l_orderkey and o_orderstatus = 'F' and l1 . l_receiptdate > l1 . l_commitdate and exists ( select * from lineitem l2 where l2 . l_orderkey = l1 . l_orderkey and l2 . l_suppkey <> l1 . l_suppkey ) and not exists ( select * from lineitem l3 where l3 . l_orderkey = l1 . l_orderkey and l3 . l_suppkey <> l1 . l_suppkey and l3 . l_receiptdate > l3 . l_commitdate ) and s_nationkey = n_nationkey and n_name = 'BRAZIL' group by s_name order by numwait desc , s_name limit 100 ; --Q22 select cntrycode , count ( * ) as numcust , sum ( c_acctbal ) as totacctbal from ( select substring ( c_phone from 1 for 2 ) as cntrycode , c_acctbal from customer where substring ( c_phone from 1 for 2 ) in ( '10' , '11' , '26' , '22' , '19' , '20' , '27' ) and c_acctbal > ( select avg ( c_acctbal ) from customer where c_acctbal > 0 . 00 and substring ( c_phone from 1 for 2 ) in ( '10' , '11' , '26' , '22' , '19' , '20' , '27' ) ) and not exists ( select * from orders where o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode ; 6. Expected Results Below are the expected results for the 22 TPCH queries. Q16's result is too long to print, please refer to the complete result in this link\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch1g_result_matrixone.md Q1 +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ | l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order | +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ | A | F | 37734107.00 | 56586554400.73 | 53758257134.8700 | 55909065222.827692 | 25.52 | 38273.12 | 0.04 | 1478493 | | N | F | 991417.00 | 1487504710.38 | 1413082168.0541 | 1469649223.194375 | 25.51 | 38284.46 | 0.05 | 38854 | | N | O | 76633518.00 | 114935210409.19 | 109189591897.4720 | 113561024263.013782 | 25.50 | 38248.01 | 0.05 | 3004998 | | R | F | 37719753.00 | 56568041380.90 | 53741292684.6040 | 55889619119.831932 | 25.50 | 38250.85 | 0.05 | 1478870 | +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ 4 rows in set Q2 +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ | s_acctbal | s_name | n_name | p_partkey | p_mfgr | s_address | s_phone | s_comment | +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ | 9973.93 | Supplier#000004194 | JORDAN | 14193 | Manufacturer#1 | A8AoX9AK,qhf,CpEF | 23-944-413-2681 | t fluffily. regular requests about the regular, unusual somas play of the furiously busy | | 9956.34 | Supplier#000005108 | IRAN | 140079 | Manufacturer#5 | d3PLCdpPP3uE4GzbbAh4bWmU 7ecOifL9e1mNnzG | 20-842-882-7047 | ronic accounts. carefully bold accounts sleep beyond | | 9836.43 | Supplier#000000489 | IRAN | 190488 | Manufacturer#2 | y9NMoYGxDUPfrB1GwjYhLtCeV7pOt | 20-375-500-2226 | quickly carefully pending accounts. fina | | 9825.95 | Supplier#000007554 | IRAQ | 40041 | Manufacturer#5 | Huq0k qKET hByp3RcMcr | 21-787-637-9651 | ending, final requests thrash pending, | | 9806.52 | Supplier#000005276 | IRAQ | 132762 | Manufacturer#2 | inh0KOhRfLM7WRhdRNvJJDQx | 21-834-496-7360 | the slyly unusual theodolites; carefully even accounts use slyly. sl | | 9796.31 | Supplier#000005847 | IRAQ | 188292 | Manufacturer#1 | obol3bfh0zWi | 21-530-950-2847 | equests. blithely regular deposits should have to impress. final platelets integrate fluffily | | 9775.37 | Supplier#000007245 | IRAQ | 169696 | Manufacturer#5 | 5VOUnvxlJeOJ | 21-663-724-2985 | ic deposits about the slyly bold requests | | 9755.43 | Supplier#000002439 | EGYPT | 172438 | Manufacturer#5 | rXxojWV0VefSK7A0dhF | 14-410-168-5354 | p quickly packages. carefully pending pinto beans after the | | 9714.60 | Supplier#000007317 | EGYPT | 29810 | Manufacturer#4 | nJGsPl2ruoq4Ydtv0fwWG385eOFV6 VUokbCZ | 14-666-351-2592 | ons integrate furiously? slyly ironic requests sl | | 9557.33 | Supplier#000007367 | EGYPT | 197366 | Manufacturer#3 | bTP8DLvaRAB0n | 14-234-934-5255 | ep slyly regular accounts-- regular, regular excuses dazzle furiously about the reg | | 9538.15 | Supplier#000000979 | IRAN | 55968 | Manufacturer#1 | cdvHjrKZR7iDlmSWU2a | 20-151-688-1408 | ckages cajole quietly carefully regular in | | 9513.31 | Supplier#000004163 | SAUDI ARABIA | 109142 | Manufacturer#4 | 2VnQypC7pJPJRu6HzYRg7nAvhzckcYAQFbI | 30-544-852-3772 | he regular requests. blithely final | | 9450.15 | Supplier#000002067 | EGYPT | 9566 | Manufacturer#3 | 9dO68x0XLMCUDuFk1J6k9hpvLoKx 4qasok4lIb | 14-252-246-5791 | rding to the regular dolphins. quickly ir | | 9359.59 | Supplier#000005087 | JORDAN | 55086 | Manufacturer#4 | q0c6r9wYVQx31IeGBZKfe | 23-335-392-5204 | osits. quickly regular packages haggle among the quickly silent ins | | 9343.35 | Supplier#000006337 | IRAN | 173819 | Manufacturer#1 | ilQgNOdCAysclt3SgODb6LeJ7d4RzYD | 20-950-345-8173 | quickly ironic packages affix aft | | 9318.47 | Supplier#000003834 | SAUDI ARABIA | 11332 | Manufacturer#5 | cxGQnW3nShks59xA5bPoaC bIvcBWUt | 30-823-353-6520 | regular instructions. express packages run slyly pending | | 9318.47 | Supplier#000003834 | SAUDI ARABIA | 108813 | Manufacturer#2 | cxGQnW3nShks59xA5bPoaC bIvcBWUt | 30-823-353-6520 | regular instructions. express packages run slyly pending | | 9315.33 | Supplier#000003009 | IRAN | 40504 | Manufacturer#2 | oTbwfQ,Yfdcf3ysgc60NKtTpSIc | 20-306-556-2450 | the carefully special requests. express instructions wake | | 9296.31 | Supplier#000008213 | JORDAN | 163180 | Manufacturer#2 | YhdN9ESxYvhJp9ngr12Bbeo4t3zLPD, | 23-197-507-9431 | g to the blithely regular accounts! deposit | | 9284.57 | Supplier#000009781 | EGYPT | 4780 | Manufacturer#4 | 49NAd1iDiY4, | 14-410-636-4312 | its. ironic pinto beans are blithely. express depths use caref | | 9261.13 | Supplier#000000664 | EGYPT | 125639 | Manufacturer#5 | ln6wISAnC8Bpj q4V | 14-244-772-4913 | ly special foxes cajole slyly ironic reque | | 9260.78 | Supplier#000001949 | IRAN | 86932 | Manufacturer#2 | W79M2lpYiSY76Ujo6fSRUQiu | 20-531-767-2819 | thinly ironic excuses haggle slyly. f | | 9227.16 | Supplier#000009461 | EGYPT | 126948 | Manufacturer#2 | Eweba 0sfaF,l4sAxXGTgEjzsJsNWWIGjYhFkRWV | 14-983-137-4957 | lly bold packages. carefully express deposits integrate about the unusual accounts. regular, | | 9185.89 | Supplier#000007888 | EGYPT | 27887 | Manufacturer#1 | nq06Y48amPfS8YBuduy1RYu | 14-462-704-3828 | ole slyly-- blithely careful foxes wake against the furiously ironic accounts. pending ideas | | 9185.89 | Supplier#000007888 | EGYPT | 190330 | Manufacturer#4 | nq06Y48amPfS8YBuduy1RYu | 14-462-704-3828 | ole slyly-- blithely careful foxes wake against the furiously ironic accounts. pending ideas | | 9132.92 | Supplier#000007878 | IRAN | 92859 | Manufacturer#3 | aq6T3tUVq1, | 20-861-274-6282 | waters cajole ironic, ironic requests. furi | | 9058.94 | Supplier#000002789 | IRAN | 142788 | Manufacturer#4 | 7EkIldjP7M6psSWcJ11tf65GT7ZC7UaiCh | 20-842-716-4307 | s. platelets use carefully. busily regular accounts cajole fluffily above the slowly final pinto be | | 9026.80 | Supplier#000005436 | SAUDI ARABIA | 92926 | Manufacturer#3 | 3HiusYZGYmHItExgX5VfNCdJwkW8W7R | 30-453-280-6340 | . blithely unusual requests | | 9007.16 | Supplier#000001747 | EGYPT | 121746 | Manufacturer#3 | UyDlFjVxanP,ifej7L5jtNaubC | 14-141-360-9722 | maintain bravely across the busily express pinto beans. sometimes | | 8846.35 | Supplier#000005446 | EGYPT | 57930 | Manufacturer#2 | Nusoq0ckv9SwnJZV8Rw2dUqE,V0ylm Bon | 14-468-853-6477 | deposits. ironic, bold ideas wake. fluffily ironic deposits must have to sleep furiously pending | | 8837.21 | Supplier#000007210 | JORDAN | 144695 | Manufacturer#3 | G7MYkWkkJDVu,rr23aXjQCwNqZ2Vk6 | 23-560-295-1805 | en, express foxes use across the blithely bold | | 8800.91 | Supplier#000008182 | EGYPT | 143153 | Manufacturer#5 | KGMyipBiAF00tSB99DwH | 14-658-338-3635 | thely even excuses integrate blithel | | 8788.46 | Supplier#000003437 | IRAN | 118414 | Manufacturer#4 | JfgZDO9fsP4ljfzsi,s7431Ld3A7zXtHfrF74 | 20-547-871-1712 | ickly unusual dependencies. carefully regular dolphins ha | | 8750.12 | Supplier#000001064 | IRAQ | 31063 | Manufacturer#5 | QgmUIaEs5KpuW ,oREZV2b4wr3HEC1z4F | 21-440-809-7599 | sly even deposits? furiously regular pack | | 8594.80 | Supplier#000007553 | IRAN | 5052 | Manufacturer#4 | wAU2Lui w9 | 20-663-409-7956 | old, stealthy accounts are blithely. fluffily final | | 8594.80 | Supplier#000007553 | IRAN | 195033 | Manufacturer#1 | wAU2Lui w9 | 20-663-409-7956 | old, stealthy accounts are blithely. fluffily final | | 8588.63 | Supplier#000008094 | SAUDI ARABIA | 148093 | Manufacturer#1 | SNS6FCscBNZBFecA | 30-465-665-6735 | ake quickly blithely ironic theodolites. quickly ironic ideas boost. furiously iro | | 8522.70 | Supplier#000004208 | IRAQ | 166659 | Manufacturer#5 | x3jZYF7ZYN 8a4LY1c1kEsh | 21-468-998-1571 | furiously regular accounts! | | 8514.86 | Supplier#000006347 | JORDAN | 181310 | Manufacturer#5 | wwR5j4kdIAwLe33uBwo | 23-340-942-3641 | uests breach blithely ironic deposi | | 8473.01 | Supplier#000003912 | IRAQ | 33911 | Manufacturer#3 | Op7,1zt3MAxs34Qo4O W | 21-474-809-6508 | es. regular, brave instructions wa | | 8405.28 | Supplier#000007886 | IRAQ | 192847 | Manufacturer#4 | sFTj5nzc5EIVmzjXwenFTXD U | 21-735-778-5786 | ven dependencies boost blithely ironic de | | 8375.58 | Supplier#000001259 | IRAQ | 38755 | Manufacturer#2 | 32cJBGFFpGEkEjx1sF8JZAy0A72uXL5qU | 21-427-422-4993 | ironic accounts haggle slyly alongside of the carefully ironic deposit | | 8351.75 | Supplier#000007495 | IRAQ | 114983 | Manufacturer#4 | 3jQQGvfs,5Aryhn0Z | 21-953-463-7239 | requests. carefully final accounts after the qui | | 8230.12 | Supplier#000001058 | SAUDI ARABIA | 68551 | Manufacturer#2 | fJ8egP,xkLygXGv8bmtc9T1FJ | 30-496-504-3341 | requests haggle? regular, regular pinto beans integrate fluffily. dependenc | | 8195.44 | Supplier#000009805 | IRAQ | 4804 | Manufacturer#4 | dTTmLRYJNat,JbhlQlxwWp HjMR | 21-838-243-3925 | lets. quickly even theodolites dazzle slyly even a | | 8175.17 | Supplier#000003172 | IRAN | 55656 | Manufacturer#5 | 8ngbGS7BQoTDmJyMa5WV9XbaM31u5FAayd2vT3 | 20-834-374-7746 | ss deposits use furiously after the quickly final sentiments. fluffily ruthless ideas believe regu | | 8159.13 | Supplier#000007486 | EGYPT | 17485 | Manufacturer#1 | AjfdzbrrJE1 | 14-970-643-1521 | ld accounts. enticingly furious requests cajole. final packages s | | 8111.40 | Supplier#000007567 | IRAN | 197566 | Manufacturer#1 | 7W4k2qEVoBkRehprGliXRSYVOQEh | 20-377-181-7435 | gular foxes. silent attainments boost furiousl | | 8046.55 | Supplier#000001625 | IRAQ | 14121 | Manufacturer#2 | yKlKMbENR6bfmIu7aCFmbs | 21-769-404-7617 | deposits. ideas boost blithely. slyly even Tiresias according to the platelets are q | | 8040.16 | Supplier#000001925 | SAUDI ARABIA | 4424 | Manufacturer#4 | Cu5Ub AAdXT | 30-969-417-1108 | pending packages across the regular req | | 8031.68 | Supplier#000002370 | SAUDI ARABIA | 147341 | Manufacturer#5 | xGQB9xSPqRtCuMZaJavOrFuTY7km | 30-373-388-2352 | dependencies. carefully express deposits use slyly among the slyly unusual pearls. dogge | | 8031.42 | Supplier#000008216 | IRAN | 83199 | Manufacturer#2 | jsqlyr1ViAo | 20-224-305-7298 | to the carefully even excuses haggle blithely against the pending pinto be | | 8007.83 | Supplier#000006266 | JORDAN | 81249 | Manufacturer#1 | XWBf5Jd2V5SOurbn11Tt1 | 23-363-445-7184 | as cajole carefully against the quickly special ac | | 7995.78 | Supplier#000006957 | IRAN | 161924 | Manufacturer#1 | 8lvRhU5xtXv | 20-312-173-2216 | ly ironic accounts. stealthily regular foxes about the blithely ironic requests play blithely abo | | 7913.40 | Supplier#000003148 | JORDAN | 58137 | Manufacturer#1 | CpCJWI4PHeiwYuq0 | 23-767-770-9172 | ove the quickly final packages boost fluffily among the furiously final platelets. carefully s | | 7910.16 | Supplier#000002102 | IRAQ | 99592 | Manufacturer#2 | 1kuyUn5q6czLOGB60fAVgpv68M2suwchpmp2nK | 21-367-198-9930 | accounts after the blithely | | 7893.58 | Supplier#000000918 | SAUDI ARABIA | 13414 | Manufacturer#1 | e0sB7xAU3,cWF7pzXrpIbATUNydCUZup | 30-303-831-1662 | ependencies wake carefull | | 7885.17 | Supplier#000004001 | JORDAN | 38994 | Manufacturer#2 | 3M39sZY1XeQXPDRO | 23-109-632-6806 | efully express packages integrate across the regular pearls. blithely unusual packages mainta | | 7880.20 | Supplier#000005352 | JORDAN | 351 | Manufacturer#3 | PP9gHTn946hXqUF5E7idIPLkhnN | 23-557-756-7951 | egular frays. final instructions sleep a | | 7844.31 | Supplier#000006987 | IRAQ | 44482 | Manufacturer#5 | UH1zBxTNjTminnmHRe h YUT1eR | 21-963-444-7397 | nag quickly carefully regular requests. ironic theo | | 7812.27 | Supplier#000006967 | SAUDI ARABIA | 151936 | Manufacturer#4 | S4i1HfrSM4m3di3R9Cxxp59M1 | 30-193-457-6365 | ely. dependencies cajole quickly. final warhorses across the furiously ironic foxes integr | | 7767.63 | Supplier#000004306 | IRAN | 31802 | Manufacturer#2 | SkZkJZflW5mDg9wL fJ | 20-911-180-1895 | uickly regular ideas. blithely express accounts along the carefully sile | | 7741.42 | Supplier#000000899 | IRAQ | 53383 | Manufacturer#5 | oLlkiVghtro IwzcwFuzwMCG94rRpux | 21-980-994-3905 | equests wake quickly special, express accounts. courts promi | | 7741.42 | Supplier#000000899 | IRAQ | 105878 | Manufacturer#3 | oLlkiVghtro IwzcwFuzwMCG94rRpux | 21-980-994-3905 | equests wake quickly special, express accounts. courts promi | | 7741.10 | Supplier#000001059 | IRAN | 103528 | Manufacturer#4 | 4tBenOMokWbWVRB8i8HwENeO cQjM9 | 20-620-710-8984 | to the carefully special courts. | | 7599.20 | Supplier#000006596 | SAUDI ARABIA | 184077 | Manufacturer#2 | k8qeFxfXKIGYdQ82RXAfCwddSrc | 30-804-947-3851 | ously unusual deposits boost carefully after the enticing | | 7598.31 | Supplier#000008857 | IRAQ | 63844 | Manufacturer#4 | dP2th8vneyOLIUFwNBwqixkFD6 | 21-691-170-4769 | s. quickly ironic frays detect carefully | | 7591.79 | Supplier#000009723 | JORDAN | 104702 | Manufacturer#2 | Q1CkkpDdlLOpCJiV,zIf,Mv86otWhxj7slGc | 23-710-907-3873 | e fluffily even instructions. packages impress enticingly. | | 7575.12 | Supplier#000007557 | IRAQ | 77556 | Manufacturer#1 | udLvpjNvIx9qeRNdjL1ZAO0OZNOBo6h | 21-629-935-9941 | ally special accounts nod; f | | 7496.91 | Supplier#000005828 | IRAN | 103317 | Manufacturer#1 | Xt0EqDCNU6X00sNsIO7nd0ws3H | 20-435-850-8703 | furiously about the fluffily careful idea | | 7472.88 | Supplier#000004204 | EGYPT | 14203 | Manufacturer#1 | 0rGZJ6VZXdH | 14-520-667-4690 | y pending pinto beans. even, final requests sleep care | | 7472.88 | Supplier#000004204 | EGYPT | 161687 | Manufacturer#3 | 0rGZJ6VZXdH | 14-520-667-4690 | y pending pinto beans. even, final requests sleep care | | 7467.63 | Supplier#000003270 | IRAN | 45757 | Manufacturer#2 | 7j4n5FnNEHVJxFhiyz | 20-450-599-9591 | regular, even instructions boost deposits | | 7465.41 | Supplier#000008686 | EGYPT | 188685 | Manufacturer#4 | 4Onf4yxuNwHCRIC0y | 14-454-946-4151 | ly final ideas. bravely unusual deposits doze carefully. expr | | 7460.80 | Supplier#000008701 | IRAQ | 83684 | Manufacturer#3 | PLR2QehcW08 | 21-747-984-4244 | ideas use carefully pending, final deposits. ironic, pe | | 7447.86 | Supplier#000005877 | JORDAN | 120852 | Manufacturer#2 | EyqOHClZZMJkq grnOX9 4alZx6P7B2fq | 23-419-288-6451 | lar pinto beans breach carefully final pinto | | 7445.03 | Supplier#000009802 | IRAQ | 164769 | Manufacturer#5 | y6wLN KiZuTf5HT9Hbm0BELn1GUTD6yl | 21-116-708-2013 | nic requests. pinto beans across the carefully regular grouches snooze among the final pin | | 7401.46 | Supplier#000008677 | IRAN | 123652 | Manufacturer#5 | WNa780JZzivxuGBEsDszqoT1Pj | 20-899-256-5288 | onic instructions along the furiously ironic accounts haggle fluffily silently un | | 7393.50 | Supplier#000007056 | IRAQ | 54550 | Manufacturer#1 | M5cAJQvW9D5zwC7o2qkoe | 21-175-383-4727 | slyly even requests. forges haggle boldly express requests. furio | | 7376.11 | Supplier#000003982 | IRAQ | 118959 | Manufacturer#1 | jx9EloF33Ez | 21-890-236-4160 | s the furiously special warhorses affix after the car | | 7264.42 | Supplier#000001565 | IRAQ | 14061 | Manufacturer#4 | bOwKHdBteMkZoZcxdigk4Tnu07w1gDztmV7hvCw | 21-791-273-8592 | to beans. express accounts nag around the | | 7256.46 | Supplier#000009116 | IRAQ | 4115 | Manufacturer#3 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7256.46 | Supplier#000009116 | IRAQ | 99115 | Manufacturer#1 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7256.46 | Supplier#000009116 | IRAQ | 131576 | Manufacturer#4 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7254.81 | Supplier#000005664 | EGYPT | 35663 | Manufacturer#2 | b8VWuTXRt66wF9bfrgTmNGuxf1PU0x3O9e | 14-214-171-8987 | ts across the quickly pending pin | | 7186.63 | Supplier#000006958 | IRAN | 71943 | Manufacturer#4 | 0n9BD,gRzUc3B,PsFcxDBGp4BFf4P | 20-185-413-5590 | against the instructions. requests are. speci | | 7166.36 | Supplier#000003541 | EGYPT | 116007 | Manufacturer#1 | DbwyOxoaMEdhEtIB3y045QrKCi2fQpGRu, | 14-508-763-1850 | ages. carefully unusual requests across the pending instructions aff | | 7128.81 | Supplier#000000677 | JORDAN | 50676 | Manufacturer#4 | 8mhrffG7D2WJBSQbOGstQ | 23-290-639-3315 | nder blithely. slyly unusual theod | | 7051.73 | Supplier#000003349 | IRAQ | 125812 | Manufacturer#3 | wtTK9df9kY7mQ5QUM0Xe5bHLMRLgwE | 21-614-525-7451 | ar theodolites cajole fluffily across the pending requests. slyly final requests a | | 7023.47 | Supplier#000009543 | SAUDI ARABIA | 47038 | Manufacturer#1 | VYKinyOBNXRr Hdqn8kOxfTw | 30-785-782-6088 | sts. furiously pending packages sleep slyly even requests. final excuses print deposits. final pac | | 6985.93 | Supplier#000006409 | IRAQ | 131382 | Manufacturer#1 | eO8JDNM19HrlQMR | 21-627-356-3992 | sts. slyly final deposits around the regular accounts are along the furiously final pac | | 6964.75 | Supplier#000009931 | EGYPT | 57425 | Manufacturer#1 | peQYiRFk G0xZKfJ | 14-989-166-5782 | deposits according to the sometimes silent requests wake along the packages-- blithely f | | 6964.04 | Supplier#000007399 | IRAQ | 77398 | Manufacturer#2 | zdxjENOGR4QiCFP | 21-859-733-1999 | e blithely after the even requests. carefully ironic packages use slyly a | | 6913.81 | Supplier#000002625 | IRAQ | 22624 | Manufacturer#3 | a4V0rWemgbsT ZMj w7DB8rUbZ4F4lqqW5VKljQF | 21-136-564-3910 | . asymptotes among the express requests cajole furiously after the ca | | 6880.18 | Supplier#000006704 | IRAN | 26703 | Manufacturer#4 | 97rxJlAImbO1 sUlChUWoOJ0ZzvQ2NI3KI6VDOwk | 20-588-916-1286 | old accounts wake quickly. ca | | 6878.62 | Supplier#000001697 | IRAQ | 146668 | Manufacturer#5 | 37nm ODTeHy0xWTWegplgdWQqelh | 21-377-544-4864 | ironic theodolites. furiously regular d | | 6790.39 | Supplier#000008703 | IRAN | 123678 | Manufacturer#4 | wMslK1A8SEUTIIdApQ | 20-782-266-2552 | eep blithely regular, pending w | | 6763.46 | Supplier#000007882 | EGYPT | 137881 | Manufacturer#5 | JDv8BZiYG0UlZ | 14-111-252-9120 | the silent accounts wake foxes. furious | | 6751.81 | Supplier#000003156 | EGYPT | 165607 | Manufacturer#2 | alRWaW4FTFERMM4vf2rHKIKE | 14-843-946-7775 | are furiously. final theodolites affix slyly bold deposits. even packages haggle idly slyly specia | | 6702.07 | Supplier#000006276 | EGYPT | 31269 | Manufacturer#2 | ,dE1anEjKQGZfgquYfkx2fkGcXH | 14-896-626-7847 | ze about the carefully regular pint | +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ 100 rows in set Q3 +------------+-------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | +------------+-------------+-------------+----------------+ | 2152675 | 431309.8065 | 1995-03-28 | 0 | | 4994400 | 423834.7976 | 1995-03-09 | 0 | | 2160291 | 401149.7805 | 1995-03-18 | 0 | | 2845094 | 401094.1393 | 1995-03-06 | 0 | | 1902471 | 400497.3847 | 1995-03-01 | 0 | | 5624358 | 395710.6806 | 1995-03-20 | 0 | | 2346242 | 392580.0394 | 1995-03-17 | 0 | | 2529826 | 387365.1560 | 1995-02-17 | 0 | | 5168933 | 385433.6198 | 1995-03-20 | 0 | | 2839239 | 380503.7310 | 1995-03-22 | 0 | +------------+-------------+-------------+----------------+ 10 rows in set Q4 +-----------------+-------------+ | o_orderpriority | order_count | +-----------------+-------------+ | 1-URGENT | 10623 | | 2-HIGH | 10465 | | 3-MEDIUM | 10309 | | 4-NOT SPECIFIED | 10618 | | 5-LOW | 10541 | +-----------------+-------------+ 5 rows in set Q5 +---------------+---------------+ | n_name | revenue | +---------------+---------------+ | PERU | 56206762.5035 | | CANADA | 56052846.0161 | | ARGENTINA | 54595012.8076 | | BRAZIL | 53601776.5201 | | UNITED STATES | 50890580.8962 | +---------------+---------------+ 5 rows in set Q6 +---------------+ | revenue | +---------------+ | 61660051.7967 | +---------------+ Q7 +-------------+-------------+--------+---------------+ | supp_nation | cust_nation | l_year | revenue | +-------------+-------------+--------+---------------+ | ARGENTINA | FRANCE | 1995 | 57928886.8015 | | ARGENTINA | FRANCE | 1996 | 55535134.8474 | | FRANCE | ARGENTINA | 1995 | 52916227.7375 | | FRANCE | ARGENTINA | 1996 | 51077995.8841 | +-------------+-------------+--------+---------------+ 4 rows in set Q8 +--------+----------------------+ | o_year | mkt_share | +--------+----------------------+ | 1995 | 0.035094304475112484 | | 1996 | 0.03724375099464825 | +--------+----------------------+ 2 rows in set Q9 +----------------+--------+---------------+ | nation | o_year | sum_profit | +----------------+--------+---------------+ | ALGERIA | 1998 | 29931671.4862 | | ALGERIA | 1997 | 49521023.1139 | | ALGERIA | 1996 | 51283603.7356 | | ALGERIA | 1995 | 50206939.3447 | | ALGERIA | 1994 | 48738988.5891 | | ALGERIA | 1993 | 48084070.1204 | | ALGERIA | 1992 | 49725592.1793 | | ARGENTINA | 1998 | 26407044.9262 | | ARGENTINA | 1997 | 46224601.0785 | | ARGENTINA | 1996 | 44579611.0571 | | ARGENTINA | 1995 | 45081953.2540 | | ARGENTINA | 1994 | 48291282.8512 | | ARGENTINA | 1993 | 48063838.9130 | | ARGENTINA | 1992 | 45277890.2991 | | BRAZIL | 1998 | 28577022.6384 | | BRAZIL | 1997 | 46808660.3688 | | BRAZIL | 1996 | 47119265.0765 | | BRAZIL | 1995 | 47706399.9100 | | BRAZIL | 1994 | 48377469.9386 | | BRAZIL | 1993 | 46933565.7471 | | BRAZIL | 1992 | 47272215.5408 | | CANADA | 1998 | 30500303.6521 | | CANADA | 1997 | 50046257.5687 | | CANADA | 1996 | 52638586.9029 | | CANADA | 1995 | 50433911.3289 | | CANADA | 1994 | 51605251.7124 | | CANADA | 1993 | 50117218.8464 | | CANADA | 1992 | 50347111.2789 | | CHINA | 1998 | 26956001.9487 | | CHINA | 1997 | 48311246.7866 | | CHINA | 1996 | 51133929.1033 | | CHINA | 1995 | 48024289.1049 | | CHINA | 1994 | 50027433.6557 | | CHINA | 1993 | 48240226.3801 | | CHINA | 1992 | 47769117.6007 | | EGYPT | 1998 | 26972573.1604 | | EGYPT | 1997 | 46708654.7666 | | EGYPT | 1996 | 46095050.4457 | | EGYPT | 1995 | 44901908.2949 | | EGYPT | 1994 | 48522762.8892 | | EGYPT | 1993 | 49055807.7642 | | EGYPT | 1992 | 46909796.1083 | | ETHIOPIA | 1998 | 26364411.6457 | | ETHIOPIA | 1997 | 44889623.0645 | | ETHIOPIA | 1996 | 47554295.2892 | | ETHIOPIA | 1995 | 44747639.5440 | | ETHIOPIA | 1994 | 46497570.0631 | | ETHIOPIA | 1993 | 43853718.5460 | | ETHIOPIA | 1992 | 44005773.0397 | | FRANCE | 1998 | 27033406.6353 | | FRANCE | 1997 | 45763555.5515 | | FRANCE | 1996 | 47178544.9301 | | FRANCE | 1995 | 48821282.1929 | | FRANCE | 1994 | 46444640.9397 | | FRANCE | 1993 | 46602311.0590 | | FRANCE | 1992 | 47769356.5113 | | GERMANY | 1998 | 26165681.8305 | | GERMANY | 1997 | 46600844.4431 | | GERMANY | 1996 | 44873520.1979 | | GERMANY | 1995 | 47761215.6058 | | GERMANY | 1994 | 42283120.0209 | | GERMANY | 1993 | 46954873.9820 | | GERMANY | 1992 | 46263626.6361 | | INDIA | 1998 | 27651103.0250 | | INDIA | 1997 | 46000888.8340 | | INDIA | 1996 | 43993476.7354 | | INDIA | 1995 | 44015709.1914 | | INDIA | 1994 | 44281439.6282 | | INDIA | 1993 | 45367255.7857 | | INDIA | 1992 | 45350810.5330 | | INDONESIA | 1998 | 27120545.3120 | | INDONESIA | 1997 | 45745362.3667 | | INDONESIA | 1996 | 45347554.8232 | | INDONESIA | 1995 | 45685709.4978 | | INDONESIA | 1994 | 44738603.1901 | | INDONESIA | 1993 | 45172063.2033 | | INDONESIA | 1992 | 44623924.3942 | | IRAN | 1998 | 27876287.0949 | | IRAN | 1997 | 47184621.5647 | | IRAN | 1996 | 47397859.7878 | | IRAN | 1995 | 49579120.6991 | | IRAN | 1994 | 48032316.8744 | | IRAN | 1993 | 48295593.2066 | | IRAN | 1992 | 50531453.3934 | | IRAQ | 1998 | 29997323.2927 | | IRAQ | 1997 | 52851471.1377 | | IRAQ | 1996 | 53671825.6297 | | IRAQ | 1995 | 53251012.1025 | | IRAQ | 1994 | 50934553.4361 | | IRAQ | 1993 | 51961214.1186 | | IRAQ | 1992 | 50840364.3833 | | JAPAN | 1998 | 26054615.4955 | | JAPAN | 1997 | 43557394.2595 | | JAPAN | 1996 | 46531743.0980 | | JAPAN | 1995 | 41688293.4741 | | JAPAN | 1994 | 45526719.0728 | | JAPAN | 1993 | 45619475.4478 | | JAPAN | 1992 | 44545639.3069 | | JORDAN | 1998 | 24793092.4101 | | JORDAN | 1997 | 42050730.7748 | | JORDAN | 1996 | 42562783.8663 | | JORDAN | 1995 | 42253019.5330 | | JORDAN | 1994 | 45027034.7721 | | JORDAN | 1993 | 44797510.9808 | | JORDAN | 1992 | 41313405.2890 | | KENYA | 1998 | 24550926.4693 | | KENYA | 1997 | 42767120.5848 | | KENYA | 1996 | 45000095.1105 | | KENYA | 1995 | 43250458.0109 | | KENYA | 1994 | 42891596.7158 | | KENYA | 1993 | 43599201.5126 | | KENYA | 1992 | 45286145.8141 | | MOROCCO | 1998 | 23482053.5970 | | MOROCCO | 1997 | 41503033.0020 | | MOROCCO | 1996 | 45645555.9409 | | MOROCCO | 1995 | 44462858.7689 | | MOROCCO | 1994 | 44768368.8310 | | MOROCCO | 1993 | 44611871.2477 | | MOROCCO | 1992 | 43057959.1352 | | MOZAMBIQUE | 1998 | 28824737.9244 | | MOZAMBIQUE | 1997 | 48682746.5995 | | MOZAMBIQUE | 1996 | 50816940.9909 | | MOZAMBIQUE | 1995 | 50010039.0178 | | MOZAMBIQUE | 1994 | 48794892.1253 | | MOZAMBIQUE | 1993 | 48451128.3332 | | MOZAMBIQUE | 1992 | 50113858.5449 | | PERU | 1998 | 30575758.1899 | | PERU | 1997 | 49323405.6808 | | PERU | 1996 | 50063490.6085 | | PERU | 1995 | 51272843.6555 | | PERU | 1994 | 50690589.2334 | | PERU | 1993 | 49086129.3668 | | PERU | 1992 | 50067216.3450 | | ROMANIA | 1998 | 27367992.9903 | | ROMANIA | 1997 | 45668932.7094 | | ROMANIA | 1996 | 46594220.7498 | | ROMANIA | 1995 | 44576835.1623 | | ROMANIA | 1994 | 45640971.0684 | | ROMANIA | 1993 | 46374545.0712 | | ROMANIA | 1992 | 47130533.3076 | | RUSSIA | 1998 | 27486839.8755 | | RUSSIA | 1997 | 44050712.6907 | | RUSSIA | 1996 | 45604597.4983 | | RUSSIA | 1995 | 48972490.6009 | | RUSSIA | 1994 | 45652045.5872 | | RUSSIA | 1993 | 47139548.1597 | | RUSSIA | 1992 | 47159990.1221 | | SAUDI ARABIA | 1998 | 29766229.7961 | | SAUDI ARABIA | 1997 | 51473031.6922 | | SAUDI ARABIA | 1996 | 52859666.6646 | | SAUDI ARABIA | 1995 | 50946175.0229 | | SAUDI ARABIA | 1994 | 53085288.9954 | | SAUDI ARABIA | 1993 | 50907571.2046 | | SAUDI ARABIA | 1992 | 50334063.0381 | | UNITED KINGDOM | 1998 | 27904712.8220 | | UNITED KINGDOM | 1997 | 48170994.4362 | | UNITED KINGDOM | 1996 | 46498116.9611 | | UNITED KINGDOM | 1995 | 43210619.0456 | | UNITED KINGDOM | 1994 | 47339709.9122 | | UNITED KINGDOM | 1993 | 44308436.3275 | | UNITED KINGDOM | 1992 | 45870809.6693 | | UNITED STATES | 1998 | 25856187.3719 | | UNITED STATES | 1997 | 44934753.2208 | | UNITED STATES | 1996 | 44826974.2915 | | UNITED STATES | 1995 | 44160425.4086 | | UNITED STATES | 1994 | 43193241.6843 | | UNITED STATES | 1993 | 45126307.2619 | | UNITED STATES | 1992 | 44205926.3317 | | VIETNAM | 1998 | 28289193.6726 | | VIETNAM | 1997 | 48284585.4019 | | VIETNAM | 1996 | 48360225.9084 | | VIETNAM | 1995 | 48742082.6165 | | VIETNAM | 1994 | 49035537.3894 | | VIETNAM | 1993 | 47222674.6352 | | VIETNAM | 1992 | 48628336.9011 | +----------------+--------+---------------+ 175 rows in set Q10 +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ | c_custkey | c_name | revenue | c_acctbal | n_name | c_address | c_phone | c_comment | +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ | 95962 | Customer#000095962 | 704336.0774 | -9.33 | MOZAMBIQUE | 83wOMt9iAb9OJ0HbkQ1PaX3odXVBNEIMXaE | 26-127-693-7436 | nusual theodolites maintain furiously fluffily iro | | 87064 | Customer#000087064 | 684037.4349 | 5244.68 | BRAZIL | 0xej6ldT8zi7MwLdDJ1II3YWwprkvwB1 I0kwsf | 12-930-206-2571 | de of the ironic, silent warthogs. bold, r | | 56416 | Customer#000056416 | 661218.0492 | 4303.82 | INDIA | CEuBN,xZVmP | 18-212-984-8331 | al waters cajole along the slyly unusual dugouts. carefully regular deposits use slyly? packages h | | 46450 | Customer#000046450 | 646205.6835 | 2400.59 | UNITED STATES | rzWQxB9iFpd8i4KUCAPdv | 34-765-320-4326 | ss, final deposits cajole sly | | 128713 | Customer#000128713 | 643240.1183 | 7200.30 | ARGENTINA | mm0kxtHFCchaZX4eYSCCyQHno7vq,SRmv4 | 11-174-994-6880 | ording to the express accounts cajole carefully across the bravely special packages. carefully regular account | | 102187 | Customer#000102187 | 637493.0787 | -896.03 | ETHIOPIA | EAi6vcGnWHUMb6rJwn,PtUgSH74tR Aixa | 15-877-462-6534 | gular packages. carefully regular deposits cajole carefully of the regular requests. carefully special accou | | 42541 | Customer#000042541 | 634546.9756 | 8082.14 | IRAN | IccOGHgp8g | 20-442-159-1337 | cross the final asymptotes. final packages wake furiously ironic dec | | 51595 | Customer#000051595 | 611926.8265 | 7236.80 | UNITED STATES | wQFWZk 7JCpeg50O0KCzSmUFnNNwX1aEQ7V3Q | 34-844-269-9070 | sts. always express accounts use carefully along the quickly speci | | 66391 | Customer#000066391 | 608385.5852 | 9404.57 | UNITED STATES | V0XvU1Nh9NU4zsyOkm,RBa | 34-149-224-8119 | ages cajole carefully carefully bold deposits: fluffily unusual deposits promise slyly carefully ironic co | | 48358 | Customer#000048358 | 603621.4823 | -611.15 | ETHIOPIA | ycg3uMG7iDdwQvJ1irr | 15-687-936-5181 | the slyly unusual foxes-- carefully regular | | 99175 | Customer#000099175 | 602125.3304 | 2218.76 | INDONESIA | 9wbW52xx9T84E0dZ Rvz1ozQ1 | 19-125-912-6494 | ide of the slyly ironic foxes boost silently ironic, even instructions. blithe | | 122509 | Customer#000122509 | 601580.1203 | 2613.83 | KENYA | ZN1sc0eJrkD8t6X5Q1d3 | 24-421-308-3881 | brave deposits haggle across the even deposits. instr | | 148055 | Customer#000148055 | 601003.6812 | 455.31 | PERU | Y,RCZ3Bislx64nTsPaRL,5gjx7xgC6y, yKYnCw | 27-473-476-4382 | uickly final accounts wake carefully sl | | 117451 | Customer#000117451 | 599792.7063 | 1090.48 | UNITED STATES | bSwr7mNPiaf1f lNK9 uTJxWCL2sn1Lak5NIB | 34-354-586-6011 | ding to the furiously express accounts boost carefully af | | 104110 | Customer#000104110 | 588194.3118 | 2762.52 | JORDAN | mm7 ZuDX5Z5nAQbKObB 80XBCy,1nyW | 23-639-800-5768 | urts sleep furiously alongside of the packages! slyly ironic packages sleep | | 13666 | Customer#000013666 | 579926.1679 | 7453.98 | EGYPT | DLRUWGcprmWqdROJvmZwpE | 14-316-135-4381 | ross the silent requests. special theodolit | | 96202 | Customer#000096202 | 571017.3398 | 4703.04 | CANADA | 4Vcxcx3w4zMjVYNQaqrweweQY6TJO AP9rdvQaLl | 13-194-779-9597 | en packages use. fluffily regular dependencies boost. never pending requ | | 70279 | Customer#000070279 | 561369.3650 | 9109.34 | CHINA | ltie8o3ihwffMrqMrkvN957KZVWmH5 | 28-842-825-1717 | theodolites sleep: blithely final requests are fur | | 16972 | Customer#000016972 | 560435.8065 | 6408.66 | ROMANIA | X6T8vRKy6kSO0f2wJJt | 29-483-958-3347 | sts. pending deposits are across the regular, express instructions. carefully daring foxes cajol | | 113443 | Customer#000113443 | 557272.6706 | -72.67 | UNITED KINGDOM | SUHbS85cYxgVkKbfh9sUpEa6ezVSlQuCKe3CV | 33-819-742-6112 | ic foxes cajole thinly furiously stealthy instructions. pinto beans are. quickly regular accounts integrate car | +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ 20 rows in set Q11 +------------+-------------+ | ps_partkey | value | +------------+-------------+ | 131630 | 17882680.37 | | 104150 | 17613017.18 | | 128284 | 16502418.74 | | 8978 | 16470438.59 | | 147193 | 16462742.12 | | 78788 | 16010246.37 | | 76331 | 15776882.05 | | 137287 | 15770471.15 | | 51302 | 15730620.22 | | 141553 | 15333540.19 | | 137196 | 15035435.60 | | 186531 | 14818272.68 | | 103818 | 14690943.63 | | 80080 | 14626441.35 | | 1312 | 14330729.50 | | 6531 | 14267308.08 | | 96162 | 14154396.04 | | 69605 | 14018927.25 | | 30118 | 13854726.38 | | 17006 | 13731495.60 | | 95347 | 13716648.60 | | 18722 | 13707978.71 | | 122875 | 13640341.00 | | 105499 | 13532912.80 | | 165560 | 13509536.95 | | 1531 | 13337454.55 | | 34732 | 13304041.48 | | 173221 | 13038078.41 | | 180975 | 13038039.17 | | 24703 | 12957050.80 | | 72036 | 12939426.90 | | 124814 | 12849842.04 | | 174453 | 12814999.00 | | 14209 | 12814858.56 | | 185186 | 12657201.05 | | 187868 | 12647101.80 | | 125085 | 12639931.63 | | 80331 | 12625007.00 | | 118685 | 12515185.68 | | 163988 | 12484272.80 | | 124685 | 12432747.32 | | 92838 | 12410071.57 | | 140928 | 12396673.84 | | 1218 | 12362877.75 | | 39201 | 12328085.10 | | 33237 | 12180622.98 | | 183791 | 12150040.50 | | 3243 | 12136315.74 | | 62740 | 12131313.60 | | 154171 | 12105470.89 | | 49034 | 11982382.52 | | 88673 | 11925499.04 | | 52527 | 11923653.16 | | 83974 | 11871084.73 | | 88254 | 11870393.22 | | 411 | 11806670.95 | | 14320 | 11800136.02 | | 164979 | 11794760.03 | | 166149 | 11778499.72 | | 74105 | 11750224.34 | | 169104 | 11708532.18 | | 15542 | 11687293.42 | | 161538 | 11661769.80 | | 63337 | 11592505.40 | | 117197 | 11508165.60 | | 102989 | 11497056.75 | | 10836 | 11465875.43 | | 199561 | 11431793.36 | | 134683 | 11384564.54 | | 136318 | 11351893.30 | | 166270 | 11336004.81 | | 32200 | 11324838.00 | | 57033 | 11281026.52 | | 18098 | 11245398.24 | | 135174 | 11189782.12 | | 181616 | 11183947.65 | | 85064 | 11175761.43 | | 120719 | 11164342.08 | | 99670 | 11140257.47 | | 46096 | 11034143.76 | | 195124 | 11030197.30 | | 78838 | 11012446.40 | | 151656 | 11010376.90 | | 156956 | 10996384.80 | | 34028 | 10942671.24 | | 15778 | 10937778.75 | | 199707 | 10924333.33 | | 118776 | 10920609.31 | | 27640 | 10919693.42 | | 15237 | 10918145.54 | | 148243 | 10916765.29 | | 111498 | 10867707.51 | | 132024 | 10834280.47 | | 35124 | 10806898.50 | | 196818 | 10787371.25 | | 197669 | 10779504.60 | | 110042 | 10778828.37 | | 197422 | 10770092.44 | | 75160 | 10746976.60 | | 191567 | 10642430.39 | | 34225 | 10574664.41 | | 102588 | 10567012.05 | | 44148 | 10505249.34 | | 126607 | 10484944.29 | | 172625 | 10444857.62 | | 157054 | 10406203.24 | | 19322 | 10378704.98 | | 136541 | 10371536.77 | | 167526 | 10320346.58 | | 136011 | 10302146.84 | | 107431 | 10273992.76 | | 16485 | 10257703.67 | | 52580 | 10250264.05 | | 839 | 10238243.36 | | 31704 | 10196678.94 | | 122558 | 10137326.18 | | 180386 | 10123318.07 | | 97705 | 10089163.37 | | 96327 | 10087851.88 | | 136143 | 10082137.97 | | 15174 | 10057277.55 | | 193324 | 10039922.93 | | 33593 | 10019952.10 | | 126288 | 10014855.05 | | 64123 | 9985650.90 | | 183712 | 9973256.18 | | 138831 | 9963069.10 | | 123694 | 9959096.38 | | 51734 | 9952439.73 | | 11861 | 9949647.12 | | 119127 | 9942105.69 | | 173308 | 9932264.52 | | 40986 | 9921554.40 | | 176970 | 9919708.65 | | 54316 | 9913595.16 | | 62644 | 9903936.27 | | 185354 | 9895956.52 | | 81468 | 9885132.60 | | 104687 | 9883888.05 | | 198959 | 9875351.28 | | 179767 | 9872309.86 | | 102835 | 9870743.52 | | 163221 | 9856173.04 | | 32633 | 9852565.04 | | 19605 | 9850164.48 | | 47378 | 9826135.11 | | 44026 | 9822433.44 | | 126629 | 9816227.30 | | 199665 | 9812400.23 | | 30989 | 9812295.52 | | 102177 | 9810372.32 | | 25765 | 9806344.88 | | 110721 | 9804895.23 | | 159532 | 9803738.34 | | 101640 | 9801375.65 | | 151569 | 9792489.20 | | 180629 | 9782164.34 | | 165528 | 9769074.10 | | 23772 | 9766084.22 | | 149727 | 9765190.96 | | 189605 | 9761887.80 | | 74703 | 9758757.28 | | 83382 | 9758144.21 | | 93775 | 9726901.71 | | 56192 | 9725508.16 | | 50060 | 9712714.65 | | 15409 | 9706898.91 | | 139104 | 9701070.72 | | 177435 | 9686566.09 | | 31351 | 9675197.98 | | 20495 | 9672566.31 | | 24537 | 9654516.03 | | 160528 | 9650804.70 | | 34706 | 9647241.90 | | 149039 | 9643498.32 | | 147139 | 9642356.34 | | 118629 | 9624960.80 | | 35359 | 9621549.92 | | 33854 | 9616857.73 | | 33707 | 9609988.84 | | 149055 | 9599364.32 | | 127429 | 9580670.49 | | 67575 | 9579613.26 | | 80727 | 9576545.81 | | 181650 | 9574445.40 | | 50176 | 9573389.08 | | 171093 | 9571625.20 | | 151342 | 9569230.21 | | 123052 | 9561903.68 | | 132633 | 9545052.14 | | 130419 | 9524936.49 | | 89241 | 9512992.32 | | 138255 | 9503515.93 | | 31680 | 9502841.07 | | 151986 | 9500862.59 | | 146390 | 9490242.96 | | 62275 | 9475584.10 | | 33518 | 9475074.40 | | 5286 | 9473739.88 | | 39020 | 9467701.22 | | 113281 | 9466510.94 | | 138789 | 9464407.24 | | 165040 | 9462153.75 | | 150766 | 9461855.88 | | 54341 | 9459425.45 | | 33464 | 9459377.37 | | 15251 | 9455980.84 | | 145308 | 9454189.29 | | 192621 | 9449324.14 | | 175218 | 9448987.35 | | 58992 | 9446144.40 | | 24548 | 9442739.03 | | 177563 | 9440891.04 | | 184482 | 9431486.10 | | 78961 | 9430401.05 | | 174167 | 9428622.96 | | 88265 | 9423143.28 | | 6057 | 9405359.37 | | 85387 | 9402175.55 | | 47053 | 9399707.66 | | 128973 | 9399265.92 | | 65668 | 9395584.45 | | 50222 | 9394502.96 | | 116534 | 9388011.08 | | 140959 | 9386284.56 | | 46897 | 9385056.21 | | 141872 | 9383820.48 | | 177181 | 9383551.92 | | 168265 | 9376664.16 | | 48974 | 9374769.12 | | 46218 | 9364135.50 | | 104039 | 9363227.03 | | 61538 | 9360159.08 | | 94688 | 9359604.98 | | 122393 | 9357937.19 | | 7323 | 9356712.30 | | 197892 | 9356573.44 | | 194056 | 9352381.73 | | 61285 | 9348480.54 | | 180336 | 9347874.15 | | 121930 | 9347784.74 | | 80652 | 9347143.50 | | 18549 | 9346038.72 | | 23992 | 9339908.16 | | 136583 | 9337299.56 | | 156151 | 9337138.10 | | 160572 | 9336553.40 | | 113391 | 9335558.10 | | 48068 | 9334317.92 | | 20409 | 9331093.65 | | 39712 | 9324685.28 | | 59364 | 9322249.86 | | 1344 | 9308304.39 | | 60549 | 9308293.20 | | 83854 | 9307387.25 | | 92092 | 9307165.64 | | 193306 | 9306177.31 | | 118265 | 9300250.20 | | 107568 | 9296254.34 | | 109127 | 9293552.10 | | 184688 | 9291647.92 | | 8718 | 9287337.37 | | 80433 | 9286295.52 | | 26670 | 9284963.44 | | 139548 | 9283605.21 | | 14736 | 9280119.20 | | 97886 | 9273852.42 | | 181442 | 9273130.50 | | 172360 | 9272824.92 | | 192714 | 9268366.36 | | 106726 | 9264879.90 | | 72157 | 9263498.40 | | 70445 | 9257553.92 | | 75148 | 9257420.83 | | 26170 | 9256074.12 | | 116531 | 9249721.71 | | 133665 | 9245464.80 | | 129041 | 9244629.48 | | 136486 | 9240748.92 | | 198924 | 9239976.06 | | 115254 | 9233580.37 | | 168135 | 9232693.98 | | 22480 | 9232190.78 | | 192018 | 9230386.58 | | 111889 | 9228204.96 | | 151661 | 9227926.90 | | 96482 | 9226960.85 | | 49198 | 9226436.40 | | 41219 | 9222883.52 | | 113502 | 9222208.59 | | 84009 | 9218703.22 | | 192788 | 9213468.00 | | 160251 | 9206353.32 | | 188162 | 9200537.88 | | 167589 | 9195835.03 | | 132673 | 9194021.22 | | 191105 | 9192417.12 | | 128748 | 9189941.55 | | 130423 | 9184710.96 | | 22639 | 9182963.16 | | 199034 | 9180909.86 | | 187644 | 9180350.20 | | 970 | 9175757.70 | | 59070 | 9170000.64 | | 66568 | 9166070.04 | | 52715 | 9161221.80 | | 130276 | 9161201.57 | | 24189 | 9160740.15 | | 132402 | 9144498.48 | | 37799 | 9142271.24 | | 173337 | 9140566.68 | | 176552 | 9135054.51 | | 195714 | 9133679.77 | | 119363 | 9123261.90 | | 161160 | 9122259.60 | | 196968 | 9111592.20 | | 61943 | 9111527.33 | | 79766 | 9109534.89 | | 178082 | 9105694.92 | | 38800 | 9105468.72 | | 83608 | 9099493.68 | | 146346 | 9098628.00 | | 116690 | 9098099.93 | | 64690 | 9095441.10 | | 82061 | 9095381.18 | | 89015 | 9092660.48 | | 188457 | 9091400.40 | | 125177 | 9090455.55 | | 114776 | 9088177.68 | | 4486 | 9087487.20 | | 176940 | 9086842.84 | | 93157 | 9084361.81 | | 148624 | 9083370.78 | | 4441 | 9079520.58 | | 63590 | 9079125.44 | | 174189 | 9078023.39 | | 63054 | 9075441.98 | | 14950 | 9073156.19 | | 175646 | 9072322.47 | | 63712 | 9067710.48 | | 157197 | 9067452.77 | | 147196 | 9064699.80 | | 50551 | 9062434.72 | | 43035 | 9061782.03 | | 187679 | 9056529.40 | | 96673 | 9056525.94 | | 130148 | 9054217.06 | | 159007 | 9053155.29 | | 41544 | 9052820.94 | | 109476 | 9048012.09 | | 60092 | 9045562.44 | | 197490 | 9044579.88 | | 47311 | 9037223.52 | | 87230 | 9033227.61 | | 3860 | 9030622.02 | | 5466 | 9029841.66 | | 171537 | 9024699.30 | | 39707 | 9022833.12 | | 167048 | 9022709.18 | | 109006 | 9022258.40 | | 17910 | 9019688.45 | | 132826 | 9017286.74 | | 157502 | 9016444.08 | | 142309 | 9016270.60 | | 78891 | 9005693.25 | | 88301 | 9002414.82 | | 11496 | 9000803.97 | | 163633 | 8996162.06 | | 151809 | 8993104.95 | | 131555 | 8988340.68 | | 72812 | 8985370.68 | | 77047 | 8981489.79 | | 1553 | 8977226.10 | | 162531 | 8973689.92 | | 154026 | 8973320.24 | | 125499 | 8969667.84 | | 34547 | 8966116.43 | | 41301 | 8965350.42 | | 12853 | 8959403.59 | | 27736 | 8957933.23 | | 162817 | 8956868.20 | | 155389 | 8955349.85 | | 130360 | 8952928.25 | | 120878 | 8952393.10 | | 150671 | 8952112.72 | | 190365 | 8951671.57 | | 72364 | 8950587.82 | | 71615 | 8949277.07 | | 95277 | 8947796.58 | | 78180 | 8946814.80 | | 97062 | 8945057.46 | | 170013 | 8944660.40 | | 113426 | 8943016.29 | | 173751 | 8942914.28 | | 1478 | 8941906.24 | | 26061 | 8941022.48 | | 152527 | 8939654.10 | | 148360 | 8939589.40 | | 44057 | 8939101.36 | | 13595 | 8936720.10 | | 33337 | 8935366.48 | | 169698 | 8931507.20 | | 26155 | 8927283.11 | | 17185 | 8927218.40 | | 51996 | 8926661.08 | | 101869 | 8919281.70 | | 14561 | 8910653.92 | | 190047 | 8909427.90 | | 104143 | 8909328.40 | | 133330 | 8907195.90 | | 169144 | 8904989.34 | | 87067 | 8900079.44 | | 176075 | 8898845.64 | | 25076 | 8895274.12 | | 80838 | 8895205.30 | | 40387 | 8890891.55 | | 88004 | 8888748.80 | | 105527 | 8888672.72 | | 40741 | 8886674.24 | | 76690 | 8880622.61 | | 86485 | 8880488.57 | | 75736 | 8877666.06 | | 48704 | 8876626.52 | | 56450 | 8872277.59 | | 61683 | 8870173.93 | | 24067 | 8867814.12 | | 108012 | 8863632.38 | | 180971 | 8862007.20 | | 132986 | 8861335.20 | | 35839 | 8859344.64 | | 191553 | 8857411.14 | | 163492 | 8855825.91 | | 112101 | 8851904.10 | | 27050 | 8847924.19 | | 57481 | 8845309.59 | | 163252 | 8842276.65 | | 87958 | 8840221.67 | | 60162 | 8838927.08 | | 131928 | 8838900.48 | | 123514 | 8833601.14 | | 42891 | 8830401.37 | | 71547 | 8829540.72 | | 13975 | 8826582.48 | | 31577 | 8825371.40 | | 86165 | 8816308.38 | | 164646 | 8815470.18 | | 150176 | 8814992.11 | | 152464 | 8814533.82 | | 183434 | 8813941.24 | | 58839 | 8808010.20 | | 59952 | 8801497.32 | | 151038 | 8800215.80 | | 139523 | 8800032.57 | | 8828 | 8798704.66 | | 14080 | 8797032.12 | | 194080 | 8792825.27 | | 87199 | 8788933.64 | | 91747 | 8785811.64 | | 194429 | 8776185.03 | | 118998 | 8776071.00 | | 179467 | 8771474.74 | | 68715 | 8771302.80 | | 180572 | 8771095.68 | | 19821 | 8770770.82 | | 41702 | 8770565.71 | | 27916 | 8769001.47 | | 121302 | 8763598.50 | | 107013 | 8762893.37 | | 37287 | 8761196.43 | | 117050 | 8758230.00 | | 58547 | 8757757.40 | | 197088 | 8749026.12 | | 55839 | 8747234.02 | | 71829 | 8744546.91 | | 30961 | 8743416.92 | | 134548 | 8741635.28 | | 179833 | 8738680.00 | | 79721 | 8737857.70 | | 144577 | 8736427.08 | | 29051 | 8729063.28 | | 131481 | 8728799.64 | | 73271 | 8727985.25 | | 89553 | 8725727.19 | | 31306 | 8724451.12 | | 82181 | 8724017.16 | | 95549 | 8723460.30 | | 31507 | 8722094.40 | | 21302 | 8722054.95 | | 137953 | 8721611.83 | | 195768 | 8721020.99 | | 180105 | 8718021.20 | | 98241 | 8717935.36 | | 59431 | 8715482.28 | | 143694 | 8713267.63 | | 109020 | 8713043.36 | | 46732 | 8711642.04 | | 144172 | 8711013.10 | | 139056 | 8710786.50 | | 107543 | 8706135.75 | | 89127 | 8705410.56 | | 146544 | 8704812.86 | | 195524 | 8699333.14 | | 133563 | 8698060.14 | | 112707 | 8694322.84 | | 98951 | 8690376.70 | | 132635 | 8689305.24 | | 69056 | 8688980.25 | | 134143 | 8688695.26 | | 148150 | 8687553.16 | | 89122 | 8686767.31 | | 15085 | 8685772.26 | | 196686 | 8682783.57 | | 3076 | 8672940.78 | | 137428 | 8672547.80 | | 27263 | 8671719.36 | | 101561 | 8667962.72 | | 12597 | 8662223.52 | | 143329 | 8661688.72 | | 130813 | 8659409.04 | | 183679 | 8658698.30 | | 47449 | 8658493.58 | | 164677 | 8658220.00 | | 51437 | 8654713.02 | | 116162 | 8649713.36 | | 71889 | 8645159.67 | | 6486 | 8639891.76 | | 192102 | 8638102.72 | | 101660 | 8634451.80 | | 124703 | 8633146.86 | | 150469 | 8631948.60 | | 197467 | 8630739.78 | | 97621 | 8630453.32 | | 150354 | 8630288.15 | | 179544 | 8630121.63 | | 38972 | 8626072.00 | | 110732 | 8625761.16 | | 170791 | 8625203.06 | | 149414 | 8617070.17 | | 59527 | 8616079.20 | | 157580 | 8615676.04 | | 16268 | 8615087.46 | | 76464 | 8610219.38 | | 44474 | 8607934.92 | | 125527 | 8607708.08 | | 118076 | 8602251.65 | | 180362 | 8601367.05 | | 5808 | 8599851.04 | | 28703 | 8599486.36 | | 113373 | 8597996.36 | | 118918 | 8597063.80 | | 44868 | 8596304.52 | | 43419 | 8596265.35 | | 89763 | 8595248.64 | | 119232 | 8594224.56 | | 108649 | 8590683.68 | | 10396 | 8588398.05 | | 79536 | 8587117.83 | | 149800 | 8587058.86 | | 165839 | 8582991.20 | | 115397 | 8581524.77 | | 104394 | 8581384.42 | | 142569 | 8581127.40 | | 63676 | 8580930.08 | | 29029 | 8580613.53 | | 156604 | 8580477.00 | | 7310 | 8579949.50 | | 105381 | 8576164.24 | | 84306 | 8573960.40 | | 61217 | 8570393.04 | | 164438 | 8569616.36 | | 28073 | 8565639.60 | | 125743 | 8563258.90 | | 190032 | 8561620.55 | | 147122 | 8561245.68 | | 5384 | 8558830.08 | | 70172 | 8558319.64 | | 161966 | 8556193.38 | | 69530 | 8554377.60 | | 111243 | 8553627.55 | | 72590 | 8551077.51 | | 134423 | 8550604.77 | | 44509 | 8547134.31 | | 160707 | 8546000.68 | | 54123 | 8545976.26 | | 36547 | 8540333.04 | | 48715 | 8537983.35 | | 103078 | 8537142.60 | | 137613 | 8536278.96 | | 44995 | 8532416.72 | | 191159 | 8532173.37 | | 119345 | 8532070.56 | | 109941 | 8531904.79 | | 5449 | 8528034.35 | | 134116 | 8526854.95 | | 199268 | 8523599.58 | | 168520 | 8523360.67 | | 154189 | 8521620.13 | | 108771 | 8513853.87 | | 198651 | 8511238.80 | | 93681 | 8510935.14 | | 170680 | 8509087.68 | | 106409 | 8506859.19 | | 27110 | 8499811.75 | | 43224 | 8499539.52 | | 153225 | 8499434.28 | | 16681 | 8498021.66 | | 117983 | 8496934.32 | | 192158 | 8492372.03 | | 33900 | 8491139.64 | | 37006 | 8489126.28 | | 176554 | 8488633.92 | | 69234 | 8484937.26 | | 176652 | 8484496.02 | | 41660 | 8480585.65 | | 129104 | 8480411.17 | | 66960 | 8478978.86 | | 36296 | 8472438.75 | | 98665 | 8471241.57 | | 134173 | 8467888.57 | | 60496 | 8467019.22 | | 197520 | 8466553.20 | | 116746 | 8465792.60 | | 187394 | 8458248.24 | | 140377 | 8455546.68 | | 97326 | 8450501.67 | | 26770 | 8449625.64 | | 104884 | 8446152.26 | | 143109 | 8443547.19 | | 127361 | 8441094.08 | | 104754 | 8436883.50 | | 183676 | 8436165.76 | | 906 | 8434608.12 | | 55768 | 8433763.69 | | 118654 | 8433465.57 | | 39310 | 8433214.55 | | 173261 | 8432992.53 | | 93976 | 8432605.20 | | 63318 | 8432149.26 | | 128243 | 8424182.94 | | 156063 | 8422743.54 | | 195087 | 8421279.30 | | 67668 | 8417594.98 | | 49882 | 8417237.80 | | 105631 | 8412628.07 | | 40987 | 8406033.41 | | 185735 | 8404112.83 | | 173986 | 8403050.34 | | 87372 | 8402838.40 | | 24509 | 8398807.24 | | 180522 | 8394989.75 | | 76215 | 8394433.35 | | 193872 | 8390435.23 | | 141234 | 8390180.92 | | 91138 | 8386645.20 | | 28097 | 8385577.38 | | 4053 | 8384952.75 | | 17050 | 8380304.40 | | 64050 | 8377921.56 | | 80836 | 8375803.16 | | 86084 | 8373551.95 | | 168499 | 8373348.72 | | 178642 | 8372218.52 | | 8498 | 8370557.16 | | 156312 | 8366249.30 | | 136803 | 8361949.92 | | 92109 | 8359503.23 | | 138625 | 8358135.21 | | 137540 | 8358031.08 | | 176531 | 8355437.00 | | 53783 | 8352395.63 | | 106977 | 8352334.98 | | 21385 | 8351786.37 | | 114885 | 8351582.40 | | 113643 | 8350530.65 | | 89061 | 8349422.08 | | 77752 | 8348730.24 | | 28623 | 8348321.44 | | 74478 | 8348064.27 | | 41383 | 8347223.45 | | 147632 | 8346967.80 | | 40948 | 8346743.30 | | 154324 | 8346521.91 | | 89724 | 8346034.80 | | 119083 | 8338084.92 | | 124143 | 8335841.76 | | 80512 | 8335705.69 | | 105047 | 8332249.86 | | 38243 | 8329017.19 | | 42583 | 8328613.91 | | 44240 | 8327684.64 | | 57611 | 8321693.94 | | 9730 | 8319725.70 | | 91655 | 8318837.40 | | 13140 | 8316216.96 | | 112257 | 8315169.85 | | 27182 | 8314740.99 | | 166654 | 8314332.64 | | 40572 | 8312654.55 | | 26680 | 8311626.68 | | 138947 | 8311347.29 | | 184982 | 8310393.08 | | 35540 | 8308058.43 | | 181446 | 8304851.76 | | 65160 | 8299581.90 | | 9533 | 8299139.42 | | 67836 | 8294228.46 | | 159414 | 8293114.90 | | 115025 | 8291746.65 | | 30780 | 8291580.00 | | 164680 | 8290263.02 | | 4599 | 8288816.03 | | 73366 | 8286818.96 | | 135625 | 8284930.92 | | 46497 | 8284638.88 | | 63781 | 8284447.60 | | 84332 | 8283372.14 | | 196269 | 8276407.36 | | 166651 | 8275663.35 | | 142 | 8273960.31 | | 56904 | 8272891.44 | | 46821 | 8272603.71 | | 76051 | 8272300.75 | | 19666 | 8270192.64 | | 92723 | 8267074.20 | | 125843 | 8266816.38 | | 158722 | 8266634.88 | | 28941 | 8266245.12 | | 39968 | 8265605.53 | | 41429 | 8265317.84 | | 61601 | 8264074.31 | | 179159 | 8260137.47 | | 15969 | 8259835.96 | | 121125 | 8253912.49 | | 66486 | 8253743.66 | | 181031 | 8253570.14 | | 43712 | 8250825.78 | | 13842 | 8245765.00 | | 76203 | 8245412.16 | | 68992 | 8243081.46 | | 119704 | 8241363.06 | | 86109 | 8240377.92 | | 29534 | 8239914.00 | | 68596 | 8239825.29 | | 168291 | 8237626.32 | | 183308 | 8235947.21 | | 78657 | 8233481.64 | | 193545 | 8233037.49 | | 23658 | 8232306.18 | | 179945 | 8231365.25 | | 53391 | 8231252.10 | | 71380 | 8231125.68 | | 53666 | 8226715.00 | | 118592 | 8226181.00 | | 67203 | 8225355.99 | | 1178 | 8224625.05 | | 147876 | 8224189.62 | | 80042 | 8220826.70 | | 48950 | 8218611.22 | | 43331 | 8218448.04 | | 177706 | 8215723.50 | | 145442 | 8215706.16 | | 197042 | 8215536.00 | | 169952 | 8214698.43 | | 57907 | 8211740.04 | | 145741 | 8210316.57 | | 91144 | 8209855.02 | | 160266 | 8209468.80 | | 31602 | 8209366.90 | | 98672 | 8208412.85 | | 199012 | 8207897.50 | | 151148 | 8207645.16 | | 116545 | 8207573.24 | | 122176 | 8207508.04 | | 11021 | 8206766.10 | | 47752 | 8203436.82 | | 124 | 8203209.30 | | 148126 | 8202846.66 | | 15753 | 8202695.55 | | 50833 | 8200880.16 | | 11523 | 8196478.02 | | 71478 | 8195930.68 | | 129262 | 8190520.80 | | 43023 | 8186451.85 | | 119193 | 8184853.14 | | 85067 | 8182638.86 | | 164534 | 8181563.04 | | 82556 | 8180455.14 | | 31813 | 8179417.14 | | 81345 | 8173128.69 | | 38413 | 8172464.04 | | 106014 | 8171418.35 | | 191180 | 8170663.97 | | 43274 | 8169669.72 | | 5837 | 8166123.50 | | 63332 | 8161839.60 | | 47668 | 8161790.04 | | 112468 | 8160728.40 | | 132541 | 8160680.00 | | 59457 | 8160393.33 | | 71751 | 8159865.19 | | 118395 | 8156795.00 | | 132390 | 8154867.54 | | 44792 | 8153384.22 | | 128838 | 8153018.30 | | 87197 | 8152281.72 | | 187978 | 8150832.56 | | 147419 | 8150063.60 | | 149166 | 8149406.78 | | 196012 | 8147307.42 | | 190519 | 8145402.96 | | 151511 | 8144276.58 | | 88891 | 8140166.24 | | 168056 | 8139101.96 | | 189186 | 8136933.25 | | 117326 | 8136047.82 | | 60575 | 8133316.80 | | 75452 | 8130427.37 | | 194126 | 8129751.80 | | 130199 | 8129270.88 | | 41680 | 8128823.40 | | 107624 | 8125799.20 | | 135069 | 8123999.10 | | 119032 | 8123770.24 | | 27635 | 8123076.65 | | 14317 | 8121553.23 | | 148018 | 8119898.16 | | 51152 | 8118370.26 | | 112643 | 8117331.37 | | 119526 | 8116075.80 | | 192084 | 8114896.38 | | 151385 | 8114711.28 | | 160836 | 8112053.68 | | 91468 | 8111785.50 | | 58877 | 8108256.25 | | 41885 | 8107026.81 | | 155542 | 8106757.18 | | 149968 | 8104953.78 | | 168380 | 8103576.00 | | 134641 | 8101092.32 | | 92470 | 8100877.70 | | 113610 | 8098591.93 | | 198538 | 8097343.20 | | 122506 | 8096090.76 | | 29082 | 8093543.55 | | 161345 | 8093157.93 | | 105743 | 8093045.53 | | 103572 | 8091573.66 | | 59514 | 8089470.48 | | 8801 | 8088454.15 | | 129062 | 8088206.58 | | 155464 | 8086115.79 | | 86363 | 8082561.00 | | 180836 | 8082087.30 | | 92558 | 8081407.80 | | 85120 | 8073164.00 | | 149026 | 8072285.40 | | 51138 | 8072074.48 | | 36306 | 8071648.86 | | 102380 | 8070503.00 | | 147597 | 8069397.60 | | 41382 | 8059995.35 | | 121856 | 8059809.11 | | 86644 | 8058667.76 | | 108481 | 8058214.81 | | 41685 | 8057355.39 | | 175712 | 8054878.30 | | 72815 | 8052294.24 | | 58794 | 8047848.00 | | 118769 | 8047465.14 | | 157192 | 8046501.96 | | 195708 | 8045001.94 | | 163683 | 8044727.02 | | 189018 | 8043927.54 | | 62904 | 8043011.65 | | 80095 | 8042575.59 | | 90500 | 8042502.65 | | 73281 | 8040167.52 | | 150710 | 8035910.80 | | 139282 | 8034489.36 | | 172904 | 8033791.68 | | 38881 | 8032557.38 | | 53055 | 8030796.15 | | 105816 | 8025318.24 | | 88304 | 8024637.06 | | 115565 | 8023928.25 | | 55376 | 8021432.16 | | 56334 | 8019313.12 | | 58875 | 8016065.00 | | 4688 | 8012303.00 | | 49117 | 8009207.80 | | 57173 | 8008116.27 | | 48176 | 8006765.85 | | 112191 | 8003883.39 | | 33265 | 8002391.76 | | 181788 | 8002030.50 | | 172799 | 8001050.55 | | 2084 | 7999172.30 | | 174747 | 7997167.48 | | 171184 | 7996930.11 | | 113271 | 7992683.04 | | 68662 | 7991426.30 | | 179375 | 7991170.88 | | 188383 | 7990226.27 | | 50208 | 7989363.27 | | 23653 | 7988890.87 | | 159419 | 7988841.36 | | 74581 | 7987356.50 | | 133590 | 7986046.81 | | 195820 | 7985473.14 | | 87903 | 7983482.88 | | 69032 | 7981908.18 | | 113975 | 7980561.00 | | 178678 | 7975116.93 | | 52316 | 7973618.16 | | 135546 | 7972669.80 | | 89425 | 7970077.44 | | 115937 | 7966015.20 | | 151483 | 7964850.88 | | 73974 | 7964186.23 | | 39976 | 7964104.24 | | 130168 | 7961690.88 | | 58973 | 7957416.76 | | 16354 | 7956051.07 | | 23988 | 7955837.92 | | 138467 | 7955481.05 | | 26096 | 7955212.32 | | 192216 | 7953429.18 | | 112833 | 7952279.26 | | 60599 | 7951261.80 | | 129116 | 7948811.85 | | 79529 | 7947581.91 | | 71616 | 7944476.54 | | 136821 | 7942188.24 | | 116204 | 7941096.90 | | 165298 | 7939933.31 | | 44009 | 7939859.65 | | 194487 | 7938247.20 | | 11299 | 7938135.81 | | 76488 | 7935926.86 | | 58998 | 7934414.04 | | 25175 | 7931035.11 | | 136144 | 7929283.23 | | 132829 | 7926841.62 | | 84176 | 7925781.05 | | 68592 | 7922872.98 | | 139280 | 7922119.48 | | 160669 | 7921588.43 | | 42938 | 7917524.56 | | 183183 | 7915624.86 | | 95449 | 7914292.08 | | 115390 | 7912655.54 | | 173723 | 7911329.40 | | 48992 | 7911153.12 | | 173464 | 7910458.65 | | 26098 | 7910217.75 | | 141115 | 7909496.38 | | 195218 | 7906315.56 | | 116608 | 7906302.60 | | 163793 | 7905477.33 | | 10419 | 7904598.30 | | 106312 | 7901466.72 | | 48674 | 7901010.24 | | 35198 | 7899974.88 | | 88954 | 7899573.52 | | 41505 | 7897709.99 | | 115586 | 7897301.88 | | 167431 | 7895826.00 | | 158787 | 7894948.50 | | 161712 | 7893410.70 | | 46930 | 7892707.77 | | 58633 | 7892088.15 | | 10599 | 7892067.69 | | 99523 | 7891485.16 | | 70126 | 7890247.41 | | 32476 | 7890149.34 | | 152617 | 7890136.50 | | 162639 | 7889822.70 | | 82056 | 7889345.05 | | 186450 | 7887873.56 | | 39082 | 7886019.89 | | 183217 | 7885948.48 | | 192551 | 7884432.48 | | 164801 | 7882870.10 | | 112804 | 7882772.00 | | 5956 | 7878805.04 | | 73054 | 7878479.63 | | 62593 | 7878401.44 | | 137687 | 7873755.91 | | 80526 | 7871839.50 | | 195354 | 7869617.75 | | 4122 | 7867967.09 | | 4057 | 7865176.80 | | 63195 | 7864322.16 | | 143370 | 7863444.54 | | 41473 | 7862926.89 | | 155060 | 7860900.96 | | 76875 | 7858529.64 | | 135778 | 7857660.51 | | 30534 | 7855226.08 | | 99405 | 7853410.95 | | 161551 | 7852244.40 | | 185034 | 7850752.00 | | 17264 | 7850704.88 | | 23652 | 7848909.16 | | 123681 | 7848265.36 | | 186170 | 7845527.50 | | 81496 | 7840427.40 | | 25407 | 7840234.72 | | 96662 | 7839907.41 | | 156407 | 7839647.75 | | 165843 | 7839562.80 | | 153361 | 7838813.07 | | 149362 | 7838282.52 | | 46057 | 7835709.81 | | 114341 | 7835492.25 | | 154823 | 7834898.61 | | 139538 | 7834690.64 | | 42853 | 7833252.60 | | 177659 | 7831803.58 | | 29158 | 7829880.80 | | 85583 | 7825996.64 | | 165714 | 7825006.46 | | 58662 | 7821977.76 | | 185839 | 7821640.74 | | 93559 | 7821137.52 | | 58481 | 7818648.16 | | 162217 | 7817923.47 | | 130014 | 7815929.34 | | 125640 | 7815262.90 | | 83723 | 7815021.48 | | 54314 | 7813732.94 | | 146652 | 7809817.39 | | 189256 | 7808972.00 | | 87994 | 7808660.48 | | 157067 | 7806217.25 | | 56859 | 7805947.60 | | 118132 | 7804423.69 | | 189457 | 7802777.91 | | 1509 | 7802315.42 | | 129101 | 7801994.70 | | 162285 | 7801859.52 | | 182358 | 7801430.46 | | 6288 | 7800363.30 | | 68972 | 7799224.95 | | 51684 | 7795455.46 | | 148645 | 7794585.92 | | 94359 | 7794358.92 | | 40451 | 7791437.70 | | 44019 | 7790053.76 | | 81470 | 7788716.85 | | 12731 | 7786998.38 | | 114393 | 7784963.34 | | 69323 | 7783583.08 | | 169794 | 7780968.30 | | 25378 | 7778569.60 | | 104509 | 7777137.62 | | 81874 | 7775216.80 | | 70859 | 7771185.07 | | 135768 | 7769704.84 | | 181960 | 7768847.90 | | 28481 | 7768516.61 | | 191604 | 7765367.68 | | 754 | 7762507.02 | | 127702 | 7761776.05 | | 36488 | 7761744.00 | | 183906 | 7759864.80 | | 90365 | 7759602.50 | | 60725 | 7759495.78 | | 69436 | 7759033.52 | | 12963 | 7756623.52 | | 64571 | 7755731.04 | | 160111 | 7753787.70 | | 107970 | 7753735.88 | | 132036 | 7753401.36 | | 79965 | 7748656.15 | | 149862 | 7747239.10 | | 73218 | 7745499.42 | | 161036 | 7742807.45 | | 152467 | 7742471.40 | | 163358 | 7742034.00 | | 197951 | 7741768.84 | | 15820 | 7740003.00 | | 31444 | 7739519.60 | | 151208 | 7738273.85 | | 20410 | 7737192.99 | | 45462 | 7736792.55 | | 128966 | 7736467.65 | | 118945 | 7735275.00 | | 106458 | 7734069.72 | | 162706 | 7730189.88 | | 70528 | 7730088.25 | | 107998 | 7728273.45 | | 163110 | 7728042.40 | | 74591 | 7727297.76 | | 121454 | 7726200.56 | | 181252 | 7724464.38 | | 29154 | 7724129.66 | | 63854 | 7720353.88 | | 34157 | 7719803.30 | | 30684 | 7718307.84 | | 3985 | 7715042.96 | | 29387 | 7714858.80 | | 184703 | 7712545.12 | | 124679 | 7712528.72 | | 15606 | 7710658.46 | | 123814 | 7709872.95 | | 83760 | 7709633.92 | | 22084 | 7707219.79 | | 123210 | 7706030.42 | | 75066 | 7704727.51 | | 16337 | 7704517.80 | | 47109 | 7704111.51 | | 8232 | 7702887.50 | | 11222 | 7702535.62 | | 84961 | 7701923.72 | | 157118 | 7700132.88 | | 118362 | 7699210.20 | | 193755 | 7698545.20 | | 1520 | 7697759.37 | | 114599 | 7697377.50 | | 168842 | 7696152.00 | | 172245 | 7694286.06 | | 4584 | 7693352.79 | | 113651 | 7689659.67 | | 183207 | 7687955.66 | | 175802 | 7686604.70 | | 59066 | 7685120.43 | | 130726 | 7684159.25 | | 89672 | 7684049.50 | | 7224 | 7683446.40 | | 97533 | 7680694.62 | | 59941 | 7680100.80 | | 29298 | 7676823.42 | | 163962 | 7675924.96 | | 41086 | 7674518.14 | | 185483 | 7673376.60 | | 165010 | 7672469.70 | | 3708 | 7671744.18 | | 192994 | 7671712.00 | | 79968 | 7668060.48 | | 118494 | 7666659.00 | | 59236 | 7666625.98 | | 149509 | 7665930.67 | | 3793 | 7664981.28 | | 28979 | 7664632.93 | | 178389 | 7662544.96 | | 65315 | 7661085.88 | | 59710 | 7657442.00 | | 170276 | 7656813.89 | | 182707 | 7656387.06 | | 129170 | 7655820.48 | | 59765 | 7655009.92 | | 23337 | 7654271.94 | | 90396 | 7653568.35 | | 68842 | 7652742.72 | | 16315 | 7652630.70 | | 956 | 7652174.81 | | 10639 | 7651375.80 | | 112886 | 7649534.08 | | 9561 | 7648502.73 | | 65484 | 7647789.30 | | 68677 | 7646879.14 | | 196529 | 7645482.24 | | 6556 | 7642116.06 | | 9113 | 7640163.68 | | 128139 | 7638760.00 | | 143264 | 7635499.56 | | 21569 | 7634785.86 | | 193402 | 7633576.06 | | 35545 | 7632210.69 | | 65068 | 7632188.76 | | 25515 | 7630952.93 | | 180189 | 7630887.10 | | 131680 | 7629593.64 | | 80162 | 7629440.93 | | 139054 | 7629417.37 | | 8028 | 7629134.04 | | 76804 | 7626731.00 | | 74179 | 7624974.03 | | 122507 | 7623903.87 | | 141889 | 7623552.30 | | 184279 | 7623048.17 | | 8076 | 7620897.81 | | 192681 | 7619802.09 | | 21398 | 7617942.52 | | 14825 | 7617843.60 | | 17969 | 7617524.64 | | 170764 | 7616119.96 | | 115303 | 7615914.17 | | 67708 | 7615306.08 | | 33317 | 7613417.24 | | 190782 | 7613203.42 | | 113818 | 7612852.48 | | 178091 | 7611457.30 | | 87603 | 7611343.68 | | 108317 | 7610509.71 | | 106552 | 7609868.84 | | 28679 | 7609292.20 | | 192350 | 7609140.81 | | 154801 | 7607944.38 | | 5768 | 7607785.68 | | 127689 | 7606313.94 | | 62847 | 7605651.45 | | 111212 | 7605052.00 | | 156065 | 7603327.60 | | 115140 | 7601161.68 | | 19597 | 7601153.46 | | 55233 | 7600940.23 | | 89353 | 7600929.84 | | 75701 | 7600492.60 | | 64974 | 7599754.80 | | 116156 | 7597452.48 | | 59491 | 7596352.84 | | 6138 | 7594861.54 | | 62317 | 7594854.10 | | 106575 | 7594520.08 | | 161092 | 7594454.40 | | 9872 | 7593734.34 | | 77711 | 7593431.60 | | 61206 | 7593153.00 | | 123776 | 7592736.80 | | 185141 | 7592617.12 | | 5542 | 7592513.04 | | 185296 | 7591439.31 | | 72597 | 7591142.40 | +------------+-------------+ 1225 rows in set Q12 +------------+-----------------+----------------+ | l_shipmode | high_line_count | low_line_count | +------------+-----------------+----------------+ | FOB | 6273 | 9429 | | TRUCK | 6336 | 9300 | +------------+-----------------+----------------+ Q13 +---------+----------+ | c_count | custdist | +---------+----------+ | 0 | 50005 | | 10 | 6574 | | 9 | 6554 | | 11 | 6072 | | 8 | 5934 | | 12 | 5598 | | 13 | 5032 | | 19 | 4685 | | 7 | 4663 | | 20 | 4607 | | 17 | 4550 | | 18 | 4515 | | 14 | 4480 | | 15 | 4476 | | 16 | 4341 | | 21 | 4176 | | 22 | 3710 | | 6 | 3303 | | 23 | 3172 | | 24 | 2670 | | 25 | 2111 | | 5 | 1954 | | 26 | 1605 | | 27 | 1195 | | 4 | 1030 | | 28 | 898 | | 29 | 620 | | 3 | 408 | | 30 | 353 | | 31 | 225 | | 32 | 135 | | 2 | 128 | | 33 | 82 | | 34 | 54 | | 35 | 33 | | 1 | 18 | | 36 | 17 | | 37 | 7 | | 41 | 3 | | 40 | 3 | | 38 | 3 | | 39 | 1 | +---------+----------+ 42 rows in set Q14 +-------------------+ | promo_revenue | +-------------------+ | 16.65118731292792 | +-------------------+ Q15 +-----------+--------------------+----------------------------------+-----------------+---------------+ | s_suppkey | s_name | s_address | s_phone | total_revenue | +-----------+--------------------+----------------------------------+-----------------+---------------+ | 7895 | Supplier#000007895 | NYl,i8UhxTykLxGJ2voIRn20Ugk1KTzz | 14-559-808-3306 | 1678635.2636 | +-----------+--------------------+----------------------------------+-----------------+---------------+ Q16 +----------+---------------------------+--------+--------------+ | p_brand | p_type | p_size | supplier_cnt | +----------+---------------------------+--------+--------------+ | Brand#55 | LARGE BURNISHED TIN | 21 | 36 | | Brand#25 | PROMO BRUSHED STEEL | 24 | 28 | | Brand#54 | STANDARD BRUSHED COPPER | 14 | 27 | | Brand#12 | MEDIUM PLATED BRASS | 21 | 24 | | Brand#14 | ECONOMY PLATED TIN | 33 | 24 | | Brand#24 | ECONOMY PLATED TIN | 33 | 24 | | Brand#25 | MEDIUM PLATED STEEL | 35 | 24 | | Brand#32 | MEDIUM POLISHED COPPER | 20 | 24 | | Brand#32 | SMALL ANODIZED BRASS | 7 | 24 | | Brand#33 | ECONOMY PLATED STEEL | 7 | 24 | | Brand#33 | MEDIUM PLATED COPPER | 20 | 24 | | Brand#33 | PROMO POLISHED STEEL | 14 | 24 | ... | Brand#31 | PROMO ANODIZED COPPER | 20 | 3 | | Brand#41 | LARGE BURNISHED STEEL | 20 | 3 | | Brand#43 | SMALL BRUSHED COPPER | 7 | 3 | | Brand#52 | MEDIUM POLISHED BRASS | 21 | 3 | | Brand#52 | SMALL POLISHED TIN | 2 | 3 | +----------+---------------------------+--------+--------------+ 18341 rows in set Q17 +-------------------+ | avg_yearly | +-------------------+ | 348406.0542857143 | +-------------------+ Q18 +--------------------+-----------+------------+-------------+--------------+-----------------+ | c_name | c_custkey | o_orderkey | o_orderdate | o_totalprice | sum(l_quantity) | +--------------------+-----------+------------+-------------+--------------+-----------------+ | Customer#000128120 | 128120 | 4722021 | 1994-04-07 | 544089.09 | 323.00 | | Customer#000144617 | 144617 | 3043270 | 1997-02-12 | 530604.44 | 317.00 | | Customer#000066790 | 66790 | 2199712 | 1996-09-30 | 515531.82 | 327.00 | | Customer#000015619 | 15619 | 3767271 | 1996-08-07 | 480083.96 | 318.00 | | Customer#000147197 | 147197 | 1263015 | 1997-02-02 | 467149.67 | 320.00 | | Customer#000117919 | 117919 | 2869152 | 1996-06-20 | 456815.92 | 317.00 | | Customer#000126865 | 126865 | 4702759 | 1994-11-07 | 447606.65 | 320.00 | | Customer#000036619 | 36619 | 4806726 | 1995-01-17 | 446704.09 | 328.00 | | Customer#000119989 | 119989 | 1544643 | 1997-09-20 | 434568.25 | 320.00 | +--------------------+-----------+------------+-------------+--------------+-----------------+ 9 rows in set Q19 +--------------+ | revenue | +--------------+ | 3083843.0578 | +--------------+ Q20 +--------------------+------------------------------------------+ | s_name | s_address | +--------------------+------------------------------------------+ | Supplier#000000035 | QymmGXxjVVQ5OuABCXVVsu,4eF gU0Qc6 | | Supplier#000000068 | Ue6N50wH2CwE4PPgTGLmat,ibGYYlDoOb3xQwtgb | | Supplier#000000080 | cJ2MHSEJ13rIL2Wj3D5i6hRo30,ZiNUXhqn | | Supplier#000000100 | rIlN li8zvW22l2slbcx ECP4fL | | Supplier#000000274 | usxbl9KSW41DTE6FAglxHU | | Supplier#000000406 | zMhU58CDF4aHTeodxg9IgRZgq | | Supplier#000000444 | mHr2VcUpRkvyQ9rjKMaPkeWbVZmEIhxhb8F | | Supplier#000000453 | bpt98PxU5HSQt61bVB695JPjBmJKUv hNzQeHvC | | Supplier#000000458 | IFNkUK1H53HwUHabiONkMFAUDb | | Supplier#000000622 | gCQimU1jYHoQiglDmW1FkQM9wzi YC1P15pMy1 | | Supplier#000000713 | DBMIf1HiYY8OyRFcbtHpKIz | | Supplier#000000767 | bHEuqKKdmCMEKOV | | Supplier#000000776 | nklfFoSkCwf,ooSuF | | Supplier#000000823 | gC0DrEG5U,v893fp3nj mmXa6rYhJ0tjpJ | | Supplier#000000828 | 0B2aPqJ6KTEr2fqxuC7z | | Supplier#000000941 | gqG2XEnVlzUhjjfQGYGlwk,jcaNsplI8Rleg | | Supplier#000000973 | 5 nhBZ 03rG6EcOEDkZXvt | | Supplier#000000984 | 6H6qqye iYbYzCmwWhj | | Supplier#000001149 | Nuno37wiZOjNGHF | | Supplier#000001201 | Seh4D7pi9UdK,XQkF46A0O2N | | Supplier#000001309 | 72RNUzKzbniUnnsSs24ZzGDvmcv2Pd | | Supplier#000001344 | 6iF,zVDNTykohVKcb7FKvn82s74ez | | Supplier#000001351 | zXdoBMmmRx1wOD7GKoHHBtemXGuYKLDb,U2KP | | Supplier#000001391 | hkWoAM561QlLjBNk,SdFdIgFx | | Supplier#000001481 | ARqVvJHMxBNKl2LrfPsR Wq9ZUXh,14 | | Supplier#000001584 | gJbTkijteJxSMLmdzBSzeMAH | | Supplier#000001651 | 6rJNoWL9YL | | Supplier#000001710 | J,sdOOJwUhwPv2mrEiNEA0UZlmu5IRmgz | | Supplier#000001755 | QstBVfnY,93NsbWXCqO | | Supplier#000001869 | nogoCdaFQii,ri9rs3P8f5rPt1wVOMw9I7TmypxK | | Supplier#000001895 | lywAGDbk37fYPDS | | Supplier#000001910 | vih,zrhclXX1O9x | | Supplier#000001930 | 2jCSw3KOLHol7y5omVO13 | | Supplier#000001979 | UNW7nA,IC 5igvVsgUHA7OaLL,jOzUcT | | Supplier#000002046 | BiTDgHknmvQGT6FpZXfRX,xlnR | | Supplier#000002071 | zLH3QAtZuuOq8AoVNM | | Supplier#000002270 | HIscbvhw8N94djn,3UbPaY4R | | Supplier#000002350 | TWsO2iJGOl7v3vSwiscXp6X | | Supplier#000002409 | oy39SaSQ,FIP pzLqblhxj | | Supplier#000002520 | 5y55UzYQKByZP3 | | Supplier#000002618 | 3UtbE1kKm29kKyx09hSEBMhRLM | | Supplier#000002643 | eDN6YjGtp2dcj0IF,BKEEYjElO,sUjjcNI | | Supplier#000002649 | agDQi9iCt1cUaS | | Supplier#000002655 | i6v8dkQBuK0NSCeqQCE8 | | Supplier#000002812 | Q9sO3wZkBU5QBe0VITRWShv | | Supplier#000002888 | 3AtRoxBFh6HIBa9kdBX,6,Ml2SZGUA | | Supplier#000002910 | nlH1gjApxHkQe5SU4iVZwi2xWk88wwhTWRkSvOBB | | Supplier#000002914 | fUC4IkGB8pt1S | | Supplier#000003000 | JtDvRf4iWHJkj54PYxl | | Supplier#000003011 | vfL mV0MTdyozfRIPZkJbM1Z7Lcm2NCPIj6qSgBz | | Supplier#000003038 | F5Tz7P juuCbABDuW8JGomRFxqVHBWyQrsLwg4i | | Supplier#000003150 | XwSjsmzEnANK,wAQUp4Xf5xJDqR | | Supplier#000003305 | GLZJimfuzKoQcqcv4 | | Supplier#000003394 | R6D7n3WrQjWNGSQTb7eN ,X0oCMkhyuTHBOSPw | | Supplier#000003452 | 7tMycIKhE,pe4OL3Du | | Supplier#000003666 | ENS fE9iSrSzw,iTwA,zGorkflw | | Supplier#000003698 | lnSEu64ca4B53BfznJPg | | Supplier#000003773 | UWjSotAjkAD | | Supplier#000003837 | SYXpXaKop3 | | Supplier#000003846 | wl076KfcEpYLRegb1LfIf93b3n5HBabFK2R,mEM | | Supplier#000003862 | 0XXFhF1IDBh | | Supplier#000003868 | 5aP4VBn0t666NbGYB | | Supplier#000003880 | DZo80mSznrhCpb8 | | Supplier#000003955 | piECPB8qbn7s3XP | | Supplier#000004007 | cvlSgCCKGOwpaB iFIPx4vU2qA5b6K hz9Z91 | | Supplier#000004066 | TNBnJFDScUmsjBy6pSWTS sfMg9jpfKx | | Supplier#000004127 | EduKm3NcCc75Cd | | Supplier#000004174 | Bk97olQYwXmjYdQjwyt N | | Supplier#000004328 | euddbWZRcVMD3W | | Supplier#000004341 | ea8KZYvO7amq8A | | Supplier#000004360 | w 7kM5J,fqjiqBu4SU0UPEDqspaUEm | | Supplier#000004375 | Cmr952zcJJuW0xAYc0W0MA7N6vMcCjy | | Supplier#000004391 | pcsiJBhSEHuFHNAxR3K c | | Supplier#000004398 | khZZ0CmLip49Zncec | | Supplier#000004402 | acagGfDWzwmS,,WVBsszubFs3LOA8rDRS0I | | Supplier#000004714 | IKRla2xArMmR4p3Mbn8JV8g0 | | Supplier#000004717 | H,Suh5pN230Ol,ggx0QEh3rrvzyQsq050Lat | | Supplier#000004740 | yM0TXkhfjpObafbQhuWU | | Supplier#000004763 | W 7kS9LLh4ZgLpk2 | | Supplier#000004837 | tYHMZS4XlJjzvj34mH2PCoj | | Supplier#000004882 | e,V Bo1KZEt | | Supplier#000004913 | em,yC41xEl Fst9LwEik | | Supplier#000005005 | K6 GI4WzmbsGEOh | | Supplier#000005238 | jmtI76 8RNG8Z2BZu | | Supplier#000005289 | 62XeOur9SnXgbdjGwb9E1aJIEBr5PA9 | | Supplier#000005317 | lPOPHufNjwZaUJGVNHCC2DE FYQcKZBzHltL5 | | Supplier#000005401 | eEOlCEAaIfVexStlrgTuzwQx7vjPF6ZT dm | | Supplier#000005449 | fhc8lUuZdqWUujcVaWogowEq1WVL9Y8m1efwCl3G | | Supplier#000005472 | LlyLSmvY9GFvMN4QhHzMokW0k5d | | Supplier#000005572 | o0VYozeSbEyqck | | Supplier#000005579 | ACVEMP4IwRf | | Supplier#000005661 | pq5wuxmkIW0DyWU | | Supplier#000005676 | HInJHZisl5svSU1oKsr | | Supplier#000005815 | S6cu6cspYxHlTz2 | | Supplier#000005835 | rYoXzV3EZ77Z | | Supplier#000006103 | l32l8iaPdbHgRXoq,kdjFAj3hZk2d | | Supplier#000006173 | hBdratcVfL4LpWxsEpCRP g0AksN0CDhBZ | | Supplier#000006226 | CKuDyeGAxPHeRHwC4a | | Supplier#000006254 | g7OY1vWNUb1vxIRgEl | | Supplier#000006348 | f2KDn2rLnadX8I DZR | | Supplier#000006359 | QyUuVHYBp8sTd7Y9WveNfsz | | Supplier#000006430 | F2RrkeaNcs6po8x2PyYvcPa1rtKd,fT2AMxP | | Supplier#000006516 | 89XwFOC,hLRxGq5rL0txv0EM9F | | Supplier#000006700 | BWjerJH5kbEPu 8h9 | | Supplier#000006785 | lyo6PpwulTeN9ZfIkvWag5NucL,XMC 89Kn7U | | Supplier#000006998 | r2i3HfkSQh9dvho, NpoabdMsPBG | | Supplier#000007019 | 2GQsALzRiTt2BQum6bocdeGawkOrsjNIZ | | Supplier#000007114 | s9s4YLeLWo7fLRO3rdQKFfUnZhrZUPjOC | | Supplier#000007170 | 9vABqu hZaciXSCQrbTj | | Supplier#000007171 | DXerxFIhNRpqF9dWNRw hDOlLX gEJFxh0 | | Supplier#000007213 | 2Nrby3JJHDJyWwVNiqPtm2U JGWlZpU | | Supplier#000007219 | p5Ui3IGPcmotYu | | Supplier#000007229 | iwNoWdaURFzLAsQHxK,BeOPpI5TOTo | | Supplier#000007263 | malQPdYc8xiup2MiFuKHa | | Supplier#000007270 | TksERECGdYZRPUjkUdDRZv5pW26cOTaA1 | | Supplier#000007276 | Vi9,aBg2ychZf | | Supplier#000007334 | NPXYWdJ8L9EDr20tw9CZQsEMqXlgXzI2JC Y | | Supplier#000007400 | 7r9zZj8J,,hN2GRfWtDxzuGa | | Supplier#000007442 | DzycM1,T6kh2EutfPeFpv0Ro | | Supplier#000007456 | ITYEeccPVJi0HvnAwVs2Z | | Supplier#000007559 | Wmzx1vskciC | | Supplier#000007677 | OoTYQdxQyd7NukSaSRv | | Supplier#000007712 | DyTQD 3ajuOtHQTpI4LsWSF kSd2SE6U4COgYHQ | | Supplier#000007715 | gZHd7Yzbtv7yb7DYCCAQPJH8FRHTqi6T4w | | Supplier#000007816 | 1ejcJ545bwLWLuY6Qq4qyEExZIsp0SG | | Supplier#000007845 | agwGVTzLyRKOsZxLVi,mPWZ08Qxb | | Supplier#000007875 | E0CkoBYngcIoH | | Supplier#000007908 | ghhHapj7GK | | Supplier#000007972 | WW0GuiWP2N3kUo4f | | Supplier#000008162 | XASpbn08mRV0kgHRmUSKx | | Supplier#000008235 | TjVWq6bTdGJB | | Supplier#000008249 | PwUjvlMk y72zaMRtZQ8trbCmu4j | | Supplier#000008309 | 6P,FQbW6sJouqunvttVO6vEeY | | Supplier#000008339 | uWw8 P6u,S | | Supplier#000008343 | BbHngAVqj0J8 | | Supplier#000008349 | 8Hkx1IDd0mZCTX | | Supplier#000008377 | ,Yk0mflw2LqQCTxMYR sU2juj5DorUAG4w6i | | Supplier#000008468 | 5R4jsweitleustYlE3w,u5otW | | Supplier#000008523 | C4ocdfNu5I2nnnVG2xSd3016J6KNLIg | | Supplier#000008580 | t5ri71bM6Sox3riP4JUZsMMNC | | Supplier#000008638 | yxj50B 8aMql | | Supplier#000008642 | qnN9N9du9Dg2arf6kjD xW0DjMT9cM | | Supplier#000008651 | pfw32RGA7BPXrUiavYqE | | Supplier#000008679 | JWFVoSsCwn9p8o | | Supplier#000008704 | a6DjHp0B6mifKBtqUk,C | | Supplier#000008737 | MsdGxF9Xoq9 8s | | Supplier#000008820 | uAsBvPBNsEsO | | Supplier#000008829 | lNcY7xNLDonCw TuRYL | | Supplier#000008947 | 1Ij3T0egGHnVbLich98HzY,UeCdVbxzYa ZpKDVc | | Supplier#000008964 | U2YJW,Y1xCbUWbjuovtzsLfsl | | Supplier#000008974 | 4JCXOJ3MyPfa51mIf,MQu | | Supplier#000008997 | KY MmMEcyQ6FEDCooFj xa uCwF2GbaeA8 | | Supplier#000009065 | ZELuiqWrWbJV9zAuco1OnXKTJClhR | | Supplier#000009114 | nkn6bcPvlP5w,lUpO0nZTBSj | | Supplier#000009125 | IQbCXbN1mmght | | Supplier#000009131 | gDBXgWtg4rTxu0WUJhhV | | Supplier#000009149 | yKX,bKryD6YtvF,cVLIKC0Z6rN | | Supplier#000009182 | z56kNgeqaWQ1kHFBp | | Supplier#000009220 | N4y,vP kdArpcmdypBh,fJVVB | | Supplier#000009226 | yzT10vNTFJ | | Supplier#000009288 | 251AA4ziZ3d7TTWXLGnXjb4BnXv | | Supplier#000009360 | 1NVjjX8zMjyBX2UapDTP0Sz | | Supplier#000009381 | rhCTm7QehIznqd8 Np7VT,H5J5zSGr | | Supplier#000009403 | 70841REghyWBrHyyg762Jh4sjCG7CKaIc | | Supplier#000009504 | Rqt07,ANI92kj1oU | | Supplier#000009598 | PnTAz7rNRLVDFO3zoo2QRTlh4o | | Supplier#000009609 | LV2rJUGfr0k3dPNRqufG1IoYHzV | | Supplier#000009619 | K0RwcJ9S75Xil jqKukFoDNkD | | Supplier#000009626 | Nm1FnIh4asUR3EnXv2Pvy3gXqI9es | | Supplier#000009738 | 15RRSVTuOzwdMP LmfCtIguMGXK | | Supplier#000009770 | Ag, SZfowit580QPDdbP8kmFHdpZ9ASI | | Supplier#000009865 | extcOh9ZrdDCMsHhhsFTkTUAh,HM2UQ2qa8sRo | | Supplier#000009866 | Auh6aZnOnQG1pPYKZ5o9ATramJBA | | Supplier#000009890 | izJXemCM Ikpgxk | | Supplier#000009937 | edZ9HQJ0KJAU6EWknTiDghKfRLHq6vtFqdey,0l | | Supplier#000009954 | VzElx9ihlXFJLIQw2Hn4bC2 | | Supplier#000009958 | ggiiSA4CSyvhwQUYjdJhWlKEY9PAfs | +--------------------+------------------------------------------+ 177 rows in set Q21 +--------------------+---------+ | s_name | numwait | +--------------------+---------+ | Supplier#000009302 | 21 | | Supplier#000000342 | 20 | | Supplier#000000632 | 19 | | Supplier#000002196 | 19 | | Supplier#000003325 | 18 | | Supplier#000003915 | 18 | | Supplier#000005045 | 18 | | Supplier#000006442 | 18 | | Supplier#000003093 | 17 | | Supplier#000004498 | 17 | | Supplier#000000906 | 16 | | Supplier#000001183 | 16 | | Supplier#000001477 | 16 | | Supplier#000006043 | 16 | | Supplier#000000689 | 15 | | Supplier#000001955 | 15 | | Supplier#000002066 | 15 | | Supplier#000002146 | 15 | | Supplier#000003253 | 15 | | Supplier#000003527 | 15 | | Supplier#000003947 | 15 | | Supplier#000004915 | 15 | | Supplier#000005248 | 15 | | Supplier#000006718 | 15 | | Supplier#000007773 | 15 | | Supplier#000008121 | 15 | | Supplier#000008169 | 15 | | Supplier#000008645 | 15 | | Supplier#000008684 | 15 | | Supplier#000009079 | 15 | | Supplier#000009956 | 15 | | Supplier#000000737 | 14 | | Supplier#000000775 | 14 | | Supplier#000001474 | 14 | | Supplier#000001502 | 14 | | Supplier#000003196 | 14 | | Supplier#000004415 | 14 | | Supplier#000004940 | 14 | | Supplier#000005253 | 14 | | Supplier#000005703 | 14 | | Supplier#000006308 | 14 | | Supplier#000006789 | 14 | | Supplier#000007161 | 14 | | Supplier#000007952 | 14 | | Supplier#000008062 | 14 | | Supplier#000008414 | 14 | | Supplier#000008442 | 14 | | Supplier#000008508 | 14 | | Supplier#000000300 | 13 | | Supplier#000000727 | 13 | | Supplier#000000921 | 13 | | Supplier#000000992 | 13 | | Supplier#000001282 | 13 | | Supplier#000001582 | 13 | | Supplier#000001662 | 13 | | Supplier#000001683 | 13 | | Supplier#000002933 | 13 | | Supplier#000003177 | 13 | | Supplier#000003428 | 13 | | Supplier#000003640 | 13 | | Supplier#000004842 | 13 | | Supplier#000004951 | 13 | | Supplier#000005795 | 13 | | Supplier#000005981 | 13 | | Supplier#000006118 | 13 | | Supplier#000006433 | 13 | | Supplier#000006484 | 13 | | Supplier#000007268 | 13 | | Supplier#000008599 | 13 | | Supplier#000008675 | 13 | | Supplier#000009474 | 13 | | Supplier#000009521 | 13 | | Supplier#000009853 | 13 | | Supplier#000000021 | 12 | | Supplier#000000211 | 12 | | Supplier#000000743 | 12 | | Supplier#000000951 | 12 | | Supplier#000001654 | 12 | | Supplier#000001868 | 12 | | Supplier#000002089 | 12 | | Supplier#000002879 | 12 | | Supplier#000003060 | 12 | | Supplier#000003215 | 12 | | Supplier#000003365 | 12 | | Supplier#000003873 | 12 | | Supplier#000003985 | 12 | | Supplier#000004452 | 12 | | Supplier#000004639 | 12 | | Supplier#000005122 | 12 | | Supplier#000005633 | 12 | | Supplier#000005671 | 12 | | Supplier#000005782 | 12 | | Supplier#000006088 | 12 | | Supplier#000006477 | 12 | | Supplier#000006508 | 12 | | Supplier#000006750 | 12 | | Supplier#000006802 | 12 | | Supplier#000008236 | 12 | | Supplier#000009294 | 12 | | Supplier#000009329 | 12 | +--------------------+---------+ 100 rows in set Q22 +-----------+---------+------------+ | cntrycode | numcust | totacctbal | +-----------+---------+------------+ | 10 | 882 | 6606081.31 | | 11 | 899 | 6702253.34 | | 19 | 963 | 7230776.82 | | 20 | 916 | 6824676.02 | | 22 | 894 | 6636740.03 | | 26 | 861 | 6404695.86 | | 27 | 877 | 6565078.99 | +-----------+---------+------------+ 7 rows in set","title":"TPCH Test with MatrixOne"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#complete-a-tpch-test-with-matrixone","text":"The TPC-H is a decision support benchmark. It consists of a suite of business oriented ad-hoc queries and concurrent data modifications. The queries and the data populating the database have been chosen to have broad industry-wide relevance. This benchmark illustrates decision support systems that examine large volumes of data, execute queries with a high degree of complexity, and give answers to critical business questions. TPC-H is a widely used benchmark for OLAP databases. By walking through this tutorial, you'll learn how to complete a TPC-H Test with MatrixOne.","title":"Complete a TPCH Test with MatrixOne"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#before-you-start","text":"Make sure you have already installed MatrixOne and connected to MatrixOne Server .","title":"Before you start"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#1-compile-tpch-dbgen","text":"The tpch dbgen utility generates, by default, a set of flat files suitable for loading into the tpch schema with the size based on the \u201cScale Factor\u201d argument. A scale factor of 1 produces a complete data set of approximately 1 GB, a scale factor of 10 produces a data set of approximately 10 GB etc. git clone https://github.com/electrum/tpch-dbgen.git cd tpch-dbgen make","title":"1. Compile TPCH dbgen"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#2-generate-data","text":"Run dbgen for the appropriate database size factor (1GB in the sample). ./dbgen -s 1 Generation may take a while. When completed, you can see the resulting files. total 2150000 -rw-r--r-- 1 deister staff 24346144 13 may 12:05 customer.tbl -rw-r--r-- 1 deister staff 759863287 13 may 12:05 lineitem.tbl -rw-r--r-- 1 deister staff 2224 13 may 12:05 nation.tbl -rw-r--r-- 1 deister staff 171952161 13 may 12:05 orders.tbl -rw-r--r-- 1 deister staff 24135125 13 may 12:05 part.tbl -rw-r--r-- 1 deister staff 118984616 13 may 12:05 partsupp.tbl -rw-r--r-- 1 deister staff 389 13 may 12:05 region.tbl -rw-r--r-- 1 deister staff 1409184 13 may 12:05 supplier.tbl We have also prepared a 1GB dataset for downloading. You can get the data files directly: https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch-1g.zip","title":"2. Generate data"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#3-create-tables-in-matrixone","text":"As MatrixOne doesn't support composite primary key nor partition yet, we slightly modified the PARTSUPP and LINEITEM table creation. The composite primary key of PARTSUPP and LINEITEM tables are removed. PARTITION BY KEY() is removed for LINEITEM table. drop database if exists TPCH; create database if not exists TPCH; use TPCH; CREATE TABLE NATION( N_NATIONKEY INTEGER NOT NULL, N_NAME CHAR(25) NOT NULL, N_REGIONKEY INTEGER NOT NULL, N_COMMENT VARCHAR(152), PRIMARY KEY (N_NATIONKEY) ); CREATE TABLE REGION( R_REGIONKEY INTEGER NOT NULL, R_NAME CHAR(25) NOT NULL, R_COMMENT VARCHAR(152), PRIMARY KEY (R_REGIONKEY) ); CREATE TABLE PART( P_PARTKEY INTEGER NOT NULL, P_NAME VARCHAR(55) NOT NULL, P_MFGR CHAR(25) NOT NULL, P_BRAND CHAR(10) NOT NULL, P_TYPE VARCHAR(25) NOT NULL, P_SIZE INTEGER NOT NULL, P_CONTAINER CHAR(10) NOT NULL, P_RETAILPRICE DECIMAL(15,2) NOT NULL, P_COMMENT VARCHAR(23) NOT NULL, PRIMARY KEY (P_PARTKEY) ); CREATE TABLE SUPPLIER( S_SUPPKEY INTEGER NOT NULL, S_NAME CHAR(25) NOT NULL, S_ADDRESS VARCHAR(40) NOT NULL, S_NATIONKEY INTEGER NOT NULL, S_PHONE CHAR(15) NOT NULL, S_ACCTBAL DECIMAL(15,2) NOT NULL, S_COMMENT VARCHAR(101) NOT NULL, PRIMARY KEY (S_SUPPKEY) ); CREATE TABLE PARTSUPP( PS_PARTKEY INTEGER NOT NULL, PS_SUPPKEY INTEGER NOT NULL, PS_AVAILQTY INTEGER NOT NULL, PS_SUPPLYCOST DECIMAL(15,2) NOT NULL, PS_COMMENT VARCHAR(199) NOT NULL ); CREATE TABLE CUSTOMER( C_CUSTKEY INTEGER NOT NULL, C_NAME VARCHAR(25) NOT NULL, C_ADDRESS VARCHAR(40) NOT NULL, C_NATIONKEY INTEGER NOT NULL, C_PHONE CHAR(15) NOT NULL, C_ACCTBAL DECIMAL(15,2) NOT NULL, C_MKTSEGMENT CHAR(10) NOT NULL, C_COMMENT VARCHAR(117) NOT NULL, PRIMARY KEY (C_CUSTKEY) ); CREATE TABLE ORDERS( O_ORDERKEY BIGINT NOT NULL, O_CUSTKEY INTEGER NOT NULL, O_ORDERSTATUS CHAR(1) NOT NULL, O_TOTALPRICE DECIMAL(15,2) NOT NULL, O_ORDERDATE DATE NOT NULL, O_ORDERPRIORITY CHAR(15) NOT NULL, O_CLERK CHAR(15) NOT NULL, O_SHIPPRIORITY INTEGER NOT NULL, O_COMMENT VARCHAR(79) NOT NULL, PRIMARY KEY (O_ORDERKEY) ); CREATE TABLE LINEITEM( L_ORDERKEY BIGINT NOT NULL, L_PARTKEY INTEGER NOT NULL, L_SUPPKEY INTEGER NOT NULL, L_LINENUMBER INTEGER NOT NULL, L_QUANTITY DECIMAL(15,2) NOT NULL, L_EXTENDEDPRICE DECIMAL(15,2) NOT NULL, L_DISCOUNT DECIMAL(15,2) NOT NULL, L_TAX DECIMAL(15,2) NOT NULL, L_RETURNFLAG VARCHAR(1) NOT NULL, L_LINESTATUS VARCHAR(1) NOT NULL, L_SHIPDATE DATE NOT NULL, L_COMMITDATE DATE NOT NULL, L_RECEIPTDATE DATE NOT NULL, L_SHIPINSTRUCT CHAR(25) NOT NULL, L_SHIPMODE CHAR(10) NOT NULL, L_COMMENT VARCHAR(44) NOT NULL );","title":"3. Create tables in MatrixOne"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#4-load-data-into-the-created-tables","text":"","title":"4. Load data into the created tables"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#option-1-load-the-sigle-table-dataset-into-related-tables-with-this-command-in-matrixone","text":"Load data into related tables with this command in MatrixOne. load data infile '/YOUR_TPCH_DATA_PATH/nation.tbl' into table NATION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/region.tbl' into table REGION FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/part.tbl' into table PART FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/supplier.tbl' into table SUPPLIER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/partsupp.tbl' into table PARTSUPP FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/orders.tbl' into table ORDERS FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/customer.tbl' into table CUSTOMER FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; load data infile '/YOUR_TPCH_DATA_PATH/lineitem.tbl' into table LINEITEM FIELDS TERMINATED BY '|' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n'; Then you can query data in MatrixOne with the created table.","title":"Option 1: Load the sigle table dataset into related tables with this command in MatrixOne"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#option-2-load-the-large-wide-table-dataset-into-the-lineorder_flat","text":"load data infile '/ssb-dbgen-path/lineorder_flat.tbl' into table lineorder_flat FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"' LINES TERMINATED BY '\\n';","title":"Option 2: Load the large wide table dataset into the lineorder_flat"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#5-run-tpch-queries","text":"--Q1 select l_returnflag , l_linestatus , sum ( l_quantity ) as sum_qty , sum ( l_extendedprice ) as sum_base_price , sum ( l_extendedprice * ( 1 - l_discount )) as sum_disc_price , sum ( l_extendedprice * ( 1 - l_discount ) * ( 1 + l_tax )) as sum_charge , avg ( l_quantity ) as avg_qty , avg ( l_extendedprice ) as avg_price , avg ( l_discount ) as avg_disc , count ( * ) as count_order from lineitem where l_shipdate <= date '1998-12-01' - interval '112' day group by l_returnflag , l_linestatus order by l_returnflag , l_linestatus ; --Q2 select s_acctbal , s_name , n_name , p_partkey , p_mfgr , s_address , s_phone , s_comment from part , supplier , partsupp , nation , region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 48 and p_type like '%TIN' and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'MIDDLE EAST' and ps_supplycost = ( select min ( ps_supplycost ) from partsupp , supplier , nation , region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'MIDDLE EAST' ) order by s_acctbal desc , n_name , s_name , p_partkey limit 100 ; --Q3 select l_orderkey , sum ( l_extendedprice * ( 1 - l_discount )) as revenue , o_orderdate , o_shippriority from customer , orders , lineitem where c_mktsegment = 'HOUSEHOLD' and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate < date '1995-03-29' and l_shipdate > date '1995-03-29' group by l_orderkey , o_orderdate , o_shippriority order by revenue desc , o_orderdate limit 10 ; --Q4 select o_orderpriority , count ( * ) as order_count from orders where o_orderdate >= date '1997-07-01' and o_orderdate < date '1997-07-01' + interval '3' month and exists ( select * from lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority ; --Q5 select n_name , sum ( l_extendedprice * ( 1 - l_discount )) as revenue from customer , orders , lineitem , supplier , nation , region where c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'AMERICA' and o_orderdate >= date '1994-01-01' and o_orderdate < date '1994-01-01' + interval '1' year group by n_name order by revenue desc ; --Q6 select sum ( l_extendedprice * l_discount ) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year and l_discount between 0 . 03 - 0 . 01 and 0 . 03 + 0 . 01 and l_quantity < 24 ; --Q7 select supp_nation , cust_nation , l_year , sum ( volume ) as revenue from ( select n1 . n_name as supp_nation , n2 . n_name as cust_nation , extract ( year from l_shipdate ) as l_year , l_extendedprice * ( 1 - l_discount ) as volume from supplier , lineitem , orders , customer , nation n1 , nation n2 where s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1 . n_nationkey and c_nationkey = n2 . n_nationkey and ( ( n1 . n_name = 'FRANCE' and n2 . n_name = 'ARGENTINA' ) or ( n1 . n_name = 'ARGENTINA' and n2 . n_name = 'FRANCE' ) ) and l_shipdate between date '1995-01-01' and date '1996-12-31' ) as shipping group by supp_nation , cust_nation , l_year order by supp_nation , cust_nation , l_year ; --Q8 select o_year , ( sum ( case when nation = 'ARGENTINA' then volume else 0 end ) / sum ( volume )) as mkt_share from ( select extract ( year from o_orderdate ) as o_year , l_extendedprice * ( 1 - l_discount ) as volume , n2 . n_name as nation from part , supplier , lineitem , orders , customer , nation n1 , nation n2 , region where p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1 . n_nationkey and n1 . n_regionkey = r_regionkey and r_name = 'AMERICA' and s_nationkey = n2 . n_nationkey and o_orderdate between date '1995-01-01' and date '1996-12-31' and p_type = 'ECONOMY BURNISHED TIN' ) as all_nations group by o_year order by o_year ; --Q9 select nation , o_year , sum ( amount ) as sum_profit from ( select n_name as nation , extract ( year from o_orderdate ) as o_year , l_extendedprice * ( 1 - l_discount ) - ps_supplycost * l_quantity as amount from part , supplier , lineitem , partsupp , orders , nation where s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like '%pink%' ) as profit group by nation , o_year order by nation , o_year desc ; --Q10 select c_custkey , c_name , sum ( l_extendedprice * ( 1 - l_discount )) as revenue , c_acctbal , n_name , c_address , c_phone , c_comment from customer , orders , lineitem , nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1993-03-01' and o_orderdate < date '1993-03-01' + interval '3' month and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey , c_name , c_acctbal , c_phone , n_name , c_address , c_comment order by revenue desc limit 20 ; --Q11 select ps_partkey , sum ( ps_supplycost * ps_availqty ) as value from partsupp , supplier , nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'JAPAN' group by ps_partkey having sum ( ps_supplycost * ps_availqty ) > ( select sum ( ps_supplycost * ps_availqty ) * 0 . 0001000000 from partsupp , supplier , nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'JAPAN' ) order by value desc ; --Q12 select l_shipmode , sum ( case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end ) as high_line_count , sum ( case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end ) as low_line_count from orders , lineitem where o_orderkey = l_orderkey and l_shipmode in ( 'FOB' , 'TRUCK' ) and l_commitdate < l_receiptdate and l_shipdate < l_commitdate and l_receiptdate >= date '1996-01-01' and l_receiptdate < date '1996-01-01' + interval '1' year group by l_shipmode order by l_shipmode ; --Q13 select c_count , count ( * ) as custdist from ( select c_custkey , count ( o_orderkey ) from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%pending%accounts%' group by c_custkey ) as c_orders ( c_custkey , c_count ) group by c_count order by custdist desc , c_count desc ; --Q14 select 100 . 00 * sum ( case when p_type like 'PROMO%' then l_extendedprice * ( 1 - l_discount ) else 0 end ) / sum ( l_extendedprice * ( 1 - l_discount )) as promo_revenue from lineitem , part where l_partkey = p_partkey and l_shipdate >= date '1996-04-01' and l_shipdate < date '1996-04-01' + interval '1' month ; --Q15 with q15_revenue0 as ( select l_suppkey as supplier_no , sum ( l_extendedprice * ( 1 - l_discount )) as total_revenue from lineitem where l_shipdate >= date '1995-12-01' and l_shipdate < date '1995-12-01' + interval '3' month group by l_suppkey ) select s_suppkey , s_name , s_address , s_phone , total_revenue from supplier , q15_revenue0 where s_suppkey = supplier_no and total_revenue = ( select max ( total_revenue ) from q15_revenue0 ) order by s_suppkey ; --Q16 select p_brand , p_type , p_size , count ( distinct ps_suppkey ) as supplier_cnt from partsupp , part where p_partkey = ps_partkey and p_brand <> 'Brand#35' and p_type not like 'ECONOMY BURNISHED%' and p_size in ( 14 , 7 , 21 , 24 , 35 , 33 , 2 , 20 ) and ps_suppkey not in ( select s_suppkey from supplier where s_comment like '%Customer%Complaints%' ) group by p_brand , p_type , p_size order by supplier_cnt desc , p_brand , p_type , p_size ; --Q17 select sum ( l_extendedprice ) / 7 . 0 as avg_yearly from lineitem , part where p_partkey = l_partkey and p_brand = 'Brand#54' and p_container = 'LG BAG' and l_quantity < ( select 0 . 2 * avg ( l_quantity ) from lineitem where l_partkey = p_partkey ); --Q18 select c_name , c_custkey , o_orderkey , o_orderdate , o_totalprice , sum ( l_quantity ) from customer , orders , lineitem where o_orderkey in ( select l_orderkey from lineitem group by l_orderkey having sum ( l_quantity ) > 314 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name , c_custkey , o_orderkey , o_orderdate , o_totalprice order by o_totalprice desc , o_orderdate limit 100 ; --Q19 select sum ( l_extendedprice * ( 1 - l_discount )) as revenue from lineitem , part where ( p_partkey = l_partkey and p_brand = 'Brand#23' and p_container in ( 'SM CASE' , 'SM BOX' , 'SM PACK' , 'SM PKG' ) and l_quantity >= 5 and l_quantity <= 5 + 10 and p_size between 1 and 5 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#15' and p_container in ( 'MED BAG' , 'MED BOX' , 'MED PKG' , 'MED PACK' ) and l_quantity >= 14 and l_quantity <= 14 + 10 and p_size between 1 and 10 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#44' and p_container in ( 'LG CASE' , 'LG BOX' , 'LG PACK' , 'LG PKG' ) and l_quantity >= 28 and l_quantity <= 28 + 10 and p_size between 1 and 15 and l_shipmode in ( 'AIR' , 'AIR REG' ) and l_shipinstruct = 'DELIVER IN PERSON' ); --Q20 select s_name , s_address from supplier , nation where s_suppkey in ( select ps_suppkey from partsupp where ps_partkey in ( select p_partkey from part where p_name like 'lime%' ) and ps_availqty > ( select 0 . 5 * sum ( l_quantity ) from lineitem where l_partkey = ps_partkey and l_suppkey = ps_suppkey and l_shipdate >= date '1993-01-01' and l_shipdate < date '1993-01-01' + interval '1' year ) ) and s_nationkey = n_nationkey and n_name = 'VIETNAM' order by s_name ; --Q21 select s_name , count ( * ) as numwait from supplier , lineitem l1 , orders , nation where s_suppkey = l1 . l_suppkey and o_orderkey = l1 . l_orderkey and o_orderstatus = 'F' and l1 . l_receiptdate > l1 . l_commitdate and exists ( select * from lineitem l2 where l2 . l_orderkey = l1 . l_orderkey and l2 . l_suppkey <> l1 . l_suppkey ) and not exists ( select * from lineitem l3 where l3 . l_orderkey = l1 . l_orderkey and l3 . l_suppkey <> l1 . l_suppkey and l3 . l_receiptdate > l3 . l_commitdate ) and s_nationkey = n_nationkey and n_name = 'BRAZIL' group by s_name order by numwait desc , s_name limit 100 ; --Q22 select cntrycode , count ( * ) as numcust , sum ( c_acctbal ) as totacctbal from ( select substring ( c_phone from 1 for 2 ) as cntrycode , c_acctbal from customer where substring ( c_phone from 1 for 2 ) in ( '10' , '11' , '26' , '22' , '19' , '20' , '27' ) and c_acctbal > ( select avg ( c_acctbal ) from customer where c_acctbal > 0 . 00 and substring ( c_phone from 1 for 2 ) in ( '10' , '11' , '26' , '22' , '19' , '20' , '27' ) ) and not exists ( select * from orders where o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode ;","title":"5. Run TPCH Queries"},{"location":"MatrixOne/Tutorial/TPCH-test-with-matrixone/#6-expected-results","text":"Below are the expected results for the 22 TPCH queries. Q16's result is too long to print, please refer to the complete result in this link\uff1a https://community-shared-data-1308875761.cos.ap-beijing.myqcloud.com/tpch/tpch1g_result_matrixone.md Q1 +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ | l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order | +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ | A | F | 37734107.00 | 56586554400.73 | 53758257134.8700 | 55909065222.827692 | 25.52 | 38273.12 | 0.04 | 1478493 | | N | F | 991417.00 | 1487504710.38 | 1413082168.0541 | 1469649223.194375 | 25.51 | 38284.46 | 0.05 | 38854 | | N | O | 76633518.00 | 114935210409.19 | 109189591897.4720 | 113561024263.013782 | 25.50 | 38248.01 | 0.05 | 3004998 | | R | F | 37719753.00 | 56568041380.90 | 53741292684.6040 | 55889619119.831932 | 25.50 | 38250.85 | 0.05 | 1478870 | +--------------+--------------+-------------+-----------------+-------------------+---------------------+---------+-----------+----------+-------------+ 4 rows in set Q2 +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ | s_acctbal | s_name | n_name | p_partkey | p_mfgr | s_address | s_phone | s_comment | +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ | 9973.93 | Supplier#000004194 | JORDAN | 14193 | Manufacturer#1 | A8AoX9AK,qhf,CpEF | 23-944-413-2681 | t fluffily. regular requests about the regular, unusual somas play of the furiously busy | | 9956.34 | Supplier#000005108 | IRAN | 140079 | Manufacturer#5 | d3PLCdpPP3uE4GzbbAh4bWmU 7ecOifL9e1mNnzG | 20-842-882-7047 | ronic accounts. carefully bold accounts sleep beyond | | 9836.43 | Supplier#000000489 | IRAN | 190488 | Manufacturer#2 | y9NMoYGxDUPfrB1GwjYhLtCeV7pOt | 20-375-500-2226 | quickly carefully pending accounts. fina | | 9825.95 | Supplier#000007554 | IRAQ | 40041 | Manufacturer#5 | Huq0k qKET hByp3RcMcr | 21-787-637-9651 | ending, final requests thrash pending, | | 9806.52 | Supplier#000005276 | IRAQ | 132762 | Manufacturer#2 | inh0KOhRfLM7WRhdRNvJJDQx | 21-834-496-7360 | the slyly unusual theodolites; carefully even accounts use slyly. sl | | 9796.31 | Supplier#000005847 | IRAQ | 188292 | Manufacturer#1 | obol3bfh0zWi | 21-530-950-2847 | equests. blithely regular deposits should have to impress. final platelets integrate fluffily | | 9775.37 | Supplier#000007245 | IRAQ | 169696 | Manufacturer#5 | 5VOUnvxlJeOJ | 21-663-724-2985 | ic deposits about the slyly bold requests | | 9755.43 | Supplier#000002439 | EGYPT | 172438 | Manufacturer#5 | rXxojWV0VefSK7A0dhF | 14-410-168-5354 | p quickly packages. carefully pending pinto beans after the | | 9714.60 | Supplier#000007317 | EGYPT | 29810 | Manufacturer#4 | nJGsPl2ruoq4Ydtv0fwWG385eOFV6 VUokbCZ | 14-666-351-2592 | ons integrate furiously? slyly ironic requests sl | | 9557.33 | Supplier#000007367 | EGYPT | 197366 | Manufacturer#3 | bTP8DLvaRAB0n | 14-234-934-5255 | ep slyly regular accounts-- regular, regular excuses dazzle furiously about the reg | | 9538.15 | Supplier#000000979 | IRAN | 55968 | Manufacturer#1 | cdvHjrKZR7iDlmSWU2a | 20-151-688-1408 | ckages cajole quietly carefully regular in | | 9513.31 | Supplier#000004163 | SAUDI ARABIA | 109142 | Manufacturer#4 | 2VnQypC7pJPJRu6HzYRg7nAvhzckcYAQFbI | 30-544-852-3772 | he regular requests. blithely final | | 9450.15 | Supplier#000002067 | EGYPT | 9566 | Manufacturer#3 | 9dO68x0XLMCUDuFk1J6k9hpvLoKx 4qasok4lIb | 14-252-246-5791 | rding to the regular dolphins. quickly ir | | 9359.59 | Supplier#000005087 | JORDAN | 55086 | Manufacturer#4 | q0c6r9wYVQx31IeGBZKfe | 23-335-392-5204 | osits. quickly regular packages haggle among the quickly silent ins | | 9343.35 | Supplier#000006337 | IRAN | 173819 | Manufacturer#1 | ilQgNOdCAysclt3SgODb6LeJ7d4RzYD | 20-950-345-8173 | quickly ironic packages affix aft | | 9318.47 | Supplier#000003834 | SAUDI ARABIA | 11332 | Manufacturer#5 | cxGQnW3nShks59xA5bPoaC bIvcBWUt | 30-823-353-6520 | regular instructions. express packages run slyly pending | | 9318.47 | Supplier#000003834 | SAUDI ARABIA | 108813 | Manufacturer#2 | cxGQnW3nShks59xA5bPoaC bIvcBWUt | 30-823-353-6520 | regular instructions. express packages run slyly pending | | 9315.33 | Supplier#000003009 | IRAN | 40504 | Manufacturer#2 | oTbwfQ,Yfdcf3ysgc60NKtTpSIc | 20-306-556-2450 | the carefully special requests. express instructions wake | | 9296.31 | Supplier#000008213 | JORDAN | 163180 | Manufacturer#2 | YhdN9ESxYvhJp9ngr12Bbeo4t3zLPD, | 23-197-507-9431 | g to the blithely regular accounts! deposit | | 9284.57 | Supplier#000009781 | EGYPT | 4780 | Manufacturer#4 | 49NAd1iDiY4, | 14-410-636-4312 | its. ironic pinto beans are blithely. express depths use caref | | 9261.13 | Supplier#000000664 | EGYPT | 125639 | Manufacturer#5 | ln6wISAnC8Bpj q4V | 14-244-772-4913 | ly special foxes cajole slyly ironic reque | | 9260.78 | Supplier#000001949 | IRAN | 86932 | Manufacturer#2 | W79M2lpYiSY76Ujo6fSRUQiu | 20-531-767-2819 | thinly ironic excuses haggle slyly. f | | 9227.16 | Supplier#000009461 | EGYPT | 126948 | Manufacturer#2 | Eweba 0sfaF,l4sAxXGTgEjzsJsNWWIGjYhFkRWV | 14-983-137-4957 | lly bold packages. carefully express deposits integrate about the unusual accounts. regular, | | 9185.89 | Supplier#000007888 | EGYPT | 27887 | Manufacturer#1 | nq06Y48amPfS8YBuduy1RYu | 14-462-704-3828 | ole slyly-- blithely careful foxes wake against the furiously ironic accounts. pending ideas | | 9185.89 | Supplier#000007888 | EGYPT | 190330 | Manufacturer#4 | nq06Y48amPfS8YBuduy1RYu | 14-462-704-3828 | ole slyly-- blithely careful foxes wake against the furiously ironic accounts. pending ideas | | 9132.92 | Supplier#000007878 | IRAN | 92859 | Manufacturer#3 | aq6T3tUVq1, | 20-861-274-6282 | waters cajole ironic, ironic requests. furi | | 9058.94 | Supplier#000002789 | IRAN | 142788 | Manufacturer#4 | 7EkIldjP7M6psSWcJ11tf65GT7ZC7UaiCh | 20-842-716-4307 | s. platelets use carefully. busily regular accounts cajole fluffily above the slowly final pinto be | | 9026.80 | Supplier#000005436 | SAUDI ARABIA | 92926 | Manufacturer#3 | 3HiusYZGYmHItExgX5VfNCdJwkW8W7R | 30-453-280-6340 | . blithely unusual requests | | 9007.16 | Supplier#000001747 | EGYPT | 121746 | Manufacturer#3 | UyDlFjVxanP,ifej7L5jtNaubC | 14-141-360-9722 | maintain bravely across the busily express pinto beans. sometimes | | 8846.35 | Supplier#000005446 | EGYPT | 57930 | Manufacturer#2 | Nusoq0ckv9SwnJZV8Rw2dUqE,V0ylm Bon | 14-468-853-6477 | deposits. ironic, bold ideas wake. fluffily ironic deposits must have to sleep furiously pending | | 8837.21 | Supplier#000007210 | JORDAN | 144695 | Manufacturer#3 | G7MYkWkkJDVu,rr23aXjQCwNqZ2Vk6 | 23-560-295-1805 | en, express foxes use across the blithely bold | | 8800.91 | Supplier#000008182 | EGYPT | 143153 | Manufacturer#5 | KGMyipBiAF00tSB99DwH | 14-658-338-3635 | thely even excuses integrate blithel | | 8788.46 | Supplier#000003437 | IRAN | 118414 | Manufacturer#4 | JfgZDO9fsP4ljfzsi,s7431Ld3A7zXtHfrF74 | 20-547-871-1712 | ickly unusual dependencies. carefully regular dolphins ha | | 8750.12 | Supplier#000001064 | IRAQ | 31063 | Manufacturer#5 | QgmUIaEs5KpuW ,oREZV2b4wr3HEC1z4F | 21-440-809-7599 | sly even deposits? furiously regular pack | | 8594.80 | Supplier#000007553 | IRAN | 5052 | Manufacturer#4 | wAU2Lui w9 | 20-663-409-7956 | old, stealthy accounts are blithely. fluffily final | | 8594.80 | Supplier#000007553 | IRAN | 195033 | Manufacturer#1 | wAU2Lui w9 | 20-663-409-7956 | old, stealthy accounts are blithely. fluffily final | | 8588.63 | Supplier#000008094 | SAUDI ARABIA | 148093 | Manufacturer#1 | SNS6FCscBNZBFecA | 30-465-665-6735 | ake quickly blithely ironic theodolites. quickly ironic ideas boost. furiously iro | | 8522.70 | Supplier#000004208 | IRAQ | 166659 | Manufacturer#5 | x3jZYF7ZYN 8a4LY1c1kEsh | 21-468-998-1571 | furiously regular accounts! | | 8514.86 | Supplier#000006347 | JORDAN | 181310 | Manufacturer#5 | wwR5j4kdIAwLe33uBwo | 23-340-942-3641 | uests breach blithely ironic deposi | | 8473.01 | Supplier#000003912 | IRAQ | 33911 | Manufacturer#3 | Op7,1zt3MAxs34Qo4O W | 21-474-809-6508 | es. regular, brave instructions wa | | 8405.28 | Supplier#000007886 | IRAQ | 192847 | Manufacturer#4 | sFTj5nzc5EIVmzjXwenFTXD U | 21-735-778-5786 | ven dependencies boost blithely ironic de | | 8375.58 | Supplier#000001259 | IRAQ | 38755 | Manufacturer#2 | 32cJBGFFpGEkEjx1sF8JZAy0A72uXL5qU | 21-427-422-4993 | ironic accounts haggle slyly alongside of the carefully ironic deposit | | 8351.75 | Supplier#000007495 | IRAQ | 114983 | Manufacturer#4 | 3jQQGvfs,5Aryhn0Z | 21-953-463-7239 | requests. carefully final accounts after the qui | | 8230.12 | Supplier#000001058 | SAUDI ARABIA | 68551 | Manufacturer#2 | fJ8egP,xkLygXGv8bmtc9T1FJ | 30-496-504-3341 | requests haggle? regular, regular pinto beans integrate fluffily. dependenc | | 8195.44 | Supplier#000009805 | IRAQ | 4804 | Manufacturer#4 | dTTmLRYJNat,JbhlQlxwWp HjMR | 21-838-243-3925 | lets. quickly even theodolites dazzle slyly even a | | 8175.17 | Supplier#000003172 | IRAN | 55656 | Manufacturer#5 | 8ngbGS7BQoTDmJyMa5WV9XbaM31u5FAayd2vT3 | 20-834-374-7746 | ss deposits use furiously after the quickly final sentiments. fluffily ruthless ideas believe regu | | 8159.13 | Supplier#000007486 | EGYPT | 17485 | Manufacturer#1 | AjfdzbrrJE1 | 14-970-643-1521 | ld accounts. enticingly furious requests cajole. final packages s | | 8111.40 | Supplier#000007567 | IRAN | 197566 | Manufacturer#1 | 7W4k2qEVoBkRehprGliXRSYVOQEh | 20-377-181-7435 | gular foxes. silent attainments boost furiousl | | 8046.55 | Supplier#000001625 | IRAQ | 14121 | Manufacturer#2 | yKlKMbENR6bfmIu7aCFmbs | 21-769-404-7617 | deposits. ideas boost blithely. slyly even Tiresias according to the platelets are q | | 8040.16 | Supplier#000001925 | SAUDI ARABIA | 4424 | Manufacturer#4 | Cu5Ub AAdXT | 30-969-417-1108 | pending packages across the regular req | | 8031.68 | Supplier#000002370 | SAUDI ARABIA | 147341 | Manufacturer#5 | xGQB9xSPqRtCuMZaJavOrFuTY7km | 30-373-388-2352 | dependencies. carefully express deposits use slyly among the slyly unusual pearls. dogge | | 8031.42 | Supplier#000008216 | IRAN | 83199 | Manufacturer#2 | jsqlyr1ViAo | 20-224-305-7298 | to the carefully even excuses haggle blithely against the pending pinto be | | 8007.83 | Supplier#000006266 | JORDAN | 81249 | Manufacturer#1 | XWBf5Jd2V5SOurbn11Tt1 | 23-363-445-7184 | as cajole carefully against the quickly special ac | | 7995.78 | Supplier#000006957 | IRAN | 161924 | Manufacturer#1 | 8lvRhU5xtXv | 20-312-173-2216 | ly ironic accounts. stealthily regular foxes about the blithely ironic requests play blithely abo | | 7913.40 | Supplier#000003148 | JORDAN | 58137 | Manufacturer#1 | CpCJWI4PHeiwYuq0 | 23-767-770-9172 | ove the quickly final packages boost fluffily among the furiously final platelets. carefully s | | 7910.16 | Supplier#000002102 | IRAQ | 99592 | Manufacturer#2 | 1kuyUn5q6czLOGB60fAVgpv68M2suwchpmp2nK | 21-367-198-9930 | accounts after the blithely | | 7893.58 | Supplier#000000918 | SAUDI ARABIA | 13414 | Manufacturer#1 | e0sB7xAU3,cWF7pzXrpIbATUNydCUZup | 30-303-831-1662 | ependencies wake carefull | | 7885.17 | Supplier#000004001 | JORDAN | 38994 | Manufacturer#2 | 3M39sZY1XeQXPDRO | 23-109-632-6806 | efully express packages integrate across the regular pearls. blithely unusual packages mainta | | 7880.20 | Supplier#000005352 | JORDAN | 351 | Manufacturer#3 | PP9gHTn946hXqUF5E7idIPLkhnN | 23-557-756-7951 | egular frays. final instructions sleep a | | 7844.31 | Supplier#000006987 | IRAQ | 44482 | Manufacturer#5 | UH1zBxTNjTminnmHRe h YUT1eR | 21-963-444-7397 | nag quickly carefully regular requests. ironic theo | | 7812.27 | Supplier#000006967 | SAUDI ARABIA | 151936 | Manufacturer#4 | S4i1HfrSM4m3di3R9Cxxp59M1 | 30-193-457-6365 | ely. dependencies cajole quickly. final warhorses across the furiously ironic foxes integr | | 7767.63 | Supplier#000004306 | IRAN | 31802 | Manufacturer#2 | SkZkJZflW5mDg9wL fJ | 20-911-180-1895 | uickly regular ideas. blithely express accounts along the carefully sile | | 7741.42 | Supplier#000000899 | IRAQ | 53383 | Manufacturer#5 | oLlkiVghtro IwzcwFuzwMCG94rRpux | 21-980-994-3905 | equests wake quickly special, express accounts. courts promi | | 7741.42 | Supplier#000000899 | IRAQ | 105878 | Manufacturer#3 | oLlkiVghtro IwzcwFuzwMCG94rRpux | 21-980-994-3905 | equests wake quickly special, express accounts. courts promi | | 7741.10 | Supplier#000001059 | IRAN | 103528 | Manufacturer#4 | 4tBenOMokWbWVRB8i8HwENeO cQjM9 | 20-620-710-8984 | to the carefully special courts. | | 7599.20 | Supplier#000006596 | SAUDI ARABIA | 184077 | Manufacturer#2 | k8qeFxfXKIGYdQ82RXAfCwddSrc | 30-804-947-3851 | ously unusual deposits boost carefully after the enticing | | 7598.31 | Supplier#000008857 | IRAQ | 63844 | Manufacturer#4 | dP2th8vneyOLIUFwNBwqixkFD6 | 21-691-170-4769 | s. quickly ironic frays detect carefully | | 7591.79 | Supplier#000009723 | JORDAN | 104702 | Manufacturer#2 | Q1CkkpDdlLOpCJiV,zIf,Mv86otWhxj7slGc | 23-710-907-3873 | e fluffily even instructions. packages impress enticingly. | | 7575.12 | Supplier#000007557 | IRAQ | 77556 | Manufacturer#1 | udLvpjNvIx9qeRNdjL1ZAO0OZNOBo6h | 21-629-935-9941 | ally special accounts nod; f | | 7496.91 | Supplier#000005828 | IRAN | 103317 | Manufacturer#1 | Xt0EqDCNU6X00sNsIO7nd0ws3H | 20-435-850-8703 | furiously about the fluffily careful idea | | 7472.88 | Supplier#000004204 | EGYPT | 14203 | Manufacturer#1 | 0rGZJ6VZXdH | 14-520-667-4690 | y pending pinto beans. even, final requests sleep care | | 7472.88 | Supplier#000004204 | EGYPT | 161687 | Manufacturer#3 | 0rGZJ6VZXdH | 14-520-667-4690 | y pending pinto beans. even, final requests sleep care | | 7467.63 | Supplier#000003270 | IRAN | 45757 | Manufacturer#2 | 7j4n5FnNEHVJxFhiyz | 20-450-599-9591 | regular, even instructions boost deposits | | 7465.41 | Supplier#000008686 | EGYPT | 188685 | Manufacturer#4 | 4Onf4yxuNwHCRIC0y | 14-454-946-4151 | ly final ideas. bravely unusual deposits doze carefully. expr | | 7460.80 | Supplier#000008701 | IRAQ | 83684 | Manufacturer#3 | PLR2QehcW08 | 21-747-984-4244 | ideas use carefully pending, final deposits. ironic, pe | | 7447.86 | Supplier#000005877 | JORDAN | 120852 | Manufacturer#2 | EyqOHClZZMJkq grnOX9 4alZx6P7B2fq | 23-419-288-6451 | lar pinto beans breach carefully final pinto | | 7445.03 | Supplier#000009802 | IRAQ | 164769 | Manufacturer#5 | y6wLN KiZuTf5HT9Hbm0BELn1GUTD6yl | 21-116-708-2013 | nic requests. pinto beans across the carefully regular grouches snooze among the final pin | | 7401.46 | Supplier#000008677 | IRAN | 123652 | Manufacturer#5 | WNa780JZzivxuGBEsDszqoT1Pj | 20-899-256-5288 | onic instructions along the furiously ironic accounts haggle fluffily silently un | | 7393.50 | Supplier#000007056 | IRAQ | 54550 | Manufacturer#1 | M5cAJQvW9D5zwC7o2qkoe | 21-175-383-4727 | slyly even requests. forges haggle boldly express requests. furio | | 7376.11 | Supplier#000003982 | IRAQ | 118959 | Manufacturer#1 | jx9EloF33Ez | 21-890-236-4160 | s the furiously special warhorses affix after the car | | 7264.42 | Supplier#000001565 | IRAQ | 14061 | Manufacturer#4 | bOwKHdBteMkZoZcxdigk4Tnu07w1gDztmV7hvCw | 21-791-273-8592 | to beans. express accounts nag around the | | 7256.46 | Supplier#000009116 | IRAQ | 4115 | Manufacturer#3 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7256.46 | Supplier#000009116 | IRAQ | 99115 | Manufacturer#1 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7256.46 | Supplier#000009116 | IRAQ | 131576 | Manufacturer#4 | ULjaQwNbcB XUG9dvbZDHvJVwLo08utswt | 21-241-469-8343 | ending deposits. slyly ironic dependencies breach. blithely speci | | 7254.81 | Supplier#000005664 | EGYPT | 35663 | Manufacturer#2 | b8VWuTXRt66wF9bfrgTmNGuxf1PU0x3O9e | 14-214-171-8987 | ts across the quickly pending pin | | 7186.63 | Supplier#000006958 | IRAN | 71943 | Manufacturer#4 | 0n9BD,gRzUc3B,PsFcxDBGp4BFf4P | 20-185-413-5590 | against the instructions. requests are. speci | | 7166.36 | Supplier#000003541 | EGYPT | 116007 | Manufacturer#1 | DbwyOxoaMEdhEtIB3y045QrKCi2fQpGRu, | 14-508-763-1850 | ages. carefully unusual requests across the pending instructions aff | | 7128.81 | Supplier#000000677 | JORDAN | 50676 | Manufacturer#4 | 8mhrffG7D2WJBSQbOGstQ | 23-290-639-3315 | nder blithely. slyly unusual theod | | 7051.73 | Supplier#000003349 | IRAQ | 125812 | Manufacturer#3 | wtTK9df9kY7mQ5QUM0Xe5bHLMRLgwE | 21-614-525-7451 | ar theodolites cajole fluffily across the pending requests. slyly final requests a | | 7023.47 | Supplier#000009543 | SAUDI ARABIA | 47038 | Manufacturer#1 | VYKinyOBNXRr Hdqn8kOxfTw | 30-785-782-6088 | sts. furiously pending packages sleep slyly even requests. final excuses print deposits. final pac | | 6985.93 | Supplier#000006409 | IRAQ | 131382 | Manufacturer#1 | eO8JDNM19HrlQMR | 21-627-356-3992 | sts. slyly final deposits around the regular accounts are along the furiously final pac | | 6964.75 | Supplier#000009931 | EGYPT | 57425 | Manufacturer#1 | peQYiRFk G0xZKfJ | 14-989-166-5782 | deposits according to the sometimes silent requests wake along the packages-- blithely f | | 6964.04 | Supplier#000007399 | IRAQ | 77398 | Manufacturer#2 | zdxjENOGR4QiCFP | 21-859-733-1999 | e blithely after the even requests. carefully ironic packages use slyly a | | 6913.81 | Supplier#000002625 | IRAQ | 22624 | Manufacturer#3 | a4V0rWemgbsT ZMj w7DB8rUbZ4F4lqqW5VKljQF | 21-136-564-3910 | . asymptotes among the express requests cajole furiously after the ca | | 6880.18 | Supplier#000006704 | IRAN | 26703 | Manufacturer#4 | 97rxJlAImbO1 sUlChUWoOJ0ZzvQ2NI3KI6VDOwk | 20-588-916-1286 | old accounts wake quickly. ca | | 6878.62 | Supplier#000001697 | IRAQ | 146668 | Manufacturer#5 | 37nm ODTeHy0xWTWegplgdWQqelh | 21-377-544-4864 | ironic theodolites. furiously regular d | | 6790.39 | Supplier#000008703 | IRAN | 123678 | Manufacturer#4 | wMslK1A8SEUTIIdApQ | 20-782-266-2552 | eep blithely regular, pending w | | 6763.46 | Supplier#000007882 | EGYPT | 137881 | Manufacturer#5 | JDv8BZiYG0UlZ | 14-111-252-9120 | the silent accounts wake foxes. furious | | 6751.81 | Supplier#000003156 | EGYPT | 165607 | Manufacturer#2 | alRWaW4FTFERMM4vf2rHKIKE | 14-843-946-7775 | are furiously. final theodolites affix slyly bold deposits. even packages haggle idly slyly specia | | 6702.07 | Supplier#000006276 | EGYPT | 31269 | Manufacturer#2 | ,dE1anEjKQGZfgquYfkx2fkGcXH | 14-896-626-7847 | ze about the carefully regular pint | +-----------+--------------------+--------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------+ 100 rows in set Q3 +------------+-------------+-------------+----------------+ | l_orderkey | revenue | o_orderdate | o_shippriority | +------------+-------------+-------------+----------------+ | 2152675 | 431309.8065 | 1995-03-28 | 0 | | 4994400 | 423834.7976 | 1995-03-09 | 0 | | 2160291 | 401149.7805 | 1995-03-18 | 0 | | 2845094 | 401094.1393 | 1995-03-06 | 0 | | 1902471 | 400497.3847 | 1995-03-01 | 0 | | 5624358 | 395710.6806 | 1995-03-20 | 0 | | 2346242 | 392580.0394 | 1995-03-17 | 0 | | 2529826 | 387365.1560 | 1995-02-17 | 0 | | 5168933 | 385433.6198 | 1995-03-20 | 0 | | 2839239 | 380503.7310 | 1995-03-22 | 0 | +------------+-------------+-------------+----------------+ 10 rows in set Q4 +-----------------+-------------+ | o_orderpriority | order_count | +-----------------+-------------+ | 1-URGENT | 10623 | | 2-HIGH | 10465 | | 3-MEDIUM | 10309 | | 4-NOT SPECIFIED | 10618 | | 5-LOW | 10541 | +-----------------+-------------+ 5 rows in set Q5 +---------------+---------------+ | n_name | revenue | +---------------+---------------+ | PERU | 56206762.5035 | | CANADA | 56052846.0161 | | ARGENTINA | 54595012.8076 | | BRAZIL | 53601776.5201 | | UNITED STATES | 50890580.8962 | +---------------+---------------+ 5 rows in set Q6 +---------------+ | revenue | +---------------+ | 61660051.7967 | +---------------+ Q7 +-------------+-------------+--------+---------------+ | supp_nation | cust_nation | l_year | revenue | +-------------+-------------+--------+---------------+ | ARGENTINA | FRANCE | 1995 | 57928886.8015 | | ARGENTINA | FRANCE | 1996 | 55535134.8474 | | FRANCE | ARGENTINA | 1995 | 52916227.7375 | | FRANCE | ARGENTINA | 1996 | 51077995.8841 | +-------------+-------------+--------+---------------+ 4 rows in set Q8 +--------+----------------------+ | o_year | mkt_share | +--------+----------------------+ | 1995 | 0.035094304475112484 | | 1996 | 0.03724375099464825 | +--------+----------------------+ 2 rows in set Q9 +----------------+--------+---------------+ | nation | o_year | sum_profit | +----------------+--------+---------------+ | ALGERIA | 1998 | 29931671.4862 | | ALGERIA | 1997 | 49521023.1139 | | ALGERIA | 1996 | 51283603.7356 | | ALGERIA | 1995 | 50206939.3447 | | ALGERIA | 1994 | 48738988.5891 | | ALGERIA | 1993 | 48084070.1204 | | ALGERIA | 1992 | 49725592.1793 | | ARGENTINA | 1998 | 26407044.9262 | | ARGENTINA | 1997 | 46224601.0785 | | ARGENTINA | 1996 | 44579611.0571 | | ARGENTINA | 1995 | 45081953.2540 | | ARGENTINA | 1994 | 48291282.8512 | | ARGENTINA | 1993 | 48063838.9130 | | ARGENTINA | 1992 | 45277890.2991 | | BRAZIL | 1998 | 28577022.6384 | | BRAZIL | 1997 | 46808660.3688 | | BRAZIL | 1996 | 47119265.0765 | | BRAZIL | 1995 | 47706399.9100 | | BRAZIL | 1994 | 48377469.9386 | | BRAZIL | 1993 | 46933565.7471 | | BRAZIL | 1992 | 47272215.5408 | | CANADA | 1998 | 30500303.6521 | | CANADA | 1997 | 50046257.5687 | | CANADA | 1996 | 52638586.9029 | | CANADA | 1995 | 50433911.3289 | | CANADA | 1994 | 51605251.7124 | | CANADA | 1993 | 50117218.8464 | | CANADA | 1992 | 50347111.2789 | | CHINA | 1998 | 26956001.9487 | | CHINA | 1997 | 48311246.7866 | | CHINA | 1996 | 51133929.1033 | | CHINA | 1995 | 48024289.1049 | | CHINA | 1994 | 50027433.6557 | | CHINA | 1993 | 48240226.3801 | | CHINA | 1992 | 47769117.6007 | | EGYPT | 1998 | 26972573.1604 | | EGYPT | 1997 | 46708654.7666 | | EGYPT | 1996 | 46095050.4457 | | EGYPT | 1995 | 44901908.2949 | | EGYPT | 1994 | 48522762.8892 | | EGYPT | 1993 | 49055807.7642 | | EGYPT | 1992 | 46909796.1083 | | ETHIOPIA | 1998 | 26364411.6457 | | ETHIOPIA | 1997 | 44889623.0645 | | ETHIOPIA | 1996 | 47554295.2892 | | ETHIOPIA | 1995 | 44747639.5440 | | ETHIOPIA | 1994 | 46497570.0631 | | ETHIOPIA | 1993 | 43853718.5460 | | ETHIOPIA | 1992 | 44005773.0397 | | FRANCE | 1998 | 27033406.6353 | | FRANCE | 1997 | 45763555.5515 | | FRANCE | 1996 | 47178544.9301 | | FRANCE | 1995 | 48821282.1929 | | FRANCE | 1994 | 46444640.9397 | | FRANCE | 1993 | 46602311.0590 | | FRANCE | 1992 | 47769356.5113 | | GERMANY | 1998 | 26165681.8305 | | GERMANY | 1997 | 46600844.4431 | | GERMANY | 1996 | 44873520.1979 | | GERMANY | 1995 | 47761215.6058 | | GERMANY | 1994 | 42283120.0209 | | GERMANY | 1993 | 46954873.9820 | | GERMANY | 1992 | 46263626.6361 | | INDIA | 1998 | 27651103.0250 | | INDIA | 1997 | 46000888.8340 | | INDIA | 1996 | 43993476.7354 | | INDIA | 1995 | 44015709.1914 | | INDIA | 1994 | 44281439.6282 | | INDIA | 1993 | 45367255.7857 | | INDIA | 1992 | 45350810.5330 | | INDONESIA | 1998 | 27120545.3120 | | INDONESIA | 1997 | 45745362.3667 | | INDONESIA | 1996 | 45347554.8232 | | INDONESIA | 1995 | 45685709.4978 | | INDONESIA | 1994 | 44738603.1901 | | INDONESIA | 1993 | 45172063.2033 | | INDONESIA | 1992 | 44623924.3942 | | IRAN | 1998 | 27876287.0949 | | IRAN | 1997 | 47184621.5647 | | IRAN | 1996 | 47397859.7878 | | IRAN | 1995 | 49579120.6991 | | IRAN | 1994 | 48032316.8744 | | IRAN | 1993 | 48295593.2066 | | IRAN | 1992 | 50531453.3934 | | IRAQ | 1998 | 29997323.2927 | | IRAQ | 1997 | 52851471.1377 | | IRAQ | 1996 | 53671825.6297 | | IRAQ | 1995 | 53251012.1025 | | IRAQ | 1994 | 50934553.4361 | | IRAQ | 1993 | 51961214.1186 | | IRAQ | 1992 | 50840364.3833 | | JAPAN | 1998 | 26054615.4955 | | JAPAN | 1997 | 43557394.2595 | | JAPAN | 1996 | 46531743.0980 | | JAPAN | 1995 | 41688293.4741 | | JAPAN | 1994 | 45526719.0728 | | JAPAN | 1993 | 45619475.4478 | | JAPAN | 1992 | 44545639.3069 | | JORDAN | 1998 | 24793092.4101 | | JORDAN | 1997 | 42050730.7748 | | JORDAN | 1996 | 42562783.8663 | | JORDAN | 1995 | 42253019.5330 | | JORDAN | 1994 | 45027034.7721 | | JORDAN | 1993 | 44797510.9808 | | JORDAN | 1992 | 41313405.2890 | | KENYA | 1998 | 24550926.4693 | | KENYA | 1997 | 42767120.5848 | | KENYA | 1996 | 45000095.1105 | | KENYA | 1995 | 43250458.0109 | | KENYA | 1994 | 42891596.7158 | | KENYA | 1993 | 43599201.5126 | | KENYA | 1992 | 45286145.8141 | | MOROCCO | 1998 | 23482053.5970 | | MOROCCO | 1997 | 41503033.0020 | | MOROCCO | 1996 | 45645555.9409 | | MOROCCO | 1995 | 44462858.7689 | | MOROCCO | 1994 | 44768368.8310 | | MOROCCO | 1993 | 44611871.2477 | | MOROCCO | 1992 | 43057959.1352 | | MOZAMBIQUE | 1998 | 28824737.9244 | | MOZAMBIQUE | 1997 | 48682746.5995 | | MOZAMBIQUE | 1996 | 50816940.9909 | | MOZAMBIQUE | 1995 | 50010039.0178 | | MOZAMBIQUE | 1994 | 48794892.1253 | | MOZAMBIQUE | 1993 | 48451128.3332 | | MOZAMBIQUE | 1992 | 50113858.5449 | | PERU | 1998 | 30575758.1899 | | PERU | 1997 | 49323405.6808 | | PERU | 1996 | 50063490.6085 | | PERU | 1995 | 51272843.6555 | | PERU | 1994 | 50690589.2334 | | PERU | 1993 | 49086129.3668 | | PERU | 1992 | 50067216.3450 | | ROMANIA | 1998 | 27367992.9903 | | ROMANIA | 1997 | 45668932.7094 | | ROMANIA | 1996 | 46594220.7498 | | ROMANIA | 1995 | 44576835.1623 | | ROMANIA | 1994 | 45640971.0684 | | ROMANIA | 1993 | 46374545.0712 | | ROMANIA | 1992 | 47130533.3076 | | RUSSIA | 1998 | 27486839.8755 | | RUSSIA | 1997 | 44050712.6907 | | RUSSIA | 1996 | 45604597.4983 | | RUSSIA | 1995 | 48972490.6009 | | RUSSIA | 1994 | 45652045.5872 | | RUSSIA | 1993 | 47139548.1597 | | RUSSIA | 1992 | 47159990.1221 | | SAUDI ARABIA | 1998 | 29766229.7961 | | SAUDI ARABIA | 1997 | 51473031.6922 | | SAUDI ARABIA | 1996 | 52859666.6646 | | SAUDI ARABIA | 1995 | 50946175.0229 | | SAUDI ARABIA | 1994 | 53085288.9954 | | SAUDI ARABIA | 1993 | 50907571.2046 | | SAUDI ARABIA | 1992 | 50334063.0381 | | UNITED KINGDOM | 1998 | 27904712.8220 | | UNITED KINGDOM | 1997 | 48170994.4362 | | UNITED KINGDOM | 1996 | 46498116.9611 | | UNITED KINGDOM | 1995 | 43210619.0456 | | UNITED KINGDOM | 1994 | 47339709.9122 | | UNITED KINGDOM | 1993 | 44308436.3275 | | UNITED KINGDOM | 1992 | 45870809.6693 | | UNITED STATES | 1998 | 25856187.3719 | | UNITED STATES | 1997 | 44934753.2208 | | UNITED STATES | 1996 | 44826974.2915 | | UNITED STATES | 1995 | 44160425.4086 | | UNITED STATES | 1994 | 43193241.6843 | | UNITED STATES | 1993 | 45126307.2619 | | UNITED STATES | 1992 | 44205926.3317 | | VIETNAM | 1998 | 28289193.6726 | | VIETNAM | 1997 | 48284585.4019 | | VIETNAM | 1996 | 48360225.9084 | | VIETNAM | 1995 | 48742082.6165 | | VIETNAM | 1994 | 49035537.3894 | | VIETNAM | 1993 | 47222674.6352 | | VIETNAM | 1992 | 48628336.9011 | +----------------+--------+---------------+ 175 rows in set Q10 +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ | c_custkey | c_name | revenue | c_acctbal | n_name | c_address | c_phone | c_comment | +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ | 95962 | Customer#000095962 | 704336.0774 | -9.33 | MOZAMBIQUE | 83wOMt9iAb9OJ0HbkQ1PaX3odXVBNEIMXaE | 26-127-693-7436 | nusual theodolites maintain furiously fluffily iro | | 87064 | Customer#000087064 | 684037.4349 | 5244.68 | BRAZIL | 0xej6ldT8zi7MwLdDJ1II3YWwprkvwB1 I0kwsf | 12-930-206-2571 | de of the ironic, silent warthogs. bold, r | | 56416 | Customer#000056416 | 661218.0492 | 4303.82 | INDIA | CEuBN,xZVmP | 18-212-984-8331 | al waters cajole along the slyly unusual dugouts. carefully regular deposits use slyly? packages h | | 46450 | Customer#000046450 | 646205.6835 | 2400.59 | UNITED STATES | rzWQxB9iFpd8i4KUCAPdv | 34-765-320-4326 | ss, final deposits cajole sly | | 128713 | Customer#000128713 | 643240.1183 | 7200.30 | ARGENTINA | mm0kxtHFCchaZX4eYSCCyQHno7vq,SRmv4 | 11-174-994-6880 | ording to the express accounts cajole carefully across the bravely special packages. carefully regular account | | 102187 | Customer#000102187 | 637493.0787 | -896.03 | ETHIOPIA | EAi6vcGnWHUMb6rJwn,PtUgSH74tR Aixa | 15-877-462-6534 | gular packages. carefully regular deposits cajole carefully of the regular requests. carefully special accou | | 42541 | Customer#000042541 | 634546.9756 | 8082.14 | IRAN | IccOGHgp8g | 20-442-159-1337 | cross the final asymptotes. final packages wake furiously ironic dec | | 51595 | Customer#000051595 | 611926.8265 | 7236.80 | UNITED STATES | wQFWZk 7JCpeg50O0KCzSmUFnNNwX1aEQ7V3Q | 34-844-269-9070 | sts. always express accounts use carefully along the quickly speci | | 66391 | Customer#000066391 | 608385.5852 | 9404.57 | UNITED STATES | V0XvU1Nh9NU4zsyOkm,RBa | 34-149-224-8119 | ages cajole carefully carefully bold deposits: fluffily unusual deposits promise slyly carefully ironic co | | 48358 | Customer#000048358 | 603621.4823 | -611.15 | ETHIOPIA | ycg3uMG7iDdwQvJ1irr | 15-687-936-5181 | the slyly unusual foxes-- carefully regular | | 99175 | Customer#000099175 | 602125.3304 | 2218.76 | INDONESIA | 9wbW52xx9T84E0dZ Rvz1ozQ1 | 19-125-912-6494 | ide of the slyly ironic foxes boost silently ironic, even instructions. blithe | | 122509 | Customer#000122509 | 601580.1203 | 2613.83 | KENYA | ZN1sc0eJrkD8t6X5Q1d3 | 24-421-308-3881 | brave deposits haggle across the even deposits. instr | | 148055 | Customer#000148055 | 601003.6812 | 455.31 | PERU | Y,RCZ3Bislx64nTsPaRL,5gjx7xgC6y, yKYnCw | 27-473-476-4382 | uickly final accounts wake carefully sl | | 117451 | Customer#000117451 | 599792.7063 | 1090.48 | UNITED STATES | bSwr7mNPiaf1f lNK9 uTJxWCL2sn1Lak5NIB | 34-354-586-6011 | ding to the furiously express accounts boost carefully af | | 104110 | Customer#000104110 | 588194.3118 | 2762.52 | JORDAN | mm7 ZuDX5Z5nAQbKObB 80XBCy,1nyW | 23-639-800-5768 | urts sleep furiously alongside of the packages! slyly ironic packages sleep | | 13666 | Customer#000013666 | 579926.1679 | 7453.98 | EGYPT | DLRUWGcprmWqdROJvmZwpE | 14-316-135-4381 | ross the silent requests. special theodolit | | 96202 | Customer#000096202 | 571017.3398 | 4703.04 | CANADA | 4Vcxcx3w4zMjVYNQaqrweweQY6TJO AP9rdvQaLl | 13-194-779-9597 | en packages use. fluffily regular dependencies boost. never pending requ | | 70279 | Customer#000070279 | 561369.3650 | 9109.34 | CHINA | ltie8o3ihwffMrqMrkvN957KZVWmH5 | 28-842-825-1717 | theodolites sleep: blithely final requests are fur | | 16972 | Customer#000016972 | 560435.8065 | 6408.66 | ROMANIA | X6T8vRKy6kSO0f2wJJt | 29-483-958-3347 | sts. pending deposits are across the regular, express instructions. carefully daring foxes cajol | | 113443 | Customer#000113443 | 557272.6706 | -72.67 | UNITED KINGDOM | SUHbS85cYxgVkKbfh9sUpEa6ezVSlQuCKe3CV | 33-819-742-6112 | ic foxes cajole thinly furiously stealthy instructions. pinto beans are. quickly regular accounts integrate car | +-----------+--------------------+-------------+-----------+----------------+------------------------------------------+-----------------+-----------------------------------------------------------------------------------------------------------------+ 20 rows in set Q11 +------------+-------------+ | ps_partkey | value | +------------+-------------+ | 131630 | 17882680.37 | | 104150 | 17613017.18 | | 128284 | 16502418.74 | | 8978 | 16470438.59 | | 147193 | 16462742.12 | | 78788 | 16010246.37 | | 76331 | 15776882.05 | | 137287 | 15770471.15 | | 51302 | 15730620.22 | | 141553 | 15333540.19 | | 137196 | 15035435.60 | | 186531 | 14818272.68 | | 103818 | 14690943.63 | | 80080 | 14626441.35 | | 1312 | 14330729.50 | | 6531 | 14267308.08 | | 96162 | 14154396.04 | | 69605 | 14018927.25 | | 30118 | 13854726.38 | | 17006 | 13731495.60 | | 95347 | 13716648.60 | | 18722 | 13707978.71 | | 122875 | 13640341.00 | | 105499 | 13532912.80 | | 165560 | 13509536.95 | | 1531 | 13337454.55 | | 34732 | 13304041.48 | | 173221 | 13038078.41 | | 180975 | 13038039.17 | | 24703 | 12957050.80 | | 72036 | 12939426.90 | | 124814 | 12849842.04 | | 174453 | 12814999.00 | | 14209 | 12814858.56 | | 185186 | 12657201.05 | | 187868 | 12647101.80 | | 125085 | 12639931.63 | | 80331 | 12625007.00 | | 118685 | 12515185.68 | | 163988 | 12484272.80 | | 124685 | 12432747.32 | | 92838 | 12410071.57 | | 140928 | 12396673.84 | | 1218 | 12362877.75 | | 39201 | 12328085.10 | | 33237 | 12180622.98 | | 183791 | 12150040.50 | | 3243 | 12136315.74 | | 62740 | 12131313.60 | | 154171 | 12105470.89 | | 49034 | 11982382.52 | | 88673 | 11925499.04 | | 52527 | 11923653.16 | | 83974 | 11871084.73 | | 88254 | 11870393.22 | | 411 | 11806670.95 | | 14320 | 11800136.02 | | 164979 | 11794760.03 | | 166149 | 11778499.72 | | 74105 | 11750224.34 | | 169104 | 11708532.18 | | 15542 | 11687293.42 | | 161538 | 11661769.80 | | 63337 | 11592505.40 | | 117197 | 11508165.60 | | 102989 | 11497056.75 | | 10836 | 11465875.43 | | 199561 | 11431793.36 | | 134683 | 11384564.54 | | 136318 | 11351893.30 | | 166270 | 11336004.81 | | 32200 | 11324838.00 | | 57033 | 11281026.52 | | 18098 | 11245398.24 | | 135174 | 11189782.12 | | 181616 | 11183947.65 | | 85064 | 11175761.43 | | 120719 | 11164342.08 | | 99670 | 11140257.47 | | 46096 | 11034143.76 | | 195124 | 11030197.30 | | 78838 | 11012446.40 | | 151656 | 11010376.90 | | 156956 | 10996384.80 | | 34028 | 10942671.24 | | 15778 | 10937778.75 | | 199707 | 10924333.33 | | 118776 | 10920609.31 | | 27640 | 10919693.42 | | 15237 | 10918145.54 | | 148243 | 10916765.29 | | 111498 | 10867707.51 | | 132024 | 10834280.47 | | 35124 | 10806898.50 | | 196818 | 10787371.25 | | 197669 | 10779504.60 | | 110042 | 10778828.37 | | 197422 | 10770092.44 | | 75160 | 10746976.60 | | 191567 | 10642430.39 | | 34225 | 10574664.41 | | 102588 | 10567012.05 | | 44148 | 10505249.34 | | 126607 | 10484944.29 | | 172625 | 10444857.62 | | 157054 | 10406203.24 | | 19322 | 10378704.98 | | 136541 | 10371536.77 | | 167526 | 10320346.58 | | 136011 | 10302146.84 | | 107431 | 10273992.76 | | 16485 | 10257703.67 | | 52580 | 10250264.05 | | 839 | 10238243.36 | | 31704 | 10196678.94 | | 122558 | 10137326.18 | | 180386 | 10123318.07 | | 97705 | 10089163.37 | | 96327 | 10087851.88 | | 136143 | 10082137.97 | | 15174 | 10057277.55 | | 193324 | 10039922.93 | | 33593 | 10019952.10 | | 126288 | 10014855.05 | | 64123 | 9985650.90 | | 183712 | 9973256.18 | | 138831 | 9963069.10 | | 123694 | 9959096.38 | | 51734 | 9952439.73 | | 11861 | 9949647.12 | | 119127 | 9942105.69 | | 173308 | 9932264.52 | | 40986 | 9921554.40 | | 176970 | 9919708.65 | | 54316 | 9913595.16 | | 62644 | 9903936.27 | | 185354 | 9895956.52 | | 81468 | 9885132.60 | | 104687 | 9883888.05 | | 198959 | 9875351.28 | | 179767 | 9872309.86 | | 102835 | 9870743.52 | | 163221 | 9856173.04 | | 32633 | 9852565.04 | | 19605 | 9850164.48 | | 47378 | 9826135.11 | | 44026 | 9822433.44 | | 126629 | 9816227.30 | | 199665 | 9812400.23 | | 30989 | 9812295.52 | | 102177 | 9810372.32 | | 25765 | 9806344.88 | | 110721 | 9804895.23 | | 159532 | 9803738.34 | | 101640 | 9801375.65 | | 151569 | 9792489.20 | | 180629 | 9782164.34 | | 165528 | 9769074.10 | | 23772 | 9766084.22 | | 149727 | 9765190.96 | | 189605 | 9761887.80 | | 74703 | 9758757.28 | | 83382 | 9758144.21 | | 93775 | 9726901.71 | | 56192 | 9725508.16 | | 50060 | 9712714.65 | | 15409 | 9706898.91 | | 139104 | 9701070.72 | | 177435 | 9686566.09 | | 31351 | 9675197.98 | | 20495 | 9672566.31 | | 24537 | 9654516.03 | | 160528 | 9650804.70 | | 34706 | 9647241.90 | | 149039 | 9643498.32 | | 147139 | 9642356.34 | | 118629 | 9624960.80 | | 35359 | 9621549.92 | | 33854 | 9616857.73 | | 33707 | 9609988.84 | | 149055 | 9599364.32 | | 127429 | 9580670.49 | | 67575 | 9579613.26 | | 80727 | 9576545.81 | | 181650 | 9574445.40 | | 50176 | 9573389.08 | | 171093 | 9571625.20 | | 151342 | 9569230.21 | | 123052 | 9561903.68 | | 132633 | 9545052.14 | | 130419 | 9524936.49 | | 89241 | 9512992.32 | | 138255 | 9503515.93 | | 31680 | 9502841.07 | | 151986 | 9500862.59 | | 146390 | 9490242.96 | | 62275 | 9475584.10 | | 33518 | 9475074.40 | | 5286 | 9473739.88 | | 39020 | 9467701.22 | | 113281 | 9466510.94 | | 138789 | 9464407.24 | | 165040 | 9462153.75 | | 150766 | 9461855.88 | | 54341 | 9459425.45 | | 33464 | 9459377.37 | | 15251 | 9455980.84 | | 145308 | 9454189.29 | | 192621 | 9449324.14 | | 175218 | 9448987.35 | | 58992 | 9446144.40 | | 24548 | 9442739.03 | | 177563 | 9440891.04 | | 184482 | 9431486.10 | | 78961 | 9430401.05 | | 174167 | 9428622.96 | | 88265 | 9423143.28 | | 6057 | 9405359.37 | | 85387 | 9402175.55 | | 47053 | 9399707.66 | | 128973 | 9399265.92 | | 65668 | 9395584.45 | | 50222 | 9394502.96 | | 116534 | 9388011.08 | | 140959 | 9386284.56 | | 46897 | 9385056.21 | | 141872 | 9383820.48 | | 177181 | 9383551.92 | | 168265 | 9376664.16 | | 48974 | 9374769.12 | | 46218 | 9364135.50 | | 104039 | 9363227.03 | | 61538 | 9360159.08 | | 94688 | 9359604.98 | | 122393 | 9357937.19 | | 7323 | 9356712.30 | | 197892 | 9356573.44 | | 194056 | 9352381.73 | | 61285 | 9348480.54 | | 180336 | 9347874.15 | | 121930 | 9347784.74 | | 80652 | 9347143.50 | | 18549 | 9346038.72 | | 23992 | 9339908.16 | | 136583 | 9337299.56 | | 156151 | 9337138.10 | | 160572 | 9336553.40 | | 113391 | 9335558.10 | | 48068 | 9334317.92 | | 20409 | 9331093.65 | | 39712 | 9324685.28 | | 59364 | 9322249.86 | | 1344 | 9308304.39 | | 60549 | 9308293.20 | | 83854 | 9307387.25 | | 92092 | 9307165.64 | | 193306 | 9306177.31 | | 118265 | 9300250.20 | | 107568 | 9296254.34 | | 109127 | 9293552.10 | | 184688 | 9291647.92 | | 8718 | 9287337.37 | | 80433 | 9286295.52 | | 26670 | 9284963.44 | | 139548 | 9283605.21 | | 14736 | 9280119.20 | | 97886 | 9273852.42 | | 181442 | 9273130.50 | | 172360 | 9272824.92 | | 192714 | 9268366.36 | | 106726 | 9264879.90 | | 72157 | 9263498.40 | | 70445 | 9257553.92 | | 75148 | 9257420.83 | | 26170 | 9256074.12 | | 116531 | 9249721.71 | | 133665 | 9245464.80 | | 129041 | 9244629.48 | | 136486 | 9240748.92 | | 198924 | 9239976.06 | | 115254 | 9233580.37 | | 168135 | 9232693.98 | | 22480 | 9232190.78 | | 192018 | 9230386.58 | | 111889 | 9228204.96 | | 151661 | 9227926.90 | | 96482 | 9226960.85 | | 49198 | 9226436.40 | | 41219 | 9222883.52 | | 113502 | 9222208.59 | | 84009 | 9218703.22 | | 192788 | 9213468.00 | | 160251 | 9206353.32 | | 188162 | 9200537.88 | | 167589 | 9195835.03 | | 132673 | 9194021.22 | | 191105 | 9192417.12 | | 128748 | 9189941.55 | | 130423 | 9184710.96 | | 22639 | 9182963.16 | | 199034 | 9180909.86 | | 187644 | 9180350.20 | | 970 | 9175757.70 | | 59070 | 9170000.64 | | 66568 | 9166070.04 | | 52715 | 9161221.80 | | 130276 | 9161201.57 | | 24189 | 9160740.15 | | 132402 | 9144498.48 | | 37799 | 9142271.24 | | 173337 | 9140566.68 | | 176552 | 9135054.51 | | 195714 | 9133679.77 | | 119363 | 9123261.90 | | 161160 | 9122259.60 | | 196968 | 9111592.20 | | 61943 | 9111527.33 | | 79766 | 9109534.89 | | 178082 | 9105694.92 | | 38800 | 9105468.72 | | 83608 | 9099493.68 | | 146346 | 9098628.00 | | 116690 | 9098099.93 | | 64690 | 9095441.10 | | 82061 | 9095381.18 | | 89015 | 9092660.48 | | 188457 | 9091400.40 | | 125177 | 9090455.55 | | 114776 | 9088177.68 | | 4486 | 9087487.20 | | 176940 | 9086842.84 | | 93157 | 9084361.81 | | 148624 | 9083370.78 | | 4441 | 9079520.58 | | 63590 | 9079125.44 | | 174189 | 9078023.39 | | 63054 | 9075441.98 | | 14950 | 9073156.19 | | 175646 | 9072322.47 | | 63712 | 9067710.48 | | 157197 | 9067452.77 | | 147196 | 9064699.80 | | 50551 | 9062434.72 | | 43035 | 9061782.03 | | 187679 | 9056529.40 | | 96673 | 9056525.94 | | 130148 | 9054217.06 | | 159007 | 9053155.29 | | 41544 | 9052820.94 | | 109476 | 9048012.09 | | 60092 | 9045562.44 | | 197490 | 9044579.88 | | 47311 | 9037223.52 | | 87230 | 9033227.61 | | 3860 | 9030622.02 | | 5466 | 9029841.66 | | 171537 | 9024699.30 | | 39707 | 9022833.12 | | 167048 | 9022709.18 | | 109006 | 9022258.40 | | 17910 | 9019688.45 | | 132826 | 9017286.74 | | 157502 | 9016444.08 | | 142309 | 9016270.60 | | 78891 | 9005693.25 | | 88301 | 9002414.82 | | 11496 | 9000803.97 | | 163633 | 8996162.06 | | 151809 | 8993104.95 | | 131555 | 8988340.68 | | 72812 | 8985370.68 | | 77047 | 8981489.79 | | 1553 | 8977226.10 | | 162531 | 8973689.92 | | 154026 | 8973320.24 | | 125499 | 8969667.84 | | 34547 | 8966116.43 | | 41301 | 8965350.42 | | 12853 | 8959403.59 | | 27736 | 8957933.23 | | 162817 | 8956868.20 | | 155389 | 8955349.85 | | 130360 | 8952928.25 | | 120878 | 8952393.10 | | 150671 | 8952112.72 | | 190365 | 8951671.57 | | 72364 | 8950587.82 | | 71615 | 8949277.07 | | 95277 | 8947796.58 | | 78180 | 8946814.80 | | 97062 | 8945057.46 | | 170013 | 8944660.40 | | 113426 | 8943016.29 | | 173751 | 8942914.28 | | 1478 | 8941906.24 | | 26061 | 8941022.48 | | 152527 | 8939654.10 | | 148360 | 8939589.40 | | 44057 | 8939101.36 | | 13595 | 8936720.10 | | 33337 | 8935366.48 | | 169698 | 8931507.20 | | 26155 | 8927283.11 | | 17185 | 8927218.40 | | 51996 | 8926661.08 | | 101869 | 8919281.70 | | 14561 | 8910653.92 | | 190047 | 8909427.90 | | 104143 | 8909328.40 | | 133330 | 8907195.90 | | 169144 | 8904989.34 | | 87067 | 8900079.44 | | 176075 | 8898845.64 | | 25076 | 8895274.12 | | 80838 | 8895205.30 | | 40387 | 8890891.55 | | 88004 | 8888748.80 | | 105527 | 8888672.72 | | 40741 | 8886674.24 | | 76690 | 8880622.61 | | 86485 | 8880488.57 | | 75736 | 8877666.06 | | 48704 | 8876626.52 | | 56450 | 8872277.59 | | 61683 | 8870173.93 | | 24067 | 8867814.12 | | 108012 | 8863632.38 | | 180971 | 8862007.20 | | 132986 | 8861335.20 | | 35839 | 8859344.64 | | 191553 | 8857411.14 | | 163492 | 8855825.91 | | 112101 | 8851904.10 | | 27050 | 8847924.19 | | 57481 | 8845309.59 | | 163252 | 8842276.65 | | 87958 | 8840221.67 | | 60162 | 8838927.08 | | 131928 | 8838900.48 | | 123514 | 8833601.14 | | 42891 | 8830401.37 | | 71547 | 8829540.72 | | 13975 | 8826582.48 | | 31577 | 8825371.40 | | 86165 | 8816308.38 | | 164646 | 8815470.18 | | 150176 | 8814992.11 | | 152464 | 8814533.82 | | 183434 | 8813941.24 | | 58839 | 8808010.20 | | 59952 | 8801497.32 | | 151038 | 8800215.80 | | 139523 | 8800032.57 | | 8828 | 8798704.66 | | 14080 | 8797032.12 | | 194080 | 8792825.27 | | 87199 | 8788933.64 | | 91747 | 8785811.64 | | 194429 | 8776185.03 | | 118998 | 8776071.00 | | 179467 | 8771474.74 | | 68715 | 8771302.80 | | 180572 | 8771095.68 | | 19821 | 8770770.82 | | 41702 | 8770565.71 | | 27916 | 8769001.47 | | 121302 | 8763598.50 | | 107013 | 8762893.37 | | 37287 | 8761196.43 | | 117050 | 8758230.00 | | 58547 | 8757757.40 | | 197088 | 8749026.12 | | 55839 | 8747234.02 | | 71829 | 8744546.91 | | 30961 | 8743416.92 | | 134548 | 8741635.28 | | 179833 | 8738680.00 | | 79721 | 8737857.70 | | 144577 | 8736427.08 | | 29051 | 8729063.28 | | 131481 | 8728799.64 | | 73271 | 8727985.25 | | 89553 | 8725727.19 | | 31306 | 8724451.12 | | 82181 | 8724017.16 | | 95549 | 8723460.30 | | 31507 | 8722094.40 | | 21302 | 8722054.95 | | 137953 | 8721611.83 | | 195768 | 8721020.99 | | 180105 | 8718021.20 | | 98241 | 8717935.36 | | 59431 | 8715482.28 | | 143694 | 8713267.63 | | 109020 | 8713043.36 | | 46732 | 8711642.04 | | 144172 | 8711013.10 | | 139056 | 8710786.50 | | 107543 | 8706135.75 | | 89127 | 8705410.56 | | 146544 | 8704812.86 | | 195524 | 8699333.14 | | 133563 | 8698060.14 | | 112707 | 8694322.84 | | 98951 | 8690376.70 | | 132635 | 8689305.24 | | 69056 | 8688980.25 | | 134143 | 8688695.26 | | 148150 | 8687553.16 | | 89122 | 8686767.31 | | 15085 | 8685772.26 | | 196686 | 8682783.57 | | 3076 | 8672940.78 | | 137428 | 8672547.80 | | 27263 | 8671719.36 | | 101561 | 8667962.72 | | 12597 | 8662223.52 | | 143329 | 8661688.72 | | 130813 | 8659409.04 | | 183679 | 8658698.30 | | 47449 | 8658493.58 | | 164677 | 8658220.00 | | 51437 | 8654713.02 | | 116162 | 8649713.36 | | 71889 | 8645159.67 | | 6486 | 8639891.76 | | 192102 | 8638102.72 | | 101660 | 8634451.80 | | 124703 | 8633146.86 | | 150469 | 8631948.60 | | 197467 | 8630739.78 | | 97621 | 8630453.32 | | 150354 | 8630288.15 | | 179544 | 8630121.63 | | 38972 | 8626072.00 | | 110732 | 8625761.16 | | 170791 | 8625203.06 | | 149414 | 8617070.17 | | 59527 | 8616079.20 | | 157580 | 8615676.04 | | 16268 | 8615087.46 | | 76464 | 8610219.38 | | 44474 | 8607934.92 | | 125527 | 8607708.08 | | 118076 | 8602251.65 | | 180362 | 8601367.05 | | 5808 | 8599851.04 | | 28703 | 8599486.36 | | 113373 | 8597996.36 | | 118918 | 8597063.80 | | 44868 | 8596304.52 | | 43419 | 8596265.35 | | 89763 | 8595248.64 | | 119232 | 8594224.56 | | 108649 | 8590683.68 | | 10396 | 8588398.05 | | 79536 | 8587117.83 | | 149800 | 8587058.86 | | 165839 | 8582991.20 | | 115397 | 8581524.77 | | 104394 | 8581384.42 | | 142569 | 8581127.40 | | 63676 | 8580930.08 | | 29029 | 8580613.53 | | 156604 | 8580477.00 | | 7310 | 8579949.50 | | 105381 | 8576164.24 | | 84306 | 8573960.40 | | 61217 | 8570393.04 | | 164438 | 8569616.36 | | 28073 | 8565639.60 | | 125743 | 8563258.90 | | 190032 | 8561620.55 | | 147122 | 8561245.68 | | 5384 | 8558830.08 | | 70172 | 8558319.64 | | 161966 | 8556193.38 | | 69530 | 8554377.60 | | 111243 | 8553627.55 | | 72590 | 8551077.51 | | 134423 | 8550604.77 | | 44509 | 8547134.31 | | 160707 | 8546000.68 | | 54123 | 8545976.26 | | 36547 | 8540333.04 | | 48715 | 8537983.35 | | 103078 | 8537142.60 | | 137613 | 8536278.96 | | 44995 | 8532416.72 | | 191159 | 8532173.37 | | 119345 | 8532070.56 | | 109941 | 8531904.79 | | 5449 | 8528034.35 | | 134116 | 8526854.95 | | 199268 | 8523599.58 | | 168520 | 8523360.67 | | 154189 | 8521620.13 | | 108771 | 8513853.87 | | 198651 | 8511238.80 | | 93681 | 8510935.14 | | 170680 | 8509087.68 | | 106409 | 8506859.19 | | 27110 | 8499811.75 | | 43224 | 8499539.52 | | 153225 | 8499434.28 | | 16681 | 8498021.66 | | 117983 | 8496934.32 | | 192158 | 8492372.03 | | 33900 | 8491139.64 | | 37006 | 8489126.28 | | 176554 | 8488633.92 | | 69234 | 8484937.26 | | 176652 | 8484496.02 | | 41660 | 8480585.65 | | 129104 | 8480411.17 | | 66960 | 8478978.86 | | 36296 | 8472438.75 | | 98665 | 8471241.57 | | 134173 | 8467888.57 | | 60496 | 8467019.22 | | 197520 | 8466553.20 | | 116746 | 8465792.60 | | 187394 | 8458248.24 | | 140377 | 8455546.68 | | 97326 | 8450501.67 | | 26770 | 8449625.64 | | 104884 | 8446152.26 | | 143109 | 8443547.19 | | 127361 | 8441094.08 | | 104754 | 8436883.50 | | 183676 | 8436165.76 | | 906 | 8434608.12 | | 55768 | 8433763.69 | | 118654 | 8433465.57 | | 39310 | 8433214.55 | | 173261 | 8432992.53 | | 93976 | 8432605.20 | | 63318 | 8432149.26 | | 128243 | 8424182.94 | | 156063 | 8422743.54 | | 195087 | 8421279.30 | | 67668 | 8417594.98 | | 49882 | 8417237.80 | | 105631 | 8412628.07 | | 40987 | 8406033.41 | | 185735 | 8404112.83 | | 173986 | 8403050.34 | | 87372 | 8402838.40 | | 24509 | 8398807.24 | | 180522 | 8394989.75 | | 76215 | 8394433.35 | | 193872 | 8390435.23 | | 141234 | 8390180.92 | | 91138 | 8386645.20 | | 28097 | 8385577.38 | | 4053 | 8384952.75 | | 17050 | 8380304.40 | | 64050 | 8377921.56 | | 80836 | 8375803.16 | | 86084 | 8373551.95 | | 168499 | 8373348.72 | | 178642 | 8372218.52 | | 8498 | 8370557.16 | | 156312 | 8366249.30 | | 136803 | 8361949.92 | | 92109 | 8359503.23 | | 138625 | 8358135.21 | | 137540 | 8358031.08 | | 176531 | 8355437.00 | | 53783 | 8352395.63 | | 106977 | 8352334.98 | | 21385 | 8351786.37 | | 114885 | 8351582.40 | | 113643 | 8350530.65 | | 89061 | 8349422.08 | | 77752 | 8348730.24 | | 28623 | 8348321.44 | | 74478 | 8348064.27 | | 41383 | 8347223.45 | | 147632 | 8346967.80 | | 40948 | 8346743.30 | | 154324 | 8346521.91 | | 89724 | 8346034.80 | | 119083 | 8338084.92 | | 124143 | 8335841.76 | | 80512 | 8335705.69 | | 105047 | 8332249.86 | | 38243 | 8329017.19 | | 42583 | 8328613.91 | | 44240 | 8327684.64 | | 57611 | 8321693.94 | | 9730 | 8319725.70 | | 91655 | 8318837.40 | | 13140 | 8316216.96 | | 112257 | 8315169.85 | | 27182 | 8314740.99 | | 166654 | 8314332.64 | | 40572 | 8312654.55 | | 26680 | 8311626.68 | | 138947 | 8311347.29 | | 184982 | 8310393.08 | | 35540 | 8308058.43 | | 181446 | 8304851.76 | | 65160 | 8299581.90 | | 9533 | 8299139.42 | | 67836 | 8294228.46 | | 159414 | 8293114.90 | | 115025 | 8291746.65 | | 30780 | 8291580.00 | | 164680 | 8290263.02 | | 4599 | 8288816.03 | | 73366 | 8286818.96 | | 135625 | 8284930.92 | | 46497 | 8284638.88 | | 63781 | 8284447.60 | | 84332 | 8283372.14 | | 196269 | 8276407.36 | | 166651 | 8275663.35 | | 142 | 8273960.31 | | 56904 | 8272891.44 | | 46821 | 8272603.71 | | 76051 | 8272300.75 | | 19666 | 8270192.64 | | 92723 | 8267074.20 | | 125843 | 8266816.38 | | 158722 | 8266634.88 | | 28941 | 8266245.12 | | 39968 | 8265605.53 | | 41429 | 8265317.84 | | 61601 | 8264074.31 | | 179159 | 8260137.47 | | 15969 | 8259835.96 | | 121125 | 8253912.49 | | 66486 | 8253743.66 | | 181031 | 8253570.14 | | 43712 | 8250825.78 | | 13842 | 8245765.00 | | 76203 | 8245412.16 | | 68992 | 8243081.46 | | 119704 | 8241363.06 | | 86109 | 8240377.92 | | 29534 | 8239914.00 | | 68596 | 8239825.29 | | 168291 | 8237626.32 | | 183308 | 8235947.21 | | 78657 | 8233481.64 | | 193545 | 8233037.49 | | 23658 | 8232306.18 | | 179945 | 8231365.25 | | 53391 | 8231252.10 | | 71380 | 8231125.68 | | 53666 | 8226715.00 | | 118592 | 8226181.00 | | 67203 | 8225355.99 | | 1178 | 8224625.05 | | 147876 | 8224189.62 | | 80042 | 8220826.70 | | 48950 | 8218611.22 | | 43331 | 8218448.04 | | 177706 | 8215723.50 | | 145442 | 8215706.16 | | 197042 | 8215536.00 | | 169952 | 8214698.43 | | 57907 | 8211740.04 | | 145741 | 8210316.57 | | 91144 | 8209855.02 | | 160266 | 8209468.80 | | 31602 | 8209366.90 | | 98672 | 8208412.85 | | 199012 | 8207897.50 | | 151148 | 8207645.16 | | 116545 | 8207573.24 | | 122176 | 8207508.04 | | 11021 | 8206766.10 | | 47752 | 8203436.82 | | 124 | 8203209.30 | | 148126 | 8202846.66 | | 15753 | 8202695.55 | | 50833 | 8200880.16 | | 11523 | 8196478.02 | | 71478 | 8195930.68 | | 129262 | 8190520.80 | | 43023 | 8186451.85 | | 119193 | 8184853.14 | | 85067 | 8182638.86 | | 164534 | 8181563.04 | | 82556 | 8180455.14 | | 31813 | 8179417.14 | | 81345 | 8173128.69 | | 38413 | 8172464.04 | | 106014 | 8171418.35 | | 191180 | 8170663.97 | | 43274 | 8169669.72 | | 5837 | 8166123.50 | | 63332 | 8161839.60 | | 47668 | 8161790.04 | | 112468 | 8160728.40 | | 132541 | 8160680.00 | | 59457 | 8160393.33 | | 71751 | 8159865.19 | | 118395 | 8156795.00 | | 132390 | 8154867.54 | | 44792 | 8153384.22 | | 128838 | 8153018.30 | | 87197 | 8152281.72 | | 187978 | 8150832.56 | | 147419 | 8150063.60 | | 149166 | 8149406.78 | | 196012 | 8147307.42 | | 190519 | 8145402.96 | | 151511 | 8144276.58 | | 88891 | 8140166.24 | | 168056 | 8139101.96 | | 189186 | 8136933.25 | | 117326 | 8136047.82 | | 60575 | 8133316.80 | | 75452 | 8130427.37 | | 194126 | 8129751.80 | | 130199 | 8129270.88 | | 41680 | 8128823.40 | | 107624 | 8125799.20 | | 135069 | 8123999.10 | | 119032 | 8123770.24 | | 27635 | 8123076.65 | | 14317 | 8121553.23 | | 148018 | 8119898.16 | | 51152 | 8118370.26 | | 112643 | 8117331.37 | | 119526 | 8116075.80 | | 192084 | 8114896.38 | | 151385 | 8114711.28 | | 160836 | 8112053.68 | | 91468 | 8111785.50 | | 58877 | 8108256.25 | | 41885 | 8107026.81 | | 155542 | 8106757.18 | | 149968 | 8104953.78 | | 168380 | 8103576.00 | | 134641 | 8101092.32 | | 92470 | 8100877.70 | | 113610 | 8098591.93 | | 198538 | 8097343.20 | | 122506 | 8096090.76 | | 29082 | 8093543.55 | | 161345 | 8093157.93 | | 105743 | 8093045.53 | | 103572 | 8091573.66 | | 59514 | 8089470.48 | | 8801 | 8088454.15 | | 129062 | 8088206.58 | | 155464 | 8086115.79 | | 86363 | 8082561.00 | | 180836 | 8082087.30 | | 92558 | 8081407.80 | | 85120 | 8073164.00 | | 149026 | 8072285.40 | | 51138 | 8072074.48 | | 36306 | 8071648.86 | | 102380 | 8070503.00 | | 147597 | 8069397.60 | | 41382 | 8059995.35 | | 121856 | 8059809.11 | | 86644 | 8058667.76 | | 108481 | 8058214.81 | | 41685 | 8057355.39 | | 175712 | 8054878.30 | | 72815 | 8052294.24 | | 58794 | 8047848.00 | | 118769 | 8047465.14 | | 157192 | 8046501.96 | | 195708 | 8045001.94 | | 163683 | 8044727.02 | | 189018 | 8043927.54 | | 62904 | 8043011.65 | | 80095 | 8042575.59 | | 90500 | 8042502.65 | | 73281 | 8040167.52 | | 150710 | 8035910.80 | | 139282 | 8034489.36 | | 172904 | 8033791.68 | | 38881 | 8032557.38 | | 53055 | 8030796.15 | | 105816 | 8025318.24 | | 88304 | 8024637.06 | | 115565 | 8023928.25 | | 55376 | 8021432.16 | | 56334 | 8019313.12 | | 58875 | 8016065.00 | | 4688 | 8012303.00 | | 49117 | 8009207.80 | | 57173 | 8008116.27 | | 48176 | 8006765.85 | | 112191 | 8003883.39 | | 33265 | 8002391.76 | | 181788 | 8002030.50 | | 172799 | 8001050.55 | | 2084 | 7999172.30 | | 174747 | 7997167.48 | | 171184 | 7996930.11 | | 113271 | 7992683.04 | | 68662 | 7991426.30 | | 179375 | 7991170.88 | | 188383 | 7990226.27 | | 50208 | 7989363.27 | | 23653 | 7988890.87 | | 159419 | 7988841.36 | | 74581 | 7987356.50 | | 133590 | 7986046.81 | | 195820 | 7985473.14 | | 87903 | 7983482.88 | | 69032 | 7981908.18 | | 113975 | 7980561.00 | | 178678 | 7975116.93 | | 52316 | 7973618.16 | | 135546 | 7972669.80 | | 89425 | 7970077.44 | | 115937 | 7966015.20 | | 151483 | 7964850.88 | | 73974 | 7964186.23 | | 39976 | 7964104.24 | | 130168 | 7961690.88 | | 58973 | 7957416.76 | | 16354 | 7956051.07 | | 23988 | 7955837.92 | | 138467 | 7955481.05 | | 26096 | 7955212.32 | | 192216 | 7953429.18 | | 112833 | 7952279.26 | | 60599 | 7951261.80 | | 129116 | 7948811.85 | | 79529 | 7947581.91 | | 71616 | 7944476.54 | | 136821 | 7942188.24 | | 116204 | 7941096.90 | | 165298 | 7939933.31 | | 44009 | 7939859.65 | | 194487 | 7938247.20 | | 11299 | 7938135.81 | | 76488 | 7935926.86 | | 58998 | 7934414.04 | | 25175 | 7931035.11 | | 136144 | 7929283.23 | | 132829 | 7926841.62 | | 84176 | 7925781.05 | | 68592 | 7922872.98 | | 139280 | 7922119.48 | | 160669 | 7921588.43 | | 42938 | 7917524.56 | | 183183 | 7915624.86 | | 95449 | 7914292.08 | | 115390 | 7912655.54 | | 173723 | 7911329.40 | | 48992 | 7911153.12 | | 173464 | 7910458.65 | | 26098 | 7910217.75 | | 141115 | 7909496.38 | | 195218 | 7906315.56 | | 116608 | 7906302.60 | | 163793 | 7905477.33 | | 10419 | 7904598.30 | | 106312 | 7901466.72 | | 48674 | 7901010.24 | | 35198 | 7899974.88 | | 88954 | 7899573.52 | | 41505 | 7897709.99 | | 115586 | 7897301.88 | | 167431 | 7895826.00 | | 158787 | 7894948.50 | | 161712 | 7893410.70 | | 46930 | 7892707.77 | | 58633 | 7892088.15 | | 10599 | 7892067.69 | | 99523 | 7891485.16 | | 70126 | 7890247.41 | | 32476 | 7890149.34 | | 152617 | 7890136.50 | | 162639 | 7889822.70 | | 82056 | 7889345.05 | | 186450 | 7887873.56 | | 39082 | 7886019.89 | | 183217 | 7885948.48 | | 192551 | 7884432.48 | | 164801 | 7882870.10 | | 112804 | 7882772.00 | | 5956 | 7878805.04 | | 73054 | 7878479.63 | | 62593 | 7878401.44 | | 137687 | 7873755.91 | | 80526 | 7871839.50 | | 195354 | 7869617.75 | | 4122 | 7867967.09 | | 4057 | 7865176.80 | | 63195 | 7864322.16 | | 143370 | 7863444.54 | | 41473 | 7862926.89 | | 155060 | 7860900.96 | | 76875 | 7858529.64 | | 135778 | 7857660.51 | | 30534 | 7855226.08 | | 99405 | 7853410.95 | | 161551 | 7852244.40 | | 185034 | 7850752.00 | | 17264 | 7850704.88 | | 23652 | 7848909.16 | | 123681 | 7848265.36 | | 186170 | 7845527.50 | | 81496 | 7840427.40 | | 25407 | 7840234.72 | | 96662 | 7839907.41 | | 156407 | 7839647.75 | | 165843 | 7839562.80 | | 153361 | 7838813.07 | | 149362 | 7838282.52 | | 46057 | 7835709.81 | | 114341 | 7835492.25 | | 154823 | 7834898.61 | | 139538 | 7834690.64 | | 42853 | 7833252.60 | | 177659 | 7831803.58 | | 29158 | 7829880.80 | | 85583 | 7825996.64 | | 165714 | 7825006.46 | | 58662 | 7821977.76 | | 185839 | 7821640.74 | | 93559 | 7821137.52 | | 58481 | 7818648.16 | | 162217 | 7817923.47 | | 130014 | 7815929.34 | | 125640 | 7815262.90 | | 83723 | 7815021.48 | | 54314 | 7813732.94 | | 146652 | 7809817.39 | | 189256 | 7808972.00 | | 87994 | 7808660.48 | | 157067 | 7806217.25 | | 56859 | 7805947.60 | | 118132 | 7804423.69 | | 189457 | 7802777.91 | | 1509 | 7802315.42 | | 129101 | 7801994.70 | | 162285 | 7801859.52 | | 182358 | 7801430.46 | | 6288 | 7800363.30 | | 68972 | 7799224.95 | | 51684 | 7795455.46 | | 148645 | 7794585.92 | | 94359 | 7794358.92 | | 40451 | 7791437.70 | | 44019 | 7790053.76 | | 81470 | 7788716.85 | | 12731 | 7786998.38 | | 114393 | 7784963.34 | | 69323 | 7783583.08 | | 169794 | 7780968.30 | | 25378 | 7778569.60 | | 104509 | 7777137.62 | | 81874 | 7775216.80 | | 70859 | 7771185.07 | | 135768 | 7769704.84 | | 181960 | 7768847.90 | | 28481 | 7768516.61 | | 191604 | 7765367.68 | | 754 | 7762507.02 | | 127702 | 7761776.05 | | 36488 | 7761744.00 | | 183906 | 7759864.80 | | 90365 | 7759602.50 | | 60725 | 7759495.78 | | 69436 | 7759033.52 | | 12963 | 7756623.52 | | 64571 | 7755731.04 | | 160111 | 7753787.70 | | 107970 | 7753735.88 | | 132036 | 7753401.36 | | 79965 | 7748656.15 | | 149862 | 7747239.10 | | 73218 | 7745499.42 | | 161036 | 7742807.45 | | 152467 | 7742471.40 | | 163358 | 7742034.00 | | 197951 | 7741768.84 | | 15820 | 7740003.00 | | 31444 | 7739519.60 | | 151208 | 7738273.85 | | 20410 | 7737192.99 | | 45462 | 7736792.55 | | 128966 | 7736467.65 | | 118945 | 7735275.00 | | 106458 | 7734069.72 | | 162706 | 7730189.88 | | 70528 | 7730088.25 | | 107998 | 7728273.45 | | 163110 | 7728042.40 | | 74591 | 7727297.76 | | 121454 | 7726200.56 | | 181252 | 7724464.38 | | 29154 | 7724129.66 | | 63854 | 7720353.88 | | 34157 | 7719803.30 | | 30684 | 7718307.84 | | 3985 | 7715042.96 | | 29387 | 7714858.80 | | 184703 | 7712545.12 | | 124679 | 7712528.72 | | 15606 | 7710658.46 | | 123814 | 7709872.95 | | 83760 | 7709633.92 | | 22084 | 7707219.79 | | 123210 | 7706030.42 | | 75066 | 7704727.51 | | 16337 | 7704517.80 | | 47109 | 7704111.51 | | 8232 | 7702887.50 | | 11222 | 7702535.62 | | 84961 | 7701923.72 | | 157118 | 7700132.88 | | 118362 | 7699210.20 | | 193755 | 7698545.20 | | 1520 | 7697759.37 | | 114599 | 7697377.50 | | 168842 | 7696152.00 | | 172245 | 7694286.06 | | 4584 | 7693352.79 | | 113651 | 7689659.67 | | 183207 | 7687955.66 | | 175802 | 7686604.70 | | 59066 | 7685120.43 | | 130726 | 7684159.25 | | 89672 | 7684049.50 | | 7224 | 7683446.40 | | 97533 | 7680694.62 | | 59941 | 7680100.80 | | 29298 | 7676823.42 | | 163962 | 7675924.96 | | 41086 | 7674518.14 | | 185483 | 7673376.60 | | 165010 | 7672469.70 | | 3708 | 7671744.18 | | 192994 | 7671712.00 | | 79968 | 7668060.48 | | 118494 | 7666659.00 | | 59236 | 7666625.98 | | 149509 | 7665930.67 | | 3793 | 7664981.28 | | 28979 | 7664632.93 | | 178389 | 7662544.96 | | 65315 | 7661085.88 | | 59710 | 7657442.00 | | 170276 | 7656813.89 | | 182707 | 7656387.06 | | 129170 | 7655820.48 | | 59765 | 7655009.92 | | 23337 | 7654271.94 | | 90396 | 7653568.35 | | 68842 | 7652742.72 | | 16315 | 7652630.70 | | 956 | 7652174.81 | | 10639 | 7651375.80 | | 112886 | 7649534.08 | | 9561 | 7648502.73 | | 65484 | 7647789.30 | | 68677 | 7646879.14 | | 196529 | 7645482.24 | | 6556 | 7642116.06 | | 9113 | 7640163.68 | | 128139 | 7638760.00 | | 143264 | 7635499.56 | | 21569 | 7634785.86 | | 193402 | 7633576.06 | | 35545 | 7632210.69 | | 65068 | 7632188.76 | | 25515 | 7630952.93 | | 180189 | 7630887.10 | | 131680 | 7629593.64 | | 80162 | 7629440.93 | | 139054 | 7629417.37 | | 8028 | 7629134.04 | | 76804 | 7626731.00 | | 74179 | 7624974.03 | | 122507 | 7623903.87 | | 141889 | 7623552.30 | | 184279 | 7623048.17 | | 8076 | 7620897.81 | | 192681 | 7619802.09 | | 21398 | 7617942.52 | | 14825 | 7617843.60 | | 17969 | 7617524.64 | | 170764 | 7616119.96 | | 115303 | 7615914.17 | | 67708 | 7615306.08 | | 33317 | 7613417.24 | | 190782 | 7613203.42 | | 113818 | 7612852.48 | | 178091 | 7611457.30 | | 87603 | 7611343.68 | | 108317 | 7610509.71 | | 106552 | 7609868.84 | | 28679 | 7609292.20 | | 192350 | 7609140.81 | | 154801 | 7607944.38 | | 5768 | 7607785.68 | | 127689 | 7606313.94 | | 62847 | 7605651.45 | | 111212 | 7605052.00 | | 156065 | 7603327.60 | | 115140 | 7601161.68 | | 19597 | 7601153.46 | | 55233 | 7600940.23 | | 89353 | 7600929.84 | | 75701 | 7600492.60 | | 64974 | 7599754.80 | | 116156 | 7597452.48 | | 59491 | 7596352.84 | | 6138 | 7594861.54 | | 62317 | 7594854.10 | | 106575 | 7594520.08 | | 161092 | 7594454.40 | | 9872 | 7593734.34 | | 77711 | 7593431.60 | | 61206 | 7593153.00 | | 123776 | 7592736.80 | | 185141 | 7592617.12 | | 5542 | 7592513.04 | | 185296 | 7591439.31 | | 72597 | 7591142.40 | +------------+-------------+ 1225 rows in set Q12 +------------+-----------------+----------------+ | l_shipmode | high_line_count | low_line_count | +------------+-----------------+----------------+ | FOB | 6273 | 9429 | | TRUCK | 6336 | 9300 | +------------+-----------------+----------------+ Q13 +---------+----------+ | c_count | custdist | +---------+----------+ | 0 | 50005 | | 10 | 6574 | | 9 | 6554 | | 11 | 6072 | | 8 | 5934 | | 12 | 5598 | | 13 | 5032 | | 19 | 4685 | | 7 | 4663 | | 20 | 4607 | | 17 | 4550 | | 18 | 4515 | | 14 | 4480 | | 15 | 4476 | | 16 | 4341 | | 21 | 4176 | | 22 | 3710 | | 6 | 3303 | | 23 | 3172 | | 24 | 2670 | | 25 | 2111 | | 5 | 1954 | | 26 | 1605 | | 27 | 1195 | | 4 | 1030 | | 28 | 898 | | 29 | 620 | | 3 | 408 | | 30 | 353 | | 31 | 225 | | 32 | 135 | | 2 | 128 | | 33 | 82 | | 34 | 54 | | 35 | 33 | | 1 | 18 | | 36 | 17 | | 37 | 7 | | 41 | 3 | | 40 | 3 | | 38 | 3 | | 39 | 1 | +---------+----------+ 42 rows in set Q14 +-------------------+ | promo_revenue | +-------------------+ | 16.65118731292792 | +-------------------+ Q15 +-----------+--------------------+----------------------------------+-----------------+---------------+ | s_suppkey | s_name | s_address | s_phone | total_revenue | +-----------+--------------------+----------------------------------+-----------------+---------------+ | 7895 | Supplier#000007895 | NYl,i8UhxTykLxGJ2voIRn20Ugk1KTzz | 14-559-808-3306 | 1678635.2636 | +-----------+--------------------+----------------------------------+-----------------+---------------+ Q16 +----------+---------------------------+--------+--------------+ | p_brand | p_type | p_size | supplier_cnt | +----------+---------------------------+--------+--------------+ | Brand#55 | LARGE BURNISHED TIN | 21 | 36 | | Brand#25 | PROMO BRUSHED STEEL | 24 | 28 | | Brand#54 | STANDARD BRUSHED COPPER | 14 | 27 | | Brand#12 | MEDIUM PLATED BRASS | 21 | 24 | | Brand#14 | ECONOMY PLATED TIN | 33 | 24 | | Brand#24 | ECONOMY PLATED TIN | 33 | 24 | | Brand#25 | MEDIUM PLATED STEEL | 35 | 24 | | Brand#32 | MEDIUM POLISHED COPPER | 20 | 24 | | Brand#32 | SMALL ANODIZED BRASS | 7 | 24 | | Brand#33 | ECONOMY PLATED STEEL | 7 | 24 | | Brand#33 | MEDIUM PLATED COPPER | 20 | 24 | | Brand#33 | PROMO POLISHED STEEL | 14 | 24 | ... | Brand#31 | PROMO ANODIZED COPPER | 20 | 3 | | Brand#41 | LARGE BURNISHED STEEL | 20 | 3 | | Brand#43 | SMALL BRUSHED COPPER | 7 | 3 | | Brand#52 | MEDIUM POLISHED BRASS | 21 | 3 | | Brand#52 | SMALL POLISHED TIN | 2 | 3 | +----------+---------------------------+--------+--------------+ 18341 rows in set Q17 +-------------------+ | avg_yearly | +-------------------+ | 348406.0542857143 | +-------------------+ Q18 +--------------------+-----------+------------+-------------+--------------+-----------------+ | c_name | c_custkey | o_orderkey | o_orderdate | o_totalprice | sum(l_quantity) | +--------------------+-----------+------------+-------------+--------------+-----------------+ | Customer#000128120 | 128120 | 4722021 | 1994-04-07 | 544089.09 | 323.00 | | Customer#000144617 | 144617 | 3043270 | 1997-02-12 | 530604.44 | 317.00 | | Customer#000066790 | 66790 | 2199712 | 1996-09-30 | 515531.82 | 327.00 | | Customer#000015619 | 15619 | 3767271 | 1996-08-07 | 480083.96 | 318.00 | | Customer#000147197 | 147197 | 1263015 | 1997-02-02 | 467149.67 | 320.00 | | Customer#000117919 | 117919 | 2869152 | 1996-06-20 | 456815.92 | 317.00 | | Customer#000126865 | 126865 | 4702759 | 1994-11-07 | 447606.65 | 320.00 | | Customer#000036619 | 36619 | 4806726 | 1995-01-17 | 446704.09 | 328.00 | | Customer#000119989 | 119989 | 1544643 | 1997-09-20 | 434568.25 | 320.00 | +--------------------+-----------+------------+-------------+--------------+-----------------+ 9 rows in set Q19 +--------------+ | revenue | +--------------+ | 3083843.0578 | +--------------+ Q20 +--------------------+------------------------------------------+ | s_name | s_address | +--------------------+------------------------------------------+ | Supplier#000000035 | QymmGXxjVVQ5OuABCXVVsu,4eF gU0Qc6 | | Supplier#000000068 | Ue6N50wH2CwE4PPgTGLmat,ibGYYlDoOb3xQwtgb | | Supplier#000000080 | cJ2MHSEJ13rIL2Wj3D5i6hRo30,ZiNUXhqn | | Supplier#000000100 | rIlN li8zvW22l2slbcx ECP4fL | | Supplier#000000274 | usxbl9KSW41DTE6FAglxHU | | Supplier#000000406 | zMhU58CDF4aHTeodxg9IgRZgq | | Supplier#000000444 | mHr2VcUpRkvyQ9rjKMaPkeWbVZmEIhxhb8F | | Supplier#000000453 | bpt98PxU5HSQt61bVB695JPjBmJKUv hNzQeHvC | | Supplier#000000458 | IFNkUK1H53HwUHabiONkMFAUDb | | Supplier#000000622 | gCQimU1jYHoQiglDmW1FkQM9wzi YC1P15pMy1 | | Supplier#000000713 | DBMIf1HiYY8OyRFcbtHpKIz | | Supplier#000000767 | bHEuqKKdmCMEKOV | | Supplier#000000776 | nklfFoSkCwf,ooSuF | | Supplier#000000823 | gC0DrEG5U,v893fp3nj mmXa6rYhJ0tjpJ | | Supplier#000000828 | 0B2aPqJ6KTEr2fqxuC7z | | Supplier#000000941 | gqG2XEnVlzUhjjfQGYGlwk,jcaNsplI8Rleg | | Supplier#000000973 | 5 nhBZ 03rG6EcOEDkZXvt | | Supplier#000000984 | 6H6qqye iYbYzCmwWhj | | Supplier#000001149 | Nuno37wiZOjNGHF | | Supplier#000001201 | Seh4D7pi9UdK,XQkF46A0O2N | | Supplier#000001309 | 72RNUzKzbniUnnsSs24ZzGDvmcv2Pd | | Supplier#000001344 | 6iF,zVDNTykohVKcb7FKvn82s74ez | | Supplier#000001351 | zXdoBMmmRx1wOD7GKoHHBtemXGuYKLDb,U2KP | | Supplier#000001391 | hkWoAM561QlLjBNk,SdFdIgFx | | Supplier#000001481 | ARqVvJHMxBNKl2LrfPsR Wq9ZUXh,14 | | Supplier#000001584 | gJbTkijteJxSMLmdzBSzeMAH | | Supplier#000001651 | 6rJNoWL9YL | | Supplier#000001710 | J,sdOOJwUhwPv2mrEiNEA0UZlmu5IRmgz | | Supplier#000001755 | QstBVfnY,93NsbWXCqO | | Supplier#000001869 | nogoCdaFQii,ri9rs3P8f5rPt1wVOMw9I7TmypxK | | Supplier#000001895 | lywAGDbk37fYPDS | | Supplier#000001910 | vih,zrhclXX1O9x | | Supplier#000001930 | 2jCSw3KOLHol7y5omVO13 | | Supplier#000001979 | UNW7nA,IC 5igvVsgUHA7OaLL,jOzUcT | | Supplier#000002046 | BiTDgHknmvQGT6FpZXfRX,xlnR | | Supplier#000002071 | zLH3QAtZuuOq8AoVNM | | Supplier#000002270 | HIscbvhw8N94djn,3UbPaY4R | | Supplier#000002350 | TWsO2iJGOl7v3vSwiscXp6X | | Supplier#000002409 | oy39SaSQ,FIP pzLqblhxj | | Supplier#000002520 | 5y55UzYQKByZP3 | | Supplier#000002618 | 3UtbE1kKm29kKyx09hSEBMhRLM | | Supplier#000002643 | eDN6YjGtp2dcj0IF,BKEEYjElO,sUjjcNI | | Supplier#000002649 | agDQi9iCt1cUaS | | Supplier#000002655 | i6v8dkQBuK0NSCeqQCE8 | | Supplier#000002812 | Q9sO3wZkBU5QBe0VITRWShv | | Supplier#000002888 | 3AtRoxBFh6HIBa9kdBX,6,Ml2SZGUA | | Supplier#000002910 | nlH1gjApxHkQe5SU4iVZwi2xWk88wwhTWRkSvOBB | | Supplier#000002914 | fUC4IkGB8pt1S | | Supplier#000003000 | JtDvRf4iWHJkj54PYxl | | Supplier#000003011 | vfL mV0MTdyozfRIPZkJbM1Z7Lcm2NCPIj6qSgBz | | Supplier#000003038 | F5Tz7P juuCbABDuW8JGomRFxqVHBWyQrsLwg4i | | Supplier#000003150 | XwSjsmzEnANK,wAQUp4Xf5xJDqR | | Supplier#000003305 | GLZJimfuzKoQcqcv4 | | Supplier#000003394 | R6D7n3WrQjWNGSQTb7eN ,X0oCMkhyuTHBOSPw | | Supplier#000003452 | 7tMycIKhE,pe4OL3Du | | Supplier#000003666 | ENS fE9iSrSzw,iTwA,zGorkflw | | Supplier#000003698 | lnSEu64ca4B53BfznJPg | | Supplier#000003773 | UWjSotAjkAD | | Supplier#000003837 | SYXpXaKop3 | | Supplier#000003846 | wl076KfcEpYLRegb1LfIf93b3n5HBabFK2R,mEM | | Supplier#000003862 | 0XXFhF1IDBh | | Supplier#000003868 | 5aP4VBn0t666NbGYB | | Supplier#000003880 | DZo80mSznrhCpb8 | | Supplier#000003955 | piECPB8qbn7s3XP | | Supplier#000004007 | cvlSgCCKGOwpaB iFIPx4vU2qA5b6K hz9Z91 | | Supplier#000004066 | TNBnJFDScUmsjBy6pSWTS sfMg9jpfKx | | Supplier#000004127 | EduKm3NcCc75Cd | | Supplier#000004174 | Bk97olQYwXmjYdQjwyt N | | Supplier#000004328 | euddbWZRcVMD3W | | Supplier#000004341 | ea8KZYvO7amq8A | | Supplier#000004360 | w 7kM5J,fqjiqBu4SU0UPEDqspaUEm | | Supplier#000004375 | Cmr952zcJJuW0xAYc0W0MA7N6vMcCjy | | Supplier#000004391 | pcsiJBhSEHuFHNAxR3K c | | Supplier#000004398 | khZZ0CmLip49Zncec | | Supplier#000004402 | acagGfDWzwmS,,WVBsszubFs3LOA8rDRS0I | | Supplier#000004714 | IKRla2xArMmR4p3Mbn8JV8g0 | | Supplier#000004717 | H,Suh5pN230Ol,ggx0QEh3rrvzyQsq050Lat | | Supplier#000004740 | yM0TXkhfjpObafbQhuWU | | Supplier#000004763 | W 7kS9LLh4ZgLpk2 | | Supplier#000004837 | tYHMZS4XlJjzvj34mH2PCoj | | Supplier#000004882 | e,V Bo1KZEt | | Supplier#000004913 | em,yC41xEl Fst9LwEik | | Supplier#000005005 | K6 GI4WzmbsGEOh | | Supplier#000005238 | jmtI76 8RNG8Z2BZu | | Supplier#000005289 | 62XeOur9SnXgbdjGwb9E1aJIEBr5PA9 | | Supplier#000005317 | lPOPHufNjwZaUJGVNHCC2DE FYQcKZBzHltL5 | | Supplier#000005401 | eEOlCEAaIfVexStlrgTuzwQx7vjPF6ZT dm | | Supplier#000005449 | fhc8lUuZdqWUujcVaWogowEq1WVL9Y8m1efwCl3G | | Supplier#000005472 | LlyLSmvY9GFvMN4QhHzMokW0k5d | | Supplier#000005572 | o0VYozeSbEyqck | | Supplier#000005579 | ACVEMP4IwRf | | Supplier#000005661 | pq5wuxmkIW0DyWU | | Supplier#000005676 | HInJHZisl5svSU1oKsr | | Supplier#000005815 | S6cu6cspYxHlTz2 | | Supplier#000005835 | rYoXzV3EZ77Z | | Supplier#000006103 | l32l8iaPdbHgRXoq,kdjFAj3hZk2d | | Supplier#000006173 | hBdratcVfL4LpWxsEpCRP g0AksN0CDhBZ | | Supplier#000006226 | CKuDyeGAxPHeRHwC4a | | Supplier#000006254 | g7OY1vWNUb1vxIRgEl | | Supplier#000006348 | f2KDn2rLnadX8I DZR | | Supplier#000006359 | QyUuVHYBp8sTd7Y9WveNfsz | | Supplier#000006430 | F2RrkeaNcs6po8x2PyYvcPa1rtKd,fT2AMxP | | Supplier#000006516 | 89XwFOC,hLRxGq5rL0txv0EM9F | | Supplier#000006700 | BWjerJH5kbEPu 8h9 | | Supplier#000006785 | lyo6PpwulTeN9ZfIkvWag5NucL,XMC 89Kn7U | | Supplier#000006998 | r2i3HfkSQh9dvho, NpoabdMsPBG | | Supplier#000007019 | 2GQsALzRiTt2BQum6bocdeGawkOrsjNIZ | | Supplier#000007114 | s9s4YLeLWo7fLRO3rdQKFfUnZhrZUPjOC | | Supplier#000007170 | 9vABqu hZaciXSCQrbTj | | Supplier#000007171 | DXerxFIhNRpqF9dWNRw hDOlLX gEJFxh0 | | Supplier#000007213 | 2Nrby3JJHDJyWwVNiqPtm2U JGWlZpU | | Supplier#000007219 | p5Ui3IGPcmotYu | | Supplier#000007229 | iwNoWdaURFzLAsQHxK,BeOPpI5TOTo | | Supplier#000007263 | malQPdYc8xiup2MiFuKHa | | Supplier#000007270 | TksERECGdYZRPUjkUdDRZv5pW26cOTaA1 | | Supplier#000007276 | Vi9,aBg2ychZf | | Supplier#000007334 | NPXYWdJ8L9EDr20tw9CZQsEMqXlgXzI2JC Y | | Supplier#000007400 | 7r9zZj8J,,hN2GRfWtDxzuGa | | Supplier#000007442 | DzycM1,T6kh2EutfPeFpv0Ro | | Supplier#000007456 | ITYEeccPVJi0HvnAwVs2Z | | Supplier#000007559 | Wmzx1vskciC | | Supplier#000007677 | OoTYQdxQyd7NukSaSRv | | Supplier#000007712 | DyTQD 3ajuOtHQTpI4LsWSF kSd2SE6U4COgYHQ | | Supplier#000007715 | gZHd7Yzbtv7yb7DYCCAQPJH8FRHTqi6T4w | | Supplier#000007816 | 1ejcJ545bwLWLuY6Qq4qyEExZIsp0SG | | Supplier#000007845 | agwGVTzLyRKOsZxLVi,mPWZ08Qxb | | Supplier#000007875 | E0CkoBYngcIoH | | Supplier#000007908 | ghhHapj7GK | | Supplier#000007972 | WW0GuiWP2N3kUo4f | | Supplier#000008162 | XASpbn08mRV0kgHRmUSKx | | Supplier#000008235 | TjVWq6bTdGJB | | Supplier#000008249 | PwUjvlMk y72zaMRtZQ8trbCmu4j | | Supplier#000008309 | 6P,FQbW6sJouqunvttVO6vEeY | | Supplier#000008339 | uWw8 P6u,S | | Supplier#000008343 | BbHngAVqj0J8 | | Supplier#000008349 | 8Hkx1IDd0mZCTX | | Supplier#000008377 | ,Yk0mflw2LqQCTxMYR sU2juj5DorUAG4w6i | | Supplier#000008468 | 5R4jsweitleustYlE3w,u5otW | | Supplier#000008523 | C4ocdfNu5I2nnnVG2xSd3016J6KNLIg | | Supplier#000008580 | t5ri71bM6Sox3riP4JUZsMMNC | | Supplier#000008638 | yxj50B 8aMql | | Supplier#000008642 | qnN9N9du9Dg2arf6kjD xW0DjMT9cM | | Supplier#000008651 | pfw32RGA7BPXrUiavYqE | | Supplier#000008679 | JWFVoSsCwn9p8o | | Supplier#000008704 | a6DjHp0B6mifKBtqUk,C | | Supplier#000008737 | MsdGxF9Xoq9 8s | | Supplier#000008820 | uAsBvPBNsEsO | | Supplier#000008829 | lNcY7xNLDonCw TuRYL | | Supplier#000008947 | 1Ij3T0egGHnVbLich98HzY,UeCdVbxzYa ZpKDVc | | Supplier#000008964 | U2YJW,Y1xCbUWbjuovtzsLfsl | | Supplier#000008974 | 4JCXOJ3MyPfa51mIf,MQu | | Supplier#000008997 | KY MmMEcyQ6FEDCooFj xa uCwF2GbaeA8 | | Supplier#000009065 | ZELuiqWrWbJV9zAuco1OnXKTJClhR | | Supplier#000009114 | nkn6bcPvlP5w,lUpO0nZTBSj | | Supplier#000009125 | IQbCXbN1mmght | | Supplier#000009131 | gDBXgWtg4rTxu0WUJhhV | | Supplier#000009149 | yKX,bKryD6YtvF,cVLIKC0Z6rN | | Supplier#000009182 | z56kNgeqaWQ1kHFBp | | Supplier#000009220 | N4y,vP kdArpcmdypBh,fJVVB | | Supplier#000009226 | yzT10vNTFJ | | Supplier#000009288 | 251AA4ziZ3d7TTWXLGnXjb4BnXv | | Supplier#000009360 | 1NVjjX8zMjyBX2UapDTP0Sz | | Supplier#000009381 | rhCTm7QehIznqd8 Np7VT,H5J5zSGr | | Supplier#000009403 | 70841REghyWBrHyyg762Jh4sjCG7CKaIc | | Supplier#000009504 | Rqt07,ANI92kj1oU | | Supplier#000009598 | PnTAz7rNRLVDFO3zoo2QRTlh4o | | Supplier#000009609 | LV2rJUGfr0k3dPNRqufG1IoYHzV | | Supplier#000009619 | K0RwcJ9S75Xil jqKukFoDNkD | | Supplier#000009626 | Nm1FnIh4asUR3EnXv2Pvy3gXqI9es | | Supplier#000009738 | 15RRSVTuOzwdMP LmfCtIguMGXK | | Supplier#000009770 | Ag, SZfowit580QPDdbP8kmFHdpZ9ASI | | Supplier#000009865 | extcOh9ZrdDCMsHhhsFTkTUAh,HM2UQ2qa8sRo | | Supplier#000009866 | Auh6aZnOnQG1pPYKZ5o9ATramJBA | | Supplier#000009890 | izJXemCM Ikpgxk | | Supplier#000009937 | edZ9HQJ0KJAU6EWknTiDghKfRLHq6vtFqdey,0l | | Supplier#000009954 | VzElx9ihlXFJLIQw2Hn4bC2 | | Supplier#000009958 | ggiiSA4CSyvhwQUYjdJhWlKEY9PAfs | +--------------------+------------------------------------------+ 177 rows in set Q21 +--------------------+---------+ | s_name | numwait | +--------------------+---------+ | Supplier#000009302 | 21 | | Supplier#000000342 | 20 | | Supplier#000000632 | 19 | | Supplier#000002196 | 19 | | Supplier#000003325 | 18 | | Supplier#000003915 | 18 | | Supplier#000005045 | 18 | | Supplier#000006442 | 18 | | Supplier#000003093 | 17 | | Supplier#000004498 | 17 | | Supplier#000000906 | 16 | | Supplier#000001183 | 16 | | Supplier#000001477 | 16 | | Supplier#000006043 | 16 | | Supplier#000000689 | 15 | | Supplier#000001955 | 15 | | Supplier#000002066 | 15 | | Supplier#000002146 | 15 | | Supplier#000003253 | 15 | | Supplier#000003527 | 15 | | Supplier#000003947 | 15 | | Supplier#000004915 | 15 | | Supplier#000005248 | 15 | | Supplier#000006718 | 15 | | Supplier#000007773 | 15 | | Supplier#000008121 | 15 | | Supplier#000008169 | 15 | | Supplier#000008645 | 15 | | Supplier#000008684 | 15 | | Supplier#000009079 | 15 | | Supplier#000009956 | 15 | | Supplier#000000737 | 14 | | Supplier#000000775 | 14 | | Supplier#000001474 | 14 | | Supplier#000001502 | 14 | | Supplier#000003196 | 14 | | Supplier#000004415 | 14 | | Supplier#000004940 | 14 | | Supplier#000005253 | 14 | | Supplier#000005703 | 14 | | Supplier#000006308 | 14 | | Supplier#000006789 | 14 | | Supplier#000007161 | 14 | | Supplier#000007952 | 14 | | Supplier#000008062 | 14 | | Supplier#000008414 | 14 | | Supplier#000008442 | 14 | | Supplier#000008508 | 14 | | Supplier#000000300 | 13 | | Supplier#000000727 | 13 | | Supplier#000000921 | 13 | | Supplier#000000992 | 13 | | Supplier#000001282 | 13 | | Supplier#000001582 | 13 | | Supplier#000001662 | 13 | | Supplier#000001683 | 13 | | Supplier#000002933 | 13 | | Supplier#000003177 | 13 | | Supplier#000003428 | 13 | | Supplier#000003640 | 13 | | Supplier#000004842 | 13 | | Supplier#000004951 | 13 | | Supplier#000005795 | 13 | | Supplier#000005981 | 13 | | Supplier#000006118 | 13 | | Supplier#000006433 | 13 | | Supplier#000006484 | 13 | | Supplier#000007268 | 13 | | Supplier#000008599 | 13 | | Supplier#000008675 | 13 | | Supplier#000009474 | 13 | | Supplier#000009521 | 13 | | Supplier#000009853 | 13 | | Supplier#000000021 | 12 | | Supplier#000000211 | 12 | | Supplier#000000743 | 12 | | Supplier#000000951 | 12 | | Supplier#000001654 | 12 | | Supplier#000001868 | 12 | | Supplier#000002089 | 12 | | Supplier#000002879 | 12 | | Supplier#000003060 | 12 | | Supplier#000003215 | 12 | | Supplier#000003365 | 12 | | Supplier#000003873 | 12 | | Supplier#000003985 | 12 | | Supplier#000004452 | 12 | | Supplier#000004639 | 12 | | Supplier#000005122 | 12 | | Supplier#000005633 | 12 | | Supplier#000005671 | 12 | | Supplier#000005782 | 12 | | Supplier#000006088 | 12 | | Supplier#000006477 | 12 | | Supplier#000006508 | 12 | | Supplier#000006750 | 12 | | Supplier#000006802 | 12 | | Supplier#000008236 | 12 | | Supplier#000009294 | 12 | | Supplier#000009329 | 12 | +--------------------+---------+ 100 rows in set Q22 +-----------+---------+------------+ | cntrycode | numcust | totacctbal | +-----------+---------+------------+ | 10 | 882 | 6606081.31 | | 11 | 899 | 6702253.34 | | 19 | 963 | 7230776.82 | | 20 | 916 | 6824676.02 | | 22 | 894 | 6636740.03 | | 26 | 861 | 6404695.86 | | 27 | 877 | 6565078.99 | +-----------+---------+------------+ 7 rows in set","title":"6. Expected Results"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/","text":"How to connect MatrixOne with ORMs Apart from connecting with JDBC, more typically, we'll connect to our MySQL database using an Object Relational Mapping (ORM) Framework. We will introduce how to connect to MatrixOne with Spring Data JPA and MyBatis in this article. MyBatis MyBatis was introduced in 2010 and is a SQL mapper framework with simplicity as its strength. In another tutorial, we talked about how to build a CRUD application with MyBatis and Spring Boot .Here, we'll focus on how to configure MyBatis with MatrixOne directly. 1. Add MyBatis-Spring-Boot-Starter in Pom.xml MyBatis applications are built on top of the Spring Boot. For that, you need to add this module to pom.xml which is created when you choose a Maven project. <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> 2. Add Configuration You need to store some of the given parameters inside the application.properties . Five properties usually need to be modified: spring.datasource.driver-class-name : Driver name for MySQL connector. spring.datasource.url : JDBC connection URL with its parameters. spring.datasource.username : Database username. spring.datasource.password : Database password. mybatis.mapper-locations : Locations of Mapper XML config file. MatrixOne's recommended configuration is as below: spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=dump spring.datasource.password=111 mybatis.mapper-locations=classpath:mapping/*xml Note JDBC connection URL with recommended configuration is necessary, otherwise the connection will fail. Spring Data JPA Spring Data JPA is a robust framework that helps reduce boilerplate code and provides a mechanism for implementing basic CRUD operations via one of several predefined repository interfaces. In addition to this, it has many other useful features. 1. Add spring-boot-starter-data-jpa in Pom.xml Spring Data JPA applications are built on top of the Spring Boot. For that, you need to add this module to pom.xml which is created when you choose a Maven project. <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> 2. Add Configuration You need to store some of the given parameters inside the application.properties . Five properties usually need to be modified: spring.datasource.driver-class-name : Driver name for MySQL connector. spring.datasource.url : JDBC connection URL with its parameters. spring.datasource.username : Database username. spring.datasource.password : Database password. spring.jpa.properties.hibernate.dialect : The SQL dialect makes Hibernate generate better SQL for the chosen database. MatrixOne only supports org.hibernate.dialect.MySQLDialect . spring.jpa.hibernate.ddl-auto \uff1aThis property takes an enum that controls the schema generation in a more controlled way. The possible options and effects are in the following table. MatrixOne only supports none and validate . Option Effect none No database Schema initialization create Drops and creates the schema at the application startup. With this option, all your data will be gone on each startup. create-drop Creates schema at the startup and destroys the schema on context closure. Useful for unit tests. validate Only checks if the Schema matches the Entities. If the schema doesn\u2019t match, then the application startup will fail. Makes no changes to the database. update Updates the schema only if necessary. For example, If a new field was added in an entity, then it will simply alter the table for a new column without destroying the data. MatrixOne's recommended configuration is as below: spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=dump spring.datasource.password=111 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.hibernate.ddl-auto = validate","title":"ORMs"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#how-to-connect-matrixone-with-orms","text":"Apart from connecting with JDBC, more typically, we'll connect to our MySQL database using an Object Relational Mapping (ORM) Framework. We will introduce how to connect to MatrixOne with Spring Data JPA and MyBatis in this article.","title":"How to connect MatrixOne with ORMs"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#mybatis","text":"MyBatis was introduced in 2010 and is a SQL mapper framework with simplicity as its strength. In another tutorial, we talked about how to build a CRUD application with MyBatis and Spring Boot .Here, we'll focus on how to configure MyBatis with MatrixOne directly.","title":"MyBatis"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#1-add-mybatis-spring-boot-starter-in-pomxml","text":"MyBatis applications are built on top of the Spring Boot. For that, you need to add this module to pom.xml which is created when you choose a Maven project. <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency>","title":"1. Add MyBatis-Spring-Boot-Starter in Pom.xml"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#2-add-configuration","text":"You need to store some of the given parameters inside the application.properties . Five properties usually need to be modified: spring.datasource.driver-class-name : Driver name for MySQL connector. spring.datasource.url : JDBC connection URL with its parameters. spring.datasource.username : Database username. spring.datasource.password : Database password. mybatis.mapper-locations : Locations of Mapper XML config file. MatrixOne's recommended configuration is as below: spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=dump spring.datasource.password=111 mybatis.mapper-locations=classpath:mapping/*xml Note JDBC connection URL with recommended configuration is necessary, otherwise the connection will fail.","title":"2. Add Configuration"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#spring-data-jpa","text":"Spring Data JPA is a robust framework that helps reduce boilerplate code and provides a mechanism for implementing basic CRUD operations via one of several predefined repository interfaces. In addition to this, it has many other useful features.","title":"Spring Data JPA"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#1-add-spring-boot-starter-data-jpa-in-pomxml","text":"Spring Data JPA applications are built on top of the Spring Boot. For that, you need to add this module to pom.xml which is created when you choose a Maven project. <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency>","title":"1. Add spring-boot-starter-data-jpa in Pom.xml"},{"location":"MatrixOne/Tutorial/connect_mo_with_orm/#2-add-configuration_1","text":"You need to store some of the given parameters inside the application.properties . Five properties usually need to be modified: spring.datasource.driver-class-name : Driver name for MySQL connector. spring.datasource.url : JDBC connection URL with its parameters. spring.datasource.username : Database username. spring.datasource.password : Database password. spring.jpa.properties.hibernate.dialect : The SQL dialect makes Hibernate generate better SQL for the chosen database. MatrixOne only supports org.hibernate.dialect.MySQLDialect . spring.jpa.hibernate.ddl-auto \uff1aThis property takes an enum that controls the schema generation in a more controlled way. The possible options and effects are in the following table. MatrixOne only supports none and validate . Option Effect none No database Schema initialization create Drops and creates the schema at the application startup. With this option, all your data will be gone on each startup. create-drop Creates schema at the startup and destroys the schema on context closure. Useful for unit tests. validate Only checks if the Schema matches the Entities. If the schema doesn\u2019t match, then the application startup will fail. Makes no changes to the database. update Updates the schema only if necessary. For example, If a new field was added in an entity, then it will simply alter the table for a new column without destroying the data. MatrixOne's recommended configuration is as below: spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 spring.datasource.username=dump spring.datasource.password=111 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.hibernate.ddl-auto = validate","title":"2. Add Configuration"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/","text":"Build a simple Java CRUD demo with MatrixOne Note The source code of this demo can be downloaded at github . Setup your environment Before you start, make sure you have downloaded and installed the following software. MatrixOne 0.5.1 : Follow the installation instruction and launch MatrixOne 0.5.1. Create a database by MySQL client. mysql> CREATE DATABASE TEST; lntelIiJ IDEA(2022.2.1 or later version) . JDK 8+ version : Choose the version according to your OS. MySQL JDBC connector 8.0+ version : It's recommanded to download the platform independent version, and unzip the downloaded file. !Note\uff1aWe take IDEA as an IDE example to demonstrate the process, you are free to choose Eclipse or other IDE tools for the same purpose. Initialize a new Java project Launch IDEA, and create a new Java project as below: In your Project Setting > Libraries , import the mysql-connector-java-8.0.xx.jar file. Write Java code to connect with MatrixOne Firstly we create a Java class named as JDBCUtils as a connection utility. This class will serve as a tool to connect with MatrixOne and execute SQL queries. import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class JDBCUtils { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/TEST\"; private static String jdbcUsername = \"dump\"; private static String jdbcPassword = \"111\"; public static Connection getConnection() { Connection connection = null; try { connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); } catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } return connection; } public static void printSQLException(SQLException ex) { for (Throwable e : ex) { if (e instanceof SQLException) { e.printStackTrace(System.err); System.err.println(\"SQLState: \" + ((SQLException) e).getSQLState()); System.err.println(\"Error Code: \" + ((SQLException) e).getErrorCode()); System.err.println(\"Message: \" + e.getMessage()); Throwable t = ex.getCause(); while (t != null) { System.out.println(\"Cause: \" + t); t = t.getCause(); } } } } } Secondly we write example code for Create/Insert/Update/Delete operations with MatrixOne. Create import java.sql.Connection; import java.sql.SQLException; import java.sql.Statement; public class Create { private static final String createTableSQL = \"create table student (\\r\\n\" + \" id int primary key,\\r\\n\" + \" name varchar(20),\\r\\n\" + \" email varchar(20),\\r\\n\" + \" country varchar(20),\\r\\n\" + \" age int\\r\\n\" + \" );\"; public static void main(String[] argv) throws SQLException { Create createTable = new Create(); createTable.createTable(); } public void createTable() throws SQLException { System.out.println(createTableSQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object Statement statement = connection.createStatement();) { // Step 3: Execute the query or update query statement.execute(createTableSQL); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Executing this code will create a table in the TEST database. mysql> show create table student; +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | student | CREATE TABLE `student` ( `id` INT DEFAULT NULL, `name` VARCHAR(20) DEFAULT NULL, `email` VARCHAR(20) DEFAULT NULL, `country` VARCHAR(20) DEFAULT NULL, `age` INT DEFAULT NULL, PRIMARY KEY (`id`) ) | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) Insert import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Insert { private static final String INSERT_STUDENT_SQL = \"INSERT INTO student\" + \" (id, name, email, country, age) VALUES \" + \" (?, ?, ?, ?, ?);\"; public static void main(String[] argv) throws SQLException { Insert insertTable = new Insert(); insertTable.insertRecord(); } public void insertRecord() throws SQLException { System.out.println(INSERT_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(INSERT_STUDENT_SQL)) { preparedStatement.setInt(1, 1); preparedStatement.setString(2, \"Tony\"); preparedStatement.setString(3, \"tony@gmail.com\"); preparedStatement.setString(4, \"US\"); preparedStatement.setString(5, \"20\"); System.out.println(preparedStatement); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result: mysql> select * from student; +------+------+----------------+---------+------+ | id | name | email | country | age | +------+------+----------------+---------+------+ | 1 | Tony | tony@gmail.com | US | 20 | +------+------+----------------+---------+------+ 1 row in set (0.01 sec) Update import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Update { private static final String UPDATE_STUDENT_SQL = \"update student set name = ? where id = ?;\"; public static void main(String[] argv) throws SQLException { Update updateTable = new Update(); updateTable.updateRecord(); } public void updateRecord() throws SQLException { System.out.println(UPDATE_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STUDENT_SQL)) { preparedStatement.setString(1, \"Ram\"); preparedStatement.setInt(2, 1); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result: mysql> select * from student; +------+------+----------------+---------+------+ | id | name | email | country | age | +------+------+----------------+---------+------+ | 1 | Ram | tony@gmail.com | US | 20 | +------+------+----------------+---------+------+ 1 row in set (0.00 sec) SELECT import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class Select { private static final String QUERY = \"select id,name,email,country,age from student where id =?\"; public static void main(String[] args) { // using try-with-resources to avoid closing resources (boiler plate code) // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(QUERY);) { preparedStatement.setInt(1, 1); System.out.println(preparedStatement); // Step 3: Execute the query or update query ResultSet rs = preparedStatement.executeQuery(); // Step 4: Process the ResultSet object. while (rs.next()) { int id = rs.getInt(\"id\"); String name = rs.getString(\"name\"); String email = rs.getString(\"email\"); String country = rs.getString(\"country\"); String password = rs.getString(\"age\"); System.out.println(id + \",\" + name + \",\" + email + \",\" + country + \",\" + password); } } catch (SQLException e) { JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result:","title":"Build a simple Java CRUD demo with MatrixOne"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#build-a-simple-java-crud-demo-with-matrixone","text":"Note The source code of this demo can be downloaded at github .","title":"Build a simple Java CRUD demo with MatrixOne"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#setup-your-environment","text":"Before you start, make sure you have downloaded and installed the following software. MatrixOne 0.5.1 : Follow the installation instruction and launch MatrixOne 0.5.1. Create a database by MySQL client. mysql> CREATE DATABASE TEST; lntelIiJ IDEA(2022.2.1 or later version) . JDK 8+ version : Choose the version according to your OS. MySQL JDBC connector 8.0+ version : It's recommanded to download the platform independent version, and unzip the downloaded file. !Note\uff1aWe take IDEA as an IDE example to demonstrate the process, you are free to choose Eclipse or other IDE tools for the same purpose.","title":"Setup your environment"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#initialize-a-new-java-project","text":"Launch IDEA, and create a new Java project as below: In your Project Setting > Libraries , import the mysql-connector-java-8.0.xx.jar file.","title":"Initialize a new Java project"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#write-java-code-to-connect-with-matrixone","text":"Firstly we create a Java class named as JDBCUtils as a connection utility. This class will serve as a tool to connect with MatrixOne and execute SQL queries. import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; public class JDBCUtils { private static String jdbcURL = \"jdbc:mysql://127.0.0.1:6001/TEST\"; private static String jdbcUsername = \"dump\"; private static String jdbcPassword = \"111\"; public static Connection getConnection() { Connection connection = null; try { connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword); } catch (SQLException e) { // TODO Auto-generated catch block e.printStackTrace(); } return connection; } public static void printSQLException(SQLException ex) { for (Throwable e : ex) { if (e instanceof SQLException) { e.printStackTrace(System.err); System.err.println(\"SQLState: \" + ((SQLException) e).getSQLState()); System.err.println(\"Error Code: \" + ((SQLException) e).getErrorCode()); System.err.println(\"Message: \" + e.getMessage()); Throwable t = ex.getCause(); while (t != null) { System.out.println(\"Cause: \" + t); t = t.getCause(); } } } } } Secondly we write example code for Create/Insert/Update/Delete operations with MatrixOne.","title":"Write  Java code to connect with MatrixOne"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#create","text":"import java.sql.Connection; import java.sql.SQLException; import java.sql.Statement; public class Create { private static final String createTableSQL = \"create table student (\\r\\n\" + \" id int primary key,\\r\\n\" + \" name varchar(20),\\r\\n\" + \" email varchar(20),\\r\\n\" + \" country varchar(20),\\r\\n\" + \" age int\\r\\n\" + \" );\"; public static void main(String[] argv) throws SQLException { Create createTable = new Create(); createTable.createTable(); } public void createTable() throws SQLException { System.out.println(createTableSQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object Statement statement = connection.createStatement();) { // Step 3: Execute the query or update query statement.execute(createTableSQL); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Executing this code will create a table in the TEST database. mysql> show create table student; +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | student | CREATE TABLE `student` ( `id` INT DEFAULT NULL, `name` VARCHAR(20) DEFAULT NULL, `email` VARCHAR(20) DEFAULT NULL, `country` VARCHAR(20) DEFAULT NULL, `age` INT DEFAULT NULL, PRIMARY KEY (`id`) ) | +---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec)","title":"Create"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#insert","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Insert { private static final String INSERT_STUDENT_SQL = \"INSERT INTO student\" + \" (id, name, email, country, age) VALUES \" + \" (?, ?, ?, ?, ?);\"; public static void main(String[] argv) throws SQLException { Insert insertTable = new Insert(); insertTable.insertRecord(); } public void insertRecord() throws SQLException { System.out.println(INSERT_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(INSERT_STUDENT_SQL)) { preparedStatement.setInt(1, 1); preparedStatement.setString(2, \"Tony\"); preparedStatement.setString(3, \"tony@gmail.com\"); preparedStatement.setString(4, \"US\"); preparedStatement.setString(5, \"20\"); System.out.println(preparedStatement); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result: mysql> select * from student; +------+------+----------------+---------+------+ | id | name | email | country | age | +------+------+----------------+---------+------+ | 1 | Tony | tony@gmail.com | US | 20 | +------+------+----------------+---------+------+ 1 row in set (0.01 sec)","title":"Insert"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#update","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; public class Update { private static final String UPDATE_STUDENT_SQL = \"update student set name = ? where id = ?;\"; public static void main(String[] argv) throws SQLException { Update updateTable = new Update(); updateTable.updateRecord(); } public void updateRecord() throws SQLException { System.out.println(UPDATE_STUDENT_SQL); // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(UPDATE_STUDENT_SQL)) { preparedStatement.setString(1, \"Ram\"); preparedStatement.setInt(2, 1); // Step 3: Execute the query or update query preparedStatement.executeUpdate(); } catch (SQLException e) { // print SQL exception information JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result: mysql> select * from student; +------+------+----------------+---------+------+ | id | name | email | country | age | +------+------+----------------+---------+------+ | 1 | Ram | tony@gmail.com | US | 20 | +------+------+----------------+---------+------+ 1 row in set (0.00 sec)","title":"Update"},{"location":"MatrixOne/Tutorial/develop-java-crud-demo/#select","text":"import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; public class Select { private static final String QUERY = \"select id,name,email,country,age from student where id =?\"; public static void main(String[] args) { // using try-with-resources to avoid closing resources (boiler plate code) // Step 1: Establishing a Connection try (Connection connection = JDBCUtils.getConnection(); // Step 2:Create a statement using connection object PreparedStatement preparedStatement = connection.prepareStatement(QUERY);) { preparedStatement.setInt(1, 1); System.out.println(preparedStatement); // Step 3: Execute the query or update query ResultSet rs = preparedStatement.executeQuery(); // Step 4: Process the ResultSet object. while (rs.next()) { int id = rs.getInt(\"id\"); String name = rs.getString(\"name\"); String email = rs.getString(\"email\"); String country = rs.getString(\"country\"); String password = rs.getString(\"age\"); System.out.println(id + \",\" + name + \",\" + email + \",\" + country + \",\" + password); } } catch (SQLException e) { JDBCUtils.printSQLException(e); } // Step 4: try-with-resource statement will auto close the connection. } } Execution result:","title":"SELECT"},{"location":"MatrixOne/Tutorial/develop-python-application/","text":"Build a simple stock analysis Python App with MatrixOne This tutorial shows you how to build a simple Python application with MatrixOne. About the demo This demo will store the historical stock data of the China stock market and make a simple analysis to find the best stocks to buy. The basic idea is that we track the P/E (Price-to-Earnings) and P/B (Price-to-Book) levels of each stock since these can represent a company's market capitalization. If you are not familiar with these two concepts, please refer to P/E and P/B . Every day after the market closes, we compare the P/E and P/B values with the historical lowest P/E and P/B. If the current P/E or P/B is even lower than the historical lowest, the stock is very likely underestimated. We can further investigate its reason for falling and judge if it's a good time to buy it. Source Code You can find the source code of this demo at matrix_one_app . Before you start Before you start, you need to have a Tushare account and get an API token. If you haven't signed up for Tushare, you can sign up for it at https://tushare.pro/ and you can find your API token at https://tushare.pro/user/token# . Info Tushare is an open-source utility for crawling historical data of China stocks. It has a complete dataset, but pay attention to their rules of API access limit and frequency. Besides the data source account, you need to at least have this two basic software installed: Python 3.x MatrixOne You may refer to Python 3 installation tutorial and MatrixOne installation for more details. Moreover, we need to install dependents to use Tushare and access MatrixOne: pymysql python libraries Tushare : Download matrix_one_app and install dependent in the path matrixone_python_app/stock_analysis cd matrixone_python_app/stock_analysis pip3 install -r requirements.txt Info Pymysql is the only ORM tool supported by MatrixOne. The other python MySQL ORM tools as SQLAlchemy , mysql-connector , MySQLdb are not supported yet. Step1: prepare and load the historical dataset First, we need to load the historical stock data in MatrixOne. As Tushare interface only allows a fetch of 5000 rows of data at once, we only have to collect the latest 5000 trade days data for each stock. Each year there are roughly 250 trade dates. 5000 makes almost 20 years of data, which largely satisfies our demo. The below code will set up tushare interface and get the list of stocks. import tushare as ts import time # Set Tushare data source ts . set_token ( 'YOUR_TUSHARE_API_TOKEN' ) pro = ts . pro_api () # Get the list of stocks pool = pro . stock_basic ( exchange = '' , list_status = 'L' , adj = 'qfq' , fields = 'ts_code,symbol,name,area,industry,fullname,list_date, market,exchange,is_hs' ) As we only need the P/E and P/B information, we call the daily_basic method and get each stock with data frames with ts_code , trade_date , pe and pb fields. Without any specification of start date and end date, Tushare will automatically output 5000 lastest records. j = 1 for i in pool . ts_code : print ( 'Getting %d stock\uff0cStock Code %s .' % ( j , i )) #The interface is limited to be queried 200 times/minute, some little delays are necessary time . sleep ( 0.301 ) j += 1 #Get stock P/E and P/B data frames df = pro . daily_basic ( ** { \"ts_code\" : i , \"trade_date\" : \"\" , \"start_date\" : \"\" , \"end_date\" : \"\" , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"trade_date\" , \"pe\" , \"pb\" ]) With the data ready, we need to load them into MatrixOne. We use pymysql as the python-MatrixOne connector to run SQLs in MatrixOne. Prior to the below code, the MatrixOne server must be launched and a database called stock needs to be created first. MatrixOne: mysql > CREATE DATABASE stock . Python: import pymysql # Open a MatrixOne connection db = pymysql.connect(host='127.0.0.1', port=6001, user='dump', password='111', database='stock') # Create a cursor object cursor = db.cursor() # Create PE table cursor.execute('CREATE TABLE IF NOT EXISTS pe(ts_code VARCHAR(255), trade_date VARCHAR(255), pe FLOAT, pb FLOAT)') Load each 5000 records of data into MatrixOne: if df . empty == False : # Fill P/E and P/B values which are NaN df = df . fillna ( 0.0 ) val_to_insert = df . values . tolist () cursor . executemany ( \" insert into pe (ts_code, trade_date,pe,pb) values ( %s , %s , %s , %s )\" , val_to_insert ) Step2: find the historical lowest P/E or P/B stock After we load the historical stock data into MatrixOne, we have about 11 million records. mysql > select count ( * ) from pe ; + ----------+ | count ( * ) | + ----------+ | 11233508 | + ----------+ 1 row in set ( 0 . 16 sec ) Now we run a SQL to calculate the lowest P/E and P/B of each stock. # Find stocks that the current P/E is even lower than the historical lowest cursor . execute ( 'select ts_code,min(pe) from pe where pe>0 group by ts_code order by ts_code' ) # Fetch the result as python object value = cursor . fetchall () # Find stocks that the current P/B is even lower than the historical lowest cursor . execute ( 'select ts_code,min(pb) from pe where pb>0 group by ts_code order by ts_code' ) # Fetch the result as python object value = cursor . fetchall () Then we call Tushare daily_basic interface again to get the current P/E and P/B level and make a search to locate the stock whose current P/E or P/B is even lower than the historical lowest. You could of course switch any trade date you want for comparison. We take P/E as an example. df = pro . daily_basic ( ** { \"ts_code\" : \"\" , \"trade_date\" : sys . argv [ 1 ], \"start_date\" : \"\" , \"end_date\" : \"\" , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"pe\" ]) df = df . fillna ( 0.0 ) for i in range ( 0 , len ( value )): ts_code , min_pe = value [ i ] for j in range ( 0 , len ( df . ts_code )): if ts_code == df . ts_code [ j ] and min_pe > df . pe [ j ] > 0 : logging . getLogger () . info ( \"ts_code: %s \" , ts_code ) logging . getLogger () . info ( \"history lowest PE : %f \" , min_pe ) logging . getLogger () . info ( \"current PE found: %f \" , df . pe [ j ]) This will print every stock with the lowest ever P/E or P/B. They are usually good choices to buy if they are not experiencing big trouble. Step3: Update our dataset We already have a lot of historical data stored in MatrixOne; each time we run an analysis, we usually have been through a new trading day. The dataset needs to be updated with the latest data, otherwise next time you will still compare yourself with the old data. We don't need to insert all data again, we just insert the data with the latest trading dates. # get updating trading dates by user argument inputs df = pro . daily_basic ( ** { \"ts_code\" : i , \"trade_date\" : \"\" , \"start_date\" : self . startDate ,, \"end_date\" : self . endDate , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"trade_date\" , \"pe\" , \"pb\" ]) # append update to MatrixOne if df . empty == False : df = df . fillna ( 0.0 ) val_to_insert = df . values . tolist () print ( val_to_insert ) cursor . executemany ( \" insert into pe (ts_code, trade_date,pe,pb) values ( %s , %s , %s , %s )\" , val_to_insert )","title":"Python stock analysis Demo"},{"location":"MatrixOne/Tutorial/develop-python-application/#build-a-simple-stock-analysis-python-app-with-matrixone","text":"This tutorial shows you how to build a simple Python application with MatrixOne.","title":"Build a simple stock analysis Python App with MatrixOne"},{"location":"MatrixOne/Tutorial/develop-python-application/#about-the-demo","text":"This demo will store the historical stock data of the China stock market and make a simple analysis to find the best stocks to buy. The basic idea is that we track the P/E (Price-to-Earnings) and P/B (Price-to-Book) levels of each stock since these can represent a company's market capitalization. If you are not familiar with these two concepts, please refer to P/E and P/B . Every day after the market closes, we compare the P/E and P/B values with the historical lowest P/E and P/B. If the current P/E or P/B is even lower than the historical lowest, the stock is very likely underestimated. We can further investigate its reason for falling and judge if it's a good time to buy it.","title":"About the demo"},{"location":"MatrixOne/Tutorial/develop-python-application/#source-code","text":"You can find the source code of this demo at matrix_one_app .","title":"Source Code"},{"location":"MatrixOne/Tutorial/develop-python-application/#before-you-start","text":"Before you start, you need to have a Tushare account and get an API token. If you haven't signed up for Tushare, you can sign up for it at https://tushare.pro/ and you can find your API token at https://tushare.pro/user/token# . Info Tushare is an open-source utility for crawling historical data of China stocks. It has a complete dataset, but pay attention to their rules of API access limit and frequency. Besides the data source account, you need to at least have this two basic software installed: Python 3.x MatrixOne You may refer to Python 3 installation tutorial and MatrixOne installation for more details. Moreover, we need to install dependents to use Tushare and access MatrixOne: pymysql python libraries Tushare : Download matrix_one_app and install dependent in the path matrixone_python_app/stock_analysis cd matrixone_python_app/stock_analysis pip3 install -r requirements.txt Info Pymysql is the only ORM tool supported by MatrixOne. The other python MySQL ORM tools as SQLAlchemy , mysql-connector , MySQLdb are not supported yet.","title":"Before you start"},{"location":"MatrixOne/Tutorial/develop-python-application/#step1-prepare-and-load-the-historical-dataset","text":"First, we need to load the historical stock data in MatrixOne. As Tushare interface only allows a fetch of 5000 rows of data at once, we only have to collect the latest 5000 trade days data for each stock. Each year there are roughly 250 trade dates. 5000 makes almost 20 years of data, which largely satisfies our demo. The below code will set up tushare interface and get the list of stocks. import tushare as ts import time # Set Tushare data source ts . set_token ( 'YOUR_TUSHARE_API_TOKEN' ) pro = ts . pro_api () # Get the list of stocks pool = pro . stock_basic ( exchange = '' , list_status = 'L' , adj = 'qfq' , fields = 'ts_code,symbol,name,area,industry,fullname,list_date, market,exchange,is_hs' ) As we only need the P/E and P/B information, we call the daily_basic method and get each stock with data frames with ts_code , trade_date , pe and pb fields. Without any specification of start date and end date, Tushare will automatically output 5000 lastest records. j = 1 for i in pool . ts_code : print ( 'Getting %d stock\uff0cStock Code %s .' % ( j , i )) #The interface is limited to be queried 200 times/minute, some little delays are necessary time . sleep ( 0.301 ) j += 1 #Get stock P/E and P/B data frames df = pro . daily_basic ( ** { \"ts_code\" : i , \"trade_date\" : \"\" , \"start_date\" : \"\" , \"end_date\" : \"\" , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"trade_date\" , \"pe\" , \"pb\" ]) With the data ready, we need to load them into MatrixOne. We use pymysql as the python-MatrixOne connector to run SQLs in MatrixOne. Prior to the below code, the MatrixOne server must be launched and a database called stock needs to be created first. MatrixOne: mysql > CREATE DATABASE stock . Python: import pymysql # Open a MatrixOne connection db = pymysql.connect(host='127.0.0.1', port=6001, user='dump', password='111', database='stock') # Create a cursor object cursor = db.cursor() # Create PE table cursor.execute('CREATE TABLE IF NOT EXISTS pe(ts_code VARCHAR(255), trade_date VARCHAR(255), pe FLOAT, pb FLOAT)') Load each 5000 records of data into MatrixOne: if df . empty == False : # Fill P/E and P/B values which are NaN df = df . fillna ( 0.0 ) val_to_insert = df . values . tolist () cursor . executemany ( \" insert into pe (ts_code, trade_date,pe,pb) values ( %s , %s , %s , %s )\" , val_to_insert )","title":"Step1: prepare and load the historical dataset"},{"location":"MatrixOne/Tutorial/develop-python-application/#step2-find-the-historical-lowest-pe-or-pb-stock","text":"After we load the historical stock data into MatrixOne, we have about 11 million records. mysql > select count ( * ) from pe ; + ----------+ | count ( * ) | + ----------+ | 11233508 | + ----------+ 1 row in set ( 0 . 16 sec ) Now we run a SQL to calculate the lowest P/E and P/B of each stock. # Find stocks that the current P/E is even lower than the historical lowest cursor . execute ( 'select ts_code,min(pe) from pe where pe>0 group by ts_code order by ts_code' ) # Fetch the result as python object value = cursor . fetchall () # Find stocks that the current P/B is even lower than the historical lowest cursor . execute ( 'select ts_code,min(pb) from pe where pb>0 group by ts_code order by ts_code' ) # Fetch the result as python object value = cursor . fetchall () Then we call Tushare daily_basic interface again to get the current P/E and P/B level and make a search to locate the stock whose current P/E or P/B is even lower than the historical lowest. You could of course switch any trade date you want for comparison. We take P/E as an example. df = pro . daily_basic ( ** { \"ts_code\" : \"\" , \"trade_date\" : sys . argv [ 1 ], \"start_date\" : \"\" , \"end_date\" : \"\" , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"pe\" ]) df = df . fillna ( 0.0 ) for i in range ( 0 , len ( value )): ts_code , min_pe = value [ i ] for j in range ( 0 , len ( df . ts_code )): if ts_code == df . ts_code [ j ] and min_pe > df . pe [ j ] > 0 : logging . getLogger () . info ( \"ts_code: %s \" , ts_code ) logging . getLogger () . info ( \"history lowest PE : %f \" , min_pe ) logging . getLogger () . info ( \"current PE found: %f \" , df . pe [ j ]) This will print every stock with the lowest ever P/E or P/B. They are usually good choices to buy if they are not experiencing big trouble.","title":"Step2: find the historical lowest P/E or P/B stock"},{"location":"MatrixOne/Tutorial/develop-python-application/#step3-update-our-dataset","text":"We already have a lot of historical data stored in MatrixOne; each time we run an analysis, we usually have been through a new trading day. The dataset needs to be updated with the latest data, otherwise next time you will still compare yourself with the old data. We don't need to insert all data again, we just insert the data with the latest trading dates. # get updating trading dates by user argument inputs df = pro . daily_basic ( ** { \"ts_code\" : i , \"trade_date\" : \"\" , \"start_date\" : self . startDate ,, \"end_date\" : self . endDate , \"limit\" : \"\" , \"offset\" : \"\" }, fields = [ \"ts_code\" , \"trade_date\" , \"pe\" , \"pb\" ]) # append update to MatrixOne if df . empty == False : df = df . fillna ( 0.0 ) val_to_insert = df . values . tolist () print ( val_to_insert ) cursor . executemany ( \" insert into pe (ts_code, trade_date,pe,pb) values ( %s , %s , %s , %s )\" , val_to_insert )","title":"Step3: Update our dataset"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/","text":"Build a SpringBoot+Hibernate CRUD demo with MatrixOne This tutorial completes a simple Demo based on SpringBoot+Hibernate+MatrixOne+Intellij IDEA , and realizes the basic CRUD function. Before you start A brief introduction about these softwares concerned: Hibernate: Hibernate ORM is an object\u2013relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. Intellij IDEA: IntelliJ IDEA is a popular IDE for Java developers. It has a lot of plugins that can enhance our efficiency. Maven: Maven is a powerful management tool in Java that can automatically download and import Jar file according to the configuration in the pom.xml file. This feature reduces the conflicts between different versions of Jar files. Spring: Spring is one of the most popular frameworks in Java and more and more enterprise is using the Spring framework to build their project. Spring Boot is built on top of the conventional spring framework. So, it provides all the features of spring and is yet easier to use than spring. Postman: Postman is an application used for API testing. It is an HTTP client that tests HTTP requests, utilizing a graphical user interface, through which we obtain different types of responses that need to be subsequently validated. Set up environment 1. Install and Launch MatrixOne Follow the installation instruction and launch MatrixOne 0.6 . Create a database test by MySQL client. mysql> CREATE DATABASE test; 2. Create a new Spring Boot Project Using IntelliJ IDEA Choose Spring Initializer , and name the project as you want. Choose Spring Web , JDBC API , Spring Data JPA , and MySQL Driver as dependencies for this project. Click Create , the project will be created. The dependencies are listed in the pom.xml file. Usually you don't need to modify anything. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>jpademo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>jpademo</name> <description>jpademo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.jpademo.JpademoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project> 3. Modify the application.properties file Under resources folder, the MatrixOne connection and Hibernate need to be configured in application.properties file. # Application Name spring.application.name=jpademo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=dump spring.datasource.password=111 # Web application port server.port=8080 # Hibernate configurations spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.properties.hibernate.id.new_generator_mappings = false spring.jpa.properties.hibernate.format_sql = true spring.jpa.hibernate.ddl-auto = validate 4. Create table and insert some data in MatrixOne Connect to MatrixOne with MySQL client and execute the following SQL statements. mysql> USE test; mysql> CREATE TABLE IF NOT EXISTS `book` ( `id` int(11) NOT NULL AUTO_INCREMENT, `author` varchar(255) DEFAULT NULL, `category` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, `pages` int(11) DEFAULT NULL, `price` int(11) DEFAULT NULL, `publication` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); mysql> INSERT INTO `book` (`id`, `author`, `category`, `name`, `pages`, `price`, `publication`) VALUES (1, 'Antoine de Saint-Exupery', 'Fantancy', 'The Little Prince', 100, 50, 'Amazon'), (2, 'J. K. Rowling', 'Fantancy', 'Harry Potter and the Sorcerer''s Stone', 1000, 200, 'Amazon'), (3, 'Lewis Carroll', 'Fantancy', 'Alice''s Adventures in Wonderland', 1500, 240, 'Amazon'); Write Code After setting up the environment, we write code to implement a simple CRUD application. After finishing coding, you'll have a project structure as below. You can create these packages and java class in advance. We will code the Create, Update, Insert, Delete, Select operations for this demo application. 1. BookStoreController.java package com.example.jpademo.controller; import com.example.jpademo.entity.Book; import com.example.jpademo.services.IBookStoreService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Controller @RequestMapping(\"bookservice\") public class BookStoreController { @Autowired private IBookStoreService service; @GetMapping(\"books\") public ResponseEntity<List<Book>> getBooks(){ List<Book> books = service.getBooks(); return new ResponseEntity<List<Book>>(books, HttpStatus.OK); } @GetMapping(\"books/{id}\") public ResponseEntity<Book> getBook(@PathVariable(\"id\") Integer id){ Book book = service.getBook(id); return new ResponseEntity<Book>(book, HttpStatus.OK); } @PostMapping(\"books\") public ResponseEntity<Book> createBook(@RequestBody Book book){ Book b = service.createBook(book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @PutMapping(\"books/{id}\") public ResponseEntity<Book> updateBook(@PathVariable(\"id\") int id, @RequestBody Book book){ Book b = service.updateBook(id, book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @DeleteMapping(\"books/{id}\") public ResponseEntity<String> deleteBook(@PathVariable(\"id\") int id){ boolean isDeleted = service.deleteBook(id); if(isDeleted){ String responseContent = \"Book has been deleted successfully\"; return new ResponseEntity<String>(responseContent,HttpStatus.OK); } String error = \"Error while deleting book from database\"; return new ResponseEntity<String>(error,HttpStatus.INTERNAL_SERVER_ERROR); } } 2. BooStoreDAO.java package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.Query; import java.util.List; @Transactional @Repository public class BookStoreDAO implements IBookStoreDAO { @PersistenceContext private EntityManager entityManager; /** * This method is responsible to get all books available in database and return it as List<Book> */ @SuppressWarnings(\"unchecked\") @Override public List<Book> getBooks() { String hql = \"FROM Book as atcl ORDER BY atcl.id\"; return (List<Book>) entityManager.createQuery(hql).getResultList(); } /** * This method is responsible to get a particular Book detail by given book id */ @Override public Book getBook(int bookId) { return entityManager.find(Book.class, bookId); } /** * This method is responsible to create new book in database */ @Override public Book createBook(Book book) { entityManager.persist(book); Book b = getLastInsertedBook(); return b; } /** * This method is responsible to update book detail in database */ @Override public Book updateBook(int bookId, Book book) { //First We are taking Book detail from database by given book id and // then updating detail with provided book object Book bookFromDB = getBook(bookId); bookFromDB.setName(book.getName()); bookFromDB.setAuthor(book.getAuthor()); bookFromDB.setCategory(book.getCategory()); bookFromDB.setPublication(book.getPublication()); bookFromDB.setPages(book.getPages()); bookFromDB.setPrice(book.getPrice()); entityManager.flush(); //again i am taking updated result of book and returning the book object Book updatedBook = getBook(bookId); return updatedBook; } /** * This method is responsible for deleting a particular(which id will be passed that record) * record from the database */ @Override public boolean deleteBook(int bookId) { Book book = getBook(bookId); entityManager.remove(book); //we are checking here that whether entityManager contains earlier deleted book or not // if contains then book is not deleted from DB that's why returning false; boolean status = entityManager.contains(book); if(status){ return false; } return true; } /** * This method will get the latest inserted record from the database and return the object of Book class * @return book */ private Book getLastInsertedBook(){ String hql = \"from Book order by id DESC\"; Query query = entityManager.createQuery(hql); query.setMaxResults(1); Book book = (Book)query.getSingleResult(); return book; } } 3. IBookStoreDAO.java package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreDAO { List<Book> getBooks(); Book getBook(int bookId); Book createBook(Book book); Book updateBook(int bookId,Book book); boolean deleteBook(int bookId); } 4. Book.java package com.example.jpademo.entity; import javax.persistence.*; import java.io.Serializable; @Entity @Table(name=\"book\") public class Book implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy= GenerationType.AUTO) @Column(name=\"id\") private int id; @Column(name=\"name\") private String name; @Column(name=\"author\") private String author; @Column(name=\"publication\") private String publication; @Column(name=\"category\") private String category; @Column(name=\"pages\") private int pages; @Column(name=\"price\") private int price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String getPublication() { return publication; } public void setPublication(String publication) { this.publication = publication; } public String getCategory() { return category; } public void setCategory(String category) { this.category = category; } public int getPages() { return pages; } public void setPages(int pages) { this.pages = pages; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } } 5. BookStoreService.java package com.example.jpademo.services; import com.example.jpademo.dao.IBookStoreDAO; import com.example.jpademo.entity.Book; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class BookStoreService implements IBookStoreService { @Autowired private IBookStoreDAO dao; @Override public List<Book> getBooks() { return dao.getBooks(); } @Override public Book createBook(Book book) { return dao.createBook(book); } @Override public Book updateBook(int bookId, Book book) { return dao.updateBook(bookId, book); } @Override public Book getBook(int bookId) { return dao.getBook(bookId); } @Override public boolean deleteBook(int bookId) { return dao.deleteBook(bookId); } } 6. IBookStoreService.java package com.example.jpademo.services; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreService { List<Book> getBooks(); Book createBook(Book book); Book updateBook(int bookId, Book book); Book getBook(int bookId); boolean deleteBook(int bookId); } 7. JpademoApplication package com.example.jpademo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JpademoApplication { public static void main(String[] args) { SpringApplication.run(JpademoApplication.class, args); } } Test Build and test this project. When you see the following messages, the application is well launched, we can call REST endpoints by using POSTMAN. 2022-10-27 11:16:16.793 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Starting JpademoApplication on nandeng-macbookpro.local with PID 93488 (/Users/nandeng/IdeaProjects/jpademo/target/classes started by nandeng in /Users/nandeng/IdeaProjects/jpademo) 2022-10-27 11:16:16.796 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : No active profile set, falling back to default profiles: default 2022-10-27 11:16:18.022 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode. 2022-10-27 11:16:18.093 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50ms. Found 0 JPA repository interfaces. 2022-10-27 11:16:18.806 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-27 11:16:18.814 INFO 93488 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-27 11:16:18.814 INFO 93488 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-27 11:16:18.886 INFO 93488 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-27 11:16:18.886 INFO 93488 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2005 ms 2022-10-27 11:16:19.068 INFO 93488 --- [ main] o.hibernate.jpa.internal.util.LogHelper : HHH000204: Processing PersistenceUnitInfo [name: default] 2022-10-27 11:16:19.119 INFO 93488 --- [ main] org.hibernate.Version : HHH000412: Hibernate ORM core version 5.4.25.Final 2022-10-27 11:16:19.202 INFO 93488 --- [ main] o.hibernate.annotations.common.Version : HCANN000001: Hibernate Commons Annotations {5.1.2.Final} 2022-10-27 11:16:19.282 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Starting... 2022-10-27 11:16:20.025 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Start completed. 2022-10-27 11:16:20.035 INFO 93488 --- [ main] org.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect 2022-10-27 11:16:21.929 INFO 93488 --- [ main] o.h.e.t.j.p.i.JtaPlatformInitiator : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 2022-10-27 11:16:21.937 INFO 93488 --- [ main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default' 2022-10-27 11:16:22.073 WARN 93488 --- [ main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 2022-10-27 11:16:22.221 INFO 93488 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-27 11:16:22.415 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-27 11:16:22.430 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Started JpademoApplication in 6.079 seconds (JVM running for 8.765) 2022-10-27 11:16:40.180 INFO 93488 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet 'dispatcherServlet' 2022-10-27 11:16:40.183 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2022-10-27 11:16:40.249 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 66 ms 1. To get list of books call following endpoint with GET Request http://localhost:8080/bookservice/books 2. To Create New Book use following url with POST Request http://localhost:8080/bookservice/books Set content type as in header as application/json , set request body as raw with JSON payload { \"name\": \"The Lion, the Witch and the Wardrobe\", \"author\": \"C. S. Lewis\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 123, \"price\": 10 } 3. To get a particular book, use following url with GET request type in postman http://localhost:8080/bookservice/books/<id> 4. To update Book in database, use following url with PUT request type in postman http://localhost:8080/bookservice/books/<id> Set content type as in header as application/json Set request body as raw with JSON payload { \"name\": \"Black Beauty\", \"author\": \"Anna Sewell\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 134, \"price\": 12 } 5. To delete a particular Book from database, use following url with DELETE request type in postman http://localhost:8080/bookservice/books/<id> mysql> select * from book; +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | id | author | category | name | pages | price | publication | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | 1 | Antoine de Saint-Exupery | Fantancy | The Little Prince | 100 | 50 | Amazon | | 2 | Anna Sewell | Fantancy | Black Beauty | 134 | 12 | Amazon | | 3 | Lewis Carroll | Fantancy | Alice's Adventures in Wonderland | 1500 | 240 | Amazon | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ 3 rows in set (0.02 sec)","title":"Hibernate"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#build-a-springboothibernate-crud-demo-with-matrixone","text":"This tutorial completes a simple Demo based on SpringBoot+Hibernate+MatrixOne+Intellij IDEA , and realizes the basic CRUD function.","title":"Build a SpringBoot+Hibernate CRUD demo with MatrixOne"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#before-you-start","text":"A brief introduction about these softwares concerned: Hibernate: Hibernate ORM is an object\u2013relational mapping tool for the Java programming language. It provides a framework for mapping an object-oriented domain model to a relational database. Intellij IDEA: IntelliJ IDEA is a popular IDE for Java developers. It has a lot of plugins that can enhance our efficiency. Maven: Maven is a powerful management tool in Java that can automatically download and import Jar file according to the configuration in the pom.xml file. This feature reduces the conflicts between different versions of Jar files. Spring: Spring is one of the most popular frameworks in Java and more and more enterprise is using the Spring framework to build their project. Spring Boot is built on top of the conventional spring framework. So, it provides all the features of spring and is yet easier to use than spring. Postman: Postman is an application used for API testing. It is an HTTP client that tests HTTP requests, utilizing a graphical user interface, through which we obtain different types of responses that need to be subsequently validated.","title":"Before you start"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#set-up-environment","text":"","title":"Set up environment"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#1-install-and-launch-matrixone","text":"Follow the installation instruction and launch MatrixOne 0.6 . Create a database test by MySQL client. mysql> CREATE DATABASE test;","title":"1. Install and Launch MatrixOne"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#2-create-a-new-spring-boot-project-using-intellij-idea","text":"Choose Spring Initializer , and name the project as you want. Choose Spring Web , JDBC API , Spring Data JPA , and MySQL Driver as dependencies for this project. Click Create , the project will be created. The dependencies are listed in the pom.xml file. Usually you don't need to modify anything. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>jpademo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>jpademo</name> <description>jpademo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.jpademo.JpademoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>","title":"2. Create a new Spring Boot Project Using IntelliJ IDEA"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#3-modify-the-applicationproperties-file","text":"Under resources folder, the MatrixOne connection and Hibernate need to be configured in application.properties file. # Application Name spring.application.name=jpademo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=dump spring.datasource.password=111 # Web application port server.port=8080 # Hibernate configurations spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLDialect spring.jpa.properties.hibernate.id.new_generator_mappings = false spring.jpa.properties.hibernate.format_sql = true spring.jpa.hibernate.ddl-auto = validate","title":"3. Modify the application.properties file"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#4-create-table-and-insert-some-data-in-matrixone","text":"Connect to MatrixOne with MySQL client and execute the following SQL statements. mysql> USE test; mysql> CREATE TABLE IF NOT EXISTS `book` ( `id` int(11) NOT NULL AUTO_INCREMENT, `author` varchar(255) DEFAULT NULL, `category` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, `pages` int(11) DEFAULT NULL, `price` int(11) DEFAULT NULL, `publication` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); mysql> INSERT INTO `book` (`id`, `author`, `category`, `name`, `pages`, `price`, `publication`) VALUES (1, 'Antoine de Saint-Exupery', 'Fantancy', 'The Little Prince', 100, 50, 'Amazon'), (2, 'J. K. Rowling', 'Fantancy', 'Harry Potter and the Sorcerer''s Stone', 1000, 200, 'Amazon'), (3, 'Lewis Carroll', 'Fantancy', 'Alice''s Adventures in Wonderland', 1500, 240, 'Amazon');","title":"4. Create table and insert some data in MatrixOne"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#write-code","text":"After setting up the environment, we write code to implement a simple CRUD application. After finishing coding, you'll have a project structure as below. You can create these packages and java class in advance. We will code the Create, Update, Insert, Delete, Select operations for this demo application.","title":"Write Code"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#1-bookstorecontrollerjava","text":"package com.example.jpademo.controller; import com.example.jpademo.entity.Book; import com.example.jpademo.services.IBookStoreService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.*; import java.util.List; @Controller @RequestMapping(\"bookservice\") public class BookStoreController { @Autowired private IBookStoreService service; @GetMapping(\"books\") public ResponseEntity<List<Book>> getBooks(){ List<Book> books = service.getBooks(); return new ResponseEntity<List<Book>>(books, HttpStatus.OK); } @GetMapping(\"books/{id}\") public ResponseEntity<Book> getBook(@PathVariable(\"id\") Integer id){ Book book = service.getBook(id); return new ResponseEntity<Book>(book, HttpStatus.OK); } @PostMapping(\"books\") public ResponseEntity<Book> createBook(@RequestBody Book book){ Book b = service.createBook(book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @PutMapping(\"books/{id}\") public ResponseEntity<Book> updateBook(@PathVariable(\"id\") int id, @RequestBody Book book){ Book b = service.updateBook(id, book); return new ResponseEntity<Book>(b, HttpStatus.OK); } @DeleteMapping(\"books/{id}\") public ResponseEntity<String> deleteBook(@PathVariable(\"id\") int id){ boolean isDeleted = service.deleteBook(id); if(isDeleted){ String responseContent = \"Book has been deleted successfully\"; return new ResponseEntity<String>(responseContent,HttpStatus.OK); } String error = \"Error while deleting book from database\"; return new ResponseEntity<String>(error,HttpStatus.INTERNAL_SERVER_ERROR); } }","title":"1. BookStoreController.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#2-boostoredaojava","text":"package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import javax.persistence.Query; import java.util.List; @Transactional @Repository public class BookStoreDAO implements IBookStoreDAO { @PersistenceContext private EntityManager entityManager; /** * This method is responsible to get all books available in database and return it as List<Book> */ @SuppressWarnings(\"unchecked\") @Override public List<Book> getBooks() { String hql = \"FROM Book as atcl ORDER BY atcl.id\"; return (List<Book>) entityManager.createQuery(hql).getResultList(); } /** * This method is responsible to get a particular Book detail by given book id */ @Override public Book getBook(int bookId) { return entityManager.find(Book.class, bookId); } /** * This method is responsible to create new book in database */ @Override public Book createBook(Book book) { entityManager.persist(book); Book b = getLastInsertedBook(); return b; } /** * This method is responsible to update book detail in database */ @Override public Book updateBook(int bookId, Book book) { //First We are taking Book detail from database by given book id and // then updating detail with provided book object Book bookFromDB = getBook(bookId); bookFromDB.setName(book.getName()); bookFromDB.setAuthor(book.getAuthor()); bookFromDB.setCategory(book.getCategory()); bookFromDB.setPublication(book.getPublication()); bookFromDB.setPages(book.getPages()); bookFromDB.setPrice(book.getPrice()); entityManager.flush(); //again i am taking updated result of book and returning the book object Book updatedBook = getBook(bookId); return updatedBook; } /** * This method is responsible for deleting a particular(which id will be passed that record) * record from the database */ @Override public boolean deleteBook(int bookId) { Book book = getBook(bookId); entityManager.remove(book); //we are checking here that whether entityManager contains earlier deleted book or not // if contains then book is not deleted from DB that's why returning false; boolean status = entityManager.contains(book); if(status){ return false; } return true; } /** * This method will get the latest inserted record from the database and return the object of Book class * @return book */ private Book getLastInsertedBook(){ String hql = \"from Book order by id DESC\"; Query query = entityManager.createQuery(hql); query.setMaxResults(1); Book book = (Book)query.getSingleResult(); return book; } }","title":"2. BooStoreDAO.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#3-ibookstoredaojava","text":"package com.example.jpademo.dao; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreDAO { List<Book> getBooks(); Book getBook(int bookId); Book createBook(Book book); Book updateBook(int bookId,Book book); boolean deleteBook(int bookId); }","title":"3. IBookStoreDAO.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#4-bookjava","text":"package com.example.jpademo.entity; import javax.persistence.*; import java.io.Serializable; @Entity @Table(name=\"book\") public class Book implements Serializable { private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy= GenerationType.AUTO) @Column(name=\"id\") private int id; @Column(name=\"name\") private String name; @Column(name=\"author\") private String author; @Column(name=\"publication\") private String publication; @Column(name=\"category\") private String category; @Column(name=\"pages\") private int pages; @Column(name=\"price\") private int price; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAuthor() { return author; } public void setAuthor(String author) { this.author = author; } public String getPublication() { return publication; } public void setPublication(String publication) { this.publication = publication; } public String getCategory() { return category; } public void setCategory(String category) { this.category = category; } public int getPages() { return pages; } public void setPages(int pages) { this.pages = pages; } public int getPrice() { return price; } public void setPrice(int price) { this.price = price; } }","title":"4. Book.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#5-bookstoreservicejava","text":"package com.example.jpademo.services; import com.example.jpademo.dao.IBookStoreDAO; import com.example.jpademo.entity.Book; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class BookStoreService implements IBookStoreService { @Autowired private IBookStoreDAO dao; @Override public List<Book> getBooks() { return dao.getBooks(); } @Override public Book createBook(Book book) { return dao.createBook(book); } @Override public Book updateBook(int bookId, Book book) { return dao.updateBook(bookId, book); } @Override public Book getBook(int bookId) { return dao.getBook(bookId); } @Override public boolean deleteBook(int bookId) { return dao.deleteBook(bookId); } }","title":"5. BookStoreService.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#6-ibookstoreservicejava","text":"package com.example.jpademo.services; import com.example.jpademo.entity.Book; import java.util.List; public interface IBookStoreService { List<Book> getBooks(); Book createBook(Book book); Book updateBook(int bookId, Book book); Book getBook(int bookId); boolean deleteBook(int bookId); }","title":"6. IBookStoreService.java"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#7-jpademoapplication","text":"package com.example.jpademo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class JpademoApplication { public static void main(String[] args) { SpringApplication.run(JpademoApplication.class, args); } }","title":"7. JpademoApplication"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#test","text":"Build and test this project. When you see the following messages, the application is well launched, we can call REST endpoints by using POSTMAN. 2022-10-27 11:16:16.793 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Starting JpademoApplication on nandeng-macbookpro.local with PID 93488 (/Users/nandeng/IdeaProjects/jpademo/target/classes started by nandeng in /Users/nandeng/IdeaProjects/jpademo) 2022-10-27 11:16:16.796 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : No active profile set, falling back to default profiles: default 2022-10-27 11:16:18.022 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode. 2022-10-27 11:16:18.093 INFO 93488 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50ms. Found 0 JPA repository interfaces. 2022-10-27 11:16:18.806 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-27 11:16:18.814 INFO 93488 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-27 11:16:18.814 INFO 93488 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-27 11:16:18.886 INFO 93488 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-27 11:16:18.886 INFO 93488 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2005 ms 2022-10-27 11:16:19.068 INFO 93488 --- [ main] o.hibernate.jpa.internal.util.LogHelper : HHH000204: Processing PersistenceUnitInfo [name: default] 2022-10-27 11:16:19.119 INFO 93488 --- [ main] org.hibernate.Version : HHH000412: Hibernate ORM core version 5.4.25.Final 2022-10-27 11:16:19.202 INFO 93488 --- [ main] o.hibernate.annotations.common.Version : HCANN000001: Hibernate Commons Annotations {5.1.2.Final} 2022-10-27 11:16:19.282 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Starting... 2022-10-27 11:16:20.025 INFO 93488 --- [ main] com.zaxxer.hikari.HikariDataSource : defaultDataSource - Start completed. 2022-10-27 11:16:20.035 INFO 93488 --- [ main] org.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.MySQLDialect 2022-10-27 11:16:21.929 INFO 93488 --- [ main] o.h.e.t.j.p.i.JtaPlatformInitiator : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform] 2022-10-27 11:16:21.937 INFO 93488 --- [ main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default' 2022-10-27 11:16:22.073 WARN 93488 --- [ main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning 2022-10-27 11:16:22.221 INFO 93488 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-27 11:16:22.415 INFO 93488 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-27 11:16:22.430 INFO 93488 --- [ main] com.example.jpademo.JpademoApplication : Started JpademoApplication in 6.079 seconds (JVM running for 8.765) 2022-10-27 11:16:40.180 INFO 93488 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet 'dispatcherServlet' 2022-10-27 11:16:40.183 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet 'dispatcherServlet' 2022-10-27 11:16:40.249 INFO 93488 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 66 ms","title":"Test"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#1-to-get-list-of-books-call-following-endpoint-with-get-request","text":"http://localhost:8080/bookservice/books","title":"1. To get list of books call following endpoint with GET Request"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#2-to-create-new-book-use-following-url-with-post-request","text":"http://localhost:8080/bookservice/books Set content type as in header as application/json , set request body as raw with JSON payload { \"name\": \"The Lion, the Witch and the Wardrobe\", \"author\": \"C. S. Lewis\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 123, \"price\": 10 }","title":"2. To Create New Book use following url with POST Request"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#3-to-get-a-particular-book-use-following-url-with-get-request-type-in-postman","text":"http://localhost:8080/bookservice/books/<id>","title":"3. To get a particular book, use following url with GET request type in postman"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#4-to-update-book-in-database-use-following-url-with-put-request-type-in-postman","text":"http://localhost:8080/bookservice/books/<id> Set content type as in header as application/json Set request body as raw with JSON payload { \"name\": \"Black Beauty\", \"author\": \"Anna Sewell\", \"publication\": \"Amazon\", \"category\": \"Fantancy\", \"pages\": 134, \"price\": 12 }","title":"4. To update Book in database, use following url with PUT request type in postman"},{"location":"MatrixOne/Tutorial/springboot-hibernate-crud-demo/#5-to-delete-a-particular-book-from-database-use-following-url-with-delete-request-type-in-postman","text":"http://localhost:8080/bookservice/books/<id> mysql> select * from book; +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | id | author | category | name | pages | price | publication | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ | 1 | Antoine de Saint-Exupery | Fantancy | The Little Prince | 100 | 50 | Amazon | | 2 | Anna Sewell | Fantancy | Black Beauty | 134 | 12 | Amazon | | 3 | Lewis Carroll | Fantancy | Alice's Adventures in Wonderland | 1500 | 240 | Amazon | +----+--------------------------+----------+----------------------------------+-------+-------+-------------+ 3 rows in set (0.02 sec)","title":"5. To delete a particular Book from database, use following url with DELETE request type in postman"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/","text":"Build a SpringBoot+MyBatis CRUD demo with MatrixOne This tutorial completes a simple Demo based on SpringBoot+Mybatis+MatrixOne+Intellij IDEA , and realizes the basic CRUD function. Before you start A brief introduction about these softwares concerned: MyBatis: It is a popular persistence framework that can customize SQL and support for complex reports and advanced mappings. We only need to focus on the SQL itself in our project. Intellij IDEA: IntelliJ IDEA is a popular IDE for Java developers. It has a lot of plugins that can enhance our efficiency. Maven: Maven is a powerful management tool in Java that can automatically download and import Jar file according to the configuration in the pom.xml file. This feature reduces the conflicts between different versions of Jar files. Spring: Spring is one of the most popular frameworks in Java and more and more enterprise is using the Spring framework to build their project. Spring Boot is built on top of the conventional spring framework. So, it provides all the features of spring and is yet easier to use than spring. Set up environment 1. Install and Launch MatrixOne Follow the installation instruction and launch MatrixOne 0.6 . Create a database test by MySQL client. mysql> CREATE DATABASE test; 2. Create a new Spring Boot Project Using IntelliJ IDEA Choose Spring Initializer , and name the project as you want. Choose Spring Web , MyBatis Framework , JDBC API and MySQL Driver as dependencies for this project. Click Create , the project will be created. The dependencies are listed in the pom.xml file. Usually you don't need to modify anything. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>mybatis-demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>mybatis-demo</name> <description>mybatis-demo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.mybatisdemo.MybatisDemoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project> 3. Modify the application.properties file Under resources folder, the MatrixOne connection need to be configured in application.properties file. # Application Name spring.application.name=MyBatisDemo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=dump spring.datasource.password=111 # Mybatis mapper location mybatis.mapper-locations=classpath:mapping/*xml # Mybatis entity package mybatis.type-aliases-package=com.example.mybatisdemo.entity # Web application port server.port=8080 Write Code After setting up the environment, we write code to implement a simple CRUD application. After finishing coding, you'll have a project structure as below. You can create these packages and java class in advance. We will code the Create, Update, Insert, Delete, Select operations for this demo application. 1. UserController.java package com.example.mybatisdemo.controller; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/test\") public class UserController { String tableName = \"user\"; @Autowired private UserService userService; @RequestMapping(value = \"/create\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String createTable(){ return userService.createTable(tableName); } @RequestMapping(value = \"/selectUserByid\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String GetUser(User user){ return userService.Sel(user).toString(); } @RequestMapping(value = \"/add\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Add(User user){ return userService.Add(user); } @RequestMapping(value = \"/update\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Update(User user){ return userService.Update(user); } @RequestMapping(value = \"/delete\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Delete(User user){ return userService.Delete(user); } } 2. User.java package com.example.mybatisdemo.entity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; public class User { private Integer id; private String username; private String password; private String address; public User(Integer id, String username, String password, String address) { this.id = id; this.username = username; this.password = password; this.address = address; } public Integer getId() { return id; } public String getUsername() { return username; } public String getPassword() { return password; } public String getAddress() { return address; } public void setId(Integer id) { this.id = id; } public void setUsername(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User{\" + \"id=\" + id + \", username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", address='\" + address + '\\'' + '}'; } } 3. UserMapper.java package com.example.mybatisdemo.mapper; import com.example.mybatisdemo.entity.User; import org.apache.ibatis.annotations.Param; import org.springframework.stereotype.Repository; @Repository public interface UserMapper { int createTable(@Param(\"tableName\") String tableName); User Sel(@Param(\"user\")User user); int Add(@Param(\"user\")User user); int Update(@Param(\"user\")User user); int Delete(@Param(\"user\")User user); } 4. UserService.java package com.example.mybatisdemo.service; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.mapper.UserMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserService { @Autowired UserMapper userMapper; public String createTable(String table){ int a = userMapper.createTable(table); if (a == 1) { return \"Create table failed\"; } else { return \"Create table successfully\"; } } public User Sel(User user) { return userMapper.Sel(user); } public String Add(User user) { int a = userMapper.Add(user); if (a == 1) { return \"Add user successfully\"; } else { return \"Add user failed\"; } } public String Update(User user) { int a = userMapper.Update(user); if (a == 1) { return \"Update user successfully\"; } else { return \"Update user failed\"; } } public String Delete(User user) { int a = userMapper.Delete(user); if (a == 1) { return \"Delete user successfully\"; } else { return \"Delete user failed\"; } } }; 5. MyBatisDemoApplication.java package com.example.mybatisdemo; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @MapperScan(\"com.example.mybatisdemo.mapper\") @SpringBootApplication public class MyBatisDemoApplication { public static void main(String[] args) { SpringApplication.run(MyBatisDemoApplication.class, args); } } 6. UserMapper.xml <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace=\"com.example.mybatisdemo.mapper.UserMapper\"> <resultMap id=\"BaseResultMap\" type=\"com.example.mybatisdemo.entity.User\"> <result column=\"id\" jdbcType=\"INTEGER\" property=\"id\"/> <result column=\"userName\" jdbcType=\"VARCHAR\" property=\"username\"/> <result column=\"passWord\" jdbcType=\"VARCHAR\" property=\"password\"/> <result column=\"realName\" jdbcType=\"VARCHAR\" property=\"address\"/> </resultMap> <update id=\"createTable\" parameterType=\"string\"> CREATE TABLE ${tableName} ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(255) DEFAULT NULL, `password` varchar(255) DEFAULT NULL, `address` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); </update> <select id=\"Sel\" resultType=\"com.example.mybatisdemo.entity.User\"> select * from user where 1=1 <if test=\"user.id != null\"> AND id = #{user.id} </if> </select> <insert id=\"Add\" parameterType=\"com.example.mybatisdemo.entity.User\"> INSERT INTO user <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> username, </if> <if test=\"user.password != null\"> password, </if> <if test=\"user.address != null\"> address, </if> </trim> <trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> #{user.username,jdbcType=VARCHAR}, </if> <if test=\"user.password != null\"> #{user.password,jdbcType=VARCHAR}, </if> <if test=\"user.address != null\"> #{user.address,jdbcType=VARCHAR}, </if> </trim> </insert> <update id=\"Update\" parameterType=\"com.example.mybatisdemo.entity.User\"> UPDATE user <set> <if test=\"user.username != null\"> username = #{user.username}, </if> <if test=\"user.password != null\"> password = #{user.password}, </if> <if test=\"user.address != null\"> address = #{user.address}, </if> </set> WHERE id=#{user.id} </update> <delete id=\"Delete\" parameterType=\"com.example.mybatisdemo.entity.User\"> DELETE FROM user WHERE id = #{user.id} </delete> </mapper> Test Build and launch this project. When you see the following messages, the application is well launched and you can open your browser and send HTTP request. 2022-10-26 16:13:24.030 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Starting MyBatisDemoApplication on nandeng-macbookpro.local with PID 60253 (/Users/nandeng/IdeaProjects/MyBatisDemo/target/classes started by nandeng in /Users/nandeng/IdeaProjects/MyBatisDemo) 2022-10-26 16:13:24.035 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : No active profile set, falling back to default profiles: default 2022-10-26 16:13:25.415 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-26 16:13:25.421 INFO 60253 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-26 16:13:25.421 INFO 60253 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-26 16:13:25.476 INFO 60253 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-26 16:13:25.477 INFO 60253 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1390 ms 2022-10-26 16:13:26.020 INFO 60253 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-26 16:13:26.248 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-26 16:13:26.272 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Started MyBatisDemoApplication in 2.669 seconds (JVM running for 3.544) 1. Test Create Table In MySQL client, we can verify if the table has been successfully created. mysql> use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql> show tables; +----------------+ | tables_in_test | +----------------+ | user | +----------------+ 1 row in set (0.00 sec) mysql> show create table user; +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | user | CREATE TABLE `user` ( `id` INT NOT NULL AUTO_INCREMENT, `username` VARCHAR(255) DEFAULT null, `password` VARCHAR(255) DEFAULT null, `address` VARCHAR(255) DEFAULT null, PRIMARY KEY (`id`) ) | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec) 2. Test Add User mysql> select * from user; +------+----------+----------+----------+ | id | username | password | address | +------+----------+----------+----------+ | 1 | tom | 123456 | shanghai | +------+----------+----------+----------+ 1 row in set (0.00 sec) 3. Test Select User 4. Test Update User mysql> select * from user; +------+----------+----------+---------+ | id | username | password | address | +------+----------+----------+---------+ | 1 | tom | 654321 | beijing | +------+----------+----------+---------+ 1 row in set (0.00 sec) 5. Test Delete User mysql> select * from user; Empty set (0.00 sec)","title":"MyBatis"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#build-a-springbootmybatis-crud-demo-with-matrixone","text":"This tutorial completes a simple Demo based on SpringBoot+Mybatis+MatrixOne+Intellij IDEA , and realizes the basic CRUD function.","title":"Build a SpringBoot+MyBatis CRUD demo with MatrixOne"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#before-you-start","text":"A brief introduction about these softwares concerned: MyBatis: It is a popular persistence framework that can customize SQL and support for complex reports and advanced mappings. We only need to focus on the SQL itself in our project. Intellij IDEA: IntelliJ IDEA is a popular IDE for Java developers. It has a lot of plugins that can enhance our efficiency. Maven: Maven is a powerful management tool in Java that can automatically download and import Jar file according to the configuration in the pom.xml file. This feature reduces the conflicts between different versions of Jar files. Spring: Spring is one of the most popular frameworks in Java and more and more enterprise is using the Spring framework to build their project. Spring Boot is built on top of the conventional spring framework. So, it provides all the features of spring and is yet easier to use than spring.","title":"Before you start"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#set-up-environment","text":"","title":"Set up environment"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#1-install-and-launch-matrixone","text":"Follow the installation instruction and launch MatrixOne 0.6 . Create a database test by MySQL client. mysql> CREATE DATABASE test;","title":"1. Install and Launch MatrixOne"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#2-create-a-new-spring-boot-project-using-intellij-idea","text":"Choose Spring Initializer , and name the project as you want. Choose Spring Web , MyBatis Framework , JDBC API and MySQL Driver as dependencies for this project. Click Create , the project will be created. The dependencies are listed in the pom.xml file. Usually you don't need to modify anything. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example</groupId> <artifactId>mybatis-demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>mybatis-demo</name> <description>mybatis-demo</description> <properties> <java.version>1.8</java.version> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <spring-boot.version>2.3.7.RELEASE</spring-boot.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.mybatis.spring.boot</groupId> <artifactId>mybatis-spring-boot-starter</artifactId> <version>2.1.4</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-dependencies</artifactId> <version>${spring-boot.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>3.8.1</version> <configuration> <source>1.8</source> <target>1.8</target> <encoding>UTF-8</encoding> </configuration> </plugin> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.3.7.RELEASE</version> <configuration> <mainClass>com.example.mybatisdemo.MybatisDemoApplication</mainClass> </configuration> <executions> <execution> <id>repackage</id> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> </plugins> </build> </project>","title":"2. Create a new Spring Boot Project Using IntelliJ IDEA"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#3-modify-the-applicationproperties-file","text":"Under resources folder, the MatrixOne connection need to be configured in application.properties file. # Application Name spring.application.name=MyBatisDemo # Database driver spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver # Data Source name spring.datasource.name=defaultDataSource # Database connection url, modify to MatrixOne address and port, with paratemers spring.datasource.url=jdbc:mysql://127.0.0.1:6001/test?characterSetResults=UTF-8&continueBatchOnError=false&useServerPrepStmts=true&alwaysSendSetIsolation=false&useLocalSessionState=true&zeroDateTimeBehavior=CONVERT_TO_NULL&failoverReadOnly=false&serverTimezone=Asia/Shanghai&socketTimeout=30000 # Database username and password spring.datasource.username=dump spring.datasource.password=111 # Mybatis mapper location mybatis.mapper-locations=classpath:mapping/*xml # Mybatis entity package mybatis.type-aliases-package=com.example.mybatisdemo.entity # Web application port server.port=8080","title":"3. Modify the application.properties file"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#write-code","text":"After setting up the environment, we write code to implement a simple CRUD application. After finishing coding, you'll have a project structure as below. You can create these packages and java class in advance. We will code the Create, Update, Insert, Delete, Select operations for this demo application.","title":"Write Code"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#1-usercontrollerjava","text":"package com.example.mybatisdemo.controller; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.service.UserService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.ResponseBody; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/test\") public class UserController { String tableName = \"user\"; @Autowired private UserService userService; @RequestMapping(value = \"/create\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String createTable(){ return userService.createTable(tableName); } @RequestMapping(value = \"/selectUserByid\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) @ResponseBody public String GetUser(User user){ return userService.Sel(user).toString(); } @RequestMapping(value = \"/add\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Add(User user){ return userService.Add(user); } @RequestMapping(value = \"/update\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Update(User user){ return userService.Update(user); } @RequestMapping(value = \"/delete\", produces = \"application/json;charset=UTF-8\", method = RequestMethod.GET) public String Delete(User user){ return userService.Delete(user); } }","title":"1. UserController.java"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#2-userjava","text":"package com.example.mybatisdemo.entity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; public class User { private Integer id; private String username; private String password; private String address; public User(Integer id, String username, String password, String address) { this.id = id; this.username = username; this.password = password; this.address = address; } public Integer getId() { return id; } public String getUsername() { return username; } public String getPassword() { return password; } public String getAddress() { return address; } public void setId(Integer id) { this.id = id; } public void setUsername(String username) { this.username = username; } public void setPassword(String password) { this.password = password; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User{\" + \"id=\" + id + \", username='\" + username + '\\'' + \", password='\" + password + '\\'' + \", address='\" + address + '\\'' + '}'; } }","title":"2. User.java"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#3-usermapperjava","text":"package com.example.mybatisdemo.mapper; import com.example.mybatisdemo.entity.User; import org.apache.ibatis.annotations.Param; import org.springframework.stereotype.Repository; @Repository public interface UserMapper { int createTable(@Param(\"tableName\") String tableName); User Sel(@Param(\"user\")User user); int Add(@Param(\"user\")User user); int Update(@Param(\"user\")User user); int Delete(@Param(\"user\")User user); }","title":"3. UserMapper.java"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#4-userservicejava","text":"package com.example.mybatisdemo.service; import com.example.mybatisdemo.entity.User; import com.example.mybatisdemo.mapper.UserMapper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UserService { @Autowired UserMapper userMapper; public String createTable(String table){ int a = userMapper.createTable(table); if (a == 1) { return \"Create table failed\"; } else { return \"Create table successfully\"; } } public User Sel(User user) { return userMapper.Sel(user); } public String Add(User user) { int a = userMapper.Add(user); if (a == 1) { return \"Add user successfully\"; } else { return \"Add user failed\"; } } public String Update(User user) { int a = userMapper.Update(user); if (a == 1) { return \"Update user successfully\"; } else { return \"Update user failed\"; } } public String Delete(User user) { int a = userMapper.Delete(user); if (a == 1) { return \"Delete user successfully\"; } else { return \"Delete user failed\"; } } };","title":"4. UserService.java"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#5-mybatisdemoapplicationjava","text":"package com.example.mybatisdemo; import org.mybatis.spring.annotation.MapperScan; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @MapperScan(\"com.example.mybatisdemo.mapper\") @SpringBootApplication public class MyBatisDemoApplication { public static void main(String[] args) { SpringApplication.run(MyBatisDemoApplication.class, args); } }","title":"5. MyBatisDemoApplication.java"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#6-usermapperxml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> <mapper namespace=\"com.example.mybatisdemo.mapper.UserMapper\"> <resultMap id=\"BaseResultMap\" type=\"com.example.mybatisdemo.entity.User\"> <result column=\"id\" jdbcType=\"INTEGER\" property=\"id\"/> <result column=\"userName\" jdbcType=\"VARCHAR\" property=\"username\"/> <result column=\"passWord\" jdbcType=\"VARCHAR\" property=\"password\"/> <result column=\"realName\" jdbcType=\"VARCHAR\" property=\"address\"/> </resultMap> <update id=\"createTable\" parameterType=\"string\"> CREATE TABLE ${tableName} ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(255) DEFAULT NULL, `password` varchar(255) DEFAULT NULL, `address` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`) ); </update> <select id=\"Sel\" resultType=\"com.example.mybatisdemo.entity.User\"> select * from user where 1=1 <if test=\"user.id != null\"> AND id = #{user.id} </if> </select> <insert id=\"Add\" parameterType=\"com.example.mybatisdemo.entity.User\"> INSERT INTO user <trim prefix=\"(\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> username, </if> <if test=\"user.password != null\"> password, </if> <if test=\"user.address != null\"> address, </if> </trim> <trim prefix=\"VALUES (\" suffix=\")\" suffixOverrides=\",\"> <if test=\"user.username != null\"> #{user.username,jdbcType=VARCHAR}, </if> <if test=\"user.password != null\"> #{user.password,jdbcType=VARCHAR}, </if> <if test=\"user.address != null\"> #{user.address,jdbcType=VARCHAR}, </if> </trim> </insert> <update id=\"Update\" parameterType=\"com.example.mybatisdemo.entity.User\"> UPDATE user <set> <if test=\"user.username != null\"> username = #{user.username}, </if> <if test=\"user.password != null\"> password = #{user.password}, </if> <if test=\"user.address != null\"> address = #{user.address}, </if> </set> WHERE id=#{user.id} </update> <delete id=\"Delete\" parameterType=\"com.example.mybatisdemo.entity.User\"> DELETE FROM user WHERE id = #{user.id} </delete> </mapper>","title":"6. UserMapper.xml"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#test","text":"Build and launch this project. When you see the following messages, the application is well launched and you can open your browser and send HTTP request. 2022-10-26 16:13:24.030 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Starting MyBatisDemoApplication on nandeng-macbookpro.local with PID 60253 (/Users/nandeng/IdeaProjects/MyBatisDemo/target/classes started by nandeng in /Users/nandeng/IdeaProjects/MyBatisDemo) 2022-10-26 16:13:24.035 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : No active profile set, falling back to default profiles: default 2022-10-26 16:13:25.415 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http) 2022-10-26 16:13:25.421 INFO 60253 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat] 2022-10-26 16:13:25.421 INFO 60253 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.41] 2022-10-26 16:13:25.476 INFO 60253 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext 2022-10-26 16:13:25.477 INFO 60253 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1390 ms 2022-10-26 16:13:26.020 INFO 60253 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService 'applicationTaskExecutor' 2022-10-26 16:13:26.248 INFO 60253 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path '' 2022-10-26 16:13:26.272 INFO 60253 --- [ main] c.e.mybatisdemo.MyBatisDemoApplication : Started MyBatisDemoApplication in 2.669 seconds (JVM running for 3.544)","title":"Test"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#1-test-create-table","text":"In MySQL client, we can verify if the table has been successfully created. mysql> use test; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql> show tables; +----------------+ | tables_in_test | +----------------+ | user | +----------------+ 1 row in set (0.00 sec) mysql> show create table user; +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | Table | Create Table | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | user | CREATE TABLE `user` ( `id` INT NOT NULL AUTO_INCREMENT, `username` VARCHAR(255) DEFAULT null, `password` VARCHAR(255) DEFAULT null, `address` VARCHAR(255) DEFAULT null, PRIMARY KEY (`id`) ) | +-------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.01 sec)","title":"1. Test Create Table"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#2-test-add-user","text":"mysql> select * from user; +------+----------+----------+----------+ | id | username | password | address | +------+----------+----------+----------+ | 1 | tom | 123456 | shanghai | +------+----------+----------+----------+ 1 row in set (0.00 sec)","title":"2. Test Add User"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#3-test-select-user","text":"","title":"3. Test Select User"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#4-test-update-user","text":"mysql> select * from user; +------+----------+----------+---------+ | id | username | password | address | +------+----------+----------+---------+ | 1 | tom | 654321 | beijing | +------+----------+----------+---------+ 1 row in set (0.00 sec)","title":"4. Test Update User"},{"location":"MatrixOne/Tutorial/springboot-mybatis-crud-demo/#5-test-delete-user","text":"mysql> select * from user; Empty set (0.00 sec)","title":"5. Test Delete User"}]}